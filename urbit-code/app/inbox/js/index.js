(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('../../../../../components/stream/chat'), require('../../../../../components/collection/createTopic'), require('../../../../../components/collection/comment'), require('../../../../../components/command')) :
	typeof define === 'function' && define.amd ? define('index', ['../../../../../components/stream/chat', '../../../../../components/collection/createTopic', '../../../../../components/collection/comment', '../../../../../components/command'], factory) :
	(global = global || self, factory(global.chat, global.createTopic, global.comment, global.command));
}(this, function (chat, createTopic, comment, command) { 'use strict';

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	function getCjsExportFromNamespace (n) {
		return n && n.default || n;
	}

	var mousetrap = createCommonjsModule(function (module) {
	/*global define:false */
	/**
	 * Copyright 2012-2017 Craig Campbell
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * Mousetrap is a simple keyboard shortcut library for Javascript with
	 * no external dependencies
	 *
	 * @version 1.6.2
	 * @url craig.is/killing/mice
	 */
	(function(window, document, undefined$1) {

	    // Check if mousetrap is used inside browser, if not, return
	    if (!window) {
	        return;
	    }

	    /**
	     * mapping of special keycodes to their corresponding keys
	     *
	     * everything in this dictionary cannot use keypress events
	     * so it has to be here to map to the correct keycodes for
	     * keyup/keydown events
	     *
	     * @type {Object}
	     */
	    var _MAP = {
	        8: 'backspace',
	        9: 'tab',
	        13: 'enter',
	        16: 'shift',
	        17: 'ctrl',
	        18: 'alt',
	        20: 'capslock',
	        27: 'esc',
	        32: 'space',
	        33: 'pageup',
	        34: 'pagedown',
	        35: 'end',
	        36: 'home',
	        37: 'left',
	        38: 'up',
	        39: 'right',
	        40: 'down',
	        45: 'ins',
	        46: 'del',
	        91: 'meta',
	        93: 'meta',
	        224: 'meta'
	    };

	    /**
	     * mapping for special characters so they can support
	     *
	     * this dictionary is only used incase you want to bind a
	     * keyup or keydown event to one of these keys
	     *
	     * @type {Object}
	     */
	    var _KEYCODE_MAP = {
	        106: '*',
	        107: '+',
	        109: '-',
	        110: '.',
	        111 : '/',
	        186: ';',
	        187: '=',
	        188: ',',
	        189: '-',
	        190: '.',
	        191: '/',
	        192: '`',
	        219: '[',
	        220: '\\',
	        221: ']',
	        222: '\''
	    };

	    /**
	     * this is a mapping of keys that require shift on a US keypad
	     * back to the non shift equivelents
	     *
	     * this is so you can use keyup events with these keys
	     *
	     * note that this will only work reliably on US keyboards
	     *
	     * @type {Object}
	     */
	    var _SHIFT_MAP = {
	        '~': '`',
	        '!': '1',
	        '@': '2',
	        '#': '3',
	        '$': '4',
	        '%': '5',
	        '^': '6',
	        '&': '7',
	        '*': '8',
	        '(': '9',
	        ')': '0',
	        '_': '-',
	        '+': '=',
	        ':': ';',
	        '\"': '\'',
	        '<': ',',
	        '>': '.',
	        '?': '/',
	        '|': '\\'
	    };

	    /**
	     * this is a list of special strings you can use to map
	     * to modifier keys when you specify your keyboard shortcuts
	     *
	     * @type {Object}
	     */
	    var _SPECIAL_ALIASES = {
	        'option': 'alt',
	        'command': 'meta',
	        'return': 'enter',
	        'escape': 'esc',
	        'plus': '+',
	        'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'
	    };

	    /**
	     * variable to store the flipped version of _MAP from above
	     * needed to check if we should use keypress or not when no action
	     * is specified
	     *
	     * @type {Object|undefined}
	     */
	    var _REVERSE_MAP;

	    /**
	     * loop through the f keys, f1 to f19 and add them to the map
	     * programatically
	     */
	    for (var i = 1; i < 20; ++i) {
	        _MAP[111 + i] = 'f' + i;
	    }

	    /**
	     * loop through to map numbers on the numeric keypad
	     */
	    for (i = 0; i <= 9; ++i) {

	        // This needs to use a string cause otherwise since 0 is falsey
	        // mousetrap will never fire for numpad 0 pressed as part of a keydown
	        // event.
	        //
	        // @see https://github.com/ccampbell/mousetrap/pull/258
	        _MAP[i + 96] = i.toString();
	    }

	    /**
	     * cross browser add event method
	     *
	     * @param {Element|HTMLDocument} object
	     * @param {string} type
	     * @param {Function} callback
	     * @returns void
	     */
	    function _addEvent(object, type, callback) {
	        if (object.addEventListener) {
	            object.addEventListener(type, callback, false);
	            return;
	        }

	        object.attachEvent('on' + type, callback);
	    }

	    /**
	     * takes the event and returns the key character
	     *
	     * @param {Event} e
	     * @return {string}
	     */
	    function _characterFromEvent(e) {

	        // for keypress events we should return the character as is
	        if (e.type == 'keypress') {
	            var character = String.fromCharCode(e.which);

	            // if the shift key is not pressed then it is safe to assume
	            // that we want the character to be lowercase.  this means if
	            // you accidentally have caps lock on then your key bindings
	            // will continue to work
	            //
	            // the only side effect that might not be desired is if you
	            // bind something like 'A' cause you want to trigger an
	            // event when capital A is pressed caps lock will no longer
	            // trigger the event.  shift+a will though.
	            if (!e.shiftKey) {
	                character = character.toLowerCase();
	            }

	            return character;
	        }

	        // for non keypress events the special maps are needed
	        if (_MAP[e.which]) {
	            return _MAP[e.which];
	        }

	        if (_KEYCODE_MAP[e.which]) {
	            return _KEYCODE_MAP[e.which];
	        }

	        // if it is not in the special map

	        // with keydown and keyup events the character seems to always
	        // come in as an uppercase character whether you are pressing shift
	        // or not.  we should make sure it is always lowercase for comparisons
	        return String.fromCharCode(e.which).toLowerCase();
	    }

	    /**
	     * checks if two arrays are equal
	     *
	     * @param {Array} modifiers1
	     * @param {Array} modifiers2
	     * @returns {boolean}
	     */
	    function _modifiersMatch(modifiers1, modifiers2) {
	        return modifiers1.sort().join(',') === modifiers2.sort().join(',');
	    }

	    /**
	     * takes a key event and figures out what the modifiers are
	     *
	     * @param {Event} e
	     * @returns {Array}
	     */
	    function _eventModifiers(e) {
	        var modifiers = [];

	        if (e.shiftKey) {
	            modifiers.push('shift');
	        }

	        if (e.altKey) {
	            modifiers.push('alt');
	        }

	        if (e.ctrlKey) {
	            modifiers.push('ctrl');
	        }

	        if (e.metaKey) {
	            modifiers.push('meta');
	        }

	        return modifiers;
	    }

	    /**
	     * prevents default for this event
	     *
	     * @param {Event} e
	     * @returns void
	     */
	    function _preventDefault(e) {
	        if (e.preventDefault) {
	            e.preventDefault();
	            return;
	        }

	        e.returnValue = false;
	    }

	    /**
	     * stops propogation for this event
	     *
	     * @param {Event} e
	     * @returns void
	     */
	    function _stopPropagation(e) {
	        if (e.stopPropagation) {
	            e.stopPropagation();
	            return;
	        }

	        e.cancelBubble = true;
	    }

	    /**
	     * determines if the keycode specified is a modifier key or not
	     *
	     * @param {string} key
	     * @returns {boolean}
	     */
	    function _isModifier(key) {
	        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';
	    }

	    /**
	     * reverses the map lookup so that we can look for specific keys
	     * to see what can and can't use keypress
	     *
	     * @return {Object}
	     */
	    function _getReverseMap() {
	        if (!_REVERSE_MAP) {
	            _REVERSE_MAP = {};
	            for (var key in _MAP) {

	                // pull out the numeric keypad from here cause keypress should
	                // be able to detect the keys from the character
	                if (key > 95 && key < 112) {
	                    continue;
	                }

	                if (_MAP.hasOwnProperty(key)) {
	                    _REVERSE_MAP[_MAP[key]] = key;
	                }
	            }
	        }
	        return _REVERSE_MAP;
	    }

	    /**
	     * picks the best action based on the key combination
	     *
	     * @param {string} key - character for key
	     * @param {Array} modifiers
	     * @param {string=} action passed in
	     */
	    function _pickBestAction(key, modifiers, action) {

	        // if no action was picked in we should try to pick the one
	        // that we think would work best for this key
	        if (!action) {
	            action = _getReverseMap()[key] ? 'keydown' : 'keypress';
	        }

	        // modifier keys don't work as expected with keypress,
	        // switch to keydown
	        if (action == 'keypress' && modifiers.length) {
	            action = 'keydown';
	        }

	        return action;
	    }

	    /**
	     * Converts from a string key combination to an array
	     *
	     * @param  {string} combination like "command+shift+l"
	     * @return {Array}
	     */
	    function _keysFromString(combination) {
	        if (combination === '+') {
	            return ['+'];
	        }

	        combination = combination.replace(/\+{2}/g, '+plus');
	        return combination.split('+');
	    }

	    /**
	     * Gets info for a specific key combination
	     *
	     * @param  {string} combination key combination ("command+s" or "a" or "*")
	     * @param  {string=} action
	     * @returns {Object}
	     */
	    function _getKeyInfo(combination, action) {
	        var keys;
	        var key;
	        var i;
	        var modifiers = [];

	        // take the keys from this pattern and figure out what the actual
	        // pattern is all about
	        keys = _keysFromString(combination);

	        for (i = 0; i < keys.length; ++i) {
	            key = keys[i];

	            // normalize key names
	            if (_SPECIAL_ALIASES[key]) {
	                key = _SPECIAL_ALIASES[key];
	            }

	            // if this is not a keypress event then we should
	            // be smart about using shift keys
	            // this will only work for US keyboards however
	            if (action && action != 'keypress' && _SHIFT_MAP[key]) {
	                key = _SHIFT_MAP[key];
	                modifiers.push('shift');
	            }

	            // if this key is a modifier then add it to the list of modifiers
	            if (_isModifier(key)) {
	                modifiers.push(key);
	            }
	        }

	        // depending on what the key combination is
	        // we will try to pick the best event for it
	        action = _pickBestAction(key, modifiers, action);

	        return {
	            key: key,
	            modifiers: modifiers,
	            action: action
	        };
	    }

	    function _belongsTo(element, ancestor) {
	        if (element === null || element === document) {
	            return false;
	        }

	        if (element === ancestor) {
	            return true;
	        }

	        return _belongsTo(element.parentNode, ancestor);
	    }

	    function Mousetrap(targetElement) {
	        var self = this;

	        targetElement = targetElement || document;

	        if (!(self instanceof Mousetrap)) {
	            return new Mousetrap(targetElement);
	        }

	        /**
	         * element to attach key events to
	         *
	         * @type {Element}
	         */
	        self.target = targetElement;

	        /**
	         * a list of all the callbacks setup via Mousetrap.bind()
	         *
	         * @type {Object}
	         */
	        self._callbacks = {};

	        /**
	         * direct map of string combinations to callbacks used for trigger()
	         *
	         * @type {Object}
	         */
	        self._directMap = {};

	        /**
	         * keeps track of what level each sequence is at since multiple
	         * sequences can start out with the same sequence
	         *
	         * @type {Object}
	         */
	        var _sequenceLevels = {};

	        /**
	         * variable to store the setTimeout call
	         *
	         * @type {null|number}
	         */
	        var _resetTimer;

	        /**
	         * temporary state where we will ignore the next keyup
	         *
	         * @type {boolean|string}
	         */
	        var _ignoreNextKeyup = false;

	        /**
	         * temporary state where we will ignore the next keypress
	         *
	         * @type {boolean}
	         */
	        var _ignoreNextKeypress = false;

	        /**
	         * are we currently inside of a sequence?
	         * type of action ("keyup" or "keydown" or "keypress") or false
	         *
	         * @type {boolean|string}
	         */
	        var _nextExpectedAction = false;

	        /**
	         * resets all sequence counters except for the ones passed in
	         *
	         * @param {Object} doNotReset
	         * @returns void
	         */
	        function _resetSequences(doNotReset) {
	            doNotReset = doNotReset || {};

	            var activeSequences = false,
	                key;

	            for (key in _sequenceLevels) {
	                if (doNotReset[key]) {
	                    activeSequences = true;
	                    continue;
	                }
	                _sequenceLevels[key] = 0;
	            }

	            if (!activeSequences) {
	                _nextExpectedAction = false;
	            }
	        }

	        /**
	         * finds all callbacks that match based on the keycode, modifiers,
	         * and action
	         *
	         * @param {string} character
	         * @param {Array} modifiers
	         * @param {Event|Object} e
	         * @param {string=} sequenceName - name of the sequence we are looking for
	         * @param {string=} combination
	         * @param {number=} level
	         * @returns {Array}
	         */
	        function _getMatches(character, modifiers, e, sequenceName, combination, level) {
	            var i;
	            var callback;
	            var matches = [];
	            var action = e.type;

	            // if there are no events related to this keycode
	            if (!self._callbacks[character]) {
	                return [];
	            }

	            // if a modifier key is coming up on its own we should allow it
	            if (action == 'keyup' && _isModifier(character)) {
	                modifiers = [character];
	            }

	            // loop through all callbacks for the key that was pressed
	            // and see if any of them match
	            for (i = 0; i < self._callbacks[character].length; ++i) {
	                callback = self._callbacks[character][i];

	                // if a sequence name is not specified, but this is a sequence at
	                // the wrong level then move onto the next match
	                if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {
	                    continue;
	                }

	                // if the action we are looking for doesn't match the action we got
	                // then we should keep going
	                if (action != callback.action) {
	                    continue;
	                }

	                // if this is a keypress event and the meta key and control key
	                // are not pressed that means that we need to only look at the
	                // character, otherwise check the modifiers as well
	                //
	                // chrome will not fire a keypress if meta or control is down
	                // safari will fire a keypress if meta or meta+shift is down
	                // firefox will fire a keypress if meta or control is down
	                if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {

	                    // when you bind a combination or sequence a second time it
	                    // should overwrite the first one.  if a sequenceName or
	                    // combination is specified in this call it does just that
	                    //
	                    // @todo make deleting its own method?
	                    var deleteCombo = !sequenceName && callback.combo == combination;
	                    var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;
	                    if (deleteCombo || deleteSequence) {
	                        self._callbacks[character].splice(i, 1);
	                    }

	                    matches.push(callback);
	                }
	            }

	            return matches;
	        }

	        /**
	         * actually calls the callback function
	         *
	         * if your callback function returns false this will use the jquery
	         * convention - prevent default and stop propogation on the event
	         *
	         * @param {Function} callback
	         * @param {Event} e
	         * @returns void
	         */
	        function _fireCallback(callback, e, combo, sequence) {

	            // if this event should not happen stop here
	            if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {
	                return;
	            }

	            if (callback(e, combo) === false) {
	                _preventDefault(e);
	                _stopPropagation(e);
	            }
	        }

	        /**
	         * handles a character key event
	         *
	         * @param {string} character
	         * @param {Array} modifiers
	         * @param {Event} e
	         * @returns void
	         */
	        self._handleKey = function(character, modifiers, e) {
	            var callbacks = _getMatches(character, modifiers, e);
	            var i;
	            var doNotReset = {};
	            var maxLevel = 0;
	            var processedSequenceCallback = false;

	            // Calculate the maxLevel for sequences so we can only execute the longest callback sequence
	            for (i = 0; i < callbacks.length; ++i) {
	                if (callbacks[i].seq) {
	                    maxLevel = Math.max(maxLevel, callbacks[i].level);
	                }
	            }

	            // loop through matching callbacks for this key event
	            for (i = 0; i < callbacks.length; ++i) {

	                // fire for all sequence callbacks
	                // this is because if for example you have multiple sequences
	                // bound such as "g i" and "g t" they both need to fire the
	                // callback for matching g cause otherwise you can only ever
	                // match the first one
	                if (callbacks[i].seq) {

	                    // only fire callbacks for the maxLevel to prevent
	                    // subsequences from also firing
	                    //
	                    // for example 'a option b' should not cause 'option b' to fire
	                    // even though 'option b' is part of the other sequence
	                    //
	                    // any sequences that do not match here will be discarded
	                    // below by the _resetSequences call
	                    if (callbacks[i].level != maxLevel) {
	                        continue;
	                    }

	                    processedSequenceCallback = true;

	                    // keep a list of which sequences were matches for later
	                    doNotReset[callbacks[i].seq] = 1;
	                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);
	                    continue;
	                }

	                // if there were no sequence matches but we are still here
	                // that means this is a regular match so we should fire that
	                if (!processedSequenceCallback) {
	                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo);
	                }
	            }

	            // if the key you pressed matches the type of sequence without
	            // being a modifier (ie "keyup" or "keypress") then we should
	            // reset all sequences that were not matched by this event
	            //
	            // this is so, for example, if you have the sequence "h a t" and you
	            // type "h e a r t" it does not match.  in this case the "e" will
	            // cause the sequence to reset
	            //
	            // modifier keys are ignored because you can have a sequence
	            // that contains modifiers such as "enter ctrl+space" and in most
	            // cases the modifier key will be pressed before the next key
	            //
	            // also if you have a sequence such as "ctrl+b a" then pressing the
	            // "b" key will trigger a "keypress" and a "keydown"
	            //
	            // the "keydown" is expected when there is a modifier, but the
	            // "keypress" ends up matching the _nextExpectedAction since it occurs
	            // after and that causes the sequence to reset
	            //
	            // we ignore keypresses in a sequence that directly follow a keydown
	            // for the same character
	            var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;
	            if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {
	                _resetSequences(doNotReset);
	            }

	            _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';
	        };

	        /**
	         * handles a keydown event
	         *
	         * @param {Event} e
	         * @returns void
	         */
	        function _handleKeyEvent(e) {

	            // normalize e.which for key events
	            // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion
	            if (typeof e.which !== 'number') {
	                e.which = e.keyCode;
	            }

	            var character = _characterFromEvent(e);

	            // no character found then stop
	            if (!character) {
	                return;
	            }

	            // need to use === for the character check because the character can be 0
	            if (e.type == 'keyup' && _ignoreNextKeyup === character) {
	                _ignoreNextKeyup = false;
	                return;
	            }

	            self.handleKey(character, _eventModifiers(e), e);
	        }

	        /**
	         * called to set a 1 second timeout on the specified sequence
	         *
	         * this is so after each key press in the sequence you have 1 second
	         * to press the next key before you have to start over
	         *
	         * @returns void
	         */
	        function _resetSequenceTimer() {
	            clearTimeout(_resetTimer);
	            _resetTimer = setTimeout(_resetSequences, 1000);
	        }

	        /**
	         * binds a key sequence to an event
	         *
	         * @param {string} combo - combo specified in bind call
	         * @param {Array} keys
	         * @param {Function} callback
	         * @param {string=} action
	         * @returns void
	         */
	        function _bindSequence(combo, keys, callback, action) {

	            // start off by adding a sequence level record for this combination
	            // and setting the level to 0
	            _sequenceLevels[combo] = 0;

	            /**
	             * callback to increase the sequence level for this sequence and reset
	             * all other sequences that were active
	             *
	             * @param {string} nextAction
	             * @returns {Function}
	             */
	            function _increaseSequence(nextAction) {
	                return function() {
	                    _nextExpectedAction = nextAction;
	                    ++_sequenceLevels[combo];
	                    _resetSequenceTimer();
	                };
	            }

	            /**
	             * wraps the specified callback inside of another function in order
	             * to reset all sequence counters as soon as this sequence is done
	             *
	             * @param {Event} e
	             * @returns void
	             */
	            function _callbackAndReset(e) {
	                _fireCallback(callback, e, combo);

	                // we should ignore the next key up if the action is key down
	                // or keypress.  this is so if you finish a sequence and
	                // release the key the final key will not trigger a keyup
	                if (action !== 'keyup') {
	                    _ignoreNextKeyup = _characterFromEvent(e);
	                }

	                // weird race condition if a sequence ends with the key
	                // another sequence begins with
	                setTimeout(_resetSequences, 10);
	            }

	            // loop through keys one at a time and bind the appropriate callback
	            // function.  for any key leading up to the final one it should
	            // increase the sequence. after the final, it should reset all sequences
	            //
	            // if an action is specified in the original bind call then that will
	            // be used throughout.  otherwise we will pass the action that the
	            // next key in the sequence should match.  this allows a sequence
	            // to mix and match keypress and keydown events depending on which
	            // ones are better suited to the key provided
	            for (var i = 0; i < keys.length; ++i) {
	                var isFinal = i + 1 === keys.length;
	                var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);
	                _bindSingle(keys[i], wrappedCallback, action, combo, i);
	            }
	        }

	        /**
	         * binds a single keyboard combination
	         *
	         * @param {string} combination
	         * @param {Function} callback
	         * @param {string=} action
	         * @param {string=} sequenceName - name of sequence if part of sequence
	         * @param {number=} level - what part of the sequence the command is
	         * @returns void
	         */
	        function _bindSingle(combination, callback, action, sequenceName, level) {

	            // store a direct mapped reference for use with Mousetrap.trigger
	            self._directMap[combination + ':' + action] = callback;

	            // make sure multiple spaces in a row become a single space
	            combination = combination.replace(/\s+/g, ' ');

	            var sequence = combination.split(' ');
	            var info;

	            // if this pattern is a sequence of keys then run through this method
	            // to reprocess each pattern one key at a time
	            if (sequence.length > 1) {
	                _bindSequence(combination, sequence, callback, action);
	                return;
	            }

	            info = _getKeyInfo(combination, action);

	            // make sure to initialize array if this is the first time
	            // a callback is added for this key
	            self._callbacks[info.key] = self._callbacks[info.key] || [];

	            // remove an existing match if there is one
	            _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);

	            // add this call back to the array
	            // if it is a sequence put it at the beginning
	            // if not put it at the end
	            //
	            // this is important because the way these are processed expects
	            // the sequence ones to come first
	            self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({
	                callback: callback,
	                modifiers: info.modifiers,
	                action: info.action,
	                seq: sequenceName,
	                level: level,
	                combo: combination
	            });
	        }

	        /**
	         * binds multiple combinations to the same callback
	         *
	         * @param {Array} combinations
	         * @param {Function} callback
	         * @param {string|undefined} action
	         * @returns void
	         */
	        self._bindMultiple = function(combinations, callback, action) {
	            for (var i = 0; i < combinations.length; ++i) {
	                _bindSingle(combinations[i], callback, action);
	            }
	        };

	        // start!
	        _addEvent(targetElement, 'keypress', _handleKeyEvent);
	        _addEvent(targetElement, 'keydown', _handleKeyEvent);
	        _addEvent(targetElement, 'keyup', _handleKeyEvent);
	    }

	    /**
	     * binds an event to mousetrap
	     *
	     * can be a single key, a combination of keys separated with +,
	     * an array of keys, or a sequence of keys separated by spaces
	     *
	     * be sure to list the modifier keys first to make sure that the
	     * correct key ends up getting bound (the last key in the pattern)
	     *
	     * @param {string|Array} keys
	     * @param {Function} callback
	     * @param {string=} action - 'keypress', 'keydown', or 'keyup'
	     * @returns void
	     */
	    Mousetrap.prototype.bind = function(keys, callback, action) {
	        var self = this;
	        keys = keys instanceof Array ? keys : [keys];
	        self._bindMultiple.call(self, keys, callback, action);
	        return self;
	    };

	    /**
	     * unbinds an event to mousetrap
	     *
	     * the unbinding sets the callback function of the specified key combo
	     * to an empty function and deletes the corresponding key in the
	     * _directMap dict.
	     *
	     * TODO: actually remove this from the _callbacks dictionary instead
	     * of binding an empty function
	     *
	     * the keycombo+action has to be exactly the same as
	     * it was defined in the bind method
	     *
	     * @param {string|Array} keys
	     * @param {string} action
	     * @returns void
	     */
	    Mousetrap.prototype.unbind = function(keys, action) {
	        var self = this;
	        return self.bind.call(self, keys, function() {}, action);
	    };

	    /**
	     * triggers an event that has already been bound
	     *
	     * @param {string} keys
	     * @param {string=} action
	     * @returns void
	     */
	    Mousetrap.prototype.trigger = function(keys, action) {
	        var self = this;
	        if (self._directMap[keys + ':' + action]) {
	            self._directMap[keys + ':' + action]({}, keys);
	        }
	        return self;
	    };

	    /**
	     * resets the library back to its initial state.  this is useful
	     * if you want to clear out the current keyboard shortcuts and bind
	     * new ones - for example if you switch to another page
	     *
	     * @returns void
	     */
	    Mousetrap.prototype.reset = function() {
	        var self = this;
	        self._callbacks = {};
	        self._directMap = {};
	        return self;
	    };

	    /**
	     * should we stop this event before firing off callbacks
	     *
	     * @param {Event} e
	     * @param {Element} element
	     * @return {boolean}
	     */
	    Mousetrap.prototype.stopCallback = function(e, element) {
	        var self = this;

	        // if the element has the class "mousetrap" then no need to stop
	        if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {
	            return false;
	        }

	        if (_belongsTo(element, self.target)) {
	            return false;
	        }

	        // stop for input, select, and textarea
	        return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;
	    };

	    /**
	     * exposes _handleKey publicly so it can be overwritten by extensions
	     */
	    Mousetrap.prototype.handleKey = function() {
	        var self = this;
	        return self._handleKey.apply(self, arguments);
	    };

	    /**
	     * allow custom key mappings
	     */
	    Mousetrap.addKeycodes = function(object) {
	        for (var key in object) {
	            if (object.hasOwnProperty(key)) {
	                _MAP[key] = object[key];
	            }
	        }
	        _REVERSE_MAP = null;
	    };

	    /**
	     * Init the global mousetrap functions
	     *
	     * This method is needed to allow the global mousetrap functions to work
	     * now that mousetrap is a constructor function.
	     */
	    Mousetrap.init = function() {
	        var documentMousetrap = Mousetrap(document);
	        for (var method in documentMousetrap) {
	            if (method.charAt(0) !== '_') {
	                Mousetrap[method] = (function(method) {
	                    return function() {
	                        return documentMousetrap[method].apply(documentMousetrap, arguments);
	                    };
	                } (method));
	            }
	        }
	    };

	    Mousetrap.init();

	    // expose mousetrap to the global object
	    window.Mousetrap = Mousetrap;

	    // expose as a common js module
	    if (module.exports) {
	        module.exports = Mousetrap;
	    }

	    // expose mousetrap as an AMD module
	    if (typeof undefined$1 === 'function' && undefined$1.amd) {
	        undefined$1(function() {
	            return Mousetrap;
	        });
	    }
	}) (typeof window !== 'undefined' ? window : null, typeof  window !== 'undefined' ? document : null);
	});

	mousetrap.prototype.stopCallback = (e, element, combo) => {
	  if (typeof element.dataset.mousetrap !== undefined) {
	    return false
	  }

	  return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || (element.contentEditable && element.contentEditable == 'true');
	};

	Object.arrayify = (obj) => {
	  let ret = [];
	  Object.keys(obj).forEach((key) => {
	    ret.push({key, value: obj[key]});
	  });

	  return ret;
	};

	Object.cloneByProperty = (obj, propName) => {
	  let ret = [];
	  let arr = obj[propName];

	  arr.forEach(item => {
	    let objClone = {...obj};
	    objClone[propName] = [item];
	    ret.push(objClone);
	  });

	  return ret;
	};

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

	function aa(a,b,e,c,d,g,h,f){if(!a){a=void 0;if(void 0===b)a=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[e,c,d,g,h,f],m=0;a=Error(b.replace(/%s/g,function(){return l[m++]}));a.name="Invariant Violation";}a.framesToPop=1;throw a;}}
	function D(a){for(var b=arguments.length-1,e="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=0;c<b;c++)e+="&args[]="+encodeURIComponent(arguments[c+1]);aa(!1,"Minified React error #"+a+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e);}var E={isMounted:function(){return !1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},F={};
	function G(a,b,e){this.props=a;this.context=b;this.refs=F;this.updater=e||E;}G.prototype.isReactComponent={};G.prototype.setState=function(a,b){"object"!==typeof a&&"function"!==typeof a&&null!=a?D("85"):void 0;this.updater.enqueueSetState(this,a,b,"setState");};G.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate");};function H(){}H.prototype=G.prototype;function I(a,b,e){this.props=a;this.context=b;this.refs=F;this.updater=e||E;}var J=I.prototype=new H;
	J.constructor=I;objectAssign(J,G.prototype);J.isPureReactComponent=!0;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	var ReactPropTypesSecret_1 = ReactPropTypesSecret;

	var printWarning = function() {};

	{
	  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
	  var loggedTypeFailures = {};

	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  {
	    for (var typeSpecName in typeSpecs) {
	      if (typeSpecs.hasOwnProperty(typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );

	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	var checkPropTypes_1 = checkPropTypes;

	var react_development = createCommonjsModule(function (module) {



	{
	  (function() {

	var _assign = objectAssign;
	var checkPropTypes = checkPropTypes_1;

	// TODO: this is special because it gets imported during build.

	var ReactVersion = '16.6.3';

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;

	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;

	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

	var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';

	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }
	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }
	  return null;
	}

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function () {};

	{
	  validateFormat = function (format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error = void 0;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	// Relying on the `invariant()` implementation lets us
	// preserve the format and params in the www builds.

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var lowPriorityWarning = function () {};

	{
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarning = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	var lowPriorityWarning$1 = lowPriorityWarning;

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warningWithoutStack = function () {};

	{
	  warningWithoutStack = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (args.length > 8) {
	      // Check before the condition to catch violations early.
	      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
	    }
	    if (condition) {
	      return;
	    }
	    if (typeof console !== 'undefined') {
	      var argsWithFormat = args.map(function (item) {
	        return '' + item;
	      });
	      argsWithFormat.unshift('Warning: ' + format);

	      // We intentionally don't use spread (or .apply) directly because it
	      // breaks IE9: https://github.com/facebook/react/issues/13610
	      Function.prototype.apply.call(console.error, console, argsWithFormat);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	var warningWithoutStack$1 = warningWithoutStack;

	var didWarnStateUpdateForUnmountedComponent = {};

	function warnNoop(publicInstance, callerName) {
	  {
	    var _constructor = publicInstance.constructor;
	    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
	    var warningKey = componentName + '.' + callerName;
	    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
	      return;
	    }
	    warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
	    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance, callback, callerName) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	var emptyObject = {};
	{
	  Object.freeze(emptyObject);
	}

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function Component(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  // If a component has string refs, we will assign a different object later.
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	Component.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	Component.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
	  this.updater.enqueueSetState(this, partialState, callback, 'setState');
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	Component.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	{
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    Object.defineProperty(Component.prototype, methodName, {
	      get: function () {
	        lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
	        return undefined;
	      }
	    });
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = Component.prototype;

	/**
	 * Convenience component with default shallow equality check for sCU.
	 */
	function PureComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  // If a component has string refs, we will assign a different object later.
	  this.refs = emptyObject;
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
	pureComponentPrototype.constructor = PureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(pureComponentPrototype, Component.prototype);
	pureComponentPrototype.isPureReactComponent = true;

	// an immutable object with a single mutable value
	function createRef() {
	  var refObject = {
	    current: null
	  };
	  {
	    Object.seal(refObject);
	  }
	  return refObject;
	}

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null,
	  currentDispatcher: null
	};

	var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

	var describeComponentFrame = function (name, source, ownerName) {
	  var sourceInfo = '';
	  if (source) {
	    var path = source.fileName;
	    var fileName = path.replace(BEFORE_SLASH_RE, '');
	    {
	      // In DEV, include code for a common special case:
	      // prefer "folder/index.js" instead of just "index.js".
	      if (/^index\./.test(fileName)) {
	        var match = path.match(BEFORE_SLASH_RE);
	        if (match) {
	          var pathBeforeSlash = match[1];
	          if (pathBeforeSlash) {
	            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
	            fileName = folderName + '/' + fileName;
	          }
	        }
	      }
	    }
	    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
	  } else if (ownerName) {
	    sourceInfo = ' (created by ' + ownerName + ')';
	  }
	  return '\n    in ' + (name || 'Unknown') + sourceInfo;
	};

	var Resolved = 1;


	function refineResolvedLazyComponent(lazyComponent) {
	  return lazyComponent._status === Resolved ? lazyComponent._result : null;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
	}

	function getComponentName(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }
	  {
	    if (typeof type.tag === 'number') {
	      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }
	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }
	  if (typeof type === 'string') {
	    return type;
	  }
	  switch (type) {
	    case REACT_CONCURRENT_MODE_TYPE:
	      return 'ConcurrentMode';
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';
	    case REACT_PORTAL_TYPE:
	      return 'Portal';
	    case REACT_PROFILER_TYPE:
	      return 'Profiler';
	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';
	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';
	  }
	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        return 'Context.Consumer';
	      case REACT_PROVIDER_TYPE:
	        return 'Context.Provider';
	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');
	      case REACT_MEMO_TYPE:
	        return getComponentName(type.type);
	      case REACT_LAZY_TYPE:
	        {
	          var thenable = type;
	          var resolvedThenable = refineResolvedLazyComponent(thenable);
	          if (resolvedThenable) {
	            return getComponentName(resolvedThenable);
	          }
	        }
	    }
	  }
	  return null;
	}

	var ReactDebugCurrentFrame = {};

	var currentlyValidatingElement = null;

	function setCurrentlyValidatingElement(element) {
	  {
	    currentlyValidatingElement = element;
	  }
	}

	{
	  // Stack implementation injected by the current renderer.
	  ReactDebugCurrentFrame.getCurrentStack = null;

	  ReactDebugCurrentFrame.getStackAddendum = function () {
	    var stack = '';

	    // Add an extra top frame while an element is being validated
	    if (currentlyValidatingElement) {
	      var name = getComponentName(currentlyValidatingElement.type);
	      var owner = currentlyValidatingElement._owner;
	      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
	    }

	    // Delegate to the injected renderer-specific implementation
	    var impl = ReactDebugCurrentFrame.getCurrentStack;
	    if (impl) {
	      stack += impl() || '';
	    }

	    return stack;
	  };
	}

	var ReactSharedInternals = {
	  ReactCurrentOwner: ReactCurrentOwner,
	  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
	  assign: _assign
	};

	{
	  _assign(ReactSharedInternals, {
	    // These should not be included in production.
	    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
	    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
	    // TODO: remove in React 17.0.
	    ReactComponentTreeHook: {}
	  });
	}

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = warningWithoutStack$1;

	{
	  warning = function (condition, format) {
	    if (condition) {
	      return;
	    }
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();
	    // eslint-disable-next-line react-internal/warning-and-invariant-args

	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
	  };
	}

	var warning$1 = warning;

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown = void 0;
	var specialPropRefWarningShown = void 0;

	function hasValidRef(config) {
	  {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allows us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    Object.defineProperty(element._store, 'validated', {
	      configurable: false,
	      enumerable: false,
	      writable: true,
	      value: false
	    });
	    // self and source are DEV only properties.
	    Object.defineProperty(element, '_self', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: self
	    });
	    // Two elements created in two different places should be considered
	    // equal for testing purposes and therefore we hide it from enumeration.
	    Object.defineProperty(element, '_source', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: source
	    });
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://reactjs.org/docs/react-api.html#createelement
	 */
	function createElement(type, config, children) {
	  var propName = void 0;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  {
	    if (key || ref) {
	      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	      if (key) {
	        defineKeyPropWarningGetter(props, displayName);
	      }
	      if (ref) {
	        defineRefPropWarningGetter(props, displayName);
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	}

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://reactjs.org/docs/react-api.html#createfactory
	 */


	function cloneAndReplaceKey(oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	}

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://reactjs.org/docs/react-api.html#cloneelement
	 */
	function cloneElement(element, config, children) {
	  !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;

	  var propName = void 0;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps = void 0;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	}

	/**
	 * Verifies the object is a ReactElement.
	 * See https://reactjs.org/docs/react-api.html#isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a ReactElement.
	 * @final
	 */
	function isValidElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	var POOL_SIZE = 10;
	var traverseContextPool = [];
	function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
	  if (traverseContextPool.length) {
	    var traverseContext = traverseContextPool.pop();
	    traverseContext.result = mapResult;
	    traverseContext.keyPrefix = keyPrefix;
	    traverseContext.func = mapFunction;
	    traverseContext.context = mapContext;
	    traverseContext.count = 0;
	    return traverseContext;
	  } else {
	    return {
	      result: mapResult,
	      keyPrefix: keyPrefix,
	      func: mapFunction,
	      context: mapContext,
	      count: 0
	    };
	  }
	}

	function releaseTraverseContext(traverseContext) {
	  traverseContext.result = null;
	  traverseContext.keyPrefix = null;
	  traverseContext.func = null;
	  traverseContext.context = null;
	  traverseContext.count = 0;
	  if (traverseContextPool.length < POOL_SIZE) {
	    traverseContextPool.push(traverseContext);
	  }
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  var invokeCallback = false;

	  if (children === null) {
	    invokeCallback = true;
	  } else {
	    switch (type) {
	      case 'string':
	      case 'number':
	        invokeCallback = true;
	        break;
	      case 'object':
	        switch (children.$$typeof) {
	          case REACT_ELEMENT_TYPE:
	          case REACT_PORTAL_TYPE:
	            invokeCallback = true;
	        }
	    }
	  }

	  if (invokeCallback) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child = void 0;
	  var nextName = void 0;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (typeof iteratorFn === 'function') {
	      {
	        // Warn about using Maps as children
	        if (iteratorFn === children.entries) {
	          !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
	          didWarnAboutMaps = true;
	        }
	      }

	      var iterator = iteratorFn.call(children);
	      var step = void 0;
	      var ii = 0;
	      while (!(step = iterator.next()).done) {
	        child = step.value;
	        nextName = nextNamePrefix + getComponentKey(child, ii++);
	        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
	      }
	      var childrenString = '' + children;
	      invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (typeof component === 'object' && component !== null && component.key != null) {
	    // Explicit key
	    return escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  releaseTraverseContext(traverseContext);
	}

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
	      return c;
	    });
	  } else if (mappedChild != null) {
	    if (isValidElement(mappedChild)) {
	      mappedChild = cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  releaseTraverseContext(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrencount
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children) {
	  return traverseAllChildren(children, function () {
	    return null;
	  }, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
	    return child;
	  });
	  return result;
	}

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
	  return children;
	}

	function createContext(defaultValue, calculateChangedBits) {
	  if (calculateChangedBits === undefined) {
	    calculateChangedBits = null;
	  } else {
	    {
	      !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
	    }
	  }

	  var context = {
	    $$typeof: REACT_CONTEXT_TYPE,
	    _calculateChangedBits: calculateChangedBits,
	    // As a workaround to support multiple concurrent renderers, we categorize
	    // some renderers as primary and others as secondary. We only expect
	    // there to be two concurrent renderers at most: React Native (primary) and
	    // Fabric (secondary); React DOM (primary) and React ART (secondary).
	    // Secondary renderers store their context values on separate fields.
	    _currentValue: defaultValue,
	    _currentValue2: defaultValue,
	    // Used to track how many concurrent renderers this context currently
	    // supports within in a single renderer. Such as parallel server rendering.
	    _threadCount: 0,
	    // These are circular
	    Provider: null,
	    Consumer: null
	  };

	  context.Provider = {
	    $$typeof: REACT_PROVIDER_TYPE,
	    _context: context
	  };

	  var hasWarnedAboutUsingNestedContextConsumers = false;
	  var hasWarnedAboutUsingConsumerProvider = false;

	  {
	    // A separate object, but proxies back to the original context object for
	    // backwards compatibility. It has a different $$typeof, so we can properly
	    // warn for the incorrect usage of Context as a Consumer.
	    var Consumer = {
	      $$typeof: REACT_CONTEXT_TYPE,
	      _context: context,
	      _calculateChangedBits: context._calculateChangedBits
	    };
	    // $FlowFixMe: Flow complains about not setting a value, which is intentional here
	    Object.defineProperties(Consumer, {
	      Provider: {
	        get: function () {
	          if (!hasWarnedAboutUsingConsumerProvider) {
	            hasWarnedAboutUsingConsumerProvider = true;
	            warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
	          }
	          return context.Provider;
	        },
	        set: function (_Provider) {
	          context.Provider = _Provider;
	        }
	      },
	      _currentValue: {
	        get: function () {
	          return context._currentValue;
	        },
	        set: function (_currentValue) {
	          context._currentValue = _currentValue;
	        }
	      },
	      _currentValue2: {
	        get: function () {
	          return context._currentValue2;
	        },
	        set: function (_currentValue2) {
	          context._currentValue2 = _currentValue2;
	        }
	      },
	      _threadCount: {
	        get: function () {
	          return context._threadCount;
	        },
	        set: function (_threadCount) {
	          context._threadCount = _threadCount;
	        }
	      },
	      Consumer: {
	        get: function () {
	          if (!hasWarnedAboutUsingNestedContextConsumers) {
	            hasWarnedAboutUsingNestedContextConsumers = true;
	            warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	          }
	          return context.Consumer;
	        }
	      }
	    });
	    // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
	    context.Consumer = Consumer;
	  }

	  {
	    context._currentRenderer = null;
	    context._currentRenderer2 = null;
	  }

	  return context;
	}

	function lazy(ctor) {
	  return {
	    $$typeof: REACT_LAZY_TYPE,
	    _ctor: ctor,
	    // React uses these fields to store the result.
	    _status: -1,
	    _result: null
	  };
	}

	function forwardRef(render) {
	  {
	    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
	      warningWithoutStack$1(false, 'forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
	    } else if (typeof render !== 'function') {
	      warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
	    } else {
	      !(
	      // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
	      render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;
	    }

	    if (render != null) {
	      !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
	    }
	  }

	  return {
	    $$typeof: REACT_FORWARD_REF_TYPE,
	    render: render
	  };
	}

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' ||
	  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
	}

	function memo(type, compare) {
	  {
	    if (!isValidElementType(type)) {
	      warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
	    }
	  }
	  return {
	    $$typeof: REACT_MEMO_TYPE,
	    type: type,
	    compare: compare === undefined ? null : compare
	  };
	}

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	var propTypesMisspellWarningShown = void 0;

	{
	  propTypesMisspellWarningShown = false;
	}

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = getComponentName(ReactCurrentOwner.current.type);
	    if (name) {
	      return '\n\nCheck the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function getSourceInfoErrorAddendum(elementProps) {
	  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
	    var source = elementProps.__source;
	    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	    var lineNumber = source.lineNumber;
	    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = '\n\nCheck the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	    return;
	  }
	  ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';
	  }

	  setCurrentlyValidatingElement(element);
	  {
	    warning$1(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
	  }
	  setCurrentlyValidatingElement(null);
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    if (typeof iteratorFn === 'function') {
	      // Entry iterators used to provide implicit keys,
	      // but now we print a separate warning for them later.
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step = void 0;
	        while (!(step = iterator.next()).done) {
	          if (isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var type = element.type;
	  var name = void 0,
	      propTypes = void 0;
	  if (typeof type === 'function') {
	    // Class or function component
	    name = type.displayName || type.name;
	    propTypes = type.propTypes;
	  } else if (typeof type === 'object' && type !== null && type.$$typeof === REACT_FORWARD_REF_TYPE) {
	    // ForwardRef
	    var functionName = type.render.displayName || type.render.name || '';
	    name = type.displayName || (functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef');
	    propTypes = type.propTypes;
	  } else {
	    return;
	  }
	  if (propTypes) {
	    setCurrentlyValidatingElement(element);
	    checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
	    setCurrentlyValidatingElement(null);
	  } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
	    propTypesMisspellWarningShown = true;
	    warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
	  }
	  if (typeof type.getDefaultProps === 'function') {
	    !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}

	/**
	 * Given a fragment, validate that it can only be provided with fragment props
	 * @param {ReactElement} fragment
	 */
	function validateFragmentProps(fragment) {
	  setCurrentlyValidatingElement(fragment);

	  var keys = Object.keys(fragment.props);
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (key !== 'children' && key !== 'key') {
	      warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
	      break;
	    }
	  }

	  if (fragment.ref !== null) {
	    warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
	  }

	  setCurrentlyValidatingElement(null);
	}

	function createElementWithValidation(type, props, children) {
	  var validType = isValidElementType(type);

	  // We warn in this case but don't throw. We expect the element creation to
	  // succeed and there will likely be errors in render.
	  if (!validType) {
	    var info = '';
	    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
	    }

	    var sourceInfo = getSourceInfoErrorAddendum(props);
	    if (sourceInfo) {
	      info += sourceInfo;
	    } else {
	      info += getDeclarationErrorAddendum();
	    }

	    var typeString = void 0;
	    if (type === null) {
	      typeString = 'null';
	    } else if (Array.isArray(type)) {
	      typeString = 'array';
	    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
	      typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
	      info = ' Did you accidentally export a JSX literal instead of a component?';
	    } else {
	      typeString = typeof type;
	    }

	    warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
	  }

	  var element = createElement.apply(this, arguments);

	  // The result can be nullish if a mock or a custom function is used.
	  // TODO: Drop this when these are no longer allowed as the type argument.
	  if (element == null) {
	    return element;
	  }

	  // Skip key warning if the type isn't valid since our key validation logic
	  // doesn't expect a non-string/function type and can throw confusing errors.
	  // We don't want exception behavior to differ between dev and prod.
	  // (Rendering will throw with a helpful message and as soon as the type is
	  // fixed, the key warnings will appear.)
	  if (validType) {
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }
	  }

	  if (type === REACT_FRAGMENT_TYPE) {
	    validateFragmentProps(element);
	  } else {
	    validatePropTypes(element);
	  }

	  return element;
	}

	function createFactoryWithValidation(type) {
	  var validatedFactory = createElementWithValidation.bind(null, type);
	  validatedFactory.type = type;
	  // Legacy hook: remove it
	  {
	    Object.defineProperty(validatedFactory, 'type', {
	      enumerable: false,
	      get: function () {
	        lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
	        Object.defineProperty(this, 'type', {
	          value: type
	        });
	        return type;
	      }
	    });
	  }

	  return validatedFactory;
	}

	function cloneElementWithValidation(element, props, children) {
	  var newElement = cloneElement.apply(this, arguments);
	  for (var i = 2; i < arguments.length; i++) {
	    validateChildKeys(arguments[i], newElement.type);
	  }
	  validatePropTypes(newElement);
	  return newElement;
	}

	var React = {
	  Children: {
	    map: mapChildren,
	    forEach: forEachChildren,
	    count: countChildren,
	    toArray: toArray,
	    only: onlyChild
	  },

	  createRef: createRef,
	  Component: Component,
	  PureComponent: PureComponent,

	  createContext: createContext,
	  forwardRef: forwardRef,
	  lazy: lazy,
	  memo: memo,

	  Fragment: REACT_FRAGMENT_TYPE,
	  StrictMode: REACT_STRICT_MODE_TYPE,
	  Suspense: REACT_SUSPENSE_TYPE,

	  createElement: createElementWithValidation,
	  cloneElement: cloneElementWithValidation,
	  createFactory: createFactoryWithValidation,
	  isValidElement: isValidElement,

	  version: ReactVersion,

	  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
	};

	{
	  React.unstable_ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	  React.unstable_Profiler = REACT_PROFILER_TYPE;
	}



	var React$2 = Object.freeze({
		default: React
	});

	var React$3 = ( React$2 && React ) || React$2;

	// TODO: decide on the top-level export form.
	// This is hacky but makes it work with both Rollup and Jest.
	var react = React$3.default || React$3;

	module.exports = react;
	  })();
	}
	});

	var react = createCommonjsModule(function (module) {

	{
	  module.exports = react_development;
	}
	});
	var react_1 = react.Component;

	var scheduler_production_min = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports,"__esModule",{value:!0});var d=null,f=!1,h=3,k=-1,l=-1,m=!1,n=!1;function p(){if(!m){var a=d.expirationTime;n?q():n=!0;r(t,a);}}
	function u(){var a=d,b=d.next;if(d===b)d=null;else{var c=d.previous;d=c.next=b;b.previous=c;}a.next=a.previous=null;c=a.callback;b=a.expirationTime;a=a.priorityLevel;var e=h,Q=l;h=a;l=b;try{var g=c();}finally{h=e,l=Q;}if("function"===typeof g)if(g={callback:g,priorityLevel:a,expirationTime:b,next:null,previous:null},null===d)d=g.next=g.previous=g;else{c=null;a=d;do{if(a.expirationTime>=b){c=a;break}a=a.next;}while(a!==d);null===c?c=d:c===d&&(d=g,p());b=c.previous;b.next=c.previous=g;g.next=c;g.previous=
	b;}}function v(){if(-1===k&&null!==d&&1===d.priorityLevel){m=!0;try{do u();while(null!==d&&1===d.priorityLevel)}finally{m=!1,null!==d?p():n=!1;}}}function t(a){m=!0;var b=f;f=a;try{if(a)for(;null!==d;){var c=exports.unstable_now();if(d.expirationTime<=c){do u();while(null!==d&&d.expirationTime<=c)}else break}else if(null!==d){do u();while(null!==d&&!w())}}finally{m=!1,f=b,null!==d?p():n=!1,v();}}
	var x=Date,y="function"===typeof setTimeout?setTimeout:void 0,z="function"===typeof clearTimeout?clearTimeout:void 0,A="function"===typeof requestAnimationFrame?requestAnimationFrame:void 0,B="function"===typeof cancelAnimationFrame?cancelAnimationFrame:void 0,C,D;function E(a){C=A(function(b){z(D);a(b);});D=y(function(){B(C);a(exports.unstable_now());},100);}
	if("object"===typeof performance&&"function"===typeof performance.now){var F=performance;exports.unstable_now=function(){return F.now()};}else exports.unstable_now=function(){return x.now()};var r,q,w;
	if("undefined"!==typeof window&&window._schedMock){var G=window._schedMock;r=G[0];q=G[1];w=G[2];}else if("undefined"===typeof window||"function"!==typeof window.addEventListener){var H=null,I=-1,J=function(a,b){if(null!==H){var c=H;H=null;try{I=b,c(a);}finally{I=-1;}}};r=function(a,b){-1!==I?setTimeout(r,0,a,b):(H=a,setTimeout(J,b,!0,b),setTimeout(J,1073741823,!1,1073741823));};q=function(){H=null;};w=function(){return !1};exports.unstable_now=function(){return -1===I?0:I};}else{"undefined"!==typeof console&&
	("function"!==typeof A&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!==typeof B&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var K=null,L=!1,M=-1,N=!1,O=!1,P=0,R=33,S=33;w=function(){return P<=exports.unstable_now()};var T="__reactIdleCallback$"+Math.random().toString(36).slice(2);
	window.addEventListener("message",function(a){if(a.source===window&&a.data===T){L=!1;a=K;var b=M;K=null;M=-1;var c=exports.unstable_now(),e=!1;if(0>=P-c)if(-1!==b&&b<=c)e=!0;else{N||(N=!0,E(U));K=a;M=b;return}if(null!==a){O=!0;try{a(e);}finally{O=!1;}}}},!1);var U=function(a){if(null!==K){E(U);var b=a-P+S;b<S&&R<S?(8>b&&(b=8),S=b<R?R:b):R=b;P=a+S;L||(L=!0,window.postMessage(T,"*"));}else N=!1;};r=function(a,b){K=a;M=b;O||0>b?window.postMessage(T,"*"):N||(N=!0,E(U));};q=function(){K=null;L=!1;M=-1;};}
	exports.unstable_ImmediatePriority=1;exports.unstable_UserBlockingPriority=2;exports.unstable_NormalPriority=3;exports.unstable_IdlePriority=5;exports.unstable_LowPriority=4;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3;}var c=h,e=k;h=a;k=exports.unstable_now();try{return b()}finally{h=c,k=e,v();}};
	exports.unstable_scheduleCallback=function(a,b){var c=-1!==k?k:exports.unstable_now();if("object"===typeof b&&null!==b&&"number"===typeof b.timeout)b=c+b.timeout;else switch(h){case 1:b=c+-1;break;case 2:b=c+250;break;case 5:b=c+1073741823;break;case 4:b=c+1E4;break;default:b=c+5E3;}a={callback:a,priorityLevel:h,expirationTime:b,next:null,previous:null};if(null===d)d=a.next=a.previous=a,p();else{c=null;var e=d;do{if(e.expirationTime>b){c=e;break}e=e.next;}while(e!==d);null===c?c=d:c===d&&(d=a,p());
	b=c.previous;b.next=c.previous=a;a.next=c;a.previous=b;}return a};exports.unstable_cancelCallback=function(a){var b=a.next;if(null!==b){if(b===a)d=null;else{a===d&&(d=b);var c=a.previous;c.next=b;b.previous=c;}a.next=a.previous=null;}};exports.unstable_wrapCallback=function(a){var b=h;return function(){var c=h,e=k;h=b;k=exports.unstable_now();try{return a.apply(this,arguments)}finally{h=c,k=e,v();}}};exports.unstable_getCurrentPriorityLevel=function(){return h};
	exports.unstable_shouldYield=function(){return !f&&(null!==d&&d.expirationTime<l||w())};
	});

	unwrapExports(scheduler_production_min);
	var scheduler_production_min_1 = scheduler_production_min.unstable_now;
	var scheduler_production_min_2 = scheduler_production_min.unstable_ImmediatePriority;
	var scheduler_production_min_3 = scheduler_production_min.unstable_UserBlockingPriority;
	var scheduler_production_min_4 = scheduler_production_min.unstable_NormalPriority;
	var scheduler_production_min_5 = scheduler_production_min.unstable_IdlePriority;
	var scheduler_production_min_6 = scheduler_production_min.unstable_LowPriority;
	var scheduler_production_min_7 = scheduler_production_min.unstable_runWithPriority;
	var scheduler_production_min_8 = scheduler_production_min.unstable_scheduleCallback;
	var scheduler_production_min_9 = scheduler_production_min.unstable_cancelCallback;
	var scheduler_production_min_10 = scheduler_production_min.unstable_wrapCallback;
	var scheduler_production_min_11 = scheduler_production_min.unstable_getCurrentPriorityLevel;
	var scheduler_production_min_12 = scheduler_production_min.unstable_shouldYield;

	var scheduler_development = createCommonjsModule(function (module, exports) {



	{
	  (function() {

	Object.defineProperty(exports, '__esModule', { value: true });

	/* eslint-disable no-var */

	// TODO: Use symbols?
	var ImmediatePriority = 1;
	var UserBlockingPriority = 2;
	var NormalPriority = 3;
	var LowPriority = 4;
	var IdlePriority = 5;

	// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
	// Math.pow(2, 30) - 1
	// 0b111111111111111111111111111111
	var maxSigned31BitInt = 1073741823;

	// Times out immediately
	var IMMEDIATE_PRIORITY_TIMEOUT = -1;
	// Eventually times out
	var USER_BLOCKING_PRIORITY = 250;
	var NORMAL_PRIORITY_TIMEOUT = 5000;
	var LOW_PRIORITY_TIMEOUT = 10000;
	// Never times out
	var IDLE_PRIORITY = maxSigned31BitInt;

	// Callbacks are stored as a circular, doubly linked list.
	var firstCallbackNode = null;

	var currentDidTimeout = false;
	var currentPriorityLevel = NormalPriority;
	var currentEventStartTime = -1;
	var currentExpirationTime = -1;

	// This is set when a callback is being executed, to prevent re-entrancy.
	var isExecutingCallback = false;

	var isHostCallbackScheduled = false;

	var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

	function ensureHostCallbackIsScheduled() {
	  if (isExecutingCallback) {
	    // Don't schedule work yet; wait until the next time we yield.
	    return;
	  }
	  // Schedule the host callback using the earliest expiration in the list.
	  var expirationTime = firstCallbackNode.expirationTime;
	  if (!isHostCallbackScheduled) {
	    isHostCallbackScheduled = true;
	  } else {
	    // Cancel the existing host callback.
	    cancelHostCallback();
	  }
	  requestHostCallback(flushWork, expirationTime);
	}

	function flushFirstCallback() {
	  var flushedNode = firstCallbackNode;

	  // Remove the node from the list before calling the callback. That way the
	  // list is in a consistent state even if the callback throws.
	  var next = firstCallbackNode.next;
	  if (firstCallbackNode === next) {
	    // This is the last callback in the list.
	    firstCallbackNode = null;
	    next = null;
	  } else {
	    var lastCallbackNode = firstCallbackNode.previous;
	    firstCallbackNode = lastCallbackNode.next = next;
	    next.previous = lastCallbackNode;
	  }

	  flushedNode.next = flushedNode.previous = null;

	  // Now it's safe to call the callback.
	  var callback = flushedNode.callback;
	  var expirationTime = flushedNode.expirationTime;
	  var priorityLevel = flushedNode.priorityLevel;
	  var previousPriorityLevel = currentPriorityLevel;
	  var previousExpirationTime = currentExpirationTime;
	  currentPriorityLevel = priorityLevel;
	  currentExpirationTime = expirationTime;
	  var continuationCallback;
	  try {
	    continuationCallback = callback();
	  } finally {
	    currentPriorityLevel = previousPriorityLevel;
	    currentExpirationTime = previousExpirationTime;
	  }

	  // A callback may return a continuation. The continuation should be scheduled
	  // with the same priority and expiration as the just-finished callback.
	  if (typeof continuationCallback === 'function') {
	    var continuationNode = {
	      callback: continuationCallback,
	      priorityLevel: priorityLevel,
	      expirationTime: expirationTime,
	      next: null,
	      previous: null
	    };

	    // Insert the new callback into the list, sorted by its expiration. This is
	    // almost the same as the code in `scheduleCallback`, except the callback
	    // is inserted into the list *before* callbacks of equal expiration instead
	    // of after.
	    if (firstCallbackNode === null) {
	      // This is the first callback in the list.
	      firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;
	    } else {
	      var nextAfterContinuation = null;
	      var node = firstCallbackNode;
	      do {
	        if (node.expirationTime >= expirationTime) {
	          // This callback expires at or after the continuation. We will insert
	          // the continuation *before* this callback.
	          nextAfterContinuation = node;
	          break;
	        }
	        node = node.next;
	      } while (node !== firstCallbackNode);

	      if (nextAfterContinuation === null) {
	        // No equal or lower priority callback was found, which means the new
	        // callback is the lowest priority callback in the list.
	        nextAfterContinuation = firstCallbackNode;
	      } else if (nextAfterContinuation === firstCallbackNode) {
	        // The new callback is the highest priority callback in the list.
	        firstCallbackNode = continuationNode;
	        ensureHostCallbackIsScheduled();
	      }

	      var previous = nextAfterContinuation.previous;
	      previous.next = nextAfterContinuation.previous = continuationNode;
	      continuationNode.next = nextAfterContinuation;
	      continuationNode.previous = previous;
	    }
	  }
	}

	function flushImmediateWork() {
	  if (
	  // Confirm we've exited the outer most event handler
	  currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {
	    isExecutingCallback = true;
	    try {
	      do {
	        flushFirstCallback();
	      } while (
	      // Keep flushing until there are no more immediate callbacks
	      firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority);
	    } finally {
	      isExecutingCallback = false;
	      if (firstCallbackNode !== null) {
	        // There's still work remaining. Request another callback.
	        ensureHostCallbackIsScheduled();
	      } else {
	        isHostCallbackScheduled = false;
	      }
	    }
	  }
	}

	function flushWork(didTimeout) {
	  isExecutingCallback = true;
	  var previousDidTimeout = currentDidTimeout;
	  currentDidTimeout = didTimeout;
	  try {
	    if (didTimeout) {
	      // Flush all the expired callbacks without yielding.
	      while (firstCallbackNode !== null) {
	        // Read the current time. Flush all the callbacks that expire at or
	        // earlier than that time. Then read the current time again and repeat.
	        // This optimizes for as few performance.now calls as possible.
	        var currentTime = exports.unstable_now();
	        if (firstCallbackNode.expirationTime <= currentTime) {
	          do {
	            flushFirstCallback();
	          } while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime);
	          continue;
	        }
	        break;
	      }
	    } else {
	      // Keep flushing callbacks until we run out of time in the frame.
	      if (firstCallbackNode !== null) {
	        do {
	          flushFirstCallback();
	        } while (firstCallbackNode !== null && !shouldYieldToHost());
	      }
	    }
	  } finally {
	    isExecutingCallback = false;
	    currentDidTimeout = previousDidTimeout;
	    if (firstCallbackNode !== null) {
	      // There's still work remaining. Request another callback.
	      ensureHostCallbackIsScheduled();
	    } else {
	      isHostCallbackScheduled = false;
	    }
	    // Before exiting, flush all the immediate work that was scheduled.
	    flushImmediateWork();
	  }
	}

	function unstable_runWithPriority(priorityLevel, eventHandler) {
	  switch (priorityLevel) {
	    case ImmediatePriority:
	    case UserBlockingPriority:
	    case NormalPriority:
	    case LowPriority:
	    case IdlePriority:
	      break;
	    default:
	      priorityLevel = NormalPriority;
	  }

	  var previousPriorityLevel = currentPriorityLevel;
	  var previousEventStartTime = currentEventStartTime;
	  currentPriorityLevel = priorityLevel;
	  currentEventStartTime = exports.unstable_now();

	  try {
	    return eventHandler();
	  } finally {
	    currentPriorityLevel = previousPriorityLevel;
	    currentEventStartTime = previousEventStartTime;

	    // Before exiting, flush all the immediate work that was scheduled.
	    flushImmediateWork();
	  }
	}

	function unstable_wrapCallback(callback) {
	  var parentPriorityLevel = currentPriorityLevel;
	  return function () {
	    // This is a fork of runWithPriority, inlined for performance.
	    var previousPriorityLevel = currentPriorityLevel;
	    var previousEventStartTime = currentEventStartTime;
	    currentPriorityLevel = parentPriorityLevel;
	    currentEventStartTime = exports.unstable_now();

	    try {
	      return callback.apply(this, arguments);
	    } finally {
	      currentPriorityLevel = previousPriorityLevel;
	      currentEventStartTime = previousEventStartTime;
	      flushImmediateWork();
	    }
	  };
	}

	function unstable_scheduleCallback(callback, deprecated_options) {
	  var startTime = currentEventStartTime !== -1 ? currentEventStartTime : exports.unstable_now();

	  var expirationTime;
	  if (typeof deprecated_options === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') {
	    // FIXME: Remove this branch once we lift expiration times out of React.
	    expirationTime = startTime + deprecated_options.timeout;
	  } else {
	    switch (currentPriorityLevel) {
	      case ImmediatePriority:
	        expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;
	        break;
	      case UserBlockingPriority:
	        expirationTime = startTime + USER_BLOCKING_PRIORITY;
	        break;
	      case IdlePriority:
	        expirationTime = startTime + IDLE_PRIORITY;
	        break;
	      case LowPriority:
	        expirationTime = startTime + LOW_PRIORITY_TIMEOUT;
	        break;
	      case NormalPriority:
	      default:
	        expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;
	    }
	  }

	  var newNode = {
	    callback: callback,
	    priorityLevel: currentPriorityLevel,
	    expirationTime: expirationTime,
	    next: null,
	    previous: null
	  };

	  // Insert the new callback into the list, ordered first by expiration, then
	  // by insertion. So the new callback is inserted any other callback with
	  // equal expiration.
	  if (firstCallbackNode === null) {
	    // This is the first callback in the list.
	    firstCallbackNode = newNode.next = newNode.previous = newNode;
	    ensureHostCallbackIsScheduled();
	  } else {
	    var next = null;
	    var node = firstCallbackNode;
	    do {
	      if (node.expirationTime > expirationTime) {
	        // The new callback expires before this one.
	        next = node;
	        break;
	      }
	      node = node.next;
	    } while (node !== firstCallbackNode);

	    if (next === null) {
	      // No callback with a later expiration was found, which means the new
	      // callback has the latest expiration in the list.
	      next = firstCallbackNode;
	    } else if (next === firstCallbackNode) {
	      // The new callback has the earliest expiration in the entire list.
	      firstCallbackNode = newNode;
	      ensureHostCallbackIsScheduled();
	    }

	    var previous = next.previous;
	    previous.next = next.previous = newNode;
	    newNode.next = next;
	    newNode.previous = previous;
	  }

	  return newNode;
	}

	function unstable_cancelCallback(callbackNode) {
	  var next = callbackNode.next;
	  if (next === null) {
	    // Already cancelled.
	    return;
	  }

	  if (next === callbackNode) {
	    // This is the only scheduled callback. Clear the list.
	    firstCallbackNode = null;
	  } else {
	    // Remove the callback from its position in the list.
	    if (callbackNode === firstCallbackNode) {
	      firstCallbackNode = next;
	    }
	    var previous = callbackNode.previous;
	    previous.next = next;
	    next.previous = previous;
	  }

	  callbackNode.next = callbackNode.previous = null;
	}

	function unstable_getCurrentPriorityLevel() {
	  return currentPriorityLevel;
	}

	function unstable_shouldYield() {
	  return !currentDidTimeout && (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime || shouldYieldToHost());
	}

	// The remaining code is essentially a polyfill for requestIdleCallback. It
	// works by scheduling a requestAnimationFrame, storing the time for the start
	// of the frame, then scheduling a postMessage which gets scheduled after paint.
	// Within the postMessage handler do as much work as possible until time + frame
	// rate. By separating the idle call into a separate event tick we ensure that
	// layout, paint and other browser work is counted against the available time.
	// The frame rate is dynamically adjusted.

	// We capture a local reference to any global, in case it gets polyfilled after
	// this module is initially evaluated. We want to be using a
	// consistent implementation.
	var localDate = Date;

	// This initialization code may run even on server environments if a component
	// just imports ReactDOM (e.g. for findDOMNode). Some environments might not
	// have setTimeout or clearTimeout. However, we always expect them to be defined
	// on the client. https://github.com/facebook/react/pull/13088
	var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
	var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;

	// We don't expect either of these to necessarily be defined, but we will error
	// later if they are missing on the client.
	var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;
	var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined;

	// requestAnimationFrame does not run when the tab is in the background. If
	// we're backgrounded we prefer for that work to happen so that the page
	// continues to load in the background. So we also schedule a 'setTimeout' as
	// a fallback.
	// TODO: Need a better heuristic for backgrounded work.
	var ANIMATION_FRAME_TIMEOUT = 100;
	var rAFID;
	var rAFTimeoutID;
	var requestAnimationFrameWithTimeout = function (callback) {
	  // schedule rAF and also a setTimeout
	  rAFID = localRequestAnimationFrame(function (timestamp) {
	    // cancel the setTimeout
	    localClearTimeout(rAFTimeoutID);
	    callback(timestamp);
	  });
	  rAFTimeoutID = localSetTimeout(function () {
	    // cancel the requestAnimationFrame
	    localCancelAnimationFrame(rAFID);
	    callback(exports.unstable_now());
	  }, ANIMATION_FRAME_TIMEOUT);
	};

	if (hasNativePerformanceNow) {
	  var Performance = performance;
	  exports.unstable_now = function () {
	    return Performance.now();
	  };
	} else {
	  exports.unstable_now = function () {
	    return localDate.now();
	  };
	}

	var requestHostCallback;
	var cancelHostCallback;
	var shouldYieldToHost;

	if (typeof window !== 'undefined' && window._schedMock) {
	  // Dynamic injection, only for testing purposes.
	  var impl = window._schedMock;
	  requestHostCallback = impl[0];
	  cancelHostCallback = impl[1];
	  shouldYieldToHost = impl[2];
	} else if (
	// If Scheduler runs in a non-DOM environment, it falls back to a naive
	// implementation using setTimeout.
	typeof window === 'undefined' ||
	// "addEventListener" might not be available on the window object
	// if this is a mocked "window" object. So we need to validate that too.
	typeof window.addEventListener !== 'function') {
	  var _callback = null;
	  var _currentTime = -1;
	  var _flushCallback = function (didTimeout, ms) {
	    if (_callback !== null) {
	      var cb = _callback;
	      _callback = null;
	      try {
	        _currentTime = ms;
	        cb(didTimeout);
	      } finally {
	        _currentTime = -1;
	      }
	    }
	  };
	  requestHostCallback = function (cb, ms) {
	    if (_currentTime !== -1) {
	      // Protect against re-entrancy.
	      setTimeout(requestHostCallback, 0, cb, ms);
	    } else {
	      _callback = cb;
	      setTimeout(_flushCallback, ms, true, ms);
	      setTimeout(_flushCallback, maxSigned31BitInt, false, maxSigned31BitInt);
	    }
	  };
	  cancelHostCallback = function () {
	    _callback = null;
	  };
	  shouldYieldToHost = function () {
	    return false;
	  };
	  exports.unstable_now = function () {
	    return _currentTime === -1 ? 0 : _currentTime;
	  };
	} else {
	  if (typeof console !== 'undefined') {
	    // TODO: Remove fb.me link
	    if (typeof localRequestAnimationFrame !== 'function') {
	      console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	    }
	    if (typeof localCancelAnimationFrame !== 'function') {
	      console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	    }
	  }

	  var scheduledHostCallback = null;
	  var isMessageEventScheduled = false;
	  var timeoutTime = -1;

	  var isAnimationFrameScheduled = false;

	  var isFlushingHostCallback = false;

	  var frameDeadline = 0;
	  // We start out assuming that we run at 30fps but then the heuristic tracking
	  // will adjust this value to a faster fps if we get more frequent animation
	  // frames.
	  var previousFrameTime = 33;
	  var activeFrameTime = 33;

	  shouldYieldToHost = function () {
	    return frameDeadline <= exports.unstable_now();
	  };

	  // We use the postMessage trick to defer idle work until after the repaint.
	  var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);
	  var idleTick = function (event) {
	    if (event.source !== window || event.data !== messageKey) {
	      return;
	    }

	    isMessageEventScheduled = false;

	    var prevScheduledCallback = scheduledHostCallback;
	    var prevTimeoutTime = timeoutTime;
	    scheduledHostCallback = null;
	    timeoutTime = -1;

	    var currentTime = exports.unstable_now();

	    var didTimeout = false;
	    if (frameDeadline - currentTime <= 0) {
	      // There's no time left in this idle period. Check if the callback has
	      // a timeout and whether it's been exceeded.
	      if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {
	        // Exceeded the timeout. Invoke the callback even though there's no
	        // time left.
	        didTimeout = true;
	      } else {
	        // No timeout.
	        if (!isAnimationFrameScheduled) {
	          // Schedule another animation callback so we retry later.
	          isAnimationFrameScheduled = true;
	          requestAnimationFrameWithTimeout(animationTick);
	        }
	        // Exit without invoking the callback.
	        scheduledHostCallback = prevScheduledCallback;
	        timeoutTime = prevTimeoutTime;
	        return;
	      }
	    }

	    if (prevScheduledCallback !== null) {
	      isFlushingHostCallback = true;
	      try {
	        prevScheduledCallback(didTimeout);
	      } finally {
	        isFlushingHostCallback = false;
	      }
	    }
	  };
	  // Assumes that we have addEventListener in this environment. Might need
	  // something better for old IE.
	  window.addEventListener('message', idleTick, false);

	  var animationTick = function (rafTime) {
	    if (scheduledHostCallback !== null) {
	      // Eagerly schedule the next animation callback at the beginning of the
	      // frame. If the scheduler queue is not empty at the end of the frame, it
	      // will continue flushing inside that callback. If the queue *is* empty,
	      // then it will exit immediately. Posting the callback at the start of the
	      // frame ensures it's fired within the earliest possible frame. If we
	      // waited until the end of the frame to post the callback, we risk the
	      // browser skipping a frame and not firing the callback until the frame
	      // after that.
	      requestAnimationFrameWithTimeout(animationTick);
	    } else {
	      // No pending work. Exit.
	      isAnimationFrameScheduled = false;
	      return;
	    }

	    var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
	    if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
	      if (nextFrameTime < 8) {
	        // Defensive coding. We don't support higher frame rates than 120hz.
	        // If the calculated frame time gets lower than 8, it is probably a bug.
	        nextFrameTime = 8;
	      }
	      // If one frame goes long, then the next one can be short to catch up.
	      // If two frames are short in a row, then that's an indication that we
	      // actually have a higher frame rate than what we're currently optimizing.
	      // We adjust our heuristic dynamically accordingly. For example, if we're
	      // running on 120hz display or 90hz VR display.
	      // Take the max of the two in case one of them was an anomaly due to
	      // missed frame deadlines.
	      activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
	    } else {
	      previousFrameTime = nextFrameTime;
	    }
	    frameDeadline = rafTime + activeFrameTime;
	    if (!isMessageEventScheduled) {
	      isMessageEventScheduled = true;
	      window.postMessage(messageKey, '*');
	    }
	  };

	  requestHostCallback = function (callback, absoluteTimeout) {
	    scheduledHostCallback = callback;
	    timeoutTime = absoluteTimeout;
	    if (isFlushingHostCallback || absoluteTimeout < 0) {
	      // Don't wait for the next frame. Continue working ASAP, in a new event.
	      window.postMessage(messageKey, '*');
	    } else if (!isAnimationFrameScheduled) {
	      // If rAF didn't already schedule one, we need to schedule a frame.
	      // TODO: If this rAF doesn't materialize because the browser throttles, we
	      // might want to still have setTimeout trigger rIC as a backup to ensure
	      // that we keep performing work.
	      isAnimationFrameScheduled = true;
	      requestAnimationFrameWithTimeout(animationTick);
	    }
	  };

	  cancelHostCallback = function () {
	    scheduledHostCallback = null;
	    isMessageEventScheduled = false;
	    timeoutTime = -1;
	  };
	}

	exports.unstable_ImmediatePriority = ImmediatePriority;
	exports.unstable_UserBlockingPriority = UserBlockingPriority;
	exports.unstable_NormalPriority = NormalPriority;
	exports.unstable_IdlePriority = IdlePriority;
	exports.unstable_LowPriority = LowPriority;
	exports.unstable_runWithPriority = unstable_runWithPriority;
	exports.unstable_scheduleCallback = unstable_scheduleCallback;
	exports.unstable_cancelCallback = unstable_cancelCallback;
	exports.unstable_wrapCallback = unstable_wrapCallback;
	exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
	exports.unstable_shouldYield = unstable_shouldYield;
	  })();
	}
	});

	unwrapExports(scheduler_development);
	var scheduler_development_1 = scheduler_development.unstable_now;
	var scheduler_development_2 = scheduler_development.unstable_ImmediatePriority;
	var scheduler_development_3 = scheduler_development.unstable_UserBlockingPriority;
	var scheduler_development_4 = scheduler_development.unstable_NormalPriority;
	var scheduler_development_5 = scheduler_development.unstable_IdlePriority;
	var scheduler_development_6 = scheduler_development.unstable_LowPriority;
	var scheduler_development_7 = scheduler_development.unstable_runWithPriority;
	var scheduler_development_8 = scheduler_development.unstable_scheduleCallback;
	var scheduler_development_9 = scheduler_development.unstable_cancelCallback;
	var scheduler_development_10 = scheduler_development.unstable_wrapCallback;
	var scheduler_development_11 = scheduler_development.unstable_getCurrentPriorityLevel;
	var scheduler_development_12 = scheduler_development.unstable_shouldYield;

	var scheduler = createCommonjsModule(function (module) {

	{
	  module.exports = scheduler_development;
	}
	});

	function ca(a,b,c,d,e,f,g,h){if(!a){a=void 0;if(void 0===b)a=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var k=[c,d,e,f,g,h],l=0;a=Error(b.replace(/%s/g,function(){return k[l++]}));a.name="Invariant Violation";}a.framesToPop=1;throw a;}}
	function t(a){for(var b=arguments.length-1,c="https://reactjs.org/docs/error-decoder.html?invariant="+a,d=0;d<b;d++)c+="&args[]="+encodeURIComponent(arguments[d+1]);ca(!1,"Minified React error #"+a+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",c);}react?void 0:t("227");function da(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l);}catch(m){this.onError(m);}}
	var ea=!1,fa=null,ha=!1,ia=null,ja={onError:function(a){ea=!0;fa=a;}};function ka(a,b,c,d,e,f,g,h,k){ea=!1;fa=null;da.apply(ja,arguments);}function la(a,b,c,d,e,f,g,h,k){ka.apply(this,arguments);if(ea){if(ea){var l=fa;ea=!1;fa=null;}else t("198"),l=void 0;ha||(ha=!0,ia=l);}}var ma=null,na={};
	function oa(){if(ma)for(var a in na){var b=na[a],c=ma.indexOf(a);-1<c?void 0:t("96",a);if(!pa[c]){b.extractEvents?void 0:t("97",a);pa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;qa.hasOwnProperty(h)?t("99",h):void 0;qa[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&ra(k[e],g,h);e=!0;}else f.registrationName?(ra(f.registrationName,g,h),e=!0):e=!1;e?void 0:t("98",d,a);}}}}
	function ra(a,b,c){sa[a]?t("100",a):void 0;sa[a]=b;ta[a]=b.eventTypes[c].dependencies;}var pa=[],qa={},sa={},ta={},ua=null,va=null,wa=null;function xa(a,b,c){var d=a.type||"unknown-event";a.currentTarget=wa(c);la(d,b,void 0,a);a.currentTarget=null;}function ya(a,b){null==b?t("30"):void 0;if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}
	function za(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a);}var Aa=null;function Ba(a){if(a){var b=a._dispatchListeners,c=a._dispatchInstances;if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++)xa(a,b[d],c[d]);else b&&xa(a,b,c);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a);}}
	var Ca={injectEventPluginOrder:function(a){ma?t("101"):void 0;ma=Array.prototype.slice.call(a);oa();},injectEventPluginsByName:function(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];na.hasOwnProperty(c)&&na[c]===d||(na[c]?t("102",c):void 0,na[c]=d,b=!0);}b&&oa();}};
	function Da(a,b){var c=a.stateNode;if(!c)return null;var d=ua(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1;}if(a)return null;c&&"function"!==typeof c?t("231",b,typeof c):void 0;
	return c}function Ea(a){null!==a&&(Aa=ya(Aa,a));a=Aa;Aa=null;if(a&&(za(a,Ba),Aa?t("95"):void 0,ha))throw a=ia,ha=!1,ia=null,a;}var Fa=Math.random().toString(36).slice(2),Ga="__reactInternalInstance$"+Fa,Ha="__reactEventHandlers$"+Fa;function Ia(a){if(a[Ga])return a[Ga];for(;!a[Ga];)if(a.parentNode)a=a.parentNode;else return null;a=a[Ga];return 5===a.tag||6===a.tag?a:null}function Ja(a){a=a[Ga];return !a||5!==a.tag&&6!==a.tag?null:a}
	function Ka(a){if(5===a.tag||6===a.tag)return a.stateNode;t("33");}function La(a){return a[Ha]||null}function Ma(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}function Na(a,b,c){if(b=Da(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=ya(c._dispatchListeners,b),c._dispatchInstances=ya(c._dispatchInstances,a);}
	function Oa(a){if(a&&a.dispatchConfig.phasedRegistrationNames){for(var b=a._targetInst,c=[];b;)c.push(b),b=Ma(b);for(b=c.length;0<b--;)Na(c[b],"captured",a);for(b=0;b<c.length;b++)Na(c[b],"bubbled",a);}}function Pa(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Da(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=ya(c._dispatchListeners,b),c._dispatchInstances=ya(c._dispatchInstances,a));}function Ra(a){za(a,Oa);}var Sa=!("undefined"===typeof window||!window.document||!window.document.createElement);function Ta(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Ua={animationend:Ta("Animation","AnimationEnd"),animationiteration:Ta("Animation","AnimationIteration"),animationstart:Ta("Animation","AnimationStart"),transitionend:Ta("Transition","TransitionEnd")},Va={},Wa={};
	Sa&&(Wa=document.createElement("div").style,"AnimationEvent"in window||(delete Ua.animationend.animation,delete Ua.animationiteration.animation,delete Ua.animationstart.animation),"TransitionEvent"in window||delete Ua.transitionend.transition);function Xa(a){if(Va[a])return Va[a];if(!Ua[a])return a;var b=Ua[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Wa)return Va[a]=b[c];return a}
	var Ya=Xa("animationend"),Za=Xa("animationiteration"),$a=Xa("animationstart"),ab=Xa("transitionend"),bb="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),cb=null,eb=null,fb=null;
	function gb(){if(fb)return fb;var a,b=eb,c=b.length,d,e="value"in cb?cb.value:cb.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return fb=e.slice(a,1<d?1-d:void 0)}function hb(){return !0}function ib(){return !1}
	function A(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?hb:ib;this.isPropagationStopped=ib;return this}
	objectAssign(A.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=hb);},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=hb);},persist:function(){this.isPersistent=hb;},isPersistent:ib,destructor:function(){var a=this.constructor.Interface,
	b;for(b in a)this[b]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null;this.isPropagationStopped=this.isDefaultPrevented=ib;this._dispatchInstances=this._dispatchListeners=null;}});A.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};
	A.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;objectAssign(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=objectAssign({},d.Interface,a);c.extend=d.extend;jb(c);return c};jb(A);function kb(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}function lb(a){a instanceof this?void 0:t("279");a.destructor();10>this.eventPool.length&&this.eventPool.push(a);}
	function jb(a){a.eventPool=[];a.getPooled=kb;a.release=lb;}var mb=A.extend({data:null}),nb=A.extend({data:null}),ob=[9,13,27,32],pb=Sa&&"CompositionEvent"in window,qb=null;Sa&&"documentMode"in document&&(qb=document.documentMode);
	var rb=Sa&&"TextEvent"in window&&!qb,sb=Sa&&(!pb||qb&&8<qb&&11>=qb),tb=String.fromCharCode(32),ub={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",
	captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},vb=!1;
	function wb(a,b){switch(a){case "keyup":return -1!==ob.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return !0;default:return !1}}function xb(a){a=a.detail;return "object"===typeof a&&"data"in a?a.data:null}var yb=!1;function zb(a,b){switch(a){case "compositionend":return xb(b);case "keypress":if(32!==b.which)return null;vb=!0;return tb;case "textInput":return a=b.data,a===tb&&vb?null:a;default:return null}}
	function Ab(a,b){if(yb)return "compositionend"===a||!pb&&wb(a,b)?(a=gb(),fb=eb=cb=null,yb=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return sb&&"ko"!==b.locale?null:b.data;default:return null}}
	var Bb={eventTypes:ub,extractEvents:function(a,b,c,d){var e=void 0;var f=void 0;if(pb)b:{switch(a){case "compositionstart":e=ub.compositionStart;break b;case "compositionend":e=ub.compositionEnd;break b;case "compositionupdate":e=ub.compositionUpdate;break b}e=void 0;}else yb?wb(a,c)&&(e=ub.compositionEnd):"keydown"===a&&229===c.keyCode&&(e=ub.compositionStart);e?(sb&&"ko"!==c.locale&&(yb||e!==ub.compositionStart?e===ub.compositionEnd&&yb&&(f=gb()):(cb=d,eb="value"in cb?cb.value:cb.textContent,yb=
	!0)),e=mb.getPooled(e,b,c,d),f?e.data=f:(f=xb(c),null!==f&&(e.data=f)),Ra(e),f=e):f=null;(a=rb?zb(a,c):Ab(a,c))?(b=nb.getPooled(ub.beforeInput,b,c,d),b.data=a,Ra(b)):b=null;return null===f?b:null===b?f:[f,b]}},Cb=null,Db=null,Eb=null;function Hb(a){if(a=va(a)){"function"!==typeof Cb?t("280"):void 0;var b=ua(a.stateNode);Cb(a.stateNode,a.type,b);}}function Ib(a){Db?Eb?Eb.push(a):Eb=[a]:Db=a;}function Jb(){if(Db){var a=Db,b=Eb;Eb=Db=null;Hb(a);if(b)for(a=0;a<b.length;a++)Hb(b[a]);}}
	function Kb(a,b){return a(b)}function Lb(a,b,c){return a(b,c)}function Mb(){}var Nb=!1;function Ob(a,b){if(Nb)return a(b);Nb=!0;try{return Kb(a,b)}finally{if(Nb=!1,null!==Db||null!==Eb)Mb(),Jb();}}var Pb={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Qb(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return "input"===b?!!Pb[a.type]:"textarea"===b?!0:!1}
	function Rb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}function Sb(a){if(!Sa)return !1;a="on"+a;var b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}function Tb(a){var b=a.type;return (a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
	function Ub(a){var b=Tb(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a);}});Object.defineProperty(a,b,{enumerable:c.enumerable});return {getValue:function(){return d},setValue:function(a){d=""+a;},stopTracking:function(){a._valueTracker=
	null;delete a[b];}}}}function Vb(a){a._valueTracker||(a._valueTracker=Ub(a));}function Wb(a){if(!a)return !1;var b=a._valueTracker;if(!b)return !0;var c=b.getValue();var d="";a&&(d=Tb(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}
	var Xb=react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Yb=/^(.*)[\\\/]/,D$1="function"===typeof Symbol&&Symbol.for,Zb=D$1?Symbol.for("react.element"):60103,$b=D$1?Symbol.for("react.portal"):60106,ac=D$1?Symbol.for("react.fragment"):60107,bc=D$1?Symbol.for("react.strict_mode"):60108,cc=D$1?Symbol.for("react.profiler"):60114,dc=D$1?Symbol.for("react.provider"):60109,ec=D$1?Symbol.for("react.context"):60110,fc=D$1?Symbol.for("react.concurrent_mode"):60111,gc=D$1?Symbol.for("react.forward_ref"):60112,hc=D$1?Symbol.for("react.suspense"):
	60113,ic=D$1?Symbol.for("react.memo"):60115,jc=D$1?Symbol.for("react.lazy"):60116,kc="function"===typeof Symbol&&Symbol.iterator;function lc(a){if(null===a||"object"!==typeof a)return null;a=kc&&a[kc]||a["@@iterator"];return "function"===typeof a?a:null}
	function mc(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case fc:return "ConcurrentMode";case ac:return "Fragment";case $b:return "Portal";case cc:return "Profiler";case bc:return "StrictMode";case hc:return "Suspense"}if("object"===typeof a)switch(a.$$typeof){case ec:return "Context.Consumer";case dc:return "Context.Provider";case gc:var b=a.render;b=b.displayName||b.name||"";return a.displayName||(""!==b?"ForwardRef("+b+
	")":"ForwardRef");case ic:return mc(a.type);case jc:if(a=1===a._status?a._result:null)return mc(a)}return null}function nc(a){var b="";do{a:switch(a.tag){case 2:case 16:case 0:case 1:case 5:case 8:case 13:var c=a._debugOwner,d=a._debugSource,e=mc(a.type);var f=null;c&&(f=mc(c.type));c=e;e="";d?e=" (at "+d.fileName.replace(Yb,"")+":"+d.lineNumber+")":f&&(e=" (created by "+f+")");f="\n    in "+(c||"Unknown")+e;break a;default:f="";}b+=f;a=a.return;}while(a);return b}
	var oc=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pc=Object.prototype.hasOwnProperty,qc={},rc={};
	function sc(a){if(pc.call(rc,a))return !0;if(pc.call(qc,a))return !1;if(oc.test(a))return rc[a]=!0;qc[a]=!0;return !1}function tc(a,b,c,d){if(null!==c&&0===c.type)return !1;switch(typeof b){case "function":case "symbol":return !0;case "boolean":if(d)return !1;if(null!==c)return !c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return "data-"!==a&&"aria-"!==a;default:return !1}}
	function uc(a,b,c,d){if(null===b||"undefined"===typeof b||tc(a,b,c,d))return !0;if(d)return !1;if(null!==c)switch(c.type){case 3:return !b;case 4:return !1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return !1}function E$1(a,b,c,d,e){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;}var F$1={};
	"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){F$1[a]=new E$1(a,0,!1,a,null);});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];F$1[b]=new E$1(b,1,!1,a[1],null);});["contentEditable","draggable","spellCheck","value"].forEach(function(a){F$1[a]=new E$1(a,2,!1,a.toLowerCase(),null);});
	["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){F$1[a]=new E$1(a,2,!1,a,null);});"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){F$1[a]=new E$1(a,3,!1,a.toLowerCase(),null);});["checked","multiple","muted","selected"].forEach(function(a){F$1[a]=new E$1(a,3,!0,a,null);});
	["capture","download"].forEach(function(a){F$1[a]=new E$1(a,4,!1,a,null);});["cols","rows","size","span"].forEach(function(a){F$1[a]=new E$1(a,6,!1,a,null);});["rowSpan","start"].forEach(function(a){F$1[a]=new E$1(a,5,!1,a.toLowerCase(),null);});var vc=/[\-:]([a-z])/g;function xc(a){return a[1].toUpperCase()}
	"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(vc,
	xc);F$1[b]=new E$1(b,1,!1,a,null);});"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(vc,xc);F$1[b]=new E$1(b,1,!1,a,"http://www.w3.org/1999/xlink");});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(vc,xc);F$1[b]=new E$1(b,1,!1,a,"http://www.w3.org/XML/1998/namespace");});F$1.tabIndex=new E$1("tabIndex",1,!1,"tabindex",null);
	function yc(a,b,c,d){var e=F$1.hasOwnProperty(b)?F$1[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(uc(b,c,e,d)&&(c=null),d||null===e?sc(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))));}
	function zc(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return ""}}function Ac(a,b){var c=b.checked;return objectAssign({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}
	function Bc(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=zc(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value};}function Cc(a,b){b=b.checked;null!=b&&yc(a,"checked",b,!1);}
	function Dc(a,b){Cc(a,b);var c=zc(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c;}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?Ec(a,b.type,c):b.hasOwnProperty("defaultValue")&&Ec(a,b.type,zc(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked);}
	function Fc(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b;}c=a.name;""!==c&&(a.name="");a.defaultChecked=!a.defaultChecked;a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c);}
	function Ec(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c);}var Gc={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Hc(a,b,c){a=A.getPooled(Gc.change,a,b,c);a.type="change";Ib(c);Ra(a);return a}var Jc=null,Kc=null;function Lc(a){Ea(a);}
	function Mc(a){var b=Ka(a);if(Wb(b))return a}function Nc(a,b){if("change"===a)return b}var Oc=!1;Sa&&(Oc=Sb("input")&&(!document.documentMode||9<document.documentMode));function Pc(){Jc&&(Jc.detachEvent("onpropertychange",Qc),Kc=Jc=null);}function Qc(a){"value"===a.propertyName&&Mc(Kc)&&(a=Hc(Kc,a,Rb(a)),Ob(Lc,a));}function Rc(a,b,c){"focus"===a?(Pc(),Jc=b,Kc=c,Jc.attachEvent("onpropertychange",Qc)):"blur"===a&&Pc();}function Sc(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return Mc(Kc)}
	function Tc(a,b){if("click"===a)return Mc(b)}function Uc(a,b){if("input"===a||"change"===a)return Mc(b)}
	var Vc={eventTypes:Gc,_isInputEventSupported:Oc,extractEvents:function(a,b,c,d){var e=b?Ka(b):window,f=void 0,g=void 0,h=e.nodeName&&e.nodeName.toLowerCase();"select"===h||"input"===h&&"file"===e.type?f=Nc:Qb(e)?Oc?f=Uc:(f=Sc,g=Rc):(h=e.nodeName)&&"input"===h.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(f=Tc);if(f&&(f=f(a,b)))return Hc(f,c,d);g&&g(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&Ec(e,"number",e.value);}},Wc=A.extend({view:null,detail:null}),Xc={Alt:"altKey",
	Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Yc(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Xc[a])?!!b[a]:!1}function Zc(){return Yc}
	var $c=0,ad=0,bd=!1,cd=!1,dd=Wc.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Zc,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)},movementX:function(a){if("movementX"in a)return a.movementX;var b=$c;$c=a.screenX;return bd?"mousemove"===a.type?a.screenX-b:0:(bd=!0,0)},movementY:function(a){if("movementY"in a)return a.movementY;
	var b=ad;ad=a.screenY;return cd?"mousemove"===a.type?a.screenY-b:0:(cd=!0,0)}}),ed=dd.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),fd={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",
	dependencies:["pointerout","pointerover"]}},gd={eventTypes:fd,extractEvents:function(a,b,c,d){var e="mouseover"===a||"pointerover"===a,f="mouseout"===a||"pointerout"===a;if(e&&(c.relatedTarget||c.fromElement)||!f&&!e)return null;e=d.window===d?d:(e=d.ownerDocument)?e.defaultView||e.parentWindow:window;f?(f=b,b=(b=c.relatedTarget||c.toElement)?Ia(b):null):f=null;if(f===b)return null;var g=void 0,h=void 0,k=void 0,l=void 0;if("mouseout"===a||"mouseover"===a)g=dd,h=fd.mouseLeave,k=fd.mouseEnter,l="mouse";
	else if("pointerout"===a||"pointerover"===a)g=ed,h=fd.pointerLeave,k=fd.pointerEnter,l="pointer";var m=null==f?e:Ka(f);e=null==b?e:Ka(b);a=g.getPooled(h,f,c,d);a.type=l+"leave";a.target=m;a.relatedTarget=e;c=g.getPooled(k,b,c,d);c.type=l+"enter";c.target=e;c.relatedTarget=m;d=b;if(f&&d)a:{b=f;e=d;l=0;for(g=b;g;g=Ma(g))l++;g=0;for(k=e;k;k=Ma(k))g++;for(;0<l-g;)b=Ma(b),l--;for(;0<g-l;)e=Ma(e),g--;for(;l--;){if(b===e||b===e.alternate)break a;b=Ma(b);e=Ma(e);}b=null;}else b=null;e=b;for(b=[];f&&f!==e;){l=
	f.alternate;if(null!==l&&l===e)break;b.push(f);f=Ma(f);}for(f=[];d&&d!==e;){l=d.alternate;if(null!==l&&l===e)break;f.push(d);d=Ma(d);}for(d=0;d<b.length;d++)Pa(b[d],"bubbled",a);for(d=f.length;0<d--;)Pa(f[d],"captured",c);return [a,c]}},hd=Object.prototype.hasOwnProperty;function id(a,b){return a===b?0!==a||0!==b||1/a===1/b:a!==a&&b!==b}
	function jd(a,b){if(id(a,b))return !0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return !1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return !1;for(d=0;d<c.length;d++)if(!hd.call(b,c[d])||!id(a[c[d]],b[c[d]]))return !1;return !0}function kd(a){var b=a;if(a.alternate)for(;b.return;)b=b.return;else{if(0!==(b.effectTag&2))return 1;for(;b.return;)if(b=b.return,0!==(b.effectTag&2))return 1}return 3===b.tag?2:3}function ld(a){2!==kd(a)?t("188"):void 0;}
	function md(a){var b=a.alternate;if(!b)return b=kd(a),3===b?t("188"):void 0,1===b?null:a;for(var c=a,d=b;;){var e=c.return,f=e?e.alternate:null;if(!e||!f)break;if(e.child===f.child){for(var g=e.child;g;){if(g===c)return ld(e),a;if(g===d)return ld(e),b;g=g.sibling;}t("188");}if(c.return!==d.return)c=e,d=f;else{g=!1;for(var h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling;}if(!g){for(h=f.child;h;){if(h===c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling;}g?
	void 0:t("189");}}c.alternate!==d?t("190"):void 0;}3!==c.tag?t("188"):void 0;return c.stateNode.current===c?a:b}function nd(a){a=md(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}}return null}
	var od=A.extend({animationName:null,elapsedTime:null,pseudoElement:null}),pd=A.extend({clipboardData:function(a){return "clipboardData"in a?a.clipboardData:window.clipboardData}}),qd=Wc.extend({relatedTarget:null});function rd(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}
	var sd={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},td={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",
	116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ud=Wc.extend({key:function(a){if(a.key){var b=sd[a.key]||a.key;if("Unidentified"!==b)return b}return "keypress"===a.type?(a=rd(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?td[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Zc,charCode:function(a){return "keypress"===
	a.type?rd(a):0},keyCode:function(a){return "keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return "keypress"===a.type?rd(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),vd=dd.extend({dataTransfer:null}),wd=Wc.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Zc}),xd=A.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),yd=dd.extend({deltaX:function(a){return "deltaX"in a?a.deltaX:"wheelDeltaX"in
	a?-a.wheelDeltaX:0},deltaY:function(a){return "deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),zd=[["abort","abort"],[Ya,"animationEnd"],[Za,"animationIteration"],[$a,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],
	["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],
	["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ab,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],Ad={},Bd={};function Cd(a,b){var c=a[0];a=a[1];var d="on"+(a[0].toUpperCase()+a.slice(1));b={phasedRegistrationNames:{bubbled:d,captured:d+"Capture"},dependencies:[c],isInteractive:b};Ad[a]=b;Bd[c]=b;}
	[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],
	["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(a){Cd(a,!0);});zd.forEach(function(a){Cd(a,!1);});
	var Dd={eventTypes:Ad,isInteractiveTopLevelEventType:function(a){a=Bd[a];return void 0!==a&&!0===a.isInteractive},extractEvents:function(a,b,c,d){var e=Bd[a];if(!e)return null;switch(a){case "keypress":if(0===rd(c))return null;case "keydown":case "keyup":a=ud;break;case "blur":case "focus":a=qd;break;case "click":if(2===c.button)return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=dd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=
	vd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=wd;break;case Ya:case Za:case $a:a=od;break;case ab:a=xd;break;case "scroll":a=Wc;break;case "wheel":a=yd;break;case "copy":case "cut":case "paste":a=pd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=ed;break;default:a=A;}b=a.getPooled(e,b,c,d);Ra(b);return b}},Ed=Dd.isInteractiveTopLevelEventType,
	Fd=[];function Gd(a){var b=a.targetInst,c=b;do{if(!c){a.ancestors.push(c);break}var d;for(d=c;d.return;)d=d.return;d=3!==d.tag?null:d.stateNode.containerInfo;if(!d)break;a.ancestors.push(c);c=Ia(d);}while(c);for(c=0;c<a.ancestors.length;c++){b=a.ancestors[c];var e=Rb(a.nativeEvent);d=a.topLevelType;for(var f=a.nativeEvent,g=null,h=0;h<pa.length;h++){var k=pa[h];k&&(k=k.extractEvents(d,b,f,e))&&(g=ya(g,k));}Ea(g);}}var Hd=!0;
	function G$1(a,b){if(!b)return null;var c=(Ed(a)?Id:Jd).bind(null,a);b.addEventListener(a,c,!1);}function Kd(a,b){if(!b)return null;var c=(Ed(a)?Id:Jd).bind(null,a);b.addEventListener(a,c,!0);}function Id(a,b){Lb(Jd,a,b);}
	function Jd(a,b){if(Hd){var c=Rb(b);c=Ia(c);null===c||"number"!==typeof c.tag||2===kd(c)||(c=null);if(Fd.length){var d=Fd.pop();d.topLevelType=a;d.nativeEvent=b;d.targetInst=c;a=d;}else a={topLevelType:a,nativeEvent:b,targetInst:c,ancestors:[]};try{Ob(Gd,a);}finally{a.topLevelType=null,a.nativeEvent=null,a.targetInst=null,a.ancestors.length=0,10>Fd.length&&Fd.push(a);}}}var Ld={},Md=0,Nd="_reactListenersID"+(""+Math.random()).slice(2);
	function Od(a){Object.prototype.hasOwnProperty.call(a,Nd)||(a[Nd]=Md++,Ld[a[Nd]]={});return Ld[a[Nd]]}function Pd(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}function Qd(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
	function Rd(a,b){var c=Qd(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return {node:c,offset:b-a};a=d;}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode;}c=void 0;}c=Qd(c);}}function Sd(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Sd(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}
	function Td(){for(var a=window,b=Pd();b instanceof a.HTMLIFrameElement;){try{a=b.contentDocument.defaultView;}catch(c){break}b=Pd(a.document);}return b}function Ud(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}
	var Vd=Sa&&"documentMode"in document&&11>=document.documentMode,Wd={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Xd=null,Yd=null,Zd=null,$d=!1;
	function ae(a,b){var c=b.window===b?b.document:9===b.nodeType?b:b.ownerDocument;if($d||null==Xd||Xd!==Pd(c))return null;c=Xd;"selectionStart"in c&&Ud(c)?c={start:c.selectionStart,end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset});return Zd&&jd(Zd,c)?null:(Zd=c,a=A.getPooled(Wd.select,Yd,a,b),a.type="select",a.target=Xd,Ra(a),a)}
	var be={eventTypes:Wd,extractEvents:function(a,b,c,d){var e=d.window===d?d.document:9===d.nodeType?d:d.ownerDocument,f;if(!(f=!e)){a:{e=Od(e);f=ta.onSelect;for(var g=0;g<f.length;g++){var h=f[g];if(!e.hasOwnProperty(h)||!e[h]){e=!1;break a}}e=!0;}f=!e;}if(f)return null;e=b?Ka(b):window;switch(a){case "focus":if(Qb(e)||"true"===e.contentEditable)Xd=e,Yd=b,Zd=null;break;case "blur":Zd=Yd=Xd=null;break;case "mousedown":$d=!0;break;case "contextmenu":case "mouseup":case "dragend":return $d=!1,ae(c,d);case "selectionchange":if(Vd)break;
	case "keydown":case "keyup":return ae(c,d)}return null}};Ca.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));ua=La;va=Ja;wa=Ka;Ca.injectEventPluginsByName({SimpleEventPlugin:Dd,EnterLeaveEventPlugin:gd,ChangeEventPlugin:Vc,SelectEventPlugin:be,BeforeInputEventPlugin:Bb});function de(a){var b="";react.Children.forEach(a,function(a){null!=a&&(b+=a);});return b}
	function ee(a,b){a=objectAssign({children:void 0},b);if(b=de(b.children))a.children=b;return a}function fe(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0);}else{c=""+zc(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e]);}null!==b&&(b.selected=!0);}}
	function ge(a,b){null!=b.dangerouslySetInnerHTML?t("91"):void 0;return objectAssign({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function he(a,b){var c=b.value;null==c&&(c=b.defaultValue,b=b.children,null!=b&&(null!=c?t("92"):void 0,Array.isArray(b)&&(1>=b.length?void 0:t("93"),b=b[0]),c=b),null==c&&(c=""));a._wrapperState={initialValue:zc(c)};}
	function ie(a,b){var c=zc(b.value),d=zc(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d);}function je(a){var b=a.textContent;b===a._wrapperState.initialValue&&(a.value=b);}var ke={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
	function le(a){switch(a){case "svg":return "http://www.w3.org/2000/svg";case "math":return "http://www.w3.org/1998/Math/MathML";default:return "http://www.w3.org/1999/xhtml"}}function me(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?le(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
	var ne=void 0,oe=function(a){return "undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)});}:a}(function(a,b){if(a.namespaceURI!==ke.svg||"innerHTML"in a)a.innerHTML=b;else{ne=ne||document.createElement("div");ne.innerHTML="<svg>"+b+"</svg>";for(b=ne.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild);}});
	function pe(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b;}
	var qe={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
	floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},re=["Webkit","ms","Moz","O"];Object.keys(qe).forEach(function(a){re.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);qe[b]=qe[a];});});function se(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||qe.hasOwnProperty(a)&&qe[a]?(""+b).trim():b+"px"}
	function te(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=se(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e;}}var ue=objectAssign({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
	function ve(a,b){b&&(ue[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML?t("137",a,""):void 0),null!=b.dangerouslySetInnerHTML&&(null!=b.children?t("60"):void 0,"object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML?void 0:t("61")),null!=b.style&&"object"!==typeof b.style?t("62",""):void 0);}
	function we(a,b){if(-1===a.indexOf("-"))return "string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return !1;default:return !0}}
	function xe(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=Od(a);b=ta[b];for(var d=0;d<b.length;d++){var e=b[d];if(!c.hasOwnProperty(e)||!c[e]){switch(e){case "scroll":Kd("scroll",a);break;case "focus":case "blur":Kd("focus",a);Kd("blur",a);c.blur=!0;c.focus=!0;break;case "cancel":case "close":Sb(e)&&Kd(e,a);break;case "invalid":case "submit":case "reset":break;default:-1===bb.indexOf(e)&&G$1(e,a);}c[e]=!0;}}}function ye(){}var ze=null,Ae=null;
	function Be(a,b){switch(a){case "button":case "input":case "select":case "textarea":return !!b.autoFocus}return !1}function Ce(a,b){return "textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var De="function"===typeof setTimeout?setTimeout:void 0,Ee="function"===typeof clearTimeout?clearTimeout:void 0;
	function Fe(a){for(a=a.nextSibling;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a}function Ge(a){for(a=a.firstChild;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a}var He=[],Ie=-1;function H$1(a){0>Ie||(a.current=He[Ie],He[Ie]=null,Ie--);}function I$1(a,b){Ie++;He[Ie]=a.current;a.current=b;}var Je={},J$1={current:Je},K={current:!1},Ke=Je;
	function Le(a,b){var c=a.type.contextTypes;if(!c)return Je;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function L(a){a=a.childContextTypes;return null!==a&&void 0!==a}function Me(a){H$1(K,a);H$1(J$1,a);}function Ne(a){H$1(K,a);H$1(J$1,a);}
	function Oe(a,b,c){J$1.current!==Je?t("168"):void 0;I$1(J$1,b,a);I$1(K,c,a);}function Pe(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)e in a?void 0:t("108",mc(b)||"Unknown",e);return objectAssign({},c,d)}function Qe(a){var b=a.stateNode;b=b&&b.__reactInternalMemoizedMergedChildContext||Je;Ke=J$1.current;I$1(J$1,b,a);I$1(K,K.current,a);return !0}
	function Re(a,b,c){var d=a.stateNode;d?void 0:t("169");c?(b=Pe(a,b,Ke),d.__reactInternalMemoizedMergedChildContext=b,H$1(K,a),H$1(J$1,a),I$1(J$1,b,a)):H$1(K,a);I$1(K,c,a);}var Se=null,Te=null;function Ue(a){return function(b){try{return a(b)}catch(c){}}}
	function Ve(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return !1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return !0;try{var c=b.inject(a);Se=Ue(function(a){return b.onCommitFiberRoot(c,a)});Te=Ue(function(a){return b.onCommitFiberUnmount(c,a)});}catch(d){}return !0}
	function We(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.firstContextDependency=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childExpirationTime=this.expirationTime=0;this.alternate=null;}function M(a,b,c,d){return new We(a,b,c,d)}
	function Xe(a){a=a.prototype;return !(!a||!a.isReactComponent)}function Ye(a){if("function"===typeof a)return Xe(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===gc)return 11;if(a===ic)return 14}return 2}
	function Ze(a,b){var c=a.alternate;null===c?(c=M(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.effectTag=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childExpirationTime=a.childExpirationTime;c.expirationTime=a.expirationTime;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;c.firstContextDependency=a.firstContextDependency;c.sibling=a.sibling;
	c.index=a.index;c.ref=a.ref;return c}
	function $e(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)Xe(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ac:return af(c.children,e,f,b);case fc:return bf(c,e|3,f,b);case bc:return bf(c,e|2,f,b);case cc:return a=M(12,c,b,e|4),a.elementType=cc,a.type=cc,a.expirationTime=f,a;case hc:return a=M(13,c,b,e),a.elementType=hc,a.type=hc,a.expirationTime=f,a;default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case dc:g=10;break a;case ec:g=9;break a;case gc:g=11;break a;case ic:g=
	14;break a;case jc:g=16;d=null;break a}t("130",null==a?a:typeof a,"");}b=M(g,c,b,e);b.elementType=a;b.type=d;b.expirationTime=f;return b}function af(a,b,c,d){a=M(7,a,d,b);a.expirationTime=c;return a}function bf(a,b,c,d){a=M(8,a,d,b);b=0===(b&1)?bc:fc;a.elementType=b;a.type=b;a.expirationTime=c;return a}function cf(a,b,c){a=M(6,a,null,b);a.expirationTime=c;return a}
	function df(a,b,c){b=M(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}function ef(a,b){a.didError=!1;var c=a.earliestPendingTime;0===c?a.earliestPendingTime=a.latestPendingTime=b:c<b?a.earliestPendingTime=b:a.latestPendingTime>b&&(a.latestPendingTime=b);ff(b,a);}
	function gf(a,b){a.didError=!1;var c=a.latestPingedTime;0!==c&&c>=b&&(a.latestPingedTime=0);c=a.earliestPendingTime;var d=a.latestPendingTime;c===b?a.earliestPendingTime=d===b?a.latestPendingTime=0:d:d===b&&(a.latestPendingTime=c);c=a.earliestSuspendedTime;d=a.latestSuspendedTime;0===c?a.earliestSuspendedTime=a.latestSuspendedTime=b:c<b?a.earliestSuspendedTime=b:d>b&&(a.latestSuspendedTime=b);ff(b,a);}
	function hf(a,b){var c=a.earliestPendingTime;a=a.earliestSuspendedTime;c>b&&(b=c);a>b&&(b=a);return b}function ff(a,b){var c=b.earliestSuspendedTime,d=b.latestSuspendedTime,e=b.earliestPendingTime,f=b.latestPingedTime;e=0!==e?e:f;0===e&&(0===a||d<a)&&(e=d);a=e;0!==a&&c>a&&(a=c);b.nextExpirationTimeToWorkOn=e;b.expirationTime=a;}var jf=!1;
	function kf(a){return {baseState:a,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function lf(a){return {baseState:a.baseState,firstUpdate:a.firstUpdate,lastUpdate:a.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}
	function mf(a){return {expirationTime:a,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function nf(a,b){null===a.lastUpdate?a.firstUpdate=a.lastUpdate=b:(a.lastUpdate.next=b,a.lastUpdate=b);}
	function of(a,b){var c=a.alternate;if(null===c){var d=a.updateQueue;var e=null;null===d&&(d=a.updateQueue=kf(a.memoizedState));}else d=a.updateQueue,e=c.updateQueue,null===d?null===e?(d=a.updateQueue=kf(a.memoizedState),e=c.updateQueue=kf(c.memoizedState)):d=a.updateQueue=lf(e):null===e&&(e=c.updateQueue=lf(d));null===e||d===e?nf(d,b):null===d.lastUpdate||null===e.lastUpdate?(nf(d,b),nf(e,b)):(nf(d,b),e.lastUpdate=b);}
	function pf(a,b){var c=a.updateQueue;c=null===c?a.updateQueue=kf(a.memoizedState):qf(a,c);null===c.lastCapturedUpdate?c.firstCapturedUpdate=c.lastCapturedUpdate=b:(c.lastCapturedUpdate.next=b,c.lastCapturedUpdate=b);}function qf(a,b){var c=a.alternate;null!==c&&b===c.updateQueue&&(b=a.updateQueue=lf(b));return b}
	function rf(a,b,c,d,e,f){switch(c.tag){case 1:return a=c.payload,"function"===typeof a?a.call(f,d,e):a;case 3:a.effectTag=a.effectTag&-2049|64;case 0:a=c.payload;e="function"===typeof a?a.call(f,d,e):a;if(null===e||void 0===e)break;return objectAssign({},d,e);case 2:jf=!0;}return d}
	function sf(a,b,c,d,e){jf=!1;b=qf(a,b);for(var f=b.baseState,g=null,h=0,k=b.firstUpdate,l=f;null!==k;){var m=k.expirationTime;m<e?(null===g&&(g=k,f=l),h<m&&(h=m)):(l=rf(a,b,k,l,c,d),null!==k.callback&&(a.effectTag|=32,k.nextEffect=null,null===b.lastEffect?b.firstEffect=b.lastEffect=k:(b.lastEffect.nextEffect=k,b.lastEffect=k)));k=k.next;}m=null;for(k=b.firstCapturedUpdate;null!==k;){var q=k.expirationTime;q<e?(null===m&&(m=k,null===g&&(f=l)),h<q&&(h=q)):(l=rf(a,b,k,l,c,d),null!==k.callback&&(a.effectTag|=
	32,k.nextEffect=null,null===b.lastCapturedEffect?b.firstCapturedEffect=b.lastCapturedEffect=k:(b.lastCapturedEffect.nextEffect=k,b.lastCapturedEffect=k)));k=k.next;}null===g&&(b.lastUpdate=null);null===m?b.lastCapturedUpdate=null:a.effectTag|=32;null===g&&null===m&&(f=l);b.baseState=f;b.firstUpdate=g;b.firstCapturedUpdate=m;a.expirationTime=h;a.memoizedState=l;}
	function tf(a,b,c){null!==b.firstCapturedUpdate&&(null!==b.lastUpdate&&(b.lastUpdate.next=b.firstCapturedUpdate,b.lastUpdate=b.lastCapturedUpdate),b.firstCapturedUpdate=b.lastCapturedUpdate=null);uf(b.firstEffect,c);b.firstEffect=b.lastEffect=null;uf(b.firstCapturedEffect,c);b.firstCapturedEffect=b.lastCapturedEffect=null;}function uf(a,b){for(;null!==a;){var c=a.callback;if(null!==c){a.callback=null;var d=b;"function"!==typeof c?t("191",c):void 0;c.call(d);}a=a.nextEffect;}}
	function vf(a,b){return {value:a,source:b,stack:nc(b)}}var wf={current:null},xf=null,yf=null,zf=null;function Af(a,b){var c=a.type._context;I$1(wf,c._currentValue,a);c._currentValue=b;}function Bf(a){var b=wf.current;H$1(wf,a);a.type._context._currentValue=b;}function Cf(a){xf=a;zf=yf=null;a.firstContextDependency=null;}
	function Df(a,b){if(zf!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)zf=a,b=1073741823;b={context:a,observedBits:b,next:null};null===yf?(null===xf?t("293"):void 0,xf.firstContextDependency=yf=b):yf=yf.next=b;}return a._currentValue}var Ef={},N={current:Ef},Ff={current:Ef},Gf={current:Ef};function Hf(a){a===Ef?t("174"):void 0;return a}
	function If(a,b){I$1(Gf,b,a);I$1(Ff,a,a);I$1(N,Ef,a);var c=b.nodeType;switch(c){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:me(null,"");break;default:c=8===c?b.parentNode:b,b=c.namespaceURI||null,c=c.tagName,b=me(b,c);}H$1(N,a);I$1(N,b,a);}function Jf(a){H$1(N,a);H$1(Ff,a);H$1(Gf,a);}function Kf(a){Hf(Gf.current);var b=Hf(N.current);var c=me(b,a.type);b!==c&&(I$1(Ff,a,a),I$1(N,c,a));}function Lf(a){Ff.current===a&&(H$1(N,a),H$1(Ff,a));}
	function O(a,b){if(a&&a.defaultProps){b=objectAssign({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);}return b}function Mf(a){var b=a._result;switch(a._status){case 1:return b;case 2:throw b;case 0:throw b;default:throw a._status=0,b=a._ctor,b=b(),b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b);},function(b){0===a._status&&(a._status=2,a._result=b);}),a._result=b,b;}}var Nf=Xb.ReactCurrentOwner,Of=(new react.Component).refs;
	function Pf(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:objectAssign({},b,c);a.memoizedState=c;d=a.updateQueue;null!==d&&0===a.expirationTime&&(d.baseState=c);}
	var Uf={isMounted:function(a){return (a=a._reactInternalFiber)?2===kd(a):!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=Qf();d=Rf(d,a);var e=mf(d);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);of(a,e);Tf(a,d);},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Qf();d=Rf(d,a);var e=mf(d);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);of(a,e);Tf(a,d);},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Qf();c=Rf(c,a);var d=mf(c);d.tag=
	2;void 0!==b&&null!==b&&(d.callback=b);of(a,d);Tf(a,c);}};function Vf(a,b,c,d,e,f,g){a=a.stateNode;return "function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!jd(c,d)||!jd(e,f):!0}
	function Wf(a,b,c){var d=!1,e=Je;var f=b.contextType;"object"===typeof f&&null!==f?f=Nf.currentDispatcher.readContext(f):(e=L(b)?Ke:J$1.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Le(a,e):Je);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Uf;a.stateNode=b;b._reactInternalFiber=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
	function Xf(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Uf.enqueueReplaceState(b,b.state,null);}
	function Yf(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Of;var f=b.contextType;"object"===typeof f&&null!==f?e.context=Nf.currentDispatcher.readContext(f):(f=L(b)?Ke:J$1.current,e.context=Le(a,f));f=a.updateQueue;null!==f&&(sf(a,f,c,e,d),e.state=a.memoizedState);f=b.getDerivedStateFromProps;"function"===typeof f&&(Pf(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&
	"function"!==typeof e.componentWillMount||(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Uf.enqueueReplaceState(e,e.state,null),f=a.updateQueue,null!==f&&(sf(a,f,c,e,d),e.state=a.memoizedState));"function"===typeof e.componentDidMount&&(a.effectTag|=4);}var Zf=Array.isArray;
	function $f(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;var d=void 0;c&&(1!==c.tag?t("289"):void 0,d=c.stateNode);d?void 0:t("147",a);var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Of&&(b=d.refs={});null===a?delete b[e]:b[e]=a;};b._stringRef=e;return b}"string"!==typeof a?t("284"):void 0;c._owner?void 0:t("290",a);}return a}
	function ag(a,b){"textarea"!==a.type&&t("31","[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,"");}
	function bg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8;}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b,c){a=Ze(a,b,c);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=
	2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=cf(c,a.mode,d),b.return=a,b;b=e(b,c,d);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props,d),d.ref=$f(a,b,c),d.return=a,d;d=$e(c.type,c.key,c.props,null,a.mode,d);d.ref=$f(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==
	c.implementation)return b=df(c,a.mode,d),b.return=a,b;b=e(b,c.children||[],d);b.return=a;return b}function m(a,b,c,d,g){if(null===b||7!==b.tag)return b=af(c,a.mode,d,g),b.return=a,b;b=e(b,c,d);b.return=a;return b}function q(a,b,c){if("string"===typeof b||"number"===typeof b)return b=cf(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case Zb:return c=$e(b.type,b.key,b.props,null,a.mode,c),c.ref=$f(a,null,b),c.return=a,c;case $b:return b=df(b,a.mode,c),b.return=a,b}if(Zf(b)||
	lc(b))return b=af(b,a.mode,c,null),b.return=a,b;ag(a,b);}return null}function x(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case Zb:return c.key===e?c.type===ac?m(a,b,c.props.children,d,e):k(a,b,c,d):null;case $b:return c.key===e?l(a,b,c,d):null}if(Zf(c)||lc(c))return null!==e?null:m(a,b,c,d,null);ag(a,c);}return null}function z(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=
	a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case Zb:return a=a.get(null===d.key?c:d.key)||null,d.type===ac?m(b,a,d.props.children,e,d.key):k(b,a,d,e);case $b:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Zf(d)||lc(d))return a=a.get(c)||null,m(b,a,d,e,null);ag(b,d);}return null}function B(e,g,h,k){for(var l=null,r=null,m=g,u=g=0,p=null;null!==m&&u<h.length;u++){m.index>u?(p=m,m=null):p=m.sibling;var v=x(e,m,h[u],k);if(null===v){null===m&&(m=p);break}a&&
	m&&null===v.alternate&&b(e,m);g=f(v,g,u);null===r?l=v:r.sibling=v;r=v;m=p;}if(u===h.length)return c(e,m),l;if(null===m){for(;u<h.length;u++)if(m=q(e,h[u],k))g=f(m,g,u),null===r?l=m:r.sibling=m,r=m;return l}for(m=d(e,m);u<h.length;u++)if(p=z(m,e,u,h[u],k))a&&null!==p.alternate&&m.delete(null===p.key?u:p.key),g=f(p,g,u),null===r?l=p:r.sibling=p,r=p;a&&m.forEach(function(a){return b(e,a)});return l}function Q(e,g,h,k){var l=lc(h);"function"!==typeof l?t("150"):void 0;h=l.call(h);null==h?t("151"):void 0;
	for(var m=l=null,r=g,u=g=0,p=null,v=h.next();null!==r&&!v.done;u++,v=h.next()){r.index>u?(p=r,r=null):p=r.sibling;var y=x(e,r,v.value,k);if(null===y){r||(r=p);break}a&&r&&null===y.alternate&&b(e,r);g=f(y,g,u);null===m?l=y:m.sibling=y;m=y;r=p;}if(v.done)return c(e,r),l;if(null===r){for(;!v.done;u++,v=h.next())v=q(e,v.value,k),null!==v&&(g=f(v,g,u),null===m?l=v:m.sibling=v,m=v);return l}for(r=d(e,r);!v.done;u++,v=h.next())v=z(r,e,u,v.value,k),null!==v&&(a&&null!==v.alternate&&r.delete(null===v.key?u:
	v.key),g=f(v,g,u),null===m?l=v:m.sibling=v,m=v);a&&r.forEach(function(a){return b(e,a)});return l}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ac&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case Zb:a:{l=f.key;for(k=d;null!==k;){if(k.key===l)if(7===k.tag?f.type===ac:k.elementType===f.type){c(a,k.sibling);d=e(k,f.type===ac?f.props.children:f.props,h);d.ref=$f(a,k,f);d.return=a;a=d;break a}else{c(a,k);break}else b(a,k);k=
	k.sibling;}f.type===ac?(d=af(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=$e(f.type,f.key,f.props,null,a.mode,h),h.ref=$f(a,d,f),h.return=a,a=h);}return g(a);case $b:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[],h);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling;}d=df(f,a.mode,h);d.return=a;a=d;}return g(a)}if("string"===typeof f||"number"===typeof f)return f=
	""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f,h),d.return=a,a=d):(c(a,d),d=cf(f,a.mode,h),d.return=a,a=d),g(a);if(Zf(f))return B(a,d,f,h);if(lc(f))return Q(a,d,f,h);l&&ag(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 0:h=a.type,t("152",h.displayName||h.name||"Component");}return c(a,d)}}var cg=bg(!0),dg=bg(!1),eg=null,fg=null,gg=!1;
	function hg(a,b){var c=M(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c;}function ig(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;default:return !1}}
	function jg(a){if(gg){var b=fg;if(b){var c=b;if(!ig(a,b)){b=Fe(c);if(!b||!ig(a,b)){a.effectTag|=2;gg=!1;eg=a;return}hg(eg,c);}eg=a;fg=Ge(b);}else a.effectTag|=2,gg=!1,eg=a;}}function kg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag;)a=a.return;eg=a;}function lg(a){if(a!==eg)return !1;if(!gg)return kg(a),gg=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!Ce(b,a.memoizedProps))for(b=fg;b;)hg(a,b),b=Fe(b);kg(a);fg=eg?Fe(a.stateNode):null;return !0}function mg(){fg=eg=null;gg=!1;}var ng=Xb.ReactCurrentOwner;
	function P(a,b,c,d){b.child=null===a?dg(b,null,c,d):cg(b,a.child,c,d);}function og(a,b,c,d,e){c=c.render;var f=b.ref;Cf(b,e);d=c(d,f);b.effectTag|=1;P(a,b,d,e);return b.child}
	function pg(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!Xe(g)&&void 0===g.defaultProps&&null===c.compare)return b.tag=15,b.type=g,qg(a,b,g,d,e,f);a=$e(c.type,null,d,null,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(e<f&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:jd,c(e,d)&&a.ref===b.ref))return rg(a,b,f);b.effectTag|=1;a=Ze(g,d,f);a.ref=b.ref;a.return=b;return b.child=a}
	function qg(a,b,c,d,e,f){return null!==a&&e<f&&jd(a.memoizedProps,d)&&a.ref===b.ref?rg(a,b,f):sg(a,b,c,d,f)}function tg(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128;}function sg(a,b,c,d,e){var f=L(c)?Ke:J$1.current;f=Le(b,f);Cf(b,e);c=c(d,f);b.effectTag|=1;P(a,b,c,e);return b.child}
	function ug(a,b,c,d,e){if(L(c)){var f=!0;Qe(b);}else f=!1;Cf(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),Wf(b,c,d,e),Yf(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=Nf.currentDispatcher.readContext(l):(l=L(c)?Ke:J$1.current,l=Le(b,l));var m=c.getDerivedStateFromProps,q="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;q||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&
	"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Xf(b,g,d,l);jf=!1;var x=b.memoizedState;k=g.state=x;var z=b.updateQueue;null!==z&&(sf(b,z,d,g,e),k=b.memoizedState);h!==d||x!==k||K.current||jf?("function"===typeof m&&(Pf(b,c,m,d),k=b.memoizedState),(h=jf||Vf(b,c,h,d,x,k,l))?(q||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&
	g.UNSAFE_componentWillMount()),"function"===typeof g.componentDidMount&&(b.effectTag|=4)):("function"===typeof g.componentDidMount&&(b.effectTag|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.effectTag|=4),d=!1);}else g=b.stateNode,h=b.memoizedProps,g.props=b.type===b.elementType?h:O(b.type,h),k=g.context,l=c.contextType,"object"===typeof l&&null!==l?l=Nf.currentDispatcher.readContext(l):(l=L(c)?Ke:J$1.current,l=Le(b,l)),m=c.getDerivedStateFromProps,
	(q="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Xf(b,g,d,l),jf=!1,k=b.memoizedState,x=g.state=k,z=b.updateQueue,null!==z&&(sf(b,z,d,g,e),x=b.memoizedState),h!==d||k!==x||K.current||jf?("function"===typeof m&&(Pf(b,c,m,d),x=b.memoizedState),(m=jf||Vf(b,c,h,d,k,x,l))?(q||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||
	("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,x,l),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,l)),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),b.memoizedProps=
	d,b.memoizedState=x),g.props=d,g.state=x,g.context=l,d=m):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),d=!1);return vg(a,b,c,d,f,e)}
	function vg(a,b,c,d,e,f){tg(a,b);var g=0!==(b.effectTag&64);if(!d&&!g)return e&&Re(b,c,!1),rg(a,b,f);d=b.stateNode;ng.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.effectTag|=1;null!==a&&g?(b.child=cg(b,a.child,null,f),b.child=cg(b,null,h,f)):P(a,b,h,f);b.memoizedState=d.state;e&&Re(b,c,!0);return b.child}function wg(a){var b=a.stateNode;b.pendingContext?Oe(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Oe(a,b.context,!1);If(a,b.containerInfo);}
	function xg(a,b,c){var d=b.mode,e=b.pendingProps,f=b.memoizedState;if(0===(b.effectTag&64)){f=null;var g=!1;}else f={timedOutAt:null!==f?f.timedOutAt:0},g=!0,b.effectTag&=-65;null===a?g?(g=e.fallback,e=af(null,d,0,null),0===(b.mode&1)&&(e.child=null!==b.memoizedState?b.child.child:b.child),d=af(g,d,c,null),e.sibling=d,c=e,c.return=d.return=b):c=d=dg(b,null,e.children,c):null!==a.memoizedState?(d=a.child,a=d.sibling,g?(c=e.fallback,e=Ze(d,d.pendingProps,0),0===(b.mode&1)&&(g=null!==b.memoizedState?
	b.child.child:b.child,g!==d.child&&(e.child=g)),d=e.sibling=Ze(a,c,a.expirationTime),c=e,e.childExpirationTime=0,c.return=d.return=b):c=d=cg(b,d.child,e.children,c)):(a=a.child,g?(g=e.fallback,e=af(null,d,0,null),e.child=a,0===(b.mode&1)&&(e.child=null!==b.memoizedState?b.child.child:b.child),d=e.sibling=af(g,d,c,null),d.effectTag|=2,c=e,e.childExpirationTime=0,c.return=d.return=b):d=c=cg(b,a,e.children,c));b.memoizedState=f;b.child=c;return d}
	function rg(a,b,c){null!==a&&(b.firstContextDependency=a.firstContextDependency);if(b.childExpirationTime<c)return null;null!==a&&b.child!==a.child?t("153"):void 0;if(null!==b.child){a=b.child;c=Ze(a,a.pendingProps,a.expirationTime);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Ze(a,a.pendingProps,a.expirationTime),c.return=b;c.sibling=null;}return b.child}
	function yg(a,b,c){var d=b.expirationTime;if(null!==a&&a.memoizedProps===b.pendingProps&&!K.current&&d<c){switch(b.tag){case 3:wg(b);mg();break;case 5:Kf(b);break;case 1:L(b.type)&&Qe(b);break;case 4:If(b,b.stateNode.containerInfo);break;case 10:Af(b,b.memoizedProps.value);break;case 13:if(null!==b.memoizedState){d=b.child.childExpirationTime;if(0!==d&&d>=c)return xg(a,b,c);b=rg(a,b,c);return null!==b?b.sibling:null}}return rg(a,b,c)}b.expirationTime=0;switch(b.tag){case 2:d=b.elementType;null!==
	a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;var e=Le(b,J$1.current);Cf(b,c);e=d(a,e);b.effectTag|=1;if("object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;if(L(d)){var f=!0;Qe(b);}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;var g=d.getDerivedStateFromProps;"function"===typeof g&&Pf(b,d,g,a);e.updater=Uf;b.stateNode=e;e._reactInternalFiber=b;Yf(b,d,a,c);b=vg(null,b,d,!0,f,c);}else b.tag=0,P(null,b,e,c),b=b.child;
	return b;case 16:e=b.elementType;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);f=b.pendingProps;a=Mf(e);b.type=a;e=b.tag=Ye(a);f=O(a,f);g=void 0;switch(e){case 0:g=sg(null,b,a,f,c);break;case 1:g=ug(null,b,a,f,c);break;case 11:g=og(null,b,a,f,c);break;case 14:g=pg(null,b,a,O(a.type,f),d,c);break;default:t("283",a);}return g;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:O(d,e),sg(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:O(d,e),ug(a,b,d,
	e,c);case 3:wg(b);d=b.updateQueue;null===d?t("282"):void 0;e=b.memoizedState;e=null!==e?e.element:null;sf(b,d,b.pendingProps,null,c);d=b.memoizedState.element;if(d===e)mg(),b=rg(a,b,c);else{e=b.stateNode;if(e=(null===a||null===a.child)&&e.hydrate)fg=Ge(b.stateNode.containerInfo),eg=b,e=gg=!0;e?(b.effectTag|=2,b.child=dg(b,null,d,c)):(P(a,b,d,c),mg());b=b.child;}return b;case 5:return Kf(b),null===a&&jg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ce(d,e)?g=null:null!==
	f&&Ce(d,f)&&(b.effectTag|=16),tg(a,b),1!==c&&b.mode&1&&e.hidden?(b.expirationTime=1,b=null):(P(a,b,g,c),b=b.child),b;case 6:return null===a&&jg(b),null;case 13:return xg(a,b,c);case 4:return If(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=cg(b,null,d,c):P(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:O(d,e),og(a,b,d,e,c);case 7:return P(a,b,b.pendingProps,c),b.child;case 8:return P(a,b,b.pendingProps.children,c),b.child;case 12:return P(a,b,b.pendingProps.children,
	c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;Af(b,f);if(null!==g){var h=g.value;f=h===f&&(0!==h||1/h===1/f)||h!==h&&f!==f?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0;if(0===f){if(g.children===e.children&&!K.current){b=rg(a,b,c);break a}}else for(g=b.child,null!==g&&(g.return=b);null!==g;){h=g.firstContextDependency;if(null!==h){do{if(h.context===d&&0!==(h.observedBits&f)){if(1===g.tag){var k=mf(c);k.tag=2;of(g,k);}g.expirationTime<
	c&&(g.expirationTime=c);k=g.alternate;null!==k&&k.expirationTime<c&&(k.expirationTime=c);for(var l=g.return;null!==l;){k=l.alternate;if(l.childExpirationTime<c)l.childExpirationTime=c,null!==k&&k.childExpirationTime<c&&(k.childExpirationTime=c);else if(null!==k&&k.childExpirationTime<c)k.childExpirationTime=c;else break;l=l.return;}}k=g.child;h=h.next;}while(null!==h)}else k=10===g.tag?g.type===b.type?null:g.child:g.child;if(null!==k)k.return=g;else for(k=g;null!==k;){if(k===b){k=null;break}g=k.sibling;
	if(null!==g){g.return=k.return;k=g;break}k=k.return;}g=k;}}P(a,b,e.children,c);b=b.child;}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,Cf(b,c),e=Df(e,f.unstable_observedBits),d=d(e),b.effectTag|=1,P(a,b,d,c),b.child;case 14:return e=b.type,f=O(e.type,b.pendingProps),pg(a,b,e,f,d,c);case 15:return qg(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:O(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),b.tag=1,L(d)?(a=!0,Qe(b)):
	a=!1,Cf(b,c),Wf(b,d,e,c),Yf(b,d,e,c),vg(null,b,d,!0,a,c);default:t("156");}}function zg(a){a.effectTag|=4;}var Ag=void 0,Bg=void 0,Fg=void 0,Gg=void 0;Ag=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}};Bg=function(){};
	Fg=function(a,b,c,d,e){var f=a.memoizedProps;if(f!==d){var g=b.stateNode;Hf(N.current);a=null;switch(c){case "input":f=Ac(g,f);d=Ac(g,d);a=[];break;case "option":f=ee(g,f);d=ee(g,d);a=[];break;case "select":f=objectAssign({},f,{value:void 0});d=objectAssign({},d,{value:void 0});a=[];break;case "textarea":f=ge(g,f);d=ge(g,d);a=[];break;default:"function"!==typeof f.onClick&&"function"===typeof d.onClick&&(g.onclick=ye);}ve(c,d);g=c=void 0;var h=null;for(c in f)if(!d.hasOwnProperty(c)&&f.hasOwnProperty(c)&&null!=f[c])if("style"===
	c){var k=f[c];for(g in k)k.hasOwnProperty(g)&&(h||(h={}),h[g]="");}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(sa.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in d){var l=d[c];k=null!=f?f[c]:void 0;if(d.hasOwnProperty(c)&&l!==k&&(null!=l||null!=k))if("style"===c)if(k){for(g in k)!k.hasOwnProperty(g)||l&&l.hasOwnProperty(g)||(h||(h={}),h[g]="");for(g in l)l.hasOwnProperty(g)&&k[g]!==l[g]&&(h||
	(h={}),h[g]=l[g]);}else h||(a||(a=[]),a.push(c,h)),h=l;else"dangerouslySetInnerHTML"===c?(l=l?l.__html:void 0,k=k?k.__html:void 0,null!=l&&k!==l&&(a=a||[]).push(c,""+l)):"children"===c?k===l||"string"!==typeof l&&"number"!==typeof l||(a=a||[]).push(c,""+l):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(sa.hasOwnProperty(c)?(null!=l&&xe(e,c),a||k===l||(a=[])):(a=a||[]).push(c,l));}h&&(a=a||[]).push("style",h);e=a;(b.updateQueue=e)&&zg(b);}};Gg=function(a,b,c,d){c!==d&&zg(b);};
	function Hg(a,b){var c=b.source,d=b.stack;null===d&&null!==c&&(d=nc(c));null!==c&&mc(c.type);b=b.value;null!==a&&1===a.tag&&mc(a.type);try{console.error(b);}catch(e){setTimeout(function(){throw e;});}}function Ig(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null);}catch(c){Jg(a,c);}else b.current=null;}
	function Kg(a){"function"===typeof Te&&Te(a);switch(a.tag){case 0:case 11:case 14:case 15:var b=a.updateQueue;if(null!==b&&(b=b.lastEffect,null!==b)){var c=b=b.next;do{var d=c.destroy;if(null!==d){var e=a;try{d();}catch(f){Jg(e,f);}}c=c.next;}while(c!==b)}break;case 1:Ig(a);b=a.stateNode;if("function"===typeof b.componentWillUnmount)try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount();}catch(f){Jg(a,f);}break;case 5:Ig(a);break;case 4:Lg(a);}}
	function Mg(a){return 5===a.tag||3===a.tag||4===a.tag}
	function Ng(a){a:{for(var b=a.return;null!==b;){if(Mg(b)){var c=b;break a}b=b.return;}t("160");c=void 0;}var d=b=void 0;switch(c.tag){case 5:b=c.stateNode;d=!1;break;case 3:b=c.stateNode.containerInfo;d=!0;break;case 4:b=c.stateNode.containerInfo;d=!0;break;default:t("161");}c.effectTag&16&&(pe(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||Mg(c.return)){c=null;break a}c=c.return;}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag;){if(c.effectTag&2)continue b;
	if(null===c.child||4===c.tag)continue b;else c.child.return=c,c=c.child;}if(!(c.effectTag&2)){c=c.stateNode;break a}}for(var e=a;;){if(5===e.tag||6===e.tag)if(c)if(d){var f=b,g=e.stateNode,h=c;8===f.nodeType?f.parentNode.insertBefore(g,h):f.insertBefore(g,h);}else b.insertBefore(e.stateNode,c);else d?(g=b,h=e.stateNode,8===g.nodeType?(f=g.parentNode,f.insertBefore(h,g)):(f=g,f.appendChild(h)),g=g._reactRootContainer,null!==g&&void 0!==g||null!==f.onclick||(f.onclick=ye)):b.appendChild(e.stateNode);
	else if(4!==e.tag&&null!==e.child){e.child.return=e;e=e.child;continue}if(e===a)break;for(;null===e.sibling;){if(null===e.return||e.return===a)return;e=e.return;}e.sibling.return=e.return;e=e.sibling;}}
	function Lg(a){for(var b=a,c=!1,d=void 0,e=void 0;;){if(!c){c=b.return;a:for(;;){null===c?t("160"):void 0;switch(c.tag){case 5:d=c.stateNode;e=!1;break a;case 3:d=c.stateNode.containerInfo;e=!0;break a;case 4:d=c.stateNode.containerInfo;e=!0;break a}c=c.return;}c=!0;}if(5===b.tag||6===b.tag){a:for(var f=b,g=f;;)if(Kg(g),null!==g.child&&4!==g.tag)g.child.return=g,g=g.child;else{if(g===f)break;for(;null===g.sibling;){if(null===g.return||g.return===f)break a;g=g.return;}g.sibling.return=g.return;g=g.sibling;}e?
	(f=d,g=b.stateNode,8===f.nodeType?f.parentNode.removeChild(g):f.removeChild(g)):d.removeChild(b.stateNode);}else if(4===b.tag?(d=b.stateNode.containerInfo,e=!0):Kg(b),null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return;b=b.return;4===b.tag&&(c=!1);}b.sibling.return=b.return;b=b.sibling;}}
	function Og(a,b){switch(b.tag){case 0:case 11:case 14:case 15:break;case 1:break;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps,e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[Ha]=d;"input"===a&&"radio"===d.type&&null!=d.name&&Cc(c,d);we(a,e);b=we(a,d);for(e=0;e<f.length;e+=2){var g=f[e],h=f[e+1];"style"===g?te(c,h):"dangerouslySetInnerHTML"===g?oe(c,h):"children"===g?pe(c,h):yc(c,g,h,b);}switch(a){case "input":Dc(c,d);break;case "textarea":ie(c,
	d);break;case "select":b=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,a=d.value,null!=a?fe(c,!!d.multiple,a,!1):b!==!!d.multiple&&(null!=d.defaultValue?fe(c,!!d.multiple,d.defaultValue,!0):fe(c,!!d.multiple,d.multiple?[]:"",!1));}}}break;case 6:null===b.stateNode?t("162"):void 0;b.stateNode.nodeValue=b.memoizedProps;break;case 3:break;case 12:break;case 13:c=b.memoizedState;a=b;null===c?d=!1:(d=!0,a=b.child,0===c.timedOutAt&&(c.timedOutAt=Qf()));if(null!==a)a:for(b=c=a;;){if(5===
	b.tag)a=b.stateNode,d?a.style.display="none":(a=b.stateNode,f=b.memoizedProps.style,f=void 0!==f&&null!==f&&f.hasOwnProperty("display")?f.display:null,a.style.display=se("display",f));else if(6===b.tag)b.stateNode.nodeValue=d?"":b.memoizedProps;else if(13===b.tag&&null!==b.memoizedState){a=b.child.sibling;a.return=b;b=a;continue}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===c)break a;for(;null===b.sibling;){if(null===b.return||b.return===c)break a;b=b.return;}b.sibling.return=
	b.return;b=b.sibling;}break;case 17:break;default:t("163");}}function Pg(a,b,c){c=mf(c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Qg(d);Hg(a,b);};return c}
	function Rg(a,b,c){c=mf(c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){return d(e)};}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===Sg?Sg=new Set([this]):Sg.add(this));var c=b.value,e=b.stack;Hg(a,b);this.componentDidCatch(c,{componentStack:null!==e?e:""});});return c}
	function Tg(a){switch(a.tag){case 1:L(a.type)&&Me(a);var b=a.effectTag;return b&2048?(a.effectTag=b&-2049|64,a):null;case 3:return Jf(a),Ne(a),b=a.effectTag,0!==(b&64)?t("285"):void 0,a.effectTag=b&-2049|64,a;case 5:return Lf(a),null;case 13:return b=a.effectTag,b&2048?(a.effectTag=b&-2049|64,a):null;case 4:return Jf(a),null;case 10:return Bf(a),null;default:return null}}
	var Ug={readContext:Df},Vg=Xb.ReactCurrentOwner,Xg=0,Yg=!1,R=null,S=null,T=0,Zg=-1,$g=!1,U=null,ah=!1,Sg=null;function dh(){if(null!==R)for(var a=R.return;null!==a;){var b=a;switch(b.tag){case 1:var c=b.type.childContextTypes;null!==c&&void 0!==c&&Me(b);break;case 3:Jf(b);Ne(b);break;case 5:Lf(b);break;case 4:Jf(b);break;case 10:Bf(b);}a=a.return;}S=null;T=0;Zg=-1;$g=!1;R=null;}function eh(a){for(;;){var b=a.alternate,c=a.return,d=a.sibling;if(0===(a.effectTag&1024)){R=a;a:{var e=b;b=a;var f=T;var g=b.pendingProps;switch(b.tag){case 2:break;case 16:break;case 15:case 0:break;case 1:L(b.type)&&Me(b);break;case 3:Jf(b);Ne(b);g=b.stateNode;g.pendingContext&&(g.context=g.pendingContext,g.pendingContext=null);if(null===e||null===e.child)lg(b),b.effectTag&=-3;Bg(b);break;case 5:Lf(b);var h=Hf(Gf.current);f=b.type;if(null!==e&&null!=b.stateNode)Fg(e,b,f,g,h),e.ref!==b.ref&&(b.effectTag|=
	128);else if(g){var k=Hf(N.current);if(lg(b)){g=b;e=g.stateNode;var l=g.type,m=g.memoizedProps,q=h;e[Ga]=g;e[Ha]=m;f=void 0;h=l;switch(h){case "iframe":case "object":G$1("load",e);break;case "video":case "audio":for(l=0;l<bb.length;l++)G$1(bb[l],e);break;case "source":G$1("error",e);break;case "img":case "image":case "link":G$1("error",e);G$1("load",e);break;case "form":G$1("reset",e);G$1("submit",e);break;case "details":G$1("toggle",e);break;case "input":Bc(e,m);G$1("invalid",e);xe(q,"onChange");break;case "select":e._wrapperState=
	{wasMultiple:!!m.multiple};G$1("invalid",e);xe(q,"onChange");break;case "textarea":he(e,m),G$1("invalid",e),xe(q,"onChange");}ve(h,m);l=null;for(f in m)m.hasOwnProperty(f)&&(k=m[f],"children"===f?"string"===typeof k?e.textContent!==k&&(l=["children",k]):"number"===typeof k&&e.textContent!==""+k&&(l=["children",""+k]):sa.hasOwnProperty(f)&&null!=k&&xe(q,f));switch(h){case "input":Vb(e);Fc(e,m,!0);break;case "textarea":Vb(e);je(e,m);break;case "select":case "option":break;default:"function"===typeof m.onClick&&
	(e.onclick=ye);}f=l;g.updateQueue=f;g=null!==f?!0:!1;g&&zg(b);}else{m=b;e=f;q=g;l=9===h.nodeType?h:h.ownerDocument;k===ke.html&&(k=le(e));k===ke.html?"script"===e?(e=l.createElement("div"),e.innerHTML="<script>\x3c/script>",l=e.removeChild(e.firstChild)):"string"===typeof q.is?l=l.createElement(e,{is:q.is}):(l=l.createElement(e),"select"===e&&q.multiple&&(l.multiple=!0)):l=l.createElementNS(k,e);e=l;e[Ga]=m;e[Ha]=g;Ag(e,b,!1,!1);q=e;l=f;m=g;var x=h,z=we(l,m);switch(l){case "iframe":case "object":G$1("load",
	q);h=m;break;case "video":case "audio":for(h=0;h<bb.length;h++)G$1(bb[h],q);h=m;break;case "source":G$1("error",q);h=m;break;case "img":case "image":case "link":G$1("error",q);G$1("load",q);h=m;break;case "form":G$1("reset",q);G$1("submit",q);h=m;break;case "details":G$1("toggle",q);h=m;break;case "input":Bc(q,m);h=Ac(q,m);G$1("invalid",q);xe(x,"onChange");break;case "option":h=ee(q,m);break;case "select":q._wrapperState={wasMultiple:!!m.multiple};h=objectAssign({},m,{value:void 0});G$1("invalid",q);xe(x,"onChange");break;case "textarea":he(q,
	m);h=ge(q,m);G$1("invalid",q);xe(x,"onChange");break;default:h=m;}ve(l,h);k=void 0;var B=l,Q=q,v=h;for(k in v)if(v.hasOwnProperty(k)){var r=v[k];"style"===k?te(Q,r):"dangerouslySetInnerHTML"===k?(r=r?r.__html:void 0,null!=r&&oe(Q,r)):"children"===k?"string"===typeof r?("textarea"!==B||""!==r)&&pe(Q,r):"number"===typeof r&&pe(Q,""+r):"suppressContentEditableWarning"!==k&&"suppressHydrationWarning"!==k&&"autoFocus"!==k&&(sa.hasOwnProperty(k)?null!=r&&xe(x,k):null!=r&&yc(Q,k,r,z));}switch(l){case "input":Vb(q);
	Fc(q,m,!1);break;case "textarea":Vb(q);je(q,m);break;case "option":null!=m.value&&q.setAttribute("value",""+zc(m.value));break;case "select":h=q;h.multiple=!!m.multiple;q=m.value;null!=q?fe(h,!!m.multiple,q,!1):null!=m.defaultValue&&fe(h,!!m.multiple,m.defaultValue,!0);break;default:"function"===typeof h.onClick&&(q.onclick=ye);}(g=Be(f,g))&&zg(b);b.stateNode=e;}null!==b.ref&&(b.effectTag|=128);}else null===b.stateNode?t("166"):void 0;break;case 6:e&&null!=b.stateNode?Gg(e,b,e.memoizedProps,g):("string"!==
	typeof g&&(null===b.stateNode?t("166"):void 0),e=Hf(Gf.current),Hf(N.current),lg(b)?(g=b,f=g.stateNode,e=g.memoizedProps,f[Ga]=g,(g=f.nodeValue!==e)&&zg(b)):(f=b,g=(9===e.nodeType?e:e.ownerDocument).createTextNode(g),g[Ga]=b,f.stateNode=g));break;case 11:break;case 13:g=b.memoizedState;if(0!==(b.effectTag&64)){b.expirationTime=f;R=b;break a}g=null!==g;f=null!==e&&null!==e.memoizedState;null!==e&&!g&&f&&(e=e.child.sibling,null!==e&&(h=b.firstEffect,null!==h?(b.firstEffect=e,e.nextEffect=h):(b.firstEffect=
	b.lastEffect=e,e.nextEffect=null),e.effectTag=8));if(g!==f||0===(b.effectTag&1)&&g)b.effectTag|=4;break;case 7:break;case 8:break;case 12:break;case 4:Jf(b);Bg(b);break;case 10:Bf(b);break;case 9:break;case 14:break;case 17:L(b.type)&&Me(b);break;default:t("156");}R=null;}b=a;if(1===T||1!==b.childExpirationTime){g=0;for(f=b.child;null!==f;)e=f.expirationTime,h=f.childExpirationTime,e>g&&(g=e),h>g&&(g=h),f=f.sibling;b.childExpirationTime=g;}if(null!==R)return R;null!==c&&0===(c.effectTag&1024)&&(null===
	c.firstEffect&&(c.firstEffect=a.firstEffect),null!==a.lastEffect&&(null!==c.lastEffect&&(c.lastEffect.nextEffect=a.firstEffect),c.lastEffect=a.lastEffect),1<a.effectTag&&(null!==c.lastEffect?c.lastEffect.nextEffect=a:c.firstEffect=a,c.lastEffect=a));}else{a=Tg(a,T);if(null!==a)return a.effectTag&=1023,a;null!==c&&(c.firstEffect=c.lastEffect=null,c.effectTag|=1024);}if(null!==d)return d;if(null!==c)a=c;else break}return null}
	function fh(a){var b=yg(a.alternate,a,T);a.memoizedProps=a.pendingProps;null===b&&(b=eh(a));Vg.current=null;return b}
	function gh(a,b){Yg?t("243"):void 0;Yg=!0;Vg.currentDispatcher=Ug;var c=a.nextExpirationTimeToWorkOn;if(c!==T||a!==S||null===R)dh(),S=a,T=c,R=Ze(S.current,null,T),a.pendingCommitExpirationTime=0;var d=!1;do{try{if(b)for(;null!==R&&!hh();)R=fh(R);else for(;null!==R;)R=fh(R);}catch(B){if(zf=yf=xf=null,null===R)d=!0,Qg(B);else{null===R?t("271"):void 0;var e=R,f=e.return;if(null===f)d=!0,Qg(B);else{a:{var g=a,h=f,k=e,l=B;f=T;k.effectTag|=1024;k.firstEffect=k.lastEffect=null;if(null!==l&&"object"===
	typeof l&&"function"===typeof l.then){var m=l;l=h;var q=-1,x=-1;do{if(13===l.tag){var z=l.alternate;if(null!==z&&(z=z.memoizedState,null!==z)){x=10*(1073741822-z.timedOutAt);break}z=l.pendingProps.maxDuration;if("number"===typeof z)if(0>=z)q=0;else if(-1===q||z<q)q=z;}l=l.return;}while(null!==l);l=h;do{if(z=13===l.tag)z=void 0===l.memoizedProps.fallback?!1:null===l.memoizedState;if(z){h=ih.bind(null,g,l,k,0===(l.mode&1)?1073741823:f);m.then(h,h);if(0===(l.mode&1)){l.effectTag|=64;k.effectTag&=-1957;
	1===k.tag&&null===k.alternate&&(k.tag=17);k.expirationTime=f;break a}-1===q?g=1073741823:(-1===x&&(x=10*(1073741822-hf(g,f))-5E3),g=x+q);0<=g&&Zg<g&&(Zg=g);l.effectTag|=2048;l.expirationTime=f;break a}l=l.return;}while(null!==l);l=Error((mc(k.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+nc(k));}$g=!0;l=vf(l,k);g=h;do{switch(g.tag){case 3:k=
	l;g.effectTag|=2048;g.expirationTime=f;f=Pg(g,k,f);pf(g,f);break a;case 1:if(k=l,h=g.type,m=g.stateNode,0===(g.effectTag&64)&&("function"===typeof h.getDerivedStateFromError||null!==m&&"function"===typeof m.componentDidCatch&&(null===Sg||!Sg.has(m)))){g.effectTag|=2048;g.expirationTime=f;f=Rg(g,k,f);pf(g,f);break a}}g=g.return;}while(null!==g)}R=eh(e);continue}}}break}while(1);Yg=!1;zf=yf=xf=Vg.currentDispatcher=null;if(d)S=null,a.finishedWork=null;else if(null!==R)a.finishedWork=null;else{d=a.current.alternate;
	null===d?t("281"):void 0;S=null;if($g){e=a.latestPendingTime;f=a.latestSuspendedTime;g=a.latestPingedTime;if(0!==e&&e<c||0!==f&&f<c||0!==g&&g<c){gf(a,c);jh(a,d,c,a.expirationTime,-1);return}if(!a.didError&&b){a.didError=!0;c=a.nextExpirationTimeToWorkOn=c;b=a.expirationTime=1073741823;jh(a,d,c,b,-1);return}}b&&-1!==Zg?(gf(a,c),b=10*(1073741822-hf(a,c)),b<Zg&&(Zg=b),b=10*(1073741822-Qf()),b=Zg-b,jh(a,d,c,a.expirationTime,0>b?0:b)):(a.pendingCommitExpirationTime=c,a.finishedWork=d);}}
	function Jg(a,b){for(var c=a.return;null!==c;){switch(c.tag){case 1:var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Sg||!Sg.has(d))){a=vf(b,a);a=Rg(c,a,1073741823);of(c,a);Tf(c,1073741823);return}break;case 3:a=vf(b,a);a=Pg(c,a,1073741823);of(c,a);Tf(c,1073741823);return}c=c.return;}3===a.tag&&(c=vf(b,a),c=Pg(a,c,1073741823),of(a,c),Tf(a,1073741823));}
	function Rf(a,b){0!==Xg?a=Xg:Yg?a=ah?1073741823:T:b.mode&1?(a=kh?1073741822-10*(((1073741822-a+15)/10|0)+1):1073741822-25*(((1073741822-a+500)/25|0)+1),null!==S&&a===T&&--a):a=1073741823;kh&&(0===lh||a<lh)&&(lh=a);return a}
	function ih(a,b,c,d){var e=a.earliestSuspendedTime;var f=a.latestSuspendedTime;if(0!==e&&d<=e&&d>=f){f=e=d;a.didError=!1;var g=a.latestPingedTime;if(0===g||g>f)a.latestPingedTime=f;ff(f,a);}else e=Qf(),e=Rf(e,b),ef(a,e);0!==(b.mode&1)&&a===S&&T===d&&(S=null);mh(b,e);0===(b.mode&1)&&(mh(c,e),1===c.tag&&null!==c.stateNode&&(b=mf(e),b.tag=2,of(c,b)));c=a.expirationTime;0!==c&&nh(a,c);}
	function mh(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);var d=a.return,e=null;if(null===d&&3===a.tag)e=a.stateNode;else for(;null!==d;){c=d.alternate;d.childExpirationTime<b&&(d.childExpirationTime=b);null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);if(null===d.return&&3===d.tag){e=d.stateNode;break}d=d.return;}return e}
	function Tf(a,b){a=mh(a,b);null!==a&&(!Yg&&0!==T&&b>T&&dh(),ef(a,b),Yg&&!ah&&S===a||nh(a,a.expirationTime),oh>ph&&(oh=0,t("185")));}var rh=null,V=null,sh=0,th=void 0,W=!1,uh=null,X=0,lh=0,vh=!1,wh=null,Z=!1,xh=!1,kh=!1,yh=null,zh=scheduler.unstable_now(),Ah=1073741822-(zh/10|0),Bh=Ah,ph=50,oh=0,Ch=null;function Dh(){Ah=1073741822-((scheduler.unstable_now()-zh)/10|0);}
	function Eh(a,b){if(0!==sh){if(b<sh)return;null!==th&&scheduler.unstable_cancelCallback(th);}sh=b;a=scheduler.unstable_now()-zh;th=scheduler.unstable_scheduleCallback(Fh,{timeout:10*(1073741822-b)-a});}function jh(a,b,c,d,e){a.expirationTime=d;0!==e||hh()?0<e&&(a.timeoutHandle=De(Gh.bind(null,a,b,c),e)):(a.pendingCommitExpirationTime=c,a.finishedWork=b);}function Gh(a,b,c){a.pendingCommitExpirationTime=c;a.finishedWork=b;Dh();Bh=Ah;Hh(a,c);}function Qf(){if(W)return Bh;Ih();if(0===X||1===X)Dh(),Bh=Ah;return Bh}
	function nh(a,b){null===a.nextScheduledRoot?(a.expirationTime=b,null===V?(rh=V=a,a.nextScheduledRoot=a):(V=V.nextScheduledRoot=a,V.nextScheduledRoot=rh)):b>a.expirationTime&&(a.expirationTime=b);W||(Z?xh&&(uh=a,X=1073741823,Jh(a,1073741823,!1)):1073741823===b?Kh(1073741823,!1):Eh(a,b));}
	function Ih(){var a=0,b=null;if(null!==V)for(var c=V,d=rh;null!==d;){var e=d.expirationTime;if(0===e){null===c||null===V?t("244"):void 0;if(d===d.nextScheduledRoot){rh=V=d.nextScheduledRoot=null;break}else if(d===rh)rh=e=d.nextScheduledRoot,V.nextScheduledRoot=e,d.nextScheduledRoot=null;else if(d===V){V=c;V.nextScheduledRoot=rh;d.nextScheduledRoot=null;break}else c.nextScheduledRoot=d.nextScheduledRoot,d.nextScheduledRoot=null;d=c.nextScheduledRoot;}else{e>a&&(a=e,b=d);if(d===V)break;if(1073741823===
	a)break;c=d;d=d.nextScheduledRoot;}}uh=b;X=a;}var Lh=!1;function hh(){return Lh?!0:scheduler.unstable_shouldYield()?Lh=!0:!1}function Fh(){try{if(!hh()&&null!==rh){Dh();var a=rh;do{var b=a.expirationTime;0!==b&&Ah<=b&&(a.nextExpirationTimeToWorkOn=Ah);a=a.nextScheduledRoot;}while(a!==rh)}Kh(0,!0);}finally{Lh=!1;}}
	function Kh(a,b){Ih();if(b)for(Dh(),Bh=Ah;null!==uh&&0!==X&&a<=X&&!(Lh&&Ah>X);)Jh(uh,X,Ah>X),Ih(),Dh(),Bh=Ah;else for(;null!==uh&&0!==X&&a<=X;)Jh(uh,X,!1),Ih();b&&(sh=0,th=null);0!==X&&Eh(uh,X);oh=0;Ch=null;if(null!==yh)for(a=yh,yh=null,b=0;b<a.length;b++){var c=a[b];try{c._onComplete();}catch(d){vh||(vh=!0,wh=d);}}if(vh)throw a=wh,wh=null,vh=!1,a;}function Hh(a,b){W?t("253"):void 0;uh=a;X=b;Jh(a,b,!1);Kh(1073741823,!1);}
	function Jh(a,b,c){W?t("245"):void 0;W=!0;if(c){var d=a.finishedWork;null!==d?Mh(a,d,b):(a.finishedWork=null,d=a.timeoutHandle,-1!==d&&(a.timeoutHandle=-1,Ee(d)),gh(a,c),d=a.finishedWork,null!==d&&(hh()?a.finishedWork=d:Mh(a,d,b)));}else d=a.finishedWork,null!==d?Mh(a,d,b):(a.finishedWork=null,d=a.timeoutHandle,-1!==d&&(a.timeoutHandle=-1,Ee(d)),gh(a,c),d=a.finishedWork,null!==d&&Mh(a,d,b));W=!1;}
	function Mh(a,b,c){var d=a.firstBatch;if(null!==d&&d._expirationTime>=c&&(null===yh?yh=[d]:yh.push(d),d._defer)){a.finishedWork=b;a.expirationTime=0;return}a.finishedWork=null;a===Ch?oh++:(Ch=a,oh=0);ah=Yg=!0;a.current===b?t("177"):void 0;c=a.pendingCommitExpirationTime;0===c?t("261"):void 0;a.pendingCommitExpirationTime=0;d=b.expirationTime;var e=b.childExpirationTime;d=e>d?e:d;a.didError=!1;0===d?(a.earliestPendingTime=0,a.latestPendingTime=0,a.earliestSuspendedTime=0,a.latestSuspendedTime=0,a.latestPingedTime=
	0):(e=a.latestPendingTime,0!==e&&(e>d?a.earliestPendingTime=a.latestPendingTime=0:a.earliestPendingTime>d&&(a.earliestPendingTime=a.latestPendingTime)),e=a.earliestSuspendedTime,0===e?ef(a,d):d<a.latestSuspendedTime?(a.earliestSuspendedTime=0,a.latestSuspendedTime=0,a.latestPingedTime=0,ef(a,d)):d>e&&ef(a,d));ff(0,a);Vg.current=null;1<b.effectTag?null!==b.lastEffect?(b.lastEffect.nextEffect=b,d=b.firstEffect):d=b:d=b.firstEffect;ze=Hd;e=Td();if(Ud(e)){if("selectionStart"in e)var f={start:e.selectionStart,
	end:e.selectionEnd};else a:{f=(f=e.ownerDocument)&&f.defaultView||window;var g=f.getSelection&&f.getSelection();if(g&&0!==g.rangeCount){f=g.anchorNode;var h=g.anchorOffset,k=g.focusNode;g=g.focusOffset;try{f.nodeType,k.nodeType;}catch(db){f=null;break a}var l=0,m=-1,q=-1,x=0,z=0,B=e,Q=null;b:for(;;){for(var v;;){B!==f||0!==h&&3!==B.nodeType||(m=l+h);B!==k||0!==g&&3!==B.nodeType||(q=l+g);3===B.nodeType&&(l+=B.nodeValue.length);if(null===(v=B.firstChild))break;Q=B;B=v;}for(;;){if(B===e)break b;Q===f&&
	++x===h&&(m=l);Q===k&&++z===g&&(q=l);if(null!==(v=B.nextSibling))break;B=Q;Q=B.parentNode;}B=v;}f=-1===m||-1===q?null:{start:m,end:q};}else f=null;}f=f||{start:0,end:0};}else f=null;Ae={focusedElem:e,selectionRange:f};Hd=!1;for(U=d;null!==U;){e=!1;f=void 0;try{for(;null!==U;){if(U.effectTag&256)a:{var r=U.alternate;h=U;switch(h.tag){case 0:case 11:case 15:break a;case 1:if(h.effectTag&256&&null!==r){var u=r.memoizedProps,y=r.memoizedState,Y=h.stateNode,Th=Y.getSnapshotBeforeUpdate(h.elementType===h.type?
	u:O(h.type,u),y);Y.__reactInternalSnapshotBeforeUpdate=Th;}break a;case 3:case 5:case 6:case 4:case 17:break a;default:t("163");}}U=U.nextEffect;}}catch(db){e=!0,f=db;}e&&(null===U?t("178"):void 0,Jg(U,f),null!==U&&(U=U.nextEffect));}for(U=d;null!==U;){r=!1;u=void 0;try{for(;null!==U;){var w=U.effectTag;w&16&&pe(U.stateNode,"");if(w&128){var C=U.alternate;if(null!==C){var p=C.ref;null!==p&&("function"===typeof p?p(null):p.current=null);}}switch(w&14){case 2:Ng(U);U.effectTag&=-3;break;case 6:Ng(U);U.effectTag&=
	-3;Og(U.alternate,U);break;case 4:Og(U.alternate,U);break;case 8:y=U,Lg(y),y.return=null,y.child=null,y.alternate&&(y.alternate.child=null,y.alternate.return=null);}U=U.nextEffect;}}catch(db){r=!0,u=db;}r&&(null===U?t("178"):void 0,Jg(U,u),null!==U&&(U=U.nextEffect));}p=Ae;C=Td();w=p.focusedElem;u=p.selectionRange;if(C!==w&&w&&w.ownerDocument&&Sd(w.ownerDocument.documentElement,w)){null!==u&&Ud(w)&&(C=u.start,p=u.end,void 0===p&&(p=C),"selectionStart"in w?(w.selectionStart=C,w.selectionEnd=Math.min(p,
	w.value.length)):(p=(C=w.ownerDocument||document)&&C.defaultView||window,p.getSelection&&(p=p.getSelection(),y=w.textContent.length,r=Math.min(u.start,y),u=void 0===u.end?r:Math.min(u.end,y),!p.extend&&r>u&&(y=u,u=r,r=y),y=Rd(w,r),Y=Rd(w,u),y&&Y&&(1!==p.rangeCount||p.anchorNode!==y.node||p.anchorOffset!==y.offset||p.focusNode!==Y.node||p.focusOffset!==Y.offset)&&(C=C.createRange(),C.setStart(y.node,y.offset),p.removeAllRanges(),r>u?(p.addRange(C),p.extend(Y.node,Y.offset)):(C.setEnd(Y.node,Y.offset),
	p.addRange(C))))));C=[];for(p=w;p=p.parentNode;)1===p.nodeType&&C.push({element:p,left:p.scrollLeft,top:p.scrollTop});"function"===typeof w.focus&&w.focus();for(w=0;w<C.length;w++)p=C[w],p.element.scrollLeft=p.left,p.element.scrollTop=p.top;}Ae=null;Hd=!!ze;ze=null;a.current=b;for(U=d;null!==U;){d=!1;w=void 0;try{for(C=c;null!==U;){var Fb=U.effectTag;if(Fb&36){var Gb=U.alternate;p=U;r=C;switch(p.tag){case 0:case 11:case 15:break;case 1:var wc=p.stateNode;if(p.effectTag&4)if(null===Gb)wc.componentDidMount();
	else{var ci=p.elementType===p.type?Gb.memoizedProps:O(p.type,Gb.memoizedProps);wc.componentDidUpdate(ci,Gb.memoizedState,wc.__reactInternalSnapshotBeforeUpdate);}var Cg=p.updateQueue;null!==Cg&&tf(p,Cg,wc,r);break;case 3:var Dg=p.updateQueue;if(null!==Dg){u=null;if(null!==p.child)switch(p.child.tag){case 5:u=p.child.stateNode;break;case 1:u=p.child.stateNode;}tf(p,Dg,u,r);}break;case 5:var di=p.stateNode;null===Gb&&p.effectTag&4&&Be(p.type,p.memoizedProps)&&di.focus();break;case 6:break;case 4:break;
	case 12:break;case 13:break;case 17:break;default:t("163");}}if(Fb&128){var Ic=U.ref;if(null!==Ic){var Eg=U.stateNode;switch(U.tag){case 5:var ce=Eg;break;default:ce=Eg;}"function"===typeof Ic?Ic(ce):Ic.current=ce;}}U=U.nextEffect;}}catch(db){d=!0,w=db;}d&&(null===U?t("178"):void 0,Jg(U,w),null!==U&&(U=U.nextEffect));}Yg=ah=!1;"function"===typeof Se&&Se(b.stateNode);Fb=b.expirationTime;b=b.childExpirationTime;b=b>Fb?b:Fb;0===b&&(Sg=null);a.expirationTime=b;a.finishedWork=null;}
	function Qg(a){null===uh?t("246"):void 0;uh.expirationTime=0;vh||(vh=!0,wh=a);}function Nh(a,b){var c=Z;Z=!0;try{return a(b)}finally{(Z=c)||W||Kh(1073741823,!1);}}function Ph(a,b,c){if(kh)return a(b,c);Z||W||0===lh||(Kh(lh,!1),lh=0);var d=kh,e=Z;Z=kh=!0;try{return a(b,c)}finally{kh=d,(Z=e)||W||Kh(1073741823,!1);}}
	Cb=function(a,b,c){switch(b){case "input":Dc(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=La(d);e?void 0:t("90");Wb(d);Dc(d,e);}}}break;case "textarea":ie(a,c);break;case "select":b=c.value,null!=b&&fe(a,!!c.multiple,b,!1);}};
	Kb=Nh;Lb=Ph;Mb=function(){W||0===lh||(Kh(lh,!1),lh=0);};
	(function(a){var b=a.findFiberByHostInstance;return Ve(objectAssign({},a,{findHostInstanceByFiber:function(a){a=nd(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null}}))})({findFiberByHostInstance:Ia,bundleType:0,version:"16.6.3",rendererPackageName:"react-dom"});

	var schedulerTracing_production_min = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports,"__esModule",{value:!0});var b=0;exports.__interactionsRef=null;exports.__subscriberRef=null;exports.unstable_clear=function(a){return a()};exports.unstable_getCurrent=function(){return null};exports.unstable_getThreadID=function(){return ++b};exports.unstable_trace=function(a,d,c){return c()};exports.unstable_wrap=function(a){return a};exports.unstable_subscribe=function(){};exports.unstable_unsubscribe=function(){};
	});

	unwrapExports(schedulerTracing_production_min);
	var schedulerTracing_production_min_1 = schedulerTracing_production_min.__interactionsRef;
	var schedulerTracing_production_min_2 = schedulerTracing_production_min.__subscriberRef;
	var schedulerTracing_production_min_3 = schedulerTracing_production_min.unstable_clear;
	var schedulerTracing_production_min_4 = schedulerTracing_production_min.unstable_getCurrent;
	var schedulerTracing_production_min_5 = schedulerTracing_production_min.unstable_getThreadID;
	var schedulerTracing_production_min_6 = schedulerTracing_production_min.unstable_trace;
	var schedulerTracing_production_min_7 = schedulerTracing_production_min.unstable_wrap;
	var schedulerTracing_production_min_8 = schedulerTracing_production_min.unstable_subscribe;
	var schedulerTracing_production_min_9 = schedulerTracing_production_min.unstable_unsubscribe;

	var schedulerTracing_development = createCommonjsModule(function (module, exports) {



	{
	  (function() {

	Object.defineProperty(exports, '__esModule', { value: true });

	// Only used in www builds.


	// Only used in www builds.


	// React Fire: prevent the value and checked attributes from syncing
	// with their related DOM properties


	// These APIs will no longer be "unstable" in the upcoming 16.7 release,
	// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

	var DEFAULT_THREAD_ID = 0;

	// Counters used to generate unique IDs.
	var interactionIDCounter = 0;
	var threadIDCounter = 0;

	// Set of currently traced interactions.
	// Interactions "stack"–
	// Meaning that newly traced interactions are appended to the previously active set.
	// When an interaction goes out of scope, the previous set (if any) is restored.
	exports.__interactionsRef = null;

	// Listener(s) to notify when interactions begin and end.
	exports.__subscriberRef = null;

	{
	  exports.__interactionsRef = {
	    current: new Set()
	  };
	  exports.__subscriberRef = {
	    current: null
	  };
	}

	function unstable_clear(callback) {

	  var prevInteractions = exports.__interactionsRef.current;
	  exports.__interactionsRef.current = new Set();

	  try {
	    return callback();
	  } finally {
	    exports.__interactionsRef.current = prevInteractions;
	  }
	}

	function unstable_getCurrent() {
	  {
	    return exports.__interactionsRef.current;
	  }
	}

	function unstable_getThreadID() {
	  return ++threadIDCounter;
	}

	function unstable_trace(name, timestamp, callback) {
	  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

	  var interaction = {
	    __count: 1,
	    id: interactionIDCounter++,
	    name: name,
	    timestamp: timestamp
	  };

	  var prevInteractions = exports.__interactionsRef.current;

	  // Traced interactions should stack/accumulate.
	  // To do that, clone the current interactions.
	  // The previous set will be restored upon completion.
	  var interactions = new Set(prevInteractions);
	  interactions.add(interaction);
	  exports.__interactionsRef.current = interactions;

	  var subscriber = exports.__subscriberRef.current;
	  var returnValue = void 0;

	  try {
	    if (subscriber !== null) {
	      subscriber.onInteractionTraced(interaction);
	    }
	  } finally {
	    try {
	      if (subscriber !== null) {
	        subscriber.onWorkStarted(interactions, threadID);
	      }
	    } finally {
	      try {
	        returnValue = callback();
	      } finally {
	        exports.__interactionsRef.current = prevInteractions;

	        try {
	          if (subscriber !== null) {
	            subscriber.onWorkStopped(interactions, threadID);
	          }
	        } finally {
	          interaction.__count--;

	          // If no async work was scheduled for this interaction,
	          // Notify subscribers that it's completed.
	          if (subscriber !== null && interaction.__count === 0) {
	            subscriber.onInteractionScheduledWorkCompleted(interaction);
	          }
	        }
	      }
	    }
	  }

	  return returnValue;
	}

	function unstable_wrap(callback) {
	  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

	  var wrappedInteractions = exports.__interactionsRef.current;

	  var subscriber = exports.__subscriberRef.current;
	  if (subscriber !== null) {
	    subscriber.onWorkScheduled(wrappedInteractions, threadID);
	  }

	  // Update the pending async work count for the current interactions.
	  // Update after calling subscribers in case of error.
	  wrappedInteractions.forEach(function (interaction) {
	    interaction.__count++;
	  });

	  var hasRun = false;

	  function wrapped() {
	    var prevInteractions = exports.__interactionsRef.current;
	    exports.__interactionsRef.current = wrappedInteractions;

	    subscriber = exports.__subscriberRef.current;

	    try {
	      var returnValue = void 0;

	      try {
	        if (subscriber !== null) {
	          subscriber.onWorkStarted(wrappedInteractions, threadID);
	        }
	      } finally {
	        try {
	          returnValue = callback.apply(undefined, arguments);
	        } finally {
	          exports.__interactionsRef.current = prevInteractions;

	          if (subscriber !== null) {
	            subscriber.onWorkStopped(wrappedInteractions, threadID);
	          }
	        }
	      }

	      return returnValue;
	    } finally {
	      if (!hasRun) {
	        // We only expect a wrapped function to be executed once,
	        // But in the event that it's executed more than once–
	        // Only decrement the outstanding interaction counts once.
	        hasRun = true;

	        // Update pending async counts for all wrapped interactions.
	        // If this was the last scheduled async work for any of them,
	        // Mark them as completed.
	        wrappedInteractions.forEach(function (interaction) {
	          interaction.__count--;

	          if (subscriber !== null && interaction.__count === 0) {
	            subscriber.onInteractionScheduledWorkCompleted(interaction);
	          }
	        });
	      }
	    }
	  }

	  wrapped.cancel = function cancel() {
	    subscriber = exports.__subscriberRef.current;

	    try {
	      if (subscriber !== null) {
	        subscriber.onWorkCanceled(wrappedInteractions, threadID);
	      }
	    } finally {
	      // Update pending async counts for all wrapped interactions.
	      // If this was the last scheduled async work for any of them,
	      // Mark them as completed.
	      wrappedInteractions.forEach(function (interaction) {
	        interaction.__count--;

	        if (subscriber && interaction.__count === 0) {
	          subscriber.onInteractionScheduledWorkCompleted(interaction);
	        }
	      });
	    }
	  };

	  return wrapped;
	}

	var subscribers = null;
	{
	  subscribers = new Set();
	}

	function unstable_subscribe(subscriber) {
	  {
	    subscribers.add(subscriber);

	    if (subscribers.size === 1) {
	      exports.__subscriberRef.current = {
	        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
	        onInteractionTraced: onInteractionTraced,
	        onWorkCanceled: onWorkCanceled,
	        onWorkScheduled: onWorkScheduled,
	        onWorkStarted: onWorkStarted,
	        onWorkStopped: onWorkStopped
	      };
	    }
	  }
	}

	function unstable_unsubscribe(subscriber) {
	  {
	    subscribers.delete(subscriber);

	    if (subscribers.size === 0) {
	      exports.__subscriberRef.current = null;
	    }
	  }
	}

	function onInteractionTraced(interaction) {
	  var didCatchError = false;
	  var caughtError = null;

	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onInteractionTraced(interaction);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onInteractionScheduledWorkCompleted(interaction) {
	  var didCatchError = false;
	  var caughtError = null;

	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onInteractionScheduledWorkCompleted(interaction);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkScheduled(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;

	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkScheduled(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkStarted(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;

	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkStarted(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkStopped(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;

	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkStopped(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkCanceled(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;

	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkCanceled(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	exports.unstable_clear = unstable_clear;
	exports.unstable_getCurrent = unstable_getCurrent;
	exports.unstable_getThreadID = unstable_getThreadID;
	exports.unstable_trace = unstable_trace;
	exports.unstable_wrap = unstable_wrap;
	exports.unstable_subscribe = unstable_subscribe;
	exports.unstable_unsubscribe = unstable_unsubscribe;
	  })();
	}
	});

	unwrapExports(schedulerTracing_development);
	var schedulerTracing_development_1 = schedulerTracing_development.__interactionsRef;
	var schedulerTracing_development_2 = schedulerTracing_development.__subscriberRef;
	var schedulerTracing_development_3 = schedulerTracing_development.unstable_clear;
	var schedulerTracing_development_4 = schedulerTracing_development.unstable_getCurrent;
	var schedulerTracing_development_5 = schedulerTracing_development.unstable_getThreadID;
	var schedulerTracing_development_6 = schedulerTracing_development.unstable_trace;
	var schedulerTracing_development_7 = schedulerTracing_development.unstable_wrap;
	var schedulerTracing_development_8 = schedulerTracing_development.unstable_subscribe;
	var schedulerTracing_development_9 = schedulerTracing_development.unstable_unsubscribe;

	var tracing = createCommonjsModule(function (module) {

	{
	  module.exports = schedulerTracing_development;
	}
	});

	var reactDom_development = createCommonjsModule(function (module) {



	{
	  (function() {

	var React = react;
	var _assign = objectAssign;
	var checkPropTypes = checkPropTypes_1;
	var scheduler$1 = scheduler;
	var tracing$1 = tracing;

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function () {};

	{
	  validateFormat = function (format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error = void 0;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	// Relying on the `invariant()` implementation lets us
	// preserve the format and params in the www builds.

	!React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;

	var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
	  var funcArgs = Array.prototype.slice.call(arguments, 3);
	  try {
	    func.apply(context, funcArgs);
	  } catch (error) {
	    this.onError(error);
	  }
	};

	{
	  // In DEV mode, we swap out invokeGuardedCallback for a special version
	  // that plays more nicely with the browser's DevTools. The idea is to preserve
	  // "Pause on exceptions" behavior. Because React wraps all user-provided
	  // functions in invokeGuardedCallback, and the production version of
	  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
	  // like caught exceptions, and the DevTools won't pause unless the developer
	  // takes the extra step of enabling pause on caught exceptions. This is
	  // untintuitive, though, because even though React has caught the error, from
	  // the developer's perspective, the error is uncaught.
	  //
	  // To preserve the expected "Pause on exceptions" behavior, we don't use a
	  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
	  // DOM node, and call the user-provided callback from inside an event handler
	  // for that fake event. If the callback throws, the error is "captured" using
	  // a global event handler. But because the error happens in a different
	  // event loop context, it does not interrupt the normal program flow.
	  // Effectively, this gives us try-catch behavior without actually using
	  // try-catch. Neat!

	  // Check that the browser supports the APIs we need to implement our special
	  // DEV version of invokeGuardedCallback
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');

	    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
	      // If document doesn't exist we know for sure we will crash in this method
	      // when we call document.createEvent(). However this can cause confusing
	      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
	      // So we preemptively throw with a better message instead.
	      !(typeof document !== 'undefined') ? invariant(false, 'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.') : void 0;
	      var evt = document.createEvent('Event');

	      // Keeps track of whether the user-provided callback threw an error. We
	      // set this to true at the beginning, then set it to false right after
	      // calling the function. If the function errors, `didError` will never be
	      // set to false. This strategy works even if the browser is flaky and
	      // fails to call our global error handler, because it doesn't rely on
	      // the error event at all.
	      var didError = true;

	      // Keeps track of the value of window.event so that we can reset it
	      // during the callback to let user code access window.event in the
	      // browsers that support it.
	      var windowEvent = window.event;

	      // Keeps track of the descriptor of window.event to restore it after event
	      // dispatching: https://github.com/facebook/react/issues/13688
	      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

	      // Create an event handler for our fake event. We will synchronously
	      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
	      // call the user-provided callback.
	      var funcArgs = Array.prototype.slice.call(arguments, 3);
	      function callCallback() {
	        // We immediately remove the callback from event listeners so that
	        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
	        // nested call would trigger the fake event handlers of any call higher
	        // in the stack.
	        fakeNode.removeEventListener(evtType, callCallback, false);

	        // We check for window.hasOwnProperty('event') to prevent the
	        // window.event assignment in both IE <= 10 as they throw an error
	        // "Member not found" in strict mode, and in Firefox which does not
	        // support window.event.
	        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
	          window.event = windowEvent;
	        }

	        func.apply(context, funcArgs);
	        didError = false;
	      }

	      // Create a global error event handler. We use this to capture the value
	      // that was thrown. It's possible that this error handler will fire more
	      // than once; for example, if non-React code also calls `dispatchEvent`
	      // and a handler for that event throws. We should be resilient to most of
	      // those cases. Even if our error event handler fires more than once, the
	      // last error event is always used. If the callback actually does error,
	      // we know that the last error event is the correct one, because it's not
	      // possible for anything else to have happened in between our callback
	      // erroring and the code that follows the `dispatchEvent` call below. If
	      // the callback doesn't error, but the error event was fired, we know to
	      // ignore it because `didError` will be false, as described above.
	      var error = void 0;
	      // Use this to track whether the error event is ever called.
	      var didSetError = false;
	      var isCrossOriginError = false;

	      function handleWindowError(event) {
	        error = event.error;
	        didSetError = true;
	        if (error === null && event.colno === 0 && event.lineno === 0) {
	          isCrossOriginError = true;
	        }
	        if (event.defaultPrevented) {
	          // Some other error handler has prevented default.
	          // Browsers silence the error report if this happens.
	          // We'll remember this to later decide whether to log it or not.
	          if (error != null && typeof error === 'object') {
	            try {
	              error._suppressLogging = true;
	            } catch (inner) {
	              // Ignore.
	            }
	          }
	        }
	      }

	      // Create a fake event type.
	      var evtType = 'react-' + (name ? name : 'invokeguardedcallback');

	      // Attach our event handlers
	      window.addEventListener('error', handleWindowError);
	      fakeNode.addEventListener(evtType, callCallback, false);

	      // Synchronously dispatch our fake event. If the user-provided function
	      // errors, it will trigger our global error handler.
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);

	      if (windowEventDescriptor) {
	        Object.defineProperty(window, 'event', windowEventDescriptor);
	      }

	      if (didError) {
	        if (!didSetError) {
	          // The callback errored, but the error event never fired.
	          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
	        } else if (isCrossOriginError) {
	          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
	        }
	        this.onError(error);
	      }

	      // Remove our event listeners
	      window.removeEventListener('error', handleWindowError);
	    };

	    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
	  }
	}

	var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

	// Used by Fiber to simulate a try-catch.
	var hasError = false;
	var caughtError = null;

	// Used by event system to capture/rethrow the first error.
	var hasRethrowError = false;
	var rethrowError = null;

	var reporter = {
	  onError: function (error) {
	    hasError = true;
	    caughtError = error;
	  }
	};

	/**
	 * Call a function while guarding against errors that happens within it.
	 * Returns an error if it throws, otherwise null.
	 *
	 * In production, this is implemented using a try-catch. The reason we don't
	 * use a try-catch directly is so that we can swap out a different
	 * implementation in DEV mode.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */
	function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
	  hasError = false;
	  caughtError = null;
	  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
	}

	/**
	 * Same as invokeGuardedCallback, but instead of returning an error, it stores
	 * it in a global so it can be rethrown by `rethrowCaughtError` later.
	 * TODO: See if caughtError and rethrowError can be unified.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */
	function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
	  invokeGuardedCallback.apply(this, arguments);
	  if (hasError) {
	    var error = clearCaughtError();
	    if (!hasRethrowError) {
	      hasRethrowError = true;
	      rethrowError = error;
	    }
	  }
	}

	/**
	 * During execution of guarded functions we will capture the first error which
	 * we will rethrow to be handled by the top level error handler.
	 */
	function rethrowCaughtError() {
	  if (hasRethrowError) {
	    var error = rethrowError;
	    hasRethrowError = false;
	    rethrowError = null;
	    throw error;
	  }
	}

	function hasCaughtError() {
	  return hasError;
	}

	function clearCaughtError() {
	  if (hasError) {
	    var error = caughtError;
	    hasError = false;
	    caughtError = null;
	    return error;
	  } else {
	    invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
	  }
	}

	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
	    if (plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
	    plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
	  eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
	  registrationNameModules[registrationName] = pluginModule;
	  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

	  {
	    var lowerCasedName = registrationName.toLowerCase();
	    possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */

	/**
	 * Ordered list of injected plugins.
	 */
	var plugins = [];

	/**
	 * Mapping from event name to dispatch config
	 */
	var eventNameDispatchConfigs = {};

	/**
	 * Mapping from registration name to plugin module
	 */
	var registrationNameModules = {};

	/**
	 * Mapping from registration name to event name
	 */
	var registrationNameDependencies = {};

	/**
	 * Mapping from lowercase registration names to the properly cased version,
	 * used to warn in the case of missing event handlers. Available
	 * only in true.
	 * @type {Object}
	 */
	var possibleRegistrationNames = {};
	// Trust the developer to only use possibleRegistrationNames in true

	/**
	 * Injects an ordering of plugins (by plugin name). This allows the ordering
	 * to be decoupled from injection of the actual plugins so that ordering is
	 * always deterministic regardless of packaging, on-the-fly injection, etc.
	 *
	 * @param {array} InjectedEventPluginOrder
	 * @internal
	 * @see {EventPluginHub.injection.injectEventPluginOrder}
	 */
	function injectEventPluginOrder(injectedEventPluginOrder) {
	  !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;
	  // Clone the ordering so it cannot be dynamically mutated.
	  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	  recomputePluginOrdering();
	}

	/**
	 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	 * in the ordering injected by `injectEventPluginOrder`.
	 *
	 * Plugins can be injected as part of page initialization or on-the-fly.
	 *
	 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	 * @internal
	 * @see {EventPluginHub.injection.injectEventPluginsByName}
	 */
	function injectEventPluginsByName(injectedNamesToPlugins) {
	  var isOrderingDirty = false;
	  for (var pluginName in injectedNamesToPlugins) {
	    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	      continue;
	    }
	    var pluginModule = injectedNamesToPlugins[pluginName];
	    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	      !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
	      namesToPlugins[pluginName] = pluginModule;
	      isOrderingDirty = true;
	    }
	  }
	  if (isOrderingDirty) {
	    recomputePluginOrdering();
	  }
	}

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warningWithoutStack = function () {};

	{
	  warningWithoutStack = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (args.length > 8) {
	      // Check before the condition to catch violations early.
	      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
	    }
	    if (condition) {
	      return;
	    }
	    if (typeof console !== 'undefined') {
	      var argsWithFormat = args.map(function (item) {
	        return '' + item;
	      });
	      argsWithFormat.unshift('Warning: ' + format);

	      // We intentionally don't use spread (or .apply) directly because it
	      // breaks IE9: https://github.com/facebook/react/issues/13610
	      Function.prototype.apply.call(console.error, console, argsWithFormat);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	var warningWithoutStack$1 = warningWithoutStack;

	var getFiberCurrentPropsFromNode = null;
	var getInstanceFromNode = null;
	var getNodeFromInstance = null;

	function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
	  getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
	  getInstanceFromNode = getInstanceFromNodeImpl;
	  getNodeFromInstance = getNodeFromInstanceImpl;
	  {
	    !(getNodeFromInstance && getInstanceFromNode) ? warningWithoutStack$1(false, 'EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	  }
	}

	var validateEventDispatches = void 0;
	{
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warningWithoutStack$1(false, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = getNodeFromInstance(inst);
	  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */


	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */


	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;

	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 * @param {function} cb Callback invoked with each element or a collection.
	 * @param {?} [scope] Scope used as `this` in a callback.
	 */
	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */
	var executeDispatchesAndRelease = function (event) {
	  if (event) {
	    executeDispatchesInOrder(event);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e);
	};

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */

	/**
	 * Methods for injecting dependencies.
	 */
	var injection = {
	  /**
	   * @param {array} InjectedEventPluginOrder
	   * @public
	   */
	  injectEventPluginOrder: injectEventPluginOrder,

	  /**
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   */
	  injectEventPluginsByName: injectEventPluginsByName
	};

	/**
	 * @param {object} inst The instance, which is the source of events.
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @return {?function} The stored callback.
	 */
	function getListener(inst, registrationName) {
	  var listener = void 0;

	  // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	  // live here; needs to be moved to a better place soon
	  var stateNode = inst.stateNode;
	  if (!stateNode) {
	    // Work in progress (ex: onload events in incremental mode).
	    return null;
	  }
	  var props = getFiberCurrentPropsFromNode(stateNode);
	  if (!props) {
	    // Work in progress.
	    return null;
	  }
	  listener = props[registrationName];
	  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
	    return null;
	  }
	  !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
	  return listener;
	}

	/**
	 * Allows registered plugins an opportunity to extract events from top-level
	 * native browser events.
	 *
	 * @return {*} An accumulation of synthetic events.
	 * @internal
	 */
	function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var events = null;
	  for (var i = 0; i < plugins.length; i++) {
	    // Not every plugin in the ordering may be loaded at runtime.
	    var possiblePlugin = plugins[i];
	    if (possiblePlugin) {
	      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	      if (extractedEvents) {
	        events = accumulateInto(events, extractedEvents);
	      }
	    }
	  }
	  return events;
	}

	function runEventsInBatch(events) {
	  if (events !== null) {
	    eventQueue = accumulateInto(eventQueue, events);
	  }

	  // Set `eventQueue` to null before processing it so that we can tell if more
	  // events get enqueued while processing.
	  var processingEventQueue = eventQueue;
	  eventQueue = null;

	  if (!processingEventQueue) {
	    return;
	  }

	  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	  !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;
	  // This would be a good time to rethrow if any of the event handlers threw.
	  rethrowCaughtError();
	}

	function runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	  runEventsInBatch(events);
	}

	var FunctionComponent = 0;
	var ClassComponent = 1;
	var IndeterminateComponent = 2; // Before we know whether it is function or class
	var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
	var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
	var HostComponent = 5;
	var HostText = 6;
	var Fragment = 7;
	var Mode = 8;
	var ContextConsumer = 9;
	var ContextProvider = 10;
	var ForwardRef = 11;
	var Profiler = 12;
	var SuspenseComponent = 13;
	var MemoComponent = 14;
	var SimpleMemoComponent = 15;
	var LazyComponent = 16;
	var IncompleteClassComponent = 17;

	var randomKey = Math.random().toString(36).slice(2);
	var internalInstanceKey = '__reactInternalInstance$' + randomKey;
	var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;

	function precacheFiberNode(hostInst, node) {
	  node[internalInstanceKey] = hostInst;
	}

	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }

	  while (!node[internalInstanceKey]) {
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }

	  var inst = node[internalInstanceKey];
	  if (inst.tag === HostComponent || inst.tag === HostText) {
	    // In Fiber, this will always be the deepest root.
	    return inst;
	  }

	  return null;
	}

	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode$1(node) {
	  var inst = node[internalInstanceKey];
	  if (inst) {
	    if (inst.tag === HostComponent || inst.tag === HostText) {
	      return inst;
	    } else {
	      return null;
	    }
	  }
	  return null;
	}

	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance$1(inst) {
	  if (inst.tag === HostComponent || inst.tag === HostText) {
	    // In Fiber this, is just the state node right now. We assume it will be
	    // a host component or host text.
	    return inst.stateNode;
	  }

	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  invariant(false, 'getNodeFromInstance: Invalid argument.');
	}

	function getFiberCurrentPropsFromNode$1(node) {
	  return node[internalEventHandlersKey] || null;
	}

	function updateFiberProps(node, props) {
	  node[internalEventHandlersKey] = props;
	}

	function getParent(inst) {
	  do {
	    inst = inst.return;
	    // TODO: If this is a HostRoot we might want to bail out.
	    // That is depending on if we want nested subtrees (layers) to bubble
	    // events to their parent. We could also go through parentNode on the
	    // host node but that wouldn't work for React Native and doesn't let us
	    // do the portal feature.
	  } while (inst && inst.tag !== HostComponent);
	  if (inst) {
	    return inst;
	  }
	  return null;
	}

	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
	    depthB++;
	  }

	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = getParent(instA);
	    depthA--;
	  }

	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = getParent(instB);
	    depthB--;
	  }

	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB || instA === instB.alternate) {
	      return instA;
	    }
	    instA = getParent(instA);
	    instB = getParent(instB);
	  }
	  return null;
	}

	/**
	 * Return if A is an ancestor of B.
	 */


	/**
	 * Return the parent instance of the passed-in instance.
	 */


	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = getParent(inst);
	  }
	  var i = void 0;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}

	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (true) {
	    if (!from) {
	      break;
	    }
	    if (from === common) {
	      break;
	    }
	    var alternate = from.alternate;
	    if (alternate !== null && alternate === common) {
	      break;
	    }
	    pathFrom.push(from);
	    from = getParent(from);
	  }
	  var pathTo = [];
	  while (true) {
	    if (!to) {
	      break;
	    }
	    if (to === common) {
	      break;
	    }
	    var _alternate = to.alternate;
	    if (_alternate !== null && _alternate === common) {
	      break;
	    }
	    pathTo.push(to);
	    to = getParent(to);
	  }
	  for (var i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (var _i = pathTo.length; _i-- > 0;) {
	    fn(pathTo[_i], 'captured', argTo);
	  }
	}

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing even a
	 * single one.
	 */

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  {
	    !inst ? warningWithoutStack$1(false, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (inst && event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}



	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	// Do not uses the below two methods directly!
	// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
	// (It is the only module that is allowed to access these methods.)

	function unsafeCastStringToDOMTopLevelType(topLevelType) {
	  return topLevelType;
	}

	function unsafeCastDOMTopLevelTypeToString(topLevelType) {
	  return topLevelType;
	}

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};

	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;

	  return prefixes;
	}

	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};

	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};

	/**
	 * Element to check for prefixes on.
	 */
	var style = {};

	/**
	 * Bootstrap if a DOM exists.
	 */
	if (canUseDOM) {
	  style = document.createElement('div').style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }

	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}

	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return eventName;
	}

	/**
	 * To identify top level events in ReactDOM, we use constants defined by this
	 * module. This is the only module that uses the unsafe* methods to express
	 * that the constants actually correspond to the browser event names. This lets
	 * us save some bundle size by avoiding a top level type -> event name map.
	 * The rest of ReactDOM code should import top level types from this file.
	 */
	var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
	var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
	var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
	var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
	var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
	var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
	var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
	var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
	var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
	var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
	var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
	var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
	var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
	var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
	var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
	var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
	var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
	var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
	var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
	var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
	var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
	var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
	var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
	var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
	var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
	var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
	var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
	var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
	var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
	var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
	var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
	var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
	var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
	var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
	var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
	var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
	var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
	var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
	var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
	var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
	var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
	var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
	var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
	var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
	var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
	var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
	var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
	var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
	var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
	var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
	var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
	var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
	var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
	var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
	var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');


	var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
	var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
	var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
	var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
	var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
	var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
	var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
	var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
	var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
	var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
	var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
	var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
	var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
	var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
	var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
	var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
	var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
	var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
	var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
	var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
	var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
	var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
	var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
	var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
	var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel');

	// List of events that need to be individually attached to media elements.
	// Note that events in this list will *not* be listened to at the top level
	// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.
	var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];

	function getRawEventName(topLevelType) {
	  return unsafeCastDOMTopLevelTypeToString(topLevelType);
	}

	/**
	 * These variables store information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 *
	 */

	var root = null;
	var startText = null;
	var fallbackText = null;

	function initialize(nativeEventTarget) {
	  root = nativeEventTarget;
	  startText = getText();
	  return true;
	}

	function reset() {
	  root = null;
	  startText = null;
	  fallbackText = null;
	}

	function getData() {
	  if (fallbackText) {
	    return fallbackText;
	  }

	  var start = void 0;
	  var startValue = startText;
	  var startLength = startValue.length;
	  var end = void 0;
	  var endValue = getText();
	  var endLength = endValue.length;

	  for (start = 0; start < startLength; start++) {
	    if (startValue[start] !== endValue[start]) {
	      break;
	    }
	  }

	  var minEnd = startLength - start;
	  for (end = 1; end <= minEnd; end++) {
	    if (startValue[startLength - end] !== endValue[endLength - end]) {
	      break;
	    }
	  }

	  var sliceTail = end > 1 ? 1 - end : undefined;
	  fallbackText = endValue.slice(start, sliceTail);
	  return fallbackText;
	}

	function getText() {
	  if ('value' in root) {
	    return root.value;
	  }
	  return root.textContent;
	}

	/* eslint valid-typeof: 0 */

	var EVENT_POOL_SIZE = 10;

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: function () {
	    return null;
	  },
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	function functionThatReturnsTrue() {
	  return true;
	}

	function functionThatReturnsFalse() {
	  return false;
	}

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	    delete this.isDefaultPrevented;
	    delete this.isPropagationStopped;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = functionThatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = functionThatReturnsFalse;
	  }
	  this.isPropagationStopped = functionThatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = functionThatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = functionThatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = functionThatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: functionThatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      }
	    }
	    this.dispatchConfig = null;
	    this._targetInst = null;
	    this.nativeEvent = null;
	    this.isDefaultPrevented = functionThatReturnsFalse;
	    this.isPropagationStopped = functionThatReturnsFalse;
	    this._dispatchListeners = null;
	    this._dispatchInstances = null;
	    {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
	      Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
	    }
	  }
	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 */
	SyntheticEvent.extend = function (Interface) {
	  var Super = this;

	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();

	  function Class() {
	    return Super.apply(this, arguments);
	  }
	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.extend = Super.extend;
	  addEventPoolingTo(Class);

	  return Class;
	};

	addEventPoolingTo(SyntheticEvent);

	/**
	 * Helper to nullify syntheticEvent instance properties when destructing
	 *
	 * @param {String} propName
	 * @param {?object} getVal
	 * @return {object} defineProperty object
	 */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    warningWithoutStack$1(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
	  }
	}

	function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
	  var EventConstructor = this;
	  if (EventConstructor.eventPool.length) {
	    var instance = EventConstructor.eventPool.pop();
	    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
	    return instance;
	  }
	  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
	}

	function releasePooledEvent(event) {
	  var EventConstructor = this;
	  !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance into a pool of a different type.') : void 0;
	  event.destructor();
	  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
	    EventConstructor.eventPool.push(event);
	  }
	}

	function addEventPoolingTo(EventConstructor) {
	  EventConstructor.eventPool = [];
	  EventConstructor.getPooled = getPooledEvent;
	  EventConstructor.release = releasePooledEvent;
	}

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var SyntheticCompositionEvent = SyntheticEvent.extend({
	  data: null
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var SyntheticInputEvent = SyntheticEvent.extend({
	  data: null
	});

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode;

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case TOP_COMPOSITION_START:
	      return eventTypes.compositionStart;
	    case TOP_COMPOSITION_END:
	      return eventTypes.compositionEnd;
	    case TOP_COMPOSITION_UPDATE:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case TOP_KEY_UP:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case TOP_KEY_DOWN:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case TOP_KEY_PRESS:
	    case TOP_MOUSE_DOWN:
	    case TOP_BLUR:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	/**
	 * Check if a composition event was triggered by Korean IME.
	 * Our fallback mode does not work well with IE's Korean IME,
	 * so just use native composition events when Korean IME is used.
	 * Although CompositionEvent.locale property is deprecated,
	 * it is available in IE, where our fallback mode is enabled.
	 *
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isUsingKoreanIME(nativeEvent) {
	  return nativeEvent.locale === 'ko';
	}

	// Track the current IME composition status, if any.
	var isComposing = false;

	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType = void 0;
	  var fallbackData = void 0;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!isComposing) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!isComposing && eventType === eventTypes.compositionStart) {
	      isComposing = initialize(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (isComposing) {
	        fallbackData = getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case TOP_COMPOSITION_END:
	      return getDataFromCustomEvent(nativeEvent);
	    case TOP_KEY_PRESS:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case TOP_TEXT_INPUT:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to ignore it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {number} topLevelType Number from `TopLevelEventTypes`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (isComposing) {
	    if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = getData();
	      reset();
	      isComposing = false;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case TOP_PASTE:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case TOP_KEY_PRESS:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (!isKeypressCommand(nativeEvent)) {
	        // IE fires the `keypress` event when a user types an emoji via
	        // Touch keyboard of Windows.  In such a case, the `char` property
	        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
	        // is 2, the property `which` does not represent an emoji correctly.
	        // In such a case, we directly return the `char` property instead of
	        // using `which`.
	        if (nativeEvent.char && nativeEvent.char.length > 1) {
	          return nativeEvent.char;
	        } else if (nativeEvent.which) {
	          return String.fromCharCode(nativeEvent.which);
	        }
	      }
	      return null;
	    case TOP_COMPOSITION_END:
	      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars = void 0;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

	    var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

	    if (composition === null) {
	      return beforeInput;
	    }

	    if (beforeInput === null) {
	      return composition;
	    }

	    return [composition, beforeInput];
	  }
	};

	// Use to restore controlled state after a change event has fired.

	var restoreImpl = null;
	var restoreTarget = null;
	var restoreQueue = null;

	function restoreStateOfTarget(target) {
	  // We perform this translation at the end of the event loop so that we
	  // always receive the correct fiber here
	  var internalInstance = getInstanceFromNode(target);
	  if (!internalInstance) {
	    // Unmounted
	    return;
	  }
	  !(typeof restoreImpl === 'function') ? invariant(false, 'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
	  restoreImpl(internalInstance.stateNode, internalInstance.type, props);
	}

	function setRestoreImplementation(impl) {
	  restoreImpl = impl;
	}

	function enqueueStateRestore(target) {
	  if (restoreTarget) {
	    if (restoreQueue) {
	      restoreQueue.push(target);
	    } else {
	      restoreQueue = [target];
	    }
	  } else {
	    restoreTarget = target;
	  }
	}

	function needsStateRestore() {
	  return restoreTarget !== null || restoreQueue !== null;
	}

	function restoreStateIfNeeded() {
	  if (!restoreTarget) {
	    return;
	  }
	  var target = restoreTarget;
	  var queuedTargets = restoreQueue;
	  restoreTarget = null;
	  restoreQueue = null;

	  restoreStateOfTarget(target);
	  if (queuedTargets) {
	    for (var i = 0; i < queuedTargets.length; i++) {
	      restoreStateOfTarget(queuedTargets[i]);
	    }
	  }
	}

	// Used as a way to call batchedUpdates when we don't have a reference to
	// the renderer. Such as when we're dispatching events or if third party
	// libraries need to call batchedUpdates. Eventually, this API will go away when
	// everything is batched by default. We'll then have a similar API to opt-out of
	// scheduled work and instead do synchronous work.

	// Defaults
	var _batchedUpdatesImpl = function (fn, bookkeeping) {
	  return fn(bookkeeping);
	};
	var _interactiveUpdatesImpl = function (fn, a, b) {
	  return fn(a, b);
	};
	var _flushInteractiveUpdatesImpl = function () {};

	var isBatching = false;
	function batchedUpdates(fn, bookkeeping) {
	  if (isBatching) {
	    // If we are currently inside another batch, we need to wait until it
	    // fully completes before restoring state.
	    return fn(bookkeeping);
	  }
	  isBatching = true;
	  try {
	    return _batchedUpdatesImpl(fn, bookkeeping);
	  } finally {
	    // Here we wait until all updates have propagated, which is important
	    // when using controlled components within layers:
	    // https://github.com/facebook/react/issues/1698
	    // Then we restore state of any controlled component.
	    isBatching = false;
	    var controlledComponentsHavePendingUpdates = needsStateRestore();
	    if (controlledComponentsHavePendingUpdates) {
	      // If a controlled event was fired, we may need to restore the state of
	      // the DOM node back to the controlled value. This is necessary when React
	      // bails out of the update without touching the DOM.
	      _flushInteractiveUpdatesImpl();
	      restoreStateIfNeeded();
	    }
	  }
	}

	function interactiveUpdates(fn, a, b) {
	  return _interactiveUpdatesImpl(fn, a, b);
	}



	function setBatchingImplementation(batchedUpdatesImpl, interactiveUpdatesImpl, flushInteractiveUpdatesImpl) {
	  _batchedUpdatesImpl = batchedUpdatesImpl;
	  _interactiveUpdatesImpl = interactiveUpdatesImpl;
	  _flushInteractiveUpdatesImpl = flushInteractiveUpdatesImpl;
	}

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  color: true,
	  date: true,
	  datetime: true,
	  'datetime-local': true,
	  email: true,
	  month: true,
	  number: true,
	  password: true,
	  range: true,
	  search: true,
	  tel: true,
	  text: true,
	  time: true,
	  url: true,
	  week: true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	/**
	 * HTML nodeType values that represent the type of the node
	 */

	var ELEMENT_NODE = 1;
	var TEXT_NODE = 3;
	var COMMENT_NODE = 8;
	var DOCUMENT_NODE = 9;
	var DOCUMENT_FRAGMENT_NODE = 11;

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  // Fallback to nativeEvent.srcElement for IE9
	  // https://github.com/facebook/react/issues/12506
	  var target = nativeEvent.target || nativeEvent.srcElement || window;

	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }

	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === TEXT_NODE ? target.parentNode : target;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix) {
	  if (!canUseDOM) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  return isSupported;
	}

	function isCheckable(elem) {
	  var type = elem.type;
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
	}

	function getTracker(node) {
	  return node._valueTracker;
	}

	function detachTracker(node) {
	  node._valueTracker = null;
	}

	function getValueFromNode(node) {
	  var value = '';
	  if (!node) {
	    return value;
	  }

	  if (isCheckable(node)) {
	    value = node.checked ? 'true' : 'false';
	  } else {
	    value = node.value;
	  }

	  return value;
	}

	function trackValueOnNode(node) {
	  var valueField = isCheckable(node) ? 'checked' : 'value';
	  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

	  var currentValue = '' + node[valueField];

	  // if someone has already defined a value or Safari, then bail
	  // and don't track value will cause over reporting of changes,
	  // but it's better then a hard failure
	  // (needed for certain tests that spyOn input values and Safari)
	  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
	    return;
	  }
	  var get = descriptor.get,
	      set = descriptor.set;

	  Object.defineProperty(node, valueField, {
	    configurable: true,
	    get: function () {
	      return get.call(this);
	    },
	    set: function (value) {
	      currentValue = '' + value;
	      set.call(this, value);
	    }
	  });
	  // We could've passed this the first time
	  // but it triggers a bug in IE11 and Edge 14/15.
	  // Calling defineProperty() again should be equivalent.
	  // https://github.com/facebook/react/issues/11768
	  Object.defineProperty(node, valueField, {
	    enumerable: descriptor.enumerable
	  });

	  var tracker = {
	    getValue: function () {
	      return currentValue;
	    },
	    setValue: function (value) {
	      currentValue = '' + value;
	    },
	    stopTracking: function () {
	      detachTracker(node);
	      delete node[valueField];
	    }
	  };
	  return tracker;
	}

	function track(node) {
	  if (getTracker(node)) {
	    return;
	  }

	  // TODO: Once it's just Fiber we can move this to node._wrapperState
	  node._valueTracker = trackValueOnNode(node);
	}

	function updateValueIfChanged(node) {
	  if (!node) {
	    return false;
	  }

	  var tracker = getTracker(node);
	  // if there is no tracker at this point it's unlikely
	  // that trying again will succeed
	  if (!tracker) {
	    return true;
	  }

	  var lastValue = tracker.getValue();
	  var nextValue = getValueFromNode(node);
	  if (nextValue !== lastValue) {
	    tracker.setValue(nextValue);
	    return true;
	  }
	  return false;
	}

	var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

	var describeComponentFrame = function (name, source, ownerName) {
	  var sourceInfo = '';
	  if (source) {
	    var path = source.fileName;
	    var fileName = path.replace(BEFORE_SLASH_RE, '');
	    {
	      // In DEV, include code for a common special case:
	      // prefer "folder/index.js" instead of just "index.js".
	      if (/^index\./.test(fileName)) {
	        var match = path.match(BEFORE_SLASH_RE);
	        if (match) {
	          var pathBeforeSlash = match[1];
	          if (pathBeforeSlash) {
	            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
	            fileName = folderName + '/' + fileName;
	          }
	        }
	      }
	    }
	    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
	  } else if (ownerName) {
	    sourceInfo = ' (created by ' + ownerName + ')';
	  }
	  return '\n    in ' + (name || 'Unknown') + sourceInfo;
	};

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;

	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;

	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

	var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';

	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }
	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }
	  return null;
	}

	var Pending = 0;
	var Resolved = 1;
	var Rejected = 2;

	function refineResolvedLazyComponent(lazyComponent) {
	  return lazyComponent._status === Resolved ? lazyComponent._result : null;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
	}

	function getComponentName(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }
	  {
	    if (typeof type.tag === 'number') {
	      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }
	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }
	  if (typeof type === 'string') {
	    return type;
	  }
	  switch (type) {
	    case REACT_CONCURRENT_MODE_TYPE:
	      return 'ConcurrentMode';
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';
	    case REACT_PORTAL_TYPE:
	      return 'Portal';
	    case REACT_PROFILER_TYPE:
	      return 'Profiler';
	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';
	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';
	  }
	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        return 'Context.Consumer';
	      case REACT_PROVIDER_TYPE:
	        return 'Context.Provider';
	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');
	      case REACT_MEMO_TYPE:
	        return getComponentName(type.type);
	      case REACT_LAZY_TYPE:
	        {
	          var thenable = type;
	          var resolvedThenable = refineResolvedLazyComponent(thenable);
	          if (resolvedThenable) {
	            return getComponentName(resolvedThenable);
	          }
	        }
	    }
	  }
	  return null;
	}

	var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

	function describeFiber(fiber) {
	  switch (fiber.tag) {
	    case IndeterminateComponent:
	    case LazyComponent:
	    case FunctionComponent:
	    case ClassComponent:
	    case HostComponent:
	    case Mode:
	    case SuspenseComponent:
	      var owner = fiber._debugOwner;
	      var source = fiber._debugSource;
	      var name = getComponentName(fiber.type);
	      var ownerName = null;
	      if (owner) {
	        ownerName = getComponentName(owner.type);
	      }
	      return describeComponentFrame(name, source, ownerName);
	    default:
	      return '';
	  }
	}

	function getStackByFiberInDevAndProd(workInProgress) {
	  var info = '';
	  var node = workInProgress;
	  do {
	    info += describeFiber(node);
	    node = node.return;
	  } while (node);
	  return info;
	}

	var current = null;
	var phase = null;

	function getCurrentFiberOwnerNameInDevOrNull() {
	  {
	    if (current === null) {
	      return null;
	    }
	    var owner = current._debugOwner;
	    if (owner !== null && typeof owner !== 'undefined') {
	      return getComponentName(owner.type);
	    }
	  }
	  return null;
	}

	function getCurrentFiberStackInDev() {
	  {
	    if (current === null) {
	      return '';
	    }
	    // Safe because if current fiber exists, we are reconciling,
	    // and it is guaranteed to be the work-in-progress version.
	    return getStackByFiberInDevAndProd(current);
	  }
	  return '';
	}

	function resetCurrentFiber() {
	  {
	    ReactDebugCurrentFrame.getCurrentStack = null;
	    current = null;
	    phase = null;
	  }
	}

	function setCurrentFiber(fiber) {
	  {
	    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
	    current = fiber;
	    phase = null;
	  }
	}

	function setCurrentPhase(lifeCyclePhase) {
	  {
	    phase = lifeCyclePhase;
	  }
	}

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = warningWithoutStack$1;

	{
	  warning = function (condition, format) {
	    if (condition) {
	      return;
	    }
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();
	    // eslint-disable-next-line react-internal/warning-and-invariant-args

	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
	  };
	}

	var warning$1 = warning;

	// A reserved attribute.
	// It is handled by React separately and shouldn't be written to the DOM.
	var RESERVED = 0;

	// A simple string attribute.
	// Attributes that aren't in the whitelist are presumed to have this type.
	var STRING = 1;

	// A string attribute that accepts booleans in React. In HTML, these are called
	// "enumerated" attributes with "true" and "false" as possible values.
	// When true, it should be set to a "true" string.
	// When false, it should be set to a "false" string.
	var BOOLEANISH_STRING = 2;

	// A real boolean attribute.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.
	var BOOLEAN = 3;

	// An attribute that can be used as a flag as well as with a value.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.
	// For any other value, should be present with that value.
	var OVERLOADED_BOOLEAN = 4;

	// An attribute that must be numeric or parse as a numeric.
	// When falsy, it should be removed.
	var NUMERIC = 5;

	// An attribute that must be positive numeric or parse as a positive numeric.
	// When falsy, it should be removed.
	var POSITIVE_NUMERIC = 6;

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */
	var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';


	var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');

	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
	    return true;
	  }
	  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  {
	    warning$1(false, 'Invalid attribute name: `%s`', attributeName);
	  }
	  return false;
	}

	function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null) {
	    return propertyInfo.type === RESERVED;
	  }
	  if (isCustomComponentTag) {
	    return false;
	  }
	  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
	    return true;
	  }
	  return false;
	}

	function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
	    return false;
	  }
	  switch (typeof value) {
	    case 'function':
	    // $FlowIssue symbol is perfectly valid here
	    case 'symbol':
	      // eslint-disable-line
	      return true;
	    case 'boolean':
	      {
	        if (isCustomComponentTag) {
	          return false;
	        }
	        if (propertyInfo !== null) {
	          return !propertyInfo.acceptsBooleans;
	        } else {
	          var prefix = name.toLowerCase().slice(0, 5);
	          return prefix !== 'data-' && prefix !== 'aria-';
	        }
	      }
	    default:
	      return false;
	  }
	}

	function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
	  if (value === null || typeof value === 'undefined') {
	    return true;
	  }
	  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
	    return true;
	  }
	  if (isCustomComponentTag) {
	    return false;
	  }
	  if (propertyInfo !== null) {
	    switch (propertyInfo.type) {
	      case BOOLEAN:
	        return !value;
	      case OVERLOADED_BOOLEAN:
	        return value === false;
	      case NUMERIC:
	        return isNaN(value);
	      case POSITIVE_NUMERIC:
	        return isNaN(value) || value < 1;
	    }
	  }
	  return false;
	}

	function getPropertyInfo(name) {
	  return properties.hasOwnProperty(name) ? properties[name] : null;
	}

	function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace) {
	  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
	  this.attributeName = attributeName;
	  this.attributeNamespace = attributeNamespace;
	  this.mustUseProperty = mustUseProperty;
	  this.propertyName = name;
	  this.type = type;
	}

	// When adding attributes to this list, be sure to also add them to
	// the `possibleStandardNames` module to ensure casing and incorrect
	// name warnings.
	var properties = {};

	// These props are reserved by React. They shouldn't be written to the DOM.
	['children', 'dangerouslySetInnerHTML',
	// TODO: This prevents the assignment of defaultValue to regular
	// elements (not just inputs). Now that ReactDOMInput assigns to the
	// defaultValue property -- do we need this?
	'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
	  name, // attributeName
	  null);
	} // attributeNamespace
	);

	// A few React string attributes have a different name.
	// This is a mapping from React prop names to the attribute names.
	[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
	  var name = _ref[0],
	      attributeName = _ref[1];

	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, // attributeName
	  null);
	} // attributeNamespace
	);

	// These are "enumerated" HTML attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).
	['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null);
	} // attributeNamespace
	);

	// These are "enumerated" SVG attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).
	// Since these are SVG attributes, their attribute names are case-sensitive.
	['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name, // attributeName
	  null);
	} // attributeNamespace
	);

	// These are HTML boolean attributes.
	['allowFullScreen', 'async',
	// Note: there is a special case that prevents it from being written to the DOM
	// on the client side because the browsers are inconsistent. Instead we call focus().
	'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless',
	// Microdata
	'itemScope'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null);
	} // attributeNamespace
	);

	// These are the few React props that we set as DOM properties
	// rather than attributes. These are all booleans.
	['checked',
	// Note: `option.selected` is not updated if `select.multiple` is
	// disabled with `removeAttribute`. We have special logic for handling this.
	'multiple', 'muted', 'selected'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
	  name, // attributeName
	  null);
	} // attributeNamespace
	);

	// These are HTML attributes that are "overloaded booleans": they behave like
	// booleans, but can also accept a string value.
	['capture', 'download'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
	  name, // attributeName
	  null);
	} // attributeNamespace
	);

	// These are HTML attributes that must be positive numbers.
	['cols', 'rows', 'size', 'span'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
	  name, // attributeName
	  null);
	} // attributeNamespace
	);

	// These are HTML attributes that must be numbers.
	['rowSpan', 'start'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null);
	} // attributeNamespace
	);

	var CAMELIZE = /[\-\:]([a-z])/g;
	var capitalize = function (token) {
	  return token[1].toUpperCase();
	};

	// This is a list of all SVG attributes that need special casing, namespacing,
	// or boolean value assignment. Regular attributes that just accept strings
	// and have the same names are omitted, just like in the HTML whitelist.
	// Some of these attributes can be hard to find. This list was created by
	// scrapping the MDN documentation.
	['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, null);
	} // attributeNamespace
	);

	// String SVG attributes with the xlink namespace.
	['xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/1999/xlink');
	});

	// String SVG attributes with the xml namespace.
	['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/XML/1998/namespace');
	});

	// Special case: this attribute exists both in HTML and SVG.
	// Its "tabindex" attribute name is case-sensitive in SVG so we can't just use
	// its React `tabIndex` name, like we do for attributes that exist only in HTML.
	properties.tabIndex = new PropertyInfoRecord('tabIndex', STRING, false, // mustUseProperty
	'tabindex', // attributeName
	null);

	/**
	 * Get the value for a property on a node. Only used in DEV for SSR validation.
	 * The "expected" argument is used as a hint of what the expected value is.
	 * Some properties have multiple equivalent values.
	 */
	function getValueForProperty(node, name, expected, propertyInfo) {
	  {
	    if (propertyInfo.mustUseProperty) {
	      var propertyName = propertyInfo.propertyName;

	      return node[propertyName];
	    } else {
	      var attributeName = propertyInfo.attributeName;

	      var stringValue = null;

	      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
	        if (node.hasAttribute(attributeName)) {
	          var value = node.getAttribute(attributeName);
	          if (value === '') {
	            return true;
	          }
	          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	            return value;
	          }
	          if (value === '' + expected) {
	            return expected;
	          }
	          return value;
	        }
	      } else if (node.hasAttribute(attributeName)) {
	        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	          // We had an attribute but shouldn't have had one, so read it
	          // for the error message.
	          return node.getAttribute(attributeName);
	        }
	        if (propertyInfo.type === BOOLEAN) {
	          // If this was a boolean, it doesn't matter what the value is
	          // the fact that we have it is the same as the expected.
	          return expected;
	        }
	        // Even if this property uses a namespace we use getAttribute
	        // because we assume its namespaced name is the same as our config.
	        // To use getAttributeNS we need the local name which we don't have
	        // in our config atm.
	        stringValue = node.getAttribute(attributeName);
	      }

	      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	        return stringValue === null ? expected : stringValue;
	      } else if (stringValue === '' + expected) {
	        return expected;
	      } else {
	        return stringValue;
	      }
	    }
	  }
	}

	/**
	 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
	 * The third argument is used as a hint of what the expected value is. Some
	 * attributes have multiple equivalent values.
	 */
	function getValueForAttribute(node, name, expected) {
	  {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (!node.hasAttribute(name)) {
	      return expected === undefined ? undefined : null;
	    }
	    var value = node.getAttribute(name);
	    if (value === '' + expected) {
	      return expected;
	    }
	    return value;
	  }
	}

	/**
	 * Sets the value for a property on a node.
	 *
	 * @param {DOMElement} node
	 * @param {string} name
	 * @param {*} value
	 */
	function setValueForProperty(node, name, value, isCustomComponentTag) {
	  var propertyInfo = getPropertyInfo(name);
	  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
	    return;
	  }
	  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
	    value = null;
	  }
	  // If the prop isn't in the special list, treat it as a simple attribute.
	  if (isCustomComponentTag || propertyInfo === null) {
	    if (isAttributeNameSafe(name)) {
	      var _attributeName = name;
	      if (value === null) {
	        node.removeAttribute(_attributeName);
	      } else {
	        node.setAttribute(_attributeName, '' + value);
	      }
	    }
	    return;
	  }
	  var mustUseProperty = propertyInfo.mustUseProperty;

	  if (mustUseProperty) {
	    var propertyName = propertyInfo.propertyName;

	    if (value === null) {
	      var type = propertyInfo.type;

	      node[propertyName] = type === BOOLEAN ? false : '';
	    } else {
	      // Contrary to `setAttribute`, object properties are properly
	      // `toString`ed by IE8/9.
	      node[propertyName] = value;
	    }
	    return;
	  }
	  // The rest are treated as attributes with special cases.
	  var attributeName = propertyInfo.attributeName,
	      attributeNamespace = propertyInfo.attributeNamespace;

	  if (value === null) {
	    node.removeAttribute(attributeName);
	  } else {
	    var _type = propertyInfo.type;

	    var attributeValue = void 0;
	    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
	      attributeValue = '';
	    } else {
	      // `setAttribute` with objects becomes only `[object]` in IE8/9,
	      // ('' + value) makes it output the correct toString()-value.
	      attributeValue = '' + value;
	    }
	    if (attributeNamespace) {
	      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
	    } else {
	      node.setAttribute(attributeName, attributeValue);
	    }
	  }
	}

	// Flow does not allow string concatenation of most non-string types. To work
	// around this limitation, we use an opaque type that can only be obtained by
	// passing the value through getToStringValue first.
	function toString(value) {
	  return '' + value;
	}

	function getToStringValue(value) {
	  switch (typeof value) {
	    case 'boolean':
	    case 'number':
	    case 'object':
	    case 'string':
	    case 'undefined':
	      return value;
	    default:
	      // function, symbol are assigned as empty strings
	      return '';
	  }
	}

	var ReactDebugCurrentFrame$1 = null;

	var ReactControlledValuePropTypes = {
	  checkPropTypes: null
	};

	{
	  ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

	  var hasReadOnlyValue = {
	    button: true,
	    checkbox: true,
	    image: true,
	    hidden: true,
	    radio: true,
	    reset: true,
	    submit: true
	  };

	  var propTypes = {
	    value: function (props, propName, componentName) {
	      if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null) {
	        return null;
	      }
	      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    },
	    checked: function (props, propName, componentName) {
	      if (props.onChange || props.readOnly || props.disabled || props[propName] == null) {
	        return null;
	      }
	      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    }
	  };

	  /**
	   * Provide a linked `value` attribute for controlled forms. You should not use
	   * this outside of the ReactDOM controlled form components.
	   */
	  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
	    checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$1.getStackAddendum);
	  };
	}

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}

	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */

	function getHostProps(element, props) {
	  var node = element;
	  var checked = props.checked;

	  var hostProps = _assign({}, props, {
	    defaultChecked: undefined,
	    defaultValue: undefined,
	    value: undefined,
	    checked: checked != null ? checked : node._wrapperState.initialChecked
	  });

	  return hostProps;
	}

	function initWrapperState(element, props) {
	  {
	    ReactControlledValuePropTypes.checkPropTypes('input', props);

	    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	      warning$1(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
	      didWarnCheckedDefaultChecked = true;
	    }
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      warning$1(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
	      didWarnValueDefaultValue = true;
	    }
	  }

	  var node = element;
	  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;

	  node._wrapperState = {
	    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
	    controlled: isControlled(props)
	  };
	}

	function updateChecked(element, props) {
	  var node = element;
	  var checked = props.checked;
	  if (checked != null) {
	    setValueForProperty(node, 'checked', checked, false);
	  }
	}

	function updateWrapper(element, props) {
	  var node = element;
	  {
	    var _controlled = isControlled(props);

	    if (!node._wrapperState.controlled && _controlled && !didWarnUncontrolledToControlled) {
	      warning$1(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
	      didWarnUncontrolledToControlled = true;
	    }
	    if (node._wrapperState.controlled && !_controlled && !didWarnControlledToUncontrolled) {
	      warning$1(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
	      didWarnControlledToUncontrolled = true;
	    }
	  }

	  updateChecked(element, props);

	  var value = getToStringValue(props.value);
	  var type = props.type;

	  if (value != null) {
	    if (type === 'number') {
	      if (value === 0 && node.value === '' ||
	      // We explicitly want to coerce to number here if possible.
	      // eslint-disable-next-line
	      node.value != value) {
	        node.value = toString(value);
	      }
	    } else if (node.value !== toString(value)) {
	      node.value = toString(value);
	    }
	  } else if (type === 'submit' || type === 'reset') {
	    // Submit/reset inputs need the attribute removed completely to avoid
	    // blank-text buttons.
	    node.removeAttribute('value');
	    return;
	  }

	  {
	    // When syncing the value attribute, the value comes from a cascade of
	    // properties:
	    //  1. The value React property
	    //  2. The defaultValue React property
	    //  3. Otherwise there should be no change
	    if (props.hasOwnProperty('value')) {
	      setDefaultValue(node, props.type, value);
	    } else if (props.hasOwnProperty('defaultValue')) {
	      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
	    }
	  }

	  {
	    // When syncing the checked attribute, it only changes when it needs
	    // to be removed, such as transitioning from a checkbox into a text input
	    if (props.checked == null && props.defaultChecked != null) {
	      node.defaultChecked = !!props.defaultChecked;
	    }
	  }
	}

	function postMountWrapper(element, props, isHydrating) {
	  var node = element;

	  // Do not assign value if it is already set. This prevents user text input
	  // from being lost during SSR hydration.
	  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
	    var type = props.type;
	    var isButton = type === 'submit' || type === 'reset';

	    // Avoid setting value attribute on submit/reset inputs as it overrides the
	    // default value provided by the browser. See: #12872
	    if (isButton && (props.value === undefined || props.value === null)) {
	      return;
	    }

	    var _initialValue = toString(node._wrapperState.initialValue);

	    // Do not assign value if it is already set. This prevents user text input
	    // from being lost during SSR hydration.
	    if (!isHydrating) {
	      {
	        // When syncing the value attribute, the value property should use
	        // the wrapperState._initialValue property. This uses:
	        //
	        //   1. The value React property when present
	        //   2. The defaultValue React property when present
	        //   3. An empty string
	        if (_initialValue !== node.value) {
	          node.value = _initialValue;
	        }
	      }
	    }

	    {
	      // Otherwise, the value attribute is synchronized to the property,
	      // so we assign defaultValue to the same thing as the value property
	      // assignment step above.
	      node.defaultValue = _initialValue;
	    }
	  }

	  // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	  // this is needed to work around a chrome bug where setting defaultChecked
	  // will sometimes influence the value of checked (even after detachment).
	  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	  // We need to temporarily unset name to avoid disrupting radio button groups.
	  var name = node.name;
	  if (name !== '') {
	    node.name = '';
	  }

	  {
	    // When syncing the checked attribute, both the checked property and
	    // attribute are assigned at the same time using defaultChecked. This uses:
	    //
	    //   1. The checked React property when present
	    //   2. The defaultChecked React property when present
	    //   3. Otherwise, false
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !!node._wrapperState.initialChecked;
	  }

	  if (name !== '') {
	    node.name = name;
	  }
	}

	function restoreControlledState(element, props) {
	  var node = element;
	  updateWrapper(node, props);
	  updateNamedCousins(node, props);
	}

	function updateNamedCousins(rootNode, props) {
	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form. It might not even be in the
	    // document. Let's just use the local `querySelectorAll` to ensure we don't
	    // miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
	      !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;

	      // We need update the tracked value on the named cousin since the value
	      // was changed but the input saw no event or value set
	      updateValueIfChanged(otherNode);

	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      updateWrapper(otherNode, otherProps);
	    }
	  }
	}

	// In Chrome, assigning defaultValue to certain input types triggers input validation.
	// For number inputs, the display value loses trailing decimal points. For email inputs,
	// Chrome raises "The specified value <x> is not a valid email address".
	//
	// Here we check to see if the defaultValue has actually changed, avoiding these problems
	// when the user is inputting text
	//
	// https://github.com/facebook/react/issues/7253
	function setDefaultValue(node, type, value) {
	  if (
	  // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
	  type !== 'number' || node.ownerDocument.activeElement !== node) {
	    if (value == null) {
	      node.defaultValue = toString(node._wrapperState.initialValue);
	    } else if (node.defaultValue !== toString(value)) {
	      node.defaultValue = toString(value);
	    }
	  }
	}

	var eventTypes$1 = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
	  }
	};

	function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
	  var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
	  event.type = 'change';
	  // Flag this event loop as needing state restore.
	  enqueueStateRestore(target);
	  accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  runEventsInBatch(event);
	}

	function getInstIfValueChanged(targetInst) {
	  var targetNode = getNodeFromInstance$1(targetInst);
	  if (updateValueIfChanged(targetNode)) {
	    return targetInst;
	  }
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_CHANGE) {
	    return targetInst;
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
	}

	/**
	 * (For IE <=9) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For IE <=9) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  activeElement = null;
	  activeElementInst = null;
	}

	/**
	 * (For IE <=9) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  if (getInstIfValueChanged(activeElementInst)) {
	    manualDispatchChangeEvent(nativeEvent);
	  }
	}

	function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
	  if (topLevelType === TOP_FOCUS) {
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === TOP_BLUR) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
	  if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    return getInstIfValueChanged(activeElementInst);
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_CLICK) {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function handleControlledInputBlur(node) {
	  var state = node._wrapperState;

	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }

	  {
	    // If controlled, assign the value attribute to the current value on blur
	    setDefaultValue(node, 'number', node.value);
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	  eventTypes: eventTypes$1,

	  _isInputEventSupported: isInputEventSupported,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

	    var getTargetInstFunc = void 0,
	        handleEventFunc = void 0;
	    if (shouldUseChangeEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForChangeEvent;
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventPolyfill;
	        handleEventFunc = handleEventsForInputEventPolyfill;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }

	    // When blurring, set the value attribute for number inputs
	    if (topLevelType === TOP_BLUR) {
	      handleControlledInputBlur(targetNode);
	    }
	  }
	};

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

	var SyntheticUIEvent = SyntheticEvent.extend({
	  view: null,
	  detail: null
	});

	var modifierKeyToProp = {
	  Alt: 'altKey',
	  Control: 'ctrlKey',
	  Meta: 'metaKey',
	  Shift: 'shiftKey'
	};

	// Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
	// getModifierState. If getModifierState is not supported, we map it to a set of
	// modifier keys exposed by the event. In this case, Lock-keys are not supported.
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	var previousScreenX = 0;
	var previousScreenY = 0;
	// Use flags to signal movementX/Y has already been set
	var isMovementXSet = false;
	var isMovementYSet = false;

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var SyntheticMouseEvent = SyntheticUIEvent.extend({
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  pageX: null,
	  pageY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: null,
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  movementX: function (event) {
	    if ('movementX' in event) {
	      return event.movementX;
	    }

	    var screenX = previousScreenX;
	    previousScreenX = event.screenX;

	    if (!isMovementXSet) {
	      isMovementXSet = true;
	      return 0;
	    }

	    return event.type === 'mousemove' ? event.screenX - screenX : 0;
	  },
	  movementY: function (event) {
	    if ('movementY' in event) {
	      return event.movementY;
	    }

	    var screenY = previousScreenY;
	    previousScreenY = event.screenY;

	    if (!isMovementYSet) {
	      isMovementYSet = true;
	      return 0;
	    }

	    return event.type === 'mousemove' ? event.screenY - screenY : 0;
	  }
	});

	/**
	 * @interface PointerEvent
	 * @see http://www.w3.org/TR/pointerevents/
	 */
	var SyntheticPointerEvent = SyntheticMouseEvent.extend({
	  pointerId: null,
	  width: null,
	  height: null,
	  pressure: null,
	  tangentialPressure: null,
	  tiltX: null,
	  tiltY: null,
	  twist: null,
	  pointerType: null,
	  isPrimary: null
	});

	var eventTypes$2 = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
	  },
	  pointerEnter: {
	    registrationName: 'onPointerEnter',
	    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
	  },
	  pointerLeave: {
	    registrationName: 'onPointerLeave',
	    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
	  }
	};

	var EnterLeaveEventPlugin = {
	  eventTypes: eventTypes$2,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
	    var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

	    if (isOverEvent && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }

	    if (!isOutEvent && !isOverEvent) {
	      // Must not be a mouse or pointer in or out - ignoring.
	      return null;
	    }

	    var win = void 0;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from = void 0;
	    var to = void 0;
	    if (isOutEvent) {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var eventInterface = void 0,
	        leaveEventType = void 0,
	        enterEventType = void 0,
	        eventTypePrefix = void 0;

	    if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
	      eventInterface = SyntheticMouseEvent;
	      leaveEventType = eventTypes$2.mouseLeave;
	      enterEventType = eventTypes$2.mouseEnter;
	      eventTypePrefix = 'mouse';
	    } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
	      eventInterface = SyntheticPointerEvent;
	      leaveEventType = eventTypes$2.pointerLeave;
	      enterEventType = eventTypes$2.pointerEnter;
	      eventTypePrefix = 'pointer';
	    }

	    var fromNode = from == null ? win : getNodeFromInstance$1(from);
	    var toNode = to == null ? win : getNodeFromInstance$1(to);

	    var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
	    leave.type = eventTypePrefix + 'leave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;

	    var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
	    enter.type = eventTypePrefix + 'enter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;

	    accumulateEnterLeaveDispatches(leave, enter, from, to);

	    return [leave, enter];
	  }
	};

	/*eslint-disable no-self-compare */

	var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty$1.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 *
	 * Note that this module is currently shared and assumed to be stateless.
	 * If this becomes an actual Map, that will break.
	 */

	/**
	 * This API should be called `delete` but we'd have to make sure to always
	 * transform these to strings for IE support. When this transform is fully
	 * supported we can rename it.
	 */


	function get(key) {
	  return key._reactInternalFiber;
	}

	function has(key) {
	  return key._reactInternalFiber !== undefined;
	}

	function set(key, value) {
	  key._reactInternalFiber = value;
	}

	// Don't change these two values. They're used by React Dev Tools.
	var NoEffect = /*              */0;
	var PerformedWork = /*         */1;

	// You can change the rest (and add more).
	var Placement = /*             */2;
	var Update = /*                */4;
	var PlacementAndUpdate = /*    */6;
	var Deletion = /*              */8;
	var ContentReset = /*          */16;
	var Callback = /*              */32;
	var DidCapture = /*            */64;
	var Ref = /*                   */128;
	var Snapshot = /*              */256;

	// Passive & Update & Callback & Ref & Snapshot
	var LifecycleEffectMask = /*   */932;

	// Union of all host effects
	var HostEffectMask = /*        */1023;

	var Incomplete = /*            */1024;
	var ShouldCapture = /*         */2048;

	var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;

	var MOUNTING = 1;
	var MOUNTED = 2;
	var UNMOUNTED = 3;

	function isFiberMountedImpl(fiber) {
	  var node = fiber;
	  if (!fiber.alternate) {
	    // If there is no alternate, this might be a new tree that isn't inserted
	    // yet. If it is, then it will have a pending insertion effect on it.
	    if ((node.effectTag & Placement) !== NoEffect) {
	      return MOUNTING;
	    }
	    while (node.return) {
	      node = node.return;
	      if ((node.effectTag & Placement) !== NoEffect) {
	        return MOUNTING;
	      }
	    }
	  } else {
	    while (node.return) {
	      node = node.return;
	    }
	  }
	  if (node.tag === HostRoot) {
	    // TODO: Check if this was a nested HostRoot when used with
	    // renderContainerIntoSubtree.
	    return MOUNTED;
	  }
	  // If we didn't hit the root, that means that we're in an disconnected tree
	  // that has been unmounted.
	  return UNMOUNTED;
	}

	function isFiberMounted(fiber) {
	  return isFiberMountedImpl(fiber) === MOUNTED;
	}

	function isMounted(component) {
	  {
	    var owner = ReactCurrentOwner$1.current;
	    if (owner !== null && owner.tag === ClassComponent) {
	      var ownerFiber = owner;
	      var instance = ownerFiber.stateNode;
	      !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component') : void 0;
	      instance._warnedAboutRefsInRender = true;
	    }
	  }

	  var fiber = get(component);
	  if (!fiber) {
	    return false;
	  }
	  return isFiberMountedImpl(fiber) === MOUNTED;
	}

	function assertIsMounted(fiber) {
	  !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
	}

	function findCurrentFiberUsingSlowPath(fiber) {
	  var alternate = fiber.alternate;
	  if (!alternate) {
	    // If there is no alternate, then we only need to check if it is mounted.
	    var state = isFiberMountedImpl(fiber);
	    !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
	    if (state === MOUNTING) {
	      return null;
	    }
	    return fiber;
	  }
	  // If we have two possible branches, we'll walk backwards up to the root
	  // to see what path the root points to. On the way we may hit one of the
	  // special cases and we'll deal with them.
	  var a = fiber;
	  var b = alternate;
	  while (true) {
	    var parentA = a.return;
	    var parentB = parentA ? parentA.alternate : null;
	    if (!parentA || !parentB) {
	      // We're at the root.
	      break;
	    }

	    // If both copies of the parent fiber point to the same child, we can
	    // assume that the child is current. This happens when we bailout on low
	    // priority: the bailed out fiber's child reuses the current child.
	    if (parentA.child === parentB.child) {
	      var child = parentA.child;
	      while (child) {
	        if (child === a) {
	          // We've determined that A is the current branch.
	          assertIsMounted(parentA);
	          return fiber;
	        }
	        if (child === b) {
	          // We've determined that B is the current branch.
	          assertIsMounted(parentA);
	          return alternate;
	        }
	        child = child.sibling;
	      }
	      // We should never have an alternate for any mounting node. So the only
	      // way this could possibly happen is if this was unmounted, if at all.
	      invariant(false, 'Unable to find node on an unmounted component.');
	    }

	    if (a.return !== b.return) {
	      // The return pointer of A and the return pointer of B point to different
	      // fibers. We assume that return pointers never criss-cross, so A must
	      // belong to the child set of A.return, and B must belong to the child
	      // set of B.return.
	      a = parentA;
	      b = parentB;
	    } else {
	      // The return pointers point to the same fiber. We'll have to use the
	      // default, slow path: scan the child sets of each parent alternate to see
	      // which child belongs to which set.
	      //
	      // Search parent A's child set
	      var didFindChild = false;
	      var _child = parentA.child;
	      while (_child) {
	        if (_child === a) {
	          didFindChild = true;
	          a = parentA;
	          b = parentB;
	          break;
	        }
	        if (_child === b) {
	          didFindChild = true;
	          b = parentA;
	          a = parentB;
	          break;
	        }
	        _child = _child.sibling;
	      }
	      if (!didFindChild) {
	        // Search parent B's child set
	        _child = parentB.child;
	        while (_child) {
	          if (_child === a) {
	            didFindChild = true;
	            a = parentB;
	            b = parentA;
	            break;
	          }
	          if (_child === b) {
	            didFindChild = true;
	            b = parentB;
	            a = parentA;
	            break;
	          }
	          _child = _child.sibling;
	        }
	        !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
	      }
	    }

	    !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  }
	  // If the root is not a host container, we're in a disconnected tree. I.e.
	  // unmounted.
	  !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
	  if (a.stateNode.current === a) {
	    // We've determined that A is the current branch.
	    return fiber;
	  }
	  // Otherwise B has to be current branch.
	  return alternate;
	}

	function findCurrentHostFiber(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);
	  if (!currentParent) {
	    return null;
	  }

	  // Next we'll drill down this component to find the first HostComponent/Text.
	  var node = currentParent;
	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText) {
	      return node;
	    } else if (node.child) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }
	    if (node === currentParent) {
	      return null;
	    }
	    while (!node.sibling) {
	      if (!node.return || node.return === currentParent) {
	        return null;
	      }
	      node = node.return;
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	  // Flow needs the return null here, but ESLint complains about it.
	  // eslint-disable-next-line no-unreachable
	  return null;
	}

	function findCurrentHostFiberWithNoPortals(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);
	  if (!currentParent) {
	    return null;
	  }

	  // Next we'll drill down this component to find the first HostComponent/Text.
	  var node = currentParent;
	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText) {
	      return node;
	    } else if (node.child && node.tag !== HostPortal) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }
	    if (node === currentParent) {
	      return null;
	    }
	    while (!node.sibling) {
	      if (!node.return || node.return === currentParent) {
	        return null;
	      }
	      node = node.return;
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	  // Flow needs the return null here, but ESLint complains about it.
	  // eslint-disable-next-line no-unreachable
	  return null;
	}

	function addEventBubbleListener(element, eventType, listener) {
	  element.addEventListener(eventType, listener, false);
	}

	function addEventCaptureListener(element, eventType, listener) {
	  element.addEventListener(eventType, listener, true);
	}

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var SyntheticAnimationEvent = SyntheticEvent.extend({
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var SyntheticClipboardEvent = SyntheticEvent.extend({
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	});

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var SyntheticFocusEvent = SyntheticUIEvent.extend({
	  relatedTarget: null
	});

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode = void 0;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
	  // report Enter as charCode 10 when ctrl is pressed.
	  if (charCode === 10) {
	    charCode = 13;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  Esc: 'Escape',
	  Spacebar: ' ',
	  Left: 'ArrowLeft',
	  Up: 'ArrowUp',
	  Right: 'ArrowRight',
	  Down: 'ArrowDown',
	  Del: 'Delete',
	  Win: 'OS',
	  Menu: 'ContextMenu',
	  Apps: 'ContextMenu',
	  Scroll: 'ScrollLock',
	  MozPrintableKey: 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  '8': 'Backspace',
	  '9': 'Tab',
	  '12': 'Clear',
	  '13': 'Enter',
	  '16': 'Shift',
	  '17': 'Control',
	  '18': 'Alt',
	  '19': 'Pause',
	  '20': 'CapsLock',
	  '27': 'Escape',
	  '32': ' ',
	  '33': 'PageUp',
	  '34': 'PageDown',
	  '35': 'End',
	  '36': 'Home',
	  '37': 'ArrowLeft',
	  '38': 'ArrowUp',
	  '39': 'ArrowRight',
	  '40': 'ArrowDown',
	  '45': 'Insert',
	  '46': 'Delete',
	  '112': 'F1',
	  '113': 'F2',
	  '114': 'F3',
	  '115': 'F4',
	  '116': 'F5',
	  '117': 'F6',
	  '118': 'F7',
	  '119': 'F8',
	  '120': 'F9',
	  '121': 'F10',
	  '122': 'F11',
	  '123': 'F12',
	  '144': 'NumLock',
	  '145': 'ScrollLock',
	  '224': 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	});

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var SyntheticDragEvent = SyntheticMouseEvent.extend({
	  dataTransfer: null
	});

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var SyntheticTouchEvent = SyntheticUIEvent.extend({
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var SyntheticTransitionEvent = SyntheticEvent.extend({
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	});

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var SyntheticWheelEvent = SyntheticMouseEvent.extend({
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },

	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	});

	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: [TOP_ABORT],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = new Map([
	 *   [TOP_ABORT, { sameConfig }],
	 * ]);
	 */

	var interactiveEventTypeNames = [[TOP_BLUR, 'blur'], [TOP_CANCEL, 'cancel'], [TOP_CLICK, 'click'], [TOP_CLOSE, 'close'], [TOP_CONTEXT_MENU, 'contextMenu'], [TOP_COPY, 'copy'], [TOP_CUT, 'cut'], [TOP_AUX_CLICK, 'auxClick'], [TOP_DOUBLE_CLICK, 'doubleClick'], [TOP_DRAG_END, 'dragEnd'], [TOP_DRAG_START, 'dragStart'], [TOP_DROP, 'drop'], [TOP_FOCUS, 'focus'], [TOP_INPUT, 'input'], [TOP_INVALID, 'invalid'], [TOP_KEY_DOWN, 'keyDown'], [TOP_KEY_PRESS, 'keyPress'], [TOP_KEY_UP, 'keyUp'], [TOP_MOUSE_DOWN, 'mouseDown'], [TOP_MOUSE_UP, 'mouseUp'], [TOP_PASTE, 'paste'], [TOP_PAUSE, 'pause'], [TOP_PLAY, 'play'], [TOP_POINTER_CANCEL, 'pointerCancel'], [TOP_POINTER_DOWN, 'pointerDown'], [TOP_POINTER_UP, 'pointerUp'], [TOP_RATE_CHANGE, 'rateChange'], [TOP_RESET, 'reset'], [TOP_SEEKED, 'seeked'], [TOP_SUBMIT, 'submit'], [TOP_TOUCH_CANCEL, 'touchCancel'], [TOP_TOUCH_END, 'touchEnd'], [TOP_TOUCH_START, 'touchStart'], [TOP_VOLUME_CHANGE, 'volumeChange']];
	var nonInteractiveEventTypeNames = [[TOP_ABORT, 'abort'], [TOP_ANIMATION_END, 'animationEnd'], [TOP_ANIMATION_ITERATION, 'animationIteration'], [TOP_ANIMATION_START, 'animationStart'], [TOP_CAN_PLAY, 'canPlay'], [TOP_CAN_PLAY_THROUGH, 'canPlayThrough'], [TOP_DRAG, 'drag'], [TOP_DRAG_ENTER, 'dragEnter'], [TOP_DRAG_EXIT, 'dragExit'], [TOP_DRAG_LEAVE, 'dragLeave'], [TOP_DRAG_OVER, 'dragOver'], [TOP_DURATION_CHANGE, 'durationChange'], [TOP_EMPTIED, 'emptied'], [TOP_ENCRYPTED, 'encrypted'], [TOP_ENDED, 'ended'], [TOP_ERROR, 'error'], [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture'], [TOP_LOAD, 'load'], [TOP_LOADED_DATA, 'loadedData'], [TOP_LOADED_METADATA, 'loadedMetadata'], [TOP_LOAD_START, 'loadStart'], [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture'], [TOP_MOUSE_MOVE, 'mouseMove'], [TOP_MOUSE_OUT, 'mouseOut'], [TOP_MOUSE_OVER, 'mouseOver'], [TOP_PLAYING, 'playing'], [TOP_POINTER_MOVE, 'pointerMove'], [TOP_POINTER_OUT, 'pointerOut'], [TOP_POINTER_OVER, 'pointerOver'], [TOP_PROGRESS, 'progress'], [TOP_SCROLL, 'scroll'], [TOP_SEEKING, 'seeking'], [TOP_STALLED, 'stalled'], [TOP_SUSPEND, 'suspend'], [TOP_TIME_UPDATE, 'timeUpdate'], [TOP_TOGGLE, 'toggle'], [TOP_TOUCH_MOVE, 'touchMove'], [TOP_TRANSITION_END, 'transitionEnd'], [TOP_WAITING, 'waiting'], [TOP_WHEEL, 'wheel']];

	var eventTypes$4 = {};
	var topLevelEventsToDispatchConfig = {};

	function addEventTypeNameToConfig(_ref, isInteractive) {
	  var topEvent = _ref[0],
	      event = _ref[1];

	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;

	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent],
	    isInteractive: isInteractive
	  };
	  eventTypes$4[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	}

	interactiveEventTypeNames.forEach(function (eventTuple) {
	  addEventTypeNameToConfig(eventTuple, true);
	});
	nonInteractiveEventTypeNames.forEach(function (eventTuple) {
	  addEventTypeNameToConfig(eventTuple, false);
	});

	// Only used in DEV for exhaustiveness validation.
	var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];

	var SimpleEventPlugin = {
	  eventTypes: eventTypes$4,

	  isInteractiveTopLevelEventType: function (topLevelType) {
	    var config = topLevelEventsToDispatchConfig[topLevelType];
	    return config !== undefined && config.isInteractive === true;
	  },


	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor = void 0;
	    switch (topLevelType) {
	      case TOP_KEY_PRESS:
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case TOP_KEY_DOWN:
	      case TOP_KEY_UP:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case TOP_BLUR:
	      case TOP_FOCUS:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case TOP_CLICK:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case TOP_AUX_CLICK:
	      case TOP_DOUBLE_CLICK:
	      case TOP_MOUSE_DOWN:
	      case TOP_MOUSE_MOVE:
	      case TOP_MOUSE_UP:
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case TOP_MOUSE_OUT:
	      case TOP_MOUSE_OVER:
	      case TOP_CONTEXT_MENU:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case TOP_DRAG:
	      case TOP_DRAG_END:
	      case TOP_DRAG_ENTER:
	      case TOP_DRAG_EXIT:
	      case TOP_DRAG_LEAVE:
	      case TOP_DRAG_OVER:
	      case TOP_DRAG_START:
	      case TOP_DROP:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case TOP_TOUCH_CANCEL:
	      case TOP_TOUCH_END:
	      case TOP_TOUCH_MOVE:
	      case TOP_TOUCH_START:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case TOP_ANIMATION_END:
	      case TOP_ANIMATION_ITERATION:
	      case TOP_ANIMATION_START:
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case TOP_TRANSITION_END:
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case TOP_SCROLL:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case TOP_WHEEL:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case TOP_COPY:
	      case TOP_CUT:
	      case TOP_PASTE:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	      case TOP_GOT_POINTER_CAPTURE:
	      case TOP_LOST_POINTER_CAPTURE:
	      case TOP_POINTER_CANCEL:
	      case TOP_POINTER_DOWN:
	      case TOP_POINTER_MOVE:
	      case TOP_POINTER_OUT:
	      case TOP_POINTER_OVER:
	      case TOP_POINTER_UP:
	        EventConstructor = SyntheticPointerEvent;
	        break;
	      default:
	        {
	          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
	            warningWithoutStack$1(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
	          }
	        }
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	    }
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    accumulateTwoPhaseDispatches(event);
	    return event;
	  }
	};

	var isInteractiveTopLevelEventType = SimpleEventPlugin.isInteractiveTopLevelEventType;


	var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
	var callbackBookkeepingPool = [];

	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findRootContainerNode(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst.return) {
	    inst = inst.return;
	  }
	  if (inst.tag !== HostRoot) {
	    // This can happen if we're in a detached tree.
	    return null;
	  }
	  return inst.stateNode.containerInfo;
	}

	// Used to store ancestor hierarchy in top level callback
	function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
	  if (callbackBookkeepingPool.length) {
	    var instance = callbackBookkeepingPool.pop();
	    instance.topLevelType = topLevelType;
	    instance.nativeEvent = nativeEvent;
	    instance.targetInst = targetInst;
	    return instance;
	  }
	  return {
	    topLevelType: topLevelType,
	    nativeEvent: nativeEvent,
	    targetInst: targetInst,
	    ancestors: []
	  };
	}

	function releaseTopLevelCallbackBookKeeping(instance) {
	  instance.topLevelType = null;
	  instance.nativeEvent = null;
	  instance.targetInst = null;
	  instance.ancestors.length = 0;
	  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
	    callbackBookkeepingPool.push(instance);
	  }
	}

	function handleTopLevel(bookKeeping) {
	  var targetInst = bookKeeping.targetInst;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    if (!ancestor) {
	      bookKeeping.ancestors.push(ancestor);
	      break;
	    }
	    var root = findRootContainerNode(ancestor);
	    if (!root) {
	      break;
	    }
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = getClosestInstanceFromNode(root);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    runExtractedEventsInBatch(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// TODO: can we stop exporting these?
	var _enabled = true;

	function setEnabled(enabled) {
	  _enabled = !!enabled;
	}

	function isEnabled() {
	  return _enabled;
	}

	/**
	 * Traps top-level events by using event bubbling.
	 *
	 * @param {number} topLevelType Number from `TopLevelEventTypes`.
	 * @param {object} element Element on which to attach listener.
	 * @return {?object} An object with a remove function which will forcefully
	 *                  remove the listener.
	 * @internal
	 */
	function trapBubbledEvent(topLevelType, element) {
	  if (!element) {
	    return null;
	  }
	  var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;

	  addEventBubbleListener(element, getRawEventName(topLevelType),
	  // Check if interactive and wrap in interactiveUpdates
	  dispatch.bind(null, topLevelType));
	}

	/**
	 * Traps a top-level event by using event capturing.
	 *
	 * @param {number} topLevelType Number from `TopLevelEventTypes`.
	 * @param {object} element Element on which to attach listener.
	 * @return {?object} An object with a remove function which will forcefully
	 *                  remove the listener.
	 * @internal
	 */
	function trapCapturedEvent(topLevelType, element) {
	  if (!element) {
	    return null;
	  }
	  var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;

	  addEventCaptureListener(element, getRawEventName(topLevelType),
	  // Check if interactive and wrap in interactiveUpdates
	  dispatch.bind(null, topLevelType));
	}

	function dispatchInteractiveEvent(topLevelType, nativeEvent) {
	  interactiveUpdates(dispatchEvent, topLevelType, nativeEvent);
	}

	function dispatchEvent(topLevelType, nativeEvent) {
	  if (!_enabled) {
	    return;
	  }

	  var nativeEventTarget = getEventTarget(nativeEvent);
	  var targetInst = getClosestInstanceFromNode(nativeEventTarget);
	  if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
	    // If we get an event (ex: img onload) before committing that
	    // component's mount, ignore it for now (that is, treat it as if it was an
	    // event on a non-React tree). We might also consider queueing events and
	    // dispatching them after the mount.
	    targetInst = null;
	  }

	  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);

	  try {
	    // Event queue being processed in the same cycle allows
	    // `preventDefault`.
	    batchedUpdates(handleTopLevel, bookKeeping);
	  } finally {
	    releaseTopLevelCallbackBookKeeping(bookKeeping);
	  }
	}

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactDOMEventListener, which is injected and can therefore support
	 *    pluggable event sources. This is the only work that occurs in the main
	 *    thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var reactTopListenersCounter = 0;

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * We listen for bubbled touch events on the document object.
	 *
	 * Firefox v8.01 (and possibly others) exhibited strange behavior when
	 * mounting `onmousemove` events at some node that was not the document
	 * element. The symptoms were that if your mouse is not moving over something
	 * contained within that mount point (for example on the background) the
	 * top-level listeners for `onmousemove` won't be called. However, if you
	 * register the `mousemove` on the document object, then it will of course
	 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	 * top-level listeners to the document object only, at least for these
	 * movement types of events and possibly all events.
	 *
	 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	 *
	 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	 * they bubble to document.
	 *
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @param {object} mountAt Container where to mount the listener
	 */
	function listenTo(registrationName, mountAt) {
	  var isListening = getListeningForDocument(mountAt);
	  var dependencies = registrationNameDependencies[registrationName];

	  for (var i = 0; i < dependencies.length; i++) {
	    var dependency = dependencies[i];
	    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	      switch (dependency) {
	        case TOP_SCROLL:
	          trapCapturedEvent(TOP_SCROLL, mountAt);
	          break;
	        case TOP_FOCUS:
	        case TOP_BLUR:
	          trapCapturedEvent(TOP_FOCUS, mountAt);
	          trapCapturedEvent(TOP_BLUR, mountAt);
	          // We set the flag for a single dependency later in this function,
	          // but this ensures we mark both as attached rather than just one.
	          isListening[TOP_BLUR] = true;
	          isListening[TOP_FOCUS] = true;
	          break;
	        case TOP_CANCEL:
	        case TOP_CLOSE:
	          if (isEventSupported(getRawEventName(dependency))) {
	            trapCapturedEvent(dependency, mountAt);
	          }
	          break;
	        case TOP_INVALID:
	        case TOP_SUBMIT:
	        case TOP_RESET:
	          // We listen to them on the target DOM elements.
	          // Some of them bubble so we don't want them to fire twice.
	          break;
	        default:
	          // By default, listen on the top level to all non-media events.
	          // Media events don't bubble so adding the listener wouldn't do anything.
	          var isMediaEvent = mediaEventTypes.indexOf(dependency) !== -1;
	          if (!isMediaEvent) {
	            trapBubbledEvent(dependency, mountAt);
	          }
	          break;
	      }
	      isListening[dependency] = true;
	    }
	  }
	}

	function isListeningToAllDependencies(registrationName, mountAt) {
	  var isListening = getListeningForDocument(mountAt);
	  var dependencies = registrationNameDependencies[registrationName];
	  for (var i = 0; i < dependencies.length; i++) {
	    var dependency = dependencies[i];
	    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	      return false;
	    }
	  }
	  return true;
	}

	function getActiveElement(doc) {
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);
	  if (typeof doc === 'undefined') {
	    return null;
	  }
	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === TEXT_NODE) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	/**
	 * @param {DOMElement} outerNode
	 * @return {?object}
	 */
	function getOffsets(outerNode) {
	  var ownerDocument = outerNode.ownerDocument;

	  var win = ownerDocument && ownerDocument.defaultView || window;
	  var selection = win.getSelection && win.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode,
	      anchorOffset = selection.anchorOffset,
	      focusNode = selection.focusNode,
	      focusOffset = selection.focusOffset;

	  // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
	  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
	  // expose properties, triggering a "Permission denied error" if any of its
	  // properties are accessed. The only seemingly possible way to avoid erroring
	  // is to access a property that typically works for non-anonymous divs and
	  // catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

	  try {
	    /* eslint-disable no-unused-expressions */
	    anchorNode.nodeType;
	    focusNode.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
	}

	/**
	 * Returns {start, end} where `start` is the character/codepoint index of
	 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
	 * `end` is the index of (focusNode, focusOffset).
	 *
	 * Returns null if you pass in garbage input but we should probably just crash.
	 *
	 * Exported only for testing.
	 */
	function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
	  var length = 0;
	  var start = -1;
	  var end = -1;
	  var indexWithinAnchor = 0;
	  var indexWithinFocus = 0;
	  var node = outerNode;
	  var parentNode = null;

	  outer: while (true) {
	    var next = null;

	    while (true) {
	      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
	        start = length + anchorOffset;
	      }
	      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
	        end = length + focusOffset;
	      }

	      if (node.nodeType === TEXT_NODE) {
	        length += node.nodeValue.length;
	      }

	      if ((next = node.firstChild) === null) {
	        break;
	      }
	      // Moving from `node` to its first child `next`.
	      parentNode = node;
	      node = next;
	    }

	    while (true) {
	      if (node === outerNode) {
	        // If `outerNode` has children, this is always the second time visiting
	        // it. If it has no children, this is still the first loop, and the only
	        // valid selection is anchorNode and focusNode both equal to this node
	        // and both offsets 0, in which case we will have handled above.
	        break outer;
	      }
	      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
	        start = length;
	      }
	      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
	        end = length;
	      }
	      if ((next = node.nextSibling) !== null) {
	        break;
	      }
	      node = parentNode;
	      parentNode = node.parentNode;
	    }

	    // Moving from `node` to its next sibling `next`.
	    node = next;
	  }

	  if (start === -1 || end === -1) {
	    // This should never happen. (Would happen if the anchor/focus nodes aren't
	    // actually inside the passed-in node.)
	    return null;
	  }

	  return {
	    start: start,
	    end: end
	  };
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setOffsets(node, offsets) {
	  var doc = node.ownerDocument || document;
	  var win = doc && doc.defaultView || window;

	  // Edge fails with "Object expected" in some scenarios.
	  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
	  // fails when pasting 100+ items)
	  if (!win.getSelection) {
	    return;
	  }

	  var selection = win.getSelection();
	  var length = node.textContent.length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
	      return;
	    }
	    var range = doc.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	function isTextNode(node) {
	  return node && node.nodeType === TEXT_NODE;
	}

	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	function isInDocument(node) {
	  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
	}

	function getActiveElementDeep() {
	  var win = window;
	  var element = getActiveElement();
	  while (element instanceof win.HTMLIFrameElement) {
	    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
	    // to throw, e.g. if it has a cross-origin src attribute
	    try {
	      win = element.contentDocument.defaultView;
	    } catch (e) {
	      return element;
	    }
	    element = getActiveElement(win.document);
	  }
	  return element;
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */

	/**
	 * @hasSelectionCapabilities: we get the element types that support selection
	 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
	 * and `selectionEnd` rows.
	 */
	function hasSelectionCapabilities(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
	}

	function getSelectionInformation() {
	  var focusedElem = getActiveElementDeep();
	  return {
	    focusedElem: focusedElem,
	    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
	  };
	}

	/**
	 * @restoreSelection: If any selection information was potentially lost,
	 * restore it. This is useful when performing operations that could remove dom
	 * nodes and place them back in, resulting in focus being lost.
	 */
	function restoreSelection(priorSelectionInformation) {
	  var curFocusedElem = getActiveElementDeep();
	  var priorFocusedElem = priorSelectionInformation.focusedElem;
	  var priorSelectionRange = priorSelectionInformation.selectionRange;
	  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
	      setSelection(priorFocusedElem, priorSelectionRange);
	    }

	    // Focusing a node can change the scroll position, which is undesirable
	    var ancestors = [];
	    var ancestor = priorFocusedElem;
	    while (ancestor = ancestor.parentNode) {
	      if (ancestor.nodeType === ELEMENT_NODE) {
	        ancestors.push({
	          element: ancestor,
	          left: ancestor.scrollLeft,
	          top: ancestor.scrollTop
	        });
	      }
	    }

	    if (typeof priorFocusedElem.focus === 'function') {
	      priorFocusedElem.focus();
	    }

	    for (var i = 0; i < ancestors.length; i++) {
	      var info = ancestors[i];
	      info.element.scrollLeft = info.left;
	      info.element.scrollTop = info.top;
	    }
	  }
	}

	/**
	 * @getSelection: Gets the selection bounds of a focused textarea, input or
	 * contentEditable node.
	 * -@input: Look up selection bounds of this input
	 * -@return {start: selectionStart, end: selectionEnd}
	 */
	function getSelection$1(input) {
	  var selection = void 0;

	  if ('selectionStart' in input) {
	    // Modern browser with input or textarea.
	    selection = {
	      start: input.selectionStart,
	      end: input.selectionEnd
	    };
	  } else {
	    // Content editable or old IE textarea.
	    selection = getOffsets(input);
	  }

	  return selection || { start: 0, end: 0 };
	}

	/**
	 * @setSelection: Sets the selection bounds of a textarea or input and focuses
	 * the input.
	 * -@input     Set selection bounds of this input or textarea
	 * -@offsets   Object of same form that is returned from get*
	 */
	function setSelection(input, offsets) {
	  var start = offsets.start,
	      end = offsets.end;

	  if (end === undefined) {
	    end = start;
	  }

	  if ('selectionStart' in input) {
	    input.selectionStart = start;
	    input.selectionEnd = Math.min(end, input.value.length);
	  } else {
	    setOffsets(input, offsets);
	  }
	}

	var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes$3 = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
	  }
	};

	var activeElement$1 = null;
	var activeElementInst$1 = null;
	var lastSelection = null;
	var mouseDown = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else {
	    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
	    var selection = win.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  }
	}

	/**
	 * Get document associated with the event target.
	 *
	 * @param {object} nativeEventTarget
	 * @return {Document}
	 */
	function getEventTargetDocument(eventTarget) {
	  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @param {object} nativeEventTarget
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  var doc = getEventTargetDocument(nativeEventTarget);

	  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement$1);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement$1;

	    accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	  eventTypes: eventTypes$3,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var doc = getEventTargetDocument(nativeEventTarget);
	    // Track whether all listeners exists for this plugin. If none exist, we do
	    // not extract events. See #3639.
	    if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
	      return null;
	    }

	    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case TOP_FOCUS:
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement$1 = targetNode;
	          activeElementInst$1 = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case TOP_BLUR:
	        activeElement$1 = null;
	        activeElementInst$1 = null;
	        lastSelection = null;
	        break;
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case TOP_MOUSE_DOWN:
	        mouseDown = true;
	        break;
	      case TOP_CONTEXT_MENU:
	      case TOP_MOUSE_UP:
	      case TOP_DRAG_END:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case TOP_SELECTION_CHANGE:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case TOP_KEY_DOWN:
	      case TOP_KEY_UP:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  }
	};

	/**
	 * Inject modules for resolving DOM hierarchy and plugin ordering.
	 */
	injection.injectEventPluginOrder(DOMEventPluginOrder);
	setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);

	/**
	 * Some important event plugins included by default (without having to require
	 * them).
	 */
	injection.injectEventPluginsByName({
	  SimpleEventPlugin: SimpleEventPlugin,
	  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	  ChangeEventPlugin: ChangeEventPlugin,
	  SelectEventPlugin: SelectEventPlugin,
	  BeforeInputEventPlugin: BeforeInputEventPlugin
	});

	var didWarnSelectedSetOnOption = false;
	var didWarnInvalidChild = false;

	function flattenChildren(children) {
	  var content = '';

	  // Flatten children. We'll warn if they are invalid
	  // during validateProps() which runs for hydration too.
	  // Note that this would throw on non-element objects.
	  // Elements are stringified (which is normally irrelevant
	  // but matters for <fbt>).
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    content += child;
	    // Note: we don't warn about invalid children here.
	    // Instead, this is done separately below so that
	    // it happens during the hydration codepath too.
	  });

	  return content;
	}

	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */

	function validateProps(element, props) {
	  {
	    // This mirrors the codepath above, but runs for hydration too.
	    // Warn about invalid children here so that client and hydration are consistent.
	    // TODO: this seems like it could cause a DEV-only throw for hydration
	    // if children contains a non-element object. We should try to avoid that.
	    if (typeof props.children === 'object' && props.children !== null) {
	      React.Children.forEach(props.children, function (child) {
	        if (child == null) {
	          return;
	        }
	        if (typeof child === 'string' || typeof child === 'number') {
	          return;
	        }
	        if (typeof child.type !== 'string') {
	          return;
	        }
	        if (!didWarnInvalidChild) {
	          didWarnInvalidChild = true;
	          warning$1(false, 'Only strings and numbers are supported as <option> children.');
	        }
	      });
	    }

	    // TODO: Remove support for `selected` in <option>.
	    if (props.selected != null && !didWarnSelectedSetOnOption) {
	      warning$1(false, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
	      didWarnSelectedSetOnOption = true;
	    }
	  }
	}

	function postMountWrapper$1(element, props) {
	  // value="" should make a value attribute (#6219)
	  if (props.value != null) {
	    element.setAttribute('value', toString(getToStringValue(props.value)));
	  }
	}

	function getHostProps$1(element, props) {
	  var hostProps = _assign({ children: undefined }, props);
	  var content = flattenChildren(props.children);

	  if (content) {
	    hostProps.children = content;
	  }

	  return hostProps;
	}

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var didWarnValueDefaultValue$1 = void 0;

	{
	  didWarnValueDefaultValue$1 = false;
	}

	function getDeclarationErrorAddendum() {
	  var ownerName = getCurrentFiberOwnerNameInDevOrNull();
	  if (ownerName) {
	    return '\n\nCheck the render method of `' + ownerName + '`.';
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 */
	function checkSelectPropTypes(props) {
	  ReactControlledValuePropTypes.checkPropTypes('select', props);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	      warning$1(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
	    } else if (!props.multiple && isArray) {
	      warning$1(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
	    }
	  }
	}

	function updateOptions(node, multiple, propValue, setDefaultSelected) {
	  var options = node.options;

	  if (multiple) {
	    var selectedValues = propValue;
	    var selectedValue = {};
	    for (var i = 0; i < selectedValues.length; i++) {
	      // Prefix to avoid chaos with special keys.
	      selectedValue['$' + selectedValues[i]] = true;
	    }
	    for (var _i = 0; _i < options.length; _i++) {
	      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
	      if (options[_i].selected !== selected) {
	        options[_i].selected = selected;
	      }
	      if (selected && setDefaultSelected) {
	        options[_i].defaultSelected = true;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    var _selectedValue = toString(getToStringValue(propValue));
	    var defaultSelected = null;
	    for (var _i2 = 0; _i2 < options.length; _i2++) {
	      if (options[_i2].value === _selectedValue) {
	        options[_i2].selected = true;
	        if (setDefaultSelected) {
	          options[_i2].defaultSelected = true;
	        }
	        return;
	      }
	      if (defaultSelected === null && !options[_i2].disabled) {
	        defaultSelected = options[_i2];
	      }
	    }
	    if (defaultSelected !== null) {
	      defaultSelected.selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */

	function getHostProps$2(element, props) {
	  return _assign({}, props, {
	    value: undefined
	  });
	}

	function initWrapperState$1(element, props) {
	  var node = element;
	  {
	    checkSelectPropTypes(props);
	  }

	  node._wrapperState = {
	    wasMultiple: !!props.multiple
	  };

	  {
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
	      warning$1(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
	      didWarnValueDefaultValue$1 = true;
	    }
	  }
	}

	function postMountWrapper$2(element, props) {
	  var node = element;
	  node.multiple = !!props.multiple;
	  var value = props.value;
	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (props.defaultValue != null) {
	    updateOptions(node, !!props.multiple, props.defaultValue, true);
	  }
	}

	function postUpdateWrapper(element, props) {
	  var node = element;
	  var wasMultiple = node._wrapperState.wasMultiple;
	  node._wrapperState.wasMultiple = !!props.multiple;

	  var value = props.value;
	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (wasMultiple !== !!props.multiple) {
	    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	    if (props.defaultValue != null) {
	      updateOptions(node, !!props.multiple, props.defaultValue, true);
	    } else {
	      // Revert the select back to its default unselected state.
	      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
	    }
	  }
	}

	function restoreControlledState$2(element, props) {
	  var node = element;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  }
	}

	var didWarnValDefaultVal = false;

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */

	function getHostProps$3(element, props) {
	  var node = element;
	  !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;

	  // Always set children to the same thing. In IE9, the selection range will
	  // get reset if `textContent` is mutated.  We could add a check in setTextContent
	  // to only set the value if/when the value differs from the node value (which would
	  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
	  // solution. The value can be a boolean or object so that's why it's forced
	  // to be a string.
	  var hostProps = _assign({}, props, {
	    value: undefined,
	    defaultValue: undefined,
	    children: toString(node._wrapperState.initialValue)
	  });

	  return hostProps;
	}

	function initWrapperState$2(element, props) {
	  var node = element;
	  {
	    ReactControlledValuePropTypes.checkPropTypes('textarea', props);
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	      warning$1(false, '%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
	      didWarnValDefaultVal = true;
	    }
	  }

	  var initialValue = props.value;

	  // Only bother fetching default value if we're going to use it
	  if (initialValue == null) {
	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      {
	        warning$1(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
	      }
	      !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
	        children = children[0];
	      }

	      defaultValue = children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    initialValue = defaultValue;
	  }

	  node._wrapperState = {
	    initialValue: getToStringValue(initialValue)
	  };
	}

	function updateWrapper$1(element, props) {
	  var node = element;
	  var value = getToStringValue(props.value);
	  var defaultValue = getToStringValue(props.defaultValue);
	  if (value != null) {
	    // Cast `value` to a string to ensure the value is set correctly. While
	    // browsers typically do this as necessary, jsdom doesn't.
	    var newValue = toString(value);
	    // To avoid side effects (such as losing text selection), only set value if changed
	    if (newValue !== node.value) {
	      node.value = newValue;
	    }
	    if (props.defaultValue == null && node.defaultValue !== newValue) {
	      node.defaultValue = newValue;
	    }
	  }
	  if (defaultValue != null) {
	    node.defaultValue = toString(defaultValue);
	  }
	}

	function postMountWrapper$3(element, props) {
	  var node = element;
	  // This is in postMount because we need access to the DOM node, which is not
	  // available until after the component has mounted.
	  var textContent = node.textContent;

	  // Only set node.value if textContent is equal to the expected
	  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	  // will populate textContent as well.
	  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
	  if (textContent === node._wrapperState.initialValue) {
	    node.value = textContent;
	  }
	}

	function restoreControlledState$3(element, props) {
	  // DOM component is still mounted; update
	  updateWrapper$1(element, props);
	}

	var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
	var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
	var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';

	var Namespaces = {
	  html: HTML_NAMESPACE$1,
	  mathml: MATH_NAMESPACE,
	  svg: SVG_NAMESPACE
	};

	// Assumes there is no parent namespace.
	function getIntrinsicNamespace(type) {
	  switch (type) {
	    case 'svg':
	      return SVG_NAMESPACE;
	    case 'math':
	      return MATH_NAMESPACE;
	    default:
	      return HTML_NAMESPACE$1;
	  }
	}

	function getChildNamespace(parentNamespace, type) {
	  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
	    // No (or default) parent namespace: potential entry point.
	    return getIntrinsicNamespace(type);
	  }
	  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
	    // We're leaving SVG.
	    return HTML_NAMESPACE$1;
	  }
	  // By default, pass namespace below.
	  return parentNamespace;
	}

	/* globals MSApp */

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer = void 0;

	/**
	 * Set the innerHTML property of a node
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node

	  if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (node.firstChild) {
	      node.removeChild(node.firstChild);
	    }
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});

	/**
	 * Set the textContent property of a node. For text updates, it's faster
	 * to set the `nodeValue` of the Text node directly instead of using
	 * `.textContent` which will remove the existing node and create a new one.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  columns: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridArea: true,
	  gridRow: true,
	  gridRowEnd: true,
	  gridRowSpan: true,
	  gridRowStart: true,
	  gridColumn: true,
	  gridColumnEnd: true,
	  gridColumnSpan: true,
	  gridColumnStart: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, isCustomProperty) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
	    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
	  }

	  return ('' + value).trim();
	}

	var uppercasePattern = /([A-Z])/g;
	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 */
	function hyphenateStyleName(name) {
	  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
	}

	var warnValidStyle = function () {};

	{
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	  var msPattern$1 = /^-ms-/;
	  var hyphenPattern = /-(.)/g;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	  var warnedForInfinityValue = false;

	  var camelize = function (string) {
	    return string.replace(hyphenPattern, function (_, character) {
	      return character.toUpperCase();
	    });
	  };

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    warning$1(false, 'Unsupported style property %s. Did you mean %s?', name,
	    // As Andi Smith suggests
	    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	    // is converted to lowercase `ms`.
	    camelize(name.replace(msPattern$1, 'ms-')));
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    warning$1(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    warning$1(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
	  };

	  var warnStyleValueIsNaN = function (name, value) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;
	    warning$1(false, '`NaN` is an invalid value for the `%s` css style property.', name);
	  };

	  var warnStyleValueIsInfinity = function (name, value) {
	    if (warnedForInfinityValue) {
	      return;
	    }

	    warnedForInfinityValue = true;
	    warning$1(false, '`Infinity` is an invalid value for the `%s` css style property.', name);
	  };

	  warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }

	    if (typeof value === 'number') {
	      if (isNaN(value)) {
	        warnStyleValueIsNaN(name, value);
	      } else if (!isFinite(value)) {
	        warnStyleValueIsInfinity(name, value);
	      }
	    }
	  };
	}

	var warnValidStyle$1 = warnValidStyle;

	/**
	 * Operations for dealing with CSS properties.
	 */

	/**
	 * This creates a string that is expected to be equivalent to the style
	 * attribute generated by server-side rendering. It by-passes warnings and
	 * security checks so it's not safe to use this value for anything other than
	 * comparison. It is only used in DEV for SSR validation.
	 */
	function createDangerousStringForStyles(styles) {
	  {
	    var serialized = '';
	    var delimiter = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (styleValue != null) {
	        var isCustomProperty = styleName.indexOf('--') === 0;
	        serialized += delimiter + hyphenateStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);

	        delimiter = ';';
	      }
	    }
	    return serialized || null;
	  }
	}

	/**
	 * Sets the value for multiple styles on a node.  If a value is specified as
	 * '' (empty string), the corresponding style property will be unset.
	 *
	 * @param {DOMElement} node
	 * @param {object} styles
	 */
	function setValueForStyles(node, styles) {
	  var style = node.style;
	  for (var styleName in styles) {
	    if (!styles.hasOwnProperty(styleName)) {
	      continue;
	    }
	    var isCustomProperty = styleName.indexOf('--') === 0;
	    {
	      if (!isCustomProperty) {
	        warnValidStyle$1(styleName, styles[styleName]);
	      }
	    }
	    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
	    if (styleName === 'float') {
	      styleName = 'cssFloat';
	    }
	    if (isCustomProperty) {
	      style.setProperty(styleName, styleValue);
	    } else {
	      style[styleName] = styleValue;
	    }
	  }
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.

	var omittedCloseTags = {
	  area: true,
	  base: true,
	  br: true,
	  col: true,
	  embed: true,
	  hr: true,
	  img: true,
	  input: true,
	  keygen: true,
	  link: true,
	  meta: true,
	  param: true,
	  source: true,
	  track: true,
	  wbr: true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  menuitem: true
	}, omittedCloseTags);

	// TODO: We can remove this if we add invariantWithStack()
	// or add stack by default to invariants where possible.
	var HTML$1 = '__html';

	var ReactDebugCurrentFrame$2 = null;
	{
	  ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
	}

	function assertValidProps(tag, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
	  }
	  {
	    !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null) ? warning$1(false, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
	}

	function isCustomComponent(tagName, props) {
	  if (tagName.indexOf('-') === -1) {
	    return typeof props.is === 'string';
	  }
	  switch (tagName) {
	    // These are reserved SVG and MathML elements.
	    // We don't mind this whitelist too much because we expect it to never grow.
	    // The alternative is to track the namespace in a few places which is convoluted.
	    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
	    case 'annotation-xml':
	    case 'color-profile':
	    case 'font-face':
	    case 'font-face-src':
	    case 'font-face-uri':
	    case 'font-face-format':
	    case 'font-face-name':
	    case 'missing-glyph':
	      return false;
	    default:
	      return true;
	  }
	}

	// When adding attributes to the HTML or SVG whitelist, be sure to
	// also add them to this module to ensure casing and incorrect name
	// warnings.
	var possibleStandardNames = {
	  // HTML
	  accept: 'accept',
	  acceptcharset: 'acceptCharset',
	  'accept-charset': 'acceptCharset',
	  accesskey: 'accessKey',
	  action: 'action',
	  allowfullscreen: 'allowFullScreen',
	  alt: 'alt',
	  as: 'as',
	  async: 'async',
	  autocapitalize: 'autoCapitalize',
	  autocomplete: 'autoComplete',
	  autocorrect: 'autoCorrect',
	  autofocus: 'autoFocus',
	  autoplay: 'autoPlay',
	  autosave: 'autoSave',
	  capture: 'capture',
	  cellpadding: 'cellPadding',
	  cellspacing: 'cellSpacing',
	  challenge: 'challenge',
	  charset: 'charSet',
	  checked: 'checked',
	  children: 'children',
	  cite: 'cite',
	  class: 'className',
	  classid: 'classID',
	  classname: 'className',
	  cols: 'cols',
	  colspan: 'colSpan',
	  content: 'content',
	  contenteditable: 'contentEditable',
	  contextmenu: 'contextMenu',
	  controls: 'controls',
	  controlslist: 'controlsList',
	  coords: 'coords',
	  crossorigin: 'crossOrigin',
	  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
	  data: 'data',
	  datetime: 'dateTime',
	  default: 'default',
	  defaultchecked: 'defaultChecked',
	  defaultvalue: 'defaultValue',
	  defer: 'defer',
	  dir: 'dir',
	  disabled: 'disabled',
	  download: 'download',
	  draggable: 'draggable',
	  enctype: 'encType',
	  for: 'htmlFor',
	  form: 'form',
	  formmethod: 'formMethod',
	  formaction: 'formAction',
	  formenctype: 'formEncType',
	  formnovalidate: 'formNoValidate',
	  formtarget: 'formTarget',
	  frameborder: 'frameBorder',
	  headers: 'headers',
	  height: 'height',
	  hidden: 'hidden',
	  high: 'high',
	  href: 'href',
	  hreflang: 'hrefLang',
	  htmlfor: 'htmlFor',
	  httpequiv: 'httpEquiv',
	  'http-equiv': 'httpEquiv',
	  icon: 'icon',
	  id: 'id',
	  innerhtml: 'innerHTML',
	  inputmode: 'inputMode',
	  integrity: 'integrity',
	  is: 'is',
	  itemid: 'itemID',
	  itemprop: 'itemProp',
	  itemref: 'itemRef',
	  itemscope: 'itemScope',
	  itemtype: 'itemType',
	  keyparams: 'keyParams',
	  keytype: 'keyType',
	  kind: 'kind',
	  label: 'label',
	  lang: 'lang',
	  list: 'list',
	  loop: 'loop',
	  low: 'low',
	  manifest: 'manifest',
	  marginwidth: 'marginWidth',
	  marginheight: 'marginHeight',
	  max: 'max',
	  maxlength: 'maxLength',
	  media: 'media',
	  mediagroup: 'mediaGroup',
	  method: 'method',
	  min: 'min',
	  minlength: 'minLength',
	  multiple: 'multiple',
	  muted: 'muted',
	  name: 'name',
	  nomodule: 'noModule',
	  nonce: 'nonce',
	  novalidate: 'noValidate',
	  open: 'open',
	  optimum: 'optimum',
	  pattern: 'pattern',
	  placeholder: 'placeholder',
	  playsinline: 'playsInline',
	  poster: 'poster',
	  preload: 'preload',
	  profile: 'profile',
	  radiogroup: 'radioGroup',
	  readonly: 'readOnly',
	  referrerpolicy: 'referrerPolicy',
	  rel: 'rel',
	  required: 'required',
	  reversed: 'reversed',
	  role: 'role',
	  rows: 'rows',
	  rowspan: 'rowSpan',
	  sandbox: 'sandbox',
	  scope: 'scope',
	  scoped: 'scoped',
	  scrolling: 'scrolling',
	  seamless: 'seamless',
	  selected: 'selected',
	  shape: 'shape',
	  size: 'size',
	  sizes: 'sizes',
	  span: 'span',
	  spellcheck: 'spellCheck',
	  src: 'src',
	  srcdoc: 'srcDoc',
	  srclang: 'srcLang',
	  srcset: 'srcSet',
	  start: 'start',
	  step: 'step',
	  style: 'style',
	  summary: 'summary',
	  tabindex: 'tabIndex',
	  target: 'target',
	  title: 'title',
	  type: 'type',
	  usemap: 'useMap',
	  value: 'value',
	  width: 'width',
	  wmode: 'wmode',
	  wrap: 'wrap',

	  // SVG
	  about: 'about',
	  accentheight: 'accentHeight',
	  'accent-height': 'accentHeight',
	  accumulate: 'accumulate',
	  additive: 'additive',
	  alignmentbaseline: 'alignmentBaseline',
	  'alignment-baseline': 'alignmentBaseline',
	  allowreorder: 'allowReorder',
	  alphabetic: 'alphabetic',
	  amplitude: 'amplitude',
	  arabicform: 'arabicForm',
	  'arabic-form': 'arabicForm',
	  ascent: 'ascent',
	  attributename: 'attributeName',
	  attributetype: 'attributeType',
	  autoreverse: 'autoReverse',
	  azimuth: 'azimuth',
	  basefrequency: 'baseFrequency',
	  baselineshift: 'baselineShift',
	  'baseline-shift': 'baselineShift',
	  baseprofile: 'baseProfile',
	  bbox: 'bbox',
	  begin: 'begin',
	  bias: 'bias',
	  by: 'by',
	  calcmode: 'calcMode',
	  capheight: 'capHeight',
	  'cap-height': 'capHeight',
	  clip: 'clip',
	  clippath: 'clipPath',
	  'clip-path': 'clipPath',
	  clippathunits: 'clipPathUnits',
	  cliprule: 'clipRule',
	  'clip-rule': 'clipRule',
	  color: 'color',
	  colorinterpolation: 'colorInterpolation',
	  'color-interpolation': 'colorInterpolation',
	  colorinterpolationfilters: 'colorInterpolationFilters',
	  'color-interpolation-filters': 'colorInterpolationFilters',
	  colorprofile: 'colorProfile',
	  'color-profile': 'colorProfile',
	  colorrendering: 'colorRendering',
	  'color-rendering': 'colorRendering',
	  contentscripttype: 'contentScriptType',
	  contentstyletype: 'contentStyleType',
	  cursor: 'cursor',
	  cx: 'cx',
	  cy: 'cy',
	  d: 'd',
	  datatype: 'datatype',
	  decelerate: 'decelerate',
	  descent: 'descent',
	  diffuseconstant: 'diffuseConstant',
	  direction: 'direction',
	  display: 'display',
	  divisor: 'divisor',
	  dominantbaseline: 'dominantBaseline',
	  'dominant-baseline': 'dominantBaseline',
	  dur: 'dur',
	  dx: 'dx',
	  dy: 'dy',
	  edgemode: 'edgeMode',
	  elevation: 'elevation',
	  enablebackground: 'enableBackground',
	  'enable-background': 'enableBackground',
	  end: 'end',
	  exponent: 'exponent',
	  externalresourcesrequired: 'externalResourcesRequired',
	  fill: 'fill',
	  fillopacity: 'fillOpacity',
	  'fill-opacity': 'fillOpacity',
	  fillrule: 'fillRule',
	  'fill-rule': 'fillRule',
	  filter: 'filter',
	  filterres: 'filterRes',
	  filterunits: 'filterUnits',
	  floodopacity: 'floodOpacity',
	  'flood-opacity': 'floodOpacity',
	  floodcolor: 'floodColor',
	  'flood-color': 'floodColor',
	  focusable: 'focusable',
	  fontfamily: 'fontFamily',
	  'font-family': 'fontFamily',
	  fontsize: 'fontSize',
	  'font-size': 'fontSize',
	  fontsizeadjust: 'fontSizeAdjust',
	  'font-size-adjust': 'fontSizeAdjust',
	  fontstretch: 'fontStretch',
	  'font-stretch': 'fontStretch',
	  fontstyle: 'fontStyle',
	  'font-style': 'fontStyle',
	  fontvariant: 'fontVariant',
	  'font-variant': 'fontVariant',
	  fontweight: 'fontWeight',
	  'font-weight': 'fontWeight',
	  format: 'format',
	  from: 'from',
	  fx: 'fx',
	  fy: 'fy',
	  g1: 'g1',
	  g2: 'g2',
	  glyphname: 'glyphName',
	  'glyph-name': 'glyphName',
	  glyphorientationhorizontal: 'glyphOrientationHorizontal',
	  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
	  glyphorientationvertical: 'glyphOrientationVertical',
	  'glyph-orientation-vertical': 'glyphOrientationVertical',
	  glyphref: 'glyphRef',
	  gradienttransform: 'gradientTransform',
	  gradientunits: 'gradientUnits',
	  hanging: 'hanging',
	  horizadvx: 'horizAdvX',
	  'horiz-adv-x': 'horizAdvX',
	  horizoriginx: 'horizOriginX',
	  'horiz-origin-x': 'horizOriginX',
	  ideographic: 'ideographic',
	  imagerendering: 'imageRendering',
	  'image-rendering': 'imageRendering',
	  in2: 'in2',
	  in: 'in',
	  inlist: 'inlist',
	  intercept: 'intercept',
	  k1: 'k1',
	  k2: 'k2',
	  k3: 'k3',
	  k4: 'k4',
	  k: 'k',
	  kernelmatrix: 'kernelMatrix',
	  kernelunitlength: 'kernelUnitLength',
	  kerning: 'kerning',
	  keypoints: 'keyPoints',
	  keysplines: 'keySplines',
	  keytimes: 'keyTimes',
	  lengthadjust: 'lengthAdjust',
	  letterspacing: 'letterSpacing',
	  'letter-spacing': 'letterSpacing',
	  lightingcolor: 'lightingColor',
	  'lighting-color': 'lightingColor',
	  limitingconeangle: 'limitingConeAngle',
	  local: 'local',
	  markerend: 'markerEnd',
	  'marker-end': 'markerEnd',
	  markerheight: 'markerHeight',
	  markermid: 'markerMid',
	  'marker-mid': 'markerMid',
	  markerstart: 'markerStart',
	  'marker-start': 'markerStart',
	  markerunits: 'markerUnits',
	  markerwidth: 'markerWidth',
	  mask: 'mask',
	  maskcontentunits: 'maskContentUnits',
	  maskunits: 'maskUnits',
	  mathematical: 'mathematical',
	  mode: 'mode',
	  numoctaves: 'numOctaves',
	  offset: 'offset',
	  opacity: 'opacity',
	  operator: 'operator',
	  order: 'order',
	  orient: 'orient',
	  orientation: 'orientation',
	  origin: 'origin',
	  overflow: 'overflow',
	  overlineposition: 'overlinePosition',
	  'overline-position': 'overlinePosition',
	  overlinethickness: 'overlineThickness',
	  'overline-thickness': 'overlineThickness',
	  paintorder: 'paintOrder',
	  'paint-order': 'paintOrder',
	  panose1: 'panose1',
	  'panose-1': 'panose1',
	  pathlength: 'pathLength',
	  patterncontentunits: 'patternContentUnits',
	  patterntransform: 'patternTransform',
	  patternunits: 'patternUnits',
	  pointerevents: 'pointerEvents',
	  'pointer-events': 'pointerEvents',
	  points: 'points',
	  pointsatx: 'pointsAtX',
	  pointsaty: 'pointsAtY',
	  pointsatz: 'pointsAtZ',
	  prefix: 'prefix',
	  preservealpha: 'preserveAlpha',
	  preserveaspectratio: 'preserveAspectRatio',
	  primitiveunits: 'primitiveUnits',
	  property: 'property',
	  r: 'r',
	  radius: 'radius',
	  refx: 'refX',
	  refy: 'refY',
	  renderingintent: 'renderingIntent',
	  'rendering-intent': 'renderingIntent',
	  repeatcount: 'repeatCount',
	  repeatdur: 'repeatDur',
	  requiredextensions: 'requiredExtensions',
	  requiredfeatures: 'requiredFeatures',
	  resource: 'resource',
	  restart: 'restart',
	  result: 'result',
	  results: 'results',
	  rotate: 'rotate',
	  rx: 'rx',
	  ry: 'ry',
	  scale: 'scale',
	  security: 'security',
	  seed: 'seed',
	  shaperendering: 'shapeRendering',
	  'shape-rendering': 'shapeRendering',
	  slope: 'slope',
	  spacing: 'spacing',
	  specularconstant: 'specularConstant',
	  specularexponent: 'specularExponent',
	  speed: 'speed',
	  spreadmethod: 'spreadMethod',
	  startoffset: 'startOffset',
	  stddeviation: 'stdDeviation',
	  stemh: 'stemh',
	  stemv: 'stemv',
	  stitchtiles: 'stitchTiles',
	  stopcolor: 'stopColor',
	  'stop-color': 'stopColor',
	  stopopacity: 'stopOpacity',
	  'stop-opacity': 'stopOpacity',
	  strikethroughposition: 'strikethroughPosition',
	  'strikethrough-position': 'strikethroughPosition',
	  strikethroughthickness: 'strikethroughThickness',
	  'strikethrough-thickness': 'strikethroughThickness',
	  string: 'string',
	  stroke: 'stroke',
	  strokedasharray: 'strokeDasharray',
	  'stroke-dasharray': 'strokeDasharray',
	  strokedashoffset: 'strokeDashoffset',
	  'stroke-dashoffset': 'strokeDashoffset',
	  strokelinecap: 'strokeLinecap',
	  'stroke-linecap': 'strokeLinecap',
	  strokelinejoin: 'strokeLinejoin',
	  'stroke-linejoin': 'strokeLinejoin',
	  strokemiterlimit: 'strokeMiterlimit',
	  'stroke-miterlimit': 'strokeMiterlimit',
	  strokewidth: 'strokeWidth',
	  'stroke-width': 'strokeWidth',
	  strokeopacity: 'strokeOpacity',
	  'stroke-opacity': 'strokeOpacity',
	  suppresscontenteditablewarning: 'suppressContentEditableWarning',
	  suppresshydrationwarning: 'suppressHydrationWarning',
	  surfacescale: 'surfaceScale',
	  systemlanguage: 'systemLanguage',
	  tablevalues: 'tableValues',
	  targetx: 'targetX',
	  targety: 'targetY',
	  textanchor: 'textAnchor',
	  'text-anchor': 'textAnchor',
	  textdecoration: 'textDecoration',
	  'text-decoration': 'textDecoration',
	  textlength: 'textLength',
	  textrendering: 'textRendering',
	  'text-rendering': 'textRendering',
	  to: 'to',
	  transform: 'transform',
	  typeof: 'typeof',
	  u1: 'u1',
	  u2: 'u2',
	  underlineposition: 'underlinePosition',
	  'underline-position': 'underlinePosition',
	  underlinethickness: 'underlineThickness',
	  'underline-thickness': 'underlineThickness',
	  unicode: 'unicode',
	  unicodebidi: 'unicodeBidi',
	  'unicode-bidi': 'unicodeBidi',
	  unicoderange: 'unicodeRange',
	  'unicode-range': 'unicodeRange',
	  unitsperem: 'unitsPerEm',
	  'units-per-em': 'unitsPerEm',
	  unselectable: 'unselectable',
	  valphabetic: 'vAlphabetic',
	  'v-alphabetic': 'vAlphabetic',
	  values: 'values',
	  vectoreffect: 'vectorEffect',
	  'vector-effect': 'vectorEffect',
	  version: 'version',
	  vertadvy: 'vertAdvY',
	  'vert-adv-y': 'vertAdvY',
	  vertoriginx: 'vertOriginX',
	  'vert-origin-x': 'vertOriginX',
	  vertoriginy: 'vertOriginY',
	  'vert-origin-y': 'vertOriginY',
	  vhanging: 'vHanging',
	  'v-hanging': 'vHanging',
	  videographic: 'vIdeographic',
	  'v-ideographic': 'vIdeographic',
	  viewbox: 'viewBox',
	  viewtarget: 'viewTarget',
	  visibility: 'visibility',
	  vmathematical: 'vMathematical',
	  'v-mathematical': 'vMathematical',
	  vocab: 'vocab',
	  widths: 'widths',
	  wordspacing: 'wordSpacing',
	  'word-spacing': 'wordSpacing',
	  writingmode: 'writingMode',
	  'writing-mode': 'writingMode',
	  x1: 'x1',
	  x2: 'x2',
	  x: 'x',
	  xchannelselector: 'xChannelSelector',
	  xheight: 'xHeight',
	  'x-height': 'xHeight',
	  xlinkactuate: 'xlinkActuate',
	  'xlink:actuate': 'xlinkActuate',
	  xlinkarcrole: 'xlinkArcrole',
	  'xlink:arcrole': 'xlinkArcrole',
	  xlinkhref: 'xlinkHref',
	  'xlink:href': 'xlinkHref',
	  xlinkrole: 'xlinkRole',
	  'xlink:role': 'xlinkRole',
	  xlinkshow: 'xlinkShow',
	  'xlink:show': 'xlinkShow',
	  xlinktitle: 'xlinkTitle',
	  'xlink:title': 'xlinkTitle',
	  xlinktype: 'xlinkType',
	  'xlink:type': 'xlinkType',
	  xmlbase: 'xmlBase',
	  'xml:base': 'xmlBase',
	  xmllang: 'xmlLang',
	  'xml:lang': 'xmlLang',
	  xmlns: 'xmlns',
	  'xml:space': 'xmlSpace',
	  xmlnsxlink: 'xmlnsXlink',
	  'xmlns:xlink': 'xmlnsXlink',
	  xmlspace: 'xmlSpace',
	  y1: 'y1',
	  y2: 'y2',
	  y: 'y',
	  ychannelselector: 'yChannelSelector',
	  z: 'z',
	  zoomandpan: 'zoomAndPan'
	};

	var ariaProperties = {
	  'aria-current': 0, // state
	  'aria-details': 0,
	  'aria-disabled': 0, // state
	  'aria-hidden': 0, // state
	  'aria-invalid': 0, // state
	  'aria-keyshortcuts': 0,
	  'aria-label': 0,
	  'aria-roledescription': 0,
	  // Widget Attributes
	  'aria-autocomplete': 0,
	  'aria-checked': 0,
	  'aria-expanded': 0,
	  'aria-haspopup': 0,
	  'aria-level': 0,
	  'aria-modal': 0,
	  'aria-multiline': 0,
	  'aria-multiselectable': 0,
	  'aria-orientation': 0,
	  'aria-placeholder': 0,
	  'aria-pressed': 0,
	  'aria-readonly': 0,
	  'aria-required': 0,
	  'aria-selected': 0,
	  'aria-sort': 0,
	  'aria-valuemax': 0,
	  'aria-valuemin': 0,
	  'aria-valuenow': 0,
	  'aria-valuetext': 0,
	  // Live Region Attributes
	  'aria-atomic': 0,
	  'aria-busy': 0,
	  'aria-live': 0,
	  'aria-relevant': 0,
	  // Drag-and-Drop Attributes
	  'aria-dropeffect': 0,
	  'aria-grabbed': 0,
	  // Relationship Attributes
	  'aria-activedescendant': 0,
	  'aria-colcount': 0,
	  'aria-colindex': 0,
	  'aria-colspan': 0,
	  'aria-controls': 0,
	  'aria-describedby': 0,
	  'aria-errormessage': 0,
	  'aria-flowto': 0,
	  'aria-labelledby': 0,
	  'aria-owns': 0,
	  'aria-posinset': 0,
	  'aria-rowcount': 0,
	  'aria-rowindex': 0,
	  'aria-rowspan': 0,
	  'aria-setsize': 0
	};

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

	function validateProperty(tagName, name) {
	  if (hasOwnProperty$2.call(warnedProperties, name) && warnedProperties[name]) {
	    return true;
	  }

	  if (rARIACamel.test(name)) {
	    var ariaName = 'aria-' + name.slice(4).toLowerCase();
	    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;

	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (correctName == null) {
	      warning$1(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
	      warnedProperties[name] = true;
	      return true;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== correctName) {
	      warning$1(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
	      warnedProperties[name] = true;
	      return true;
	    }
	  }

	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;

	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	      warning$1(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
	      warnedProperties[name] = true;
	      return true;
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(type, props) {
	  var invalidProps = [];

	  for (var key in props) {
	    var isValid = validateProperty(type, key);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }

	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (invalidProps.length === 1) {
	    warning$1(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
	  } else if (invalidProps.length > 1) {
	    warning$1(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
	  }
	}

	function validateProperties(type, props) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }
	  warnInvalidARIAProps(type, props);
	}

	var didWarnValueNull = false;

	function validateProperties$1(type, props) {
	  if (type !== 'input' && type !== 'textarea' && type !== 'select') {
	    return;
	  }

	  if (props != null && props.value === null && !didWarnValueNull) {
	    didWarnValueNull = true;
	    if (type === 'select' && props.multiple) {
	      warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
	    } else {
	      warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
	    }
	  }
	}

	var validateProperty$1 = function () {};

	{
	  var warnedProperties$1 = {};
	  var _hasOwnProperty = Object.prototype.hasOwnProperty;
	  var EVENT_NAME_REGEX = /^on./;
	  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
	  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	  validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
	    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
	      return true;
	    }

	    var lowerCasedName = name.toLowerCase();
	    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
	      warning$1(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    // We can't rely on the event system being injected on the server.
	    if (canUseEventSystem) {
	      if (registrationNameModules.hasOwnProperty(name)) {
	        return true;
	      }
	      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
	      if (registrationName != null) {
	        warning$1(false, 'Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
	        warnedProperties$1[name] = true;
	        return true;
	      }
	      if (EVENT_NAME_REGEX.test(name)) {
	        warning$1(false, 'Unknown event handler property `%s`. It will be ignored.', name);
	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (EVENT_NAME_REGEX.test(name)) {
	      // If no event plugins have been injected, we are in a server environment.
	      // So we can't tell if the event name is correct for sure, but we can filter
	      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
	      if (INVALID_EVENT_NAME_REGEX.test(name)) {
	        warning$1(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
	      }
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    // Let the ARIA attribute hook validate ARIA attributes
	    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
	      return true;
	    }

	    if (lowerCasedName === 'innerhtml') {
	      warning$1(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'aria') {
	      warning$1(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
	      warning$1(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      warning$1(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    var propertyInfo = getPropertyInfo(name);
	    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;

	    // Known attributes should match the casing specified in the property config.
	    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      var standardName = possibleStandardNames[lowerCasedName];
	      if (standardName !== name) {
	        warning$1(false, 'Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (!isReserved && name !== lowerCasedName) {
	      // Unknown attributes should have lowercase casing since that's how they
	      // will be cased anyway with server rendering.
	      warning$1(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      if (value) {
	        warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
	      } else {
	        warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
	      }
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    // Now that we've validated casing, do not validate
	    // data types for reserved props
	    if (isReserved) {
	      return true;
	    }

	    // Warn when a known attribute is a bad type
	    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      warnedProperties$1[name] = true;
	      return false;
	    }

	    // Warn when passing the strings 'false' or 'true' into a boolean prop
	    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
	      warning$1(false, 'Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    return true;
	  };
	}

	var warnUnknownProperties = function (type, props, canUseEventSystem) {
	  var unknownProps = [];
	  for (var key in props) {
	    var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }

	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');
	  if (unknownProps.length === 1) {
	    warning$1(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
	  } else if (unknownProps.length > 1) {
	    warning$1(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
	  }
	};

	function validateProperties$2(type, props, canUseEventSystem) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }
	  warnUnknownProperties(type, props, canUseEventSystem);
	}

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var didWarnInvalidHydration = false;
	var didWarnShadyDOM = false;

	var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
	var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
	var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
	var AUTOFOCUS = 'autoFocus';
	var CHILDREN = 'children';
	var STYLE$1 = 'style';
	var HTML = '__html';

	var HTML_NAMESPACE = Namespaces.html;


	var warnedUnknownTags = void 0;
	var suppressHydrationWarning = void 0;

	var validatePropertiesInDevelopment = void 0;
	var warnForTextDifference = void 0;
	var warnForPropDifference = void 0;
	var warnForExtraAttributes = void 0;
	var warnForInvalidEventListener = void 0;
	var canDiffStyleForHydrationWarning = void 0;

	var normalizeMarkupForTextOrAttribute = void 0;
	var normalizeHTML = void 0;

	{
	  warnedUnknownTags = {
	    // Chrome is the only major browser not shipping <time>. But as of July
	    // 2017 it intends to ship it due to widespread usage. We intentionally
	    // *don't* warn for <time> even if it's unrecognized by Chrome because
	    // it soon will be, and many apps have been using it anyway.
	    time: true,
	    // There are working polyfills for <dialog>. Let people use it.
	    dialog: true,
	    // Electron ships a custom <webview> tag to display external web content in
	    // an isolated frame and process.
	    // This tag is not present in non Electron environments such as JSDom which
	    // is often used for testing purposes.
	    // @see https://electronjs.org/docs/api/webview-tag
	    webview: true
	  };

	  validatePropertiesInDevelopment = function (type, props) {
	    validateProperties(type, props);
	    validateProperties$1(type, props);
	    validateProperties$2(type, props, /* canUseEventSystem */true);
	  };

	  // IE 11 parses & normalizes the style attribute as opposed to other
	  // browsers. It adds spaces and sorts the properties in some
	  // non-alphabetical order. Handling that would require sorting CSS
	  // properties in the client & server versions or applying
	  // `expectedStyle` to a temporary DOM node to read its `style` attribute
	  // normalized. Since it only affects IE, we're skipping style warnings
	  // in that browser completely in favor of doing all that work.
	  // See https://github.com/facebook/react/issues/11807
	  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;

	  // HTML parsing normalizes CR and CRLF to LF.
	  // It also can turn \u0000 into \uFFFD inside attributes.
	  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
	  // If we have a mismatch, it might be caused by that.
	  // We will still patch up in this case but not fire the warning.
	  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
	  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

	  normalizeMarkupForTextOrAttribute = function (markup) {
	    var markupString = typeof markup === 'string' ? markup : '' + markup;
	    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
	  };

	  warnForTextDifference = function (serverText, clientText) {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
	    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
	    if (normalizedServerText === normalizedClientText) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
	  };

	  warnForPropDifference = function (propName, serverValue, clientValue) {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
	    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
	    if (normalizedServerValue === normalizedClientValue) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
	  };

	  warnForExtraAttributes = function (attributeNames) {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    var names = [];
	    attributeNames.forEach(function (name) {
	      names.push(name);
	    });
	    warningWithoutStack$1(false, 'Extra attributes from the server: %s', names);
	  };

	  warnForInvalidEventListener = function (registrationName, listener) {
	    if (listener === false) {
	      warning$1(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
	    } else {
	      warning$1(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
	    }
	  };

	  // Parse the HTML and read it back to normalize the HTML string so that it
	  // can be used for comparison.
	  normalizeHTML = function (parent, html) {
	    // We could have created a separate document here to avoid
	    // re-initializing custom elements if they exist. But this breaks
	    // how <noscript> is being handled. So we use the same document.
	    // See the discussion in https://github.com/facebook/react/pull/11157.
	    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
	    testElement.innerHTML = html;
	    return testElement.innerHTML;
	  };
	}

	function ensureListeningTo(rootContainerElement, registrationName) {
	  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
	  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
	  listenTo(registrationName, doc);
	}

	function getOwnerDocumentFromRootContainer(rootContainerElement) {
	  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
	}

	function noop() {}

	function trapClickOnNonInteractiveElement(node) {
	  // Mobile Safari does not fire properly bubble click events on
	  // non-interactive elements, which means delegated click listeners do not
	  // fire. The workaround for this bug involves attaching an empty click
	  // listener on the target node.
	  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	  // Just set it using the onclick property so that we don't have to manage any
	  // bookkeeping for it. Not sure if we need to clear it when the listener is
	  // removed.
	  // TODO: Only do this for the relevant Safaris maybe?
	  node.onclick = noop;
	}

	function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
	  for (var propKey in nextProps) {
	    if (!nextProps.hasOwnProperty(propKey)) {
	      continue;
	    }
	    var nextProp = nextProps[propKey];
	    if (propKey === STYLE$1) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      }
	      // Relies on `updateStylesByID` not mutating `styleUpdates`.
	      setValueForStyles(domElement, nextProp);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML] : undefined;
	      if (nextHtml != null) {
	        setInnerHTML(domElement, nextHtml);
	      }
	    } else if (propKey === CHILDREN) {
	      if (typeof nextProp === 'string') {
	        // Avoid setting initial textContent when the text is empty. In IE11 setting
	        // textContent on a <textarea> will cause the placeholder to not
	        // show within the <textarea> until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        var canSetTextContent = tag !== 'textarea' || nextProp !== '';
	        if (canSetTextContent) {
	          setTextContent(domElement, nextProp);
	        }
	      } else if (typeof nextProp === 'number') {
	        setTextContent(domElement, '' + nextProp);
	      }
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if (typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }
	        ensureListeningTo(rootContainerElement, propKey);
	      }
	    } else if (nextProp != null) {
	      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
	    }
	  }
	}

	function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
	  // TODO: Handle wasCustomComponentTag
	  for (var i = 0; i < updatePayload.length; i += 2) {
	    var propKey = updatePayload[i];
	    var propValue = updatePayload[i + 1];
	    if (propKey === STYLE$1) {
	      setValueForStyles(domElement, propValue);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      setInnerHTML(domElement, propValue);
	    } else if (propKey === CHILDREN) {
	      setTextContent(domElement, propValue);
	    } else {
	      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
	    }
	  }
	}

	function createElement(type, props, rootContainerElement, parentNamespace) {
	  var isCustomComponentTag = void 0;

	  // We create tags in the namespace of their parent container, except HTML
	  // tags get no namespace.
	  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
	  var domElement = void 0;
	  var namespaceURI = parentNamespace;
	  if (namespaceURI === HTML_NAMESPACE) {
	    namespaceURI = getIntrinsicNamespace(type);
	  }
	  if (namespaceURI === HTML_NAMESPACE) {
	    {
	      isCustomComponentTag = isCustomComponent(type, props);
	      // Should this check be gated by parent namespace? Not sure we want to
	      // allow <SVG> or <mATH>.
	      !(isCustomComponentTag || type === type.toLowerCase()) ? warning$1(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;
	    }

	    if (type === 'script') {
	      // Create the script via .innerHTML so its "parser-inserted" flag is
	      // set to true and it does not execute
	      var div = ownerDocument.createElement('div');
	      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
	      // This is guaranteed to yield a script element.
	      var firstChild = div.firstChild;
	      domElement = div.removeChild(firstChild);
	    } else if (typeof props.is === 'string') {
	      // $FlowIssue `createElement` should be updated for Web Components
	      domElement = ownerDocument.createElement(type, { is: props.is });
	    } else {
	      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
	      // See discussion in https://github.com/facebook/react/pull/6896
	      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	      domElement = ownerDocument.createElement(type);
	      // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple`
	      // attribute on `select`s needs to be added before `option`s are inserted. This prevents
	      // a bug where the `select` does not scroll to the correct option because singular
	      // `select` elements automatically pick the first item.
	      // See https://github.com/facebook/react/issues/13222
	      if (type === 'select' && props.multiple) {
	        var node = domElement;
	        node.multiple = true;
	      }
	    }
	  } else {
	    domElement = ownerDocument.createElementNS(namespaceURI, type);
	  }

	  {
	    if (namespaceURI === HTML_NAMESPACE) {
	      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
	        warnedUnknownTags[type] = true;
	        warning$1(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
	      }
	    }
	  }

	  return domElement;
	}

	function createTextNode(text, rootContainerElement) {
	  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
	}

	function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
	  var isCustomComponentTag = isCustomComponent(tag, rawProps);
	  {
	    validatePropertiesInDevelopment(tag, rawProps);
	    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
	      warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
	      didWarnShadyDOM = true;
	    }
	  }

	  // TODO: Make sure that we check isMounted before firing any of these events.
	  var props = void 0;
	  switch (tag) {
	    case 'iframe':
	    case 'object':
	      trapBubbledEvent(TOP_LOAD, domElement);
	      props = rawProps;
	      break;
	    case 'video':
	    case 'audio':
	      // Create listener for each media event
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        trapBubbledEvent(mediaEventTypes[i], domElement);
	      }
	      props = rawProps;
	      break;
	    case 'source':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      props = rawProps;
	      break;
	    case 'img':
	    case 'image':
	    case 'link':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      trapBubbledEvent(TOP_LOAD, domElement);
	      props = rawProps;
	      break;
	    case 'form':
	      trapBubbledEvent(TOP_RESET, domElement);
	      trapBubbledEvent(TOP_SUBMIT, domElement);
	      props = rawProps;
	      break;
	    case 'details':
	      trapBubbledEvent(TOP_TOGGLE, domElement);
	      props = rawProps;
	      break;
	    case 'input':
	      initWrapperState(domElement, rawProps);
	      props = getHostProps(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    case 'option':
	      validateProps(domElement, rawProps);
	      props = getHostProps$1(domElement, rawProps);
	      break;
	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      props = getHostProps$2(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      props = getHostProps$3(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    default:
	      props = rawProps;
	  }

	  assertValidProps(tag, props);

	  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, false);
	      break;
	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement, rawProps);
	      break;
	    case 'option':
	      postMountWrapper$1(domElement, rawProps);
	      break;
	    case 'select':
	      postMountWrapper$2(domElement, rawProps);
	      break;
	    default:
	      if (typeof props.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }
	      break;
	  }
	}

	// Calculate the diff between the two objects.
	function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
	  {
	    validatePropertiesInDevelopment(tag, nextRawProps);
	  }

	  var updatePayload = null;

	  var lastProps = void 0;
	  var nextProps = void 0;
	  switch (tag) {
	    case 'input':
	      lastProps = getHostProps(domElement, lastRawProps);
	      nextProps = getHostProps(domElement, nextRawProps);
	      updatePayload = [];
	      break;
	    case 'option':
	      lastProps = getHostProps$1(domElement, lastRawProps);
	      nextProps = getHostProps$1(domElement, nextRawProps);
	      updatePayload = [];
	      break;
	    case 'select':
	      lastProps = getHostProps$2(domElement, lastRawProps);
	      nextProps = getHostProps$2(domElement, nextRawProps);
	      updatePayload = [];
	      break;
	    case 'textarea':
	      lastProps = getHostProps$3(domElement, lastRawProps);
	      nextProps = getHostProps$3(domElement, nextRawProps);
	      updatePayload = [];
	      break;
	    default:
	      lastProps = lastRawProps;
	      nextProps = nextRawProps;
	      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }
	      break;
	  }

	  assertValidProps(tag, nextProps);

	  var propKey = void 0;
	  var styleName = void 0;
	  var styleUpdates = null;
	  for (propKey in lastProps) {
	    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	      continue;
	    }
	    if (propKey === STYLE$1) {
	      var lastStyle = lastProps[propKey];
	      for (styleName in lastStyle) {
	        if (lastStyle.hasOwnProperty(styleName)) {
	          if (!styleUpdates) {
	            styleUpdates = {};
	          }
	          styleUpdates[styleName] = '';
	        }
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
	      // This is a special case. If any listener updates we need to ensure
	      // that the "current" fiber pointer gets updated so we need a commit
	      // to update this element.
	      if (!updatePayload) {
	        updatePayload = [];
	      }
	    } else {
	      // For all other deleted properties we add it to the queue. We use
	      // the whitelist in the commit phase instead.
	      (updatePayload = updatePayload || []).push(propKey, null);
	    }
	  }
	  for (propKey in nextProps) {
	    var nextProp = nextProps[propKey];
	    var lastProp = lastProps != null ? lastProps[propKey] : undefined;
	    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	      continue;
	    }
	    if (propKey === STYLE$1) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      }
	      if (lastProp) {
	        // Unset styles on `lastProp` but not on `nextProp`.
	        for (styleName in lastProp) {
	          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }
	            styleUpdates[styleName] = '';
	          }
	        }
	        // Update styles that changed since `lastProp`.
	        for (styleName in nextProp) {
	          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }
	            styleUpdates[styleName] = nextProp[styleName];
	          }
	        }
	      } else {
	        // Relies on `updateStylesByID` not mutating `styleUpdates`.
	        if (!styleUpdates) {
	          if (!updatePayload) {
	            updatePayload = [];
	          }
	          updatePayload.push(propKey, styleUpdates);
	        }
	        styleUpdates = nextProp;
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML] : undefined;
	      var lastHtml = lastProp ? lastProp[HTML] : undefined;
	      if (nextHtml != null) {
	        if (lastHtml !== nextHtml) {
	          (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
	        }
	      }
	    } else if (propKey === CHILDREN) {
	      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
	        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
	      }
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        // We eagerly listen to this even though we haven't committed yet.
	        if (typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }
	        ensureListeningTo(rootContainerElement, propKey);
	      }
	      if (!updatePayload && lastProp !== nextProp) {
	        // This is a special case. If any listener updates we need to ensure
	        // that the "current" props pointer gets updated so we need a commit
	        // to update this element.
	        updatePayload = [];
	      }
	    } else {
	      // For any other property we always add it to the queue and then we
	      // filter it out using the whitelist during the commit.
	      (updatePayload = updatePayload || []).push(propKey, nextProp);
	    }
	  }
	  if (styleUpdates) {
	    (updatePayload = updatePayload || []).push(STYLE$1, styleUpdates);
	  }
	  return updatePayload;
	}

	// Apply the diff.
	function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
	  // Update checked *before* name.
	  // In the middle of an update, it is possible to have multiple checked.
	  // When a checked radio tries to change name, browser makes another radio's checked false.
	  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
	    updateChecked(domElement, nextRawProps);
	  }

	  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
	  var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
	  // Apply the diff.
	  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);

	  // TODO: Ensure that an update gets scheduled if any of the special props
	  // changed.
	  switch (tag) {
	    case 'input':
	      // Update the wrapper around inputs *after* updating props. This has to
	      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
	      // raise warnings and prevent the new value from being assigned.
	      updateWrapper(domElement, nextRawProps);
	      break;
	    case 'textarea':
	      updateWrapper$1(domElement, nextRawProps);
	      break;
	    case 'select':
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      postUpdateWrapper(domElement, nextRawProps);
	      break;
	  }
	}

	function getPossibleStandardName(propName) {
	  {
	    var lowerCasedName = propName.toLowerCase();
	    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      return null;
	    }
	    return possibleStandardNames[lowerCasedName] || null;
	  }
	  return null;
	}

	function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
	  var isCustomComponentTag = void 0;
	  var extraAttributeNames = void 0;

	  {
	    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
	    isCustomComponentTag = isCustomComponent(tag, rawProps);
	    validatePropertiesInDevelopment(tag, rawProps);
	    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
	      warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
	      didWarnShadyDOM = true;
	    }
	  }

	  // TODO: Make sure that we check isMounted before firing any of these events.
	  switch (tag) {
	    case 'iframe':
	    case 'object':
	      trapBubbledEvent(TOP_LOAD, domElement);
	      break;
	    case 'video':
	    case 'audio':
	      // Create listener for each media event
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        trapBubbledEvent(mediaEventTypes[i], domElement);
	      }
	      break;
	    case 'source':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      break;
	    case 'img':
	    case 'image':
	    case 'link':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      trapBubbledEvent(TOP_LOAD, domElement);
	      break;
	    case 'form':
	      trapBubbledEvent(TOP_RESET, domElement);
	      trapBubbledEvent(TOP_SUBMIT, domElement);
	      break;
	    case 'details':
	      trapBubbledEvent(TOP_TOGGLE, domElement);
	      break;
	    case 'input':
	      initWrapperState(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    case 'option':
	      validateProps(domElement, rawProps);
	      break;
	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	  }

	  assertValidProps(tag, rawProps);

	  {
	    extraAttributeNames = new Set();
	    var attributes = domElement.attributes;
	    for (var _i = 0; _i < attributes.length; _i++) {
	      var name = attributes[_i].name.toLowerCase();
	      switch (name) {
	        // Built-in SSR attribute is whitelisted
	        case 'data-reactroot':
	          break;
	        // Controlled attributes are not validated
	        // TODO: Only ignore them on controlled tags.
	        case 'value':
	          break;
	        case 'checked':
	          break;
	        case 'selected':
	          break;
	        default:
	          // Intentionally use the original name.
	          // See discussion in https://github.com/facebook/react/pull/10676.
	          extraAttributeNames.add(attributes[_i].name);
	      }
	    }
	  }

	  var updatePayload = null;
	  for (var propKey in rawProps) {
	    if (!rawProps.hasOwnProperty(propKey)) {
	      continue;
	    }
	    var nextProp = rawProps[propKey];
	    if (propKey === CHILDREN) {
	      // For text content children we compare against textContent. This
	      // might match additional HTML that is hidden when we read it using
	      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
	      // satisfies our requirement. Our requirement is not to produce perfect
	      // HTML and attributes. Ideally we should preserve structure but it's
	      // ok not to if the visible content is still enough to indicate what
	      // even listeners these nodes might be wired up to.
	      // TODO: Warn if there is more than a single textNode as a child.
	      // TODO: Should we use domElement.firstChild.nodeValue to compare?
	      if (typeof nextProp === 'string') {
	        if (domElement.textContent !== nextProp) {
	          if (!suppressHydrationWarning) {
	            warnForTextDifference(domElement.textContent, nextProp);
	          }
	          updatePayload = [CHILDREN, nextProp];
	        }
	      } else if (typeof nextProp === 'number') {
	        if (domElement.textContent !== '' + nextProp) {
	          if (!suppressHydrationWarning) {
	            warnForTextDifference(domElement.textContent, nextProp);
	          }
	          updatePayload = [CHILDREN, '' + nextProp];
	        }
	      }
	    } else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if (typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }
	        ensureListeningTo(rootContainerElement, propKey);
	      }
	    } else if (typeof isCustomComponentTag === 'boolean') {
	      // Validate that the properties correspond to their expected values.
	      var serverValue = void 0;
	      var propertyInfo = getPropertyInfo(propKey);
	      if (suppressHydrationWarning) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 ||
	      // Controlled attributes are not validated
	      // TODO: Only ignore them on controlled tags.
	      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	        var serverHTML = domElement.innerHTML;
	        var nextHtml = nextProp ? nextProp[HTML] : undefined;
	        var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');
	        if (expectedHTML !== serverHTML) {
	          warnForPropDifference(propKey, serverHTML, expectedHTML);
	        }
	      } else if (propKey === STYLE$1) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey);

	        if (canDiffStyleForHydrationWarning) {
	          var expectedStyle = createDangerousStringForStyles(nextProp);
	          serverValue = domElement.getAttribute('style');
	          if (expectedStyle !== serverValue) {
	            warnForPropDifference(propKey, serverValue, expectedStyle);
	          }
	        }
	      } else if (isCustomComponentTag) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey.toLowerCase());
	        serverValue = getValueForAttribute(domElement, propKey, nextProp);

	        if (nextProp !== serverValue) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
	        var isMismatchDueToBadCasing = false;
	        if (propertyInfo !== null) {
	          // $FlowFixMe - Should be inferred as not undefined.
	          extraAttributeNames.delete(propertyInfo.attributeName);
	          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
	        } else {
	          var ownNamespace = parentNamespace;
	          if (ownNamespace === HTML_NAMESPACE) {
	            ownNamespace = getIntrinsicNamespace(tag);
	          }
	          if (ownNamespace === HTML_NAMESPACE) {
	            // $FlowFixMe - Should be inferred as not undefined.
	            extraAttributeNames.delete(propKey.toLowerCase());
	          } else {
	            var standardName = getPossibleStandardName(propKey);
	            if (standardName !== null && standardName !== propKey) {
	              // If an SVG prop is supplied with bad casing, it will
	              // be successfully parsed from HTML, but will produce a mismatch
	              // (and would be incorrectly rendered on the client).
	              // However, we already warn about bad casing elsewhere.
	              // So we'll skip the misleading extra mismatch warning in this case.
	              isMismatchDueToBadCasing = true;
	              // $FlowFixMe - Should be inferred as not undefined.
	              extraAttributeNames.delete(standardName);
	            }
	            // $FlowFixMe - Should be inferred as not undefined.
	            extraAttributeNames.delete(propKey);
	          }
	          serverValue = getValueForAttribute(domElement, propKey, nextProp);
	        }

	        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      }
	    }
	  }

	  {
	    // $FlowFixMe - Should be inferred as not undefined.
	    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
	      // $FlowFixMe - Should be inferred as not undefined.
	      warnForExtraAttributes(extraAttributeNames);
	    }
	  }

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, true);
	      break;
	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement, rawProps);
	      break;
	    case 'select':
	    case 'option':
	      // For input and textarea we current always set the value property at
	      // post mount to force it to diverge from attributes. However, for
	      // option and select we don't quite do the same thing and select
	      // is not resilient to the DOM state changing so we don't do that here.
	      // TODO: Consider not doing this for input and textarea.
	      break;
	    default:
	      if (typeof rawProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }
	      break;
	  }

	  return updatePayload;
	}

	function diffHydratedText(textNode, text) {
	  var isDifferent = textNode.nodeValue !== text;
	  return isDifferent;
	}

	function warnForUnmatchedText(textNode, text) {
	  {
	    warnForTextDifference(textNode.nodeValue, text);
	  }
	}

	function warnForDeletedHydratableElement(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
	  }
	}

	function warnForDeletedHydratableText(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
	  }
	}

	function warnForInsertedHydratedElement(parentNode, tag, props) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
	  }
	}

	function warnForInsertedHydratedText(parentNode, text) {
	  {
	    if (text === '') {
	      // We expect to insert empty text nodes since they're not represented in
	      // the HTML.
	      // TODO: Remove this special case if we can just avoid inserting empty
	      // text nodes.
	      return;
	    }
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
	  }
	}

	function restoreControlledState$1(domElement, tag, props) {
	  switch (tag) {
	    case 'input':
	      restoreControlledState(domElement, props);
	      return;
	    case 'textarea':
	      restoreControlledState$3(domElement, props);
	      return;
	    case 'select':
	      restoreControlledState$2(domElement, props);
	      return;
	  }
	}

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var validateDOMNesting = function () {};
	var updatedAncestorInfo = function () {};

	{
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    current: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  updatedAncestorInfo = function (oldInfo, tag) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childText, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      !(childTag == null) ? warningWithoutStack$1(false, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var invalidParentOrAncestor = invalidParent || invalidAncestor;
	    if (!invalidParentOrAncestor) {
	      return;
	    }

	    var ancestorTag = invalidParentOrAncestor.tag;
	    var addendum = getCurrentFiberStackInDev();

	    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
	    if (didWarn[warnKey]) {
	      return;
	    }
	    didWarn[warnKey] = true;

	    var tagDisplayName = childTag;
	    var whitespaceInfo = '';
	    if (childTag === '#text') {
	      if (/\S/.test(childText)) {
	        tagDisplayName = 'Text nodes';
	      } else {
	        tagDisplayName = 'Whitespace text nodes';
	        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
	      }
	    } else {
	      tagDisplayName = '<' + childTag + '>';
	    }

	    if (invalidParent) {
	      var info = '';
	      if (ancestorTag === 'table' && childTag === 'tr') {
	        info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	      }
	      warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
	    } else {
	      warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
	    }
	  };
	}

	var SUPPRESS_HYDRATION_WARNING = void 0;
	{
	  SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
	}

	var STYLE = 'style';

	var eventsEnabled = null;
	var selectionInformation = null;

	function shouldAutoFocusHostComponent(type, props) {
	  switch (type) {
	    case 'button':
	    case 'input':
	    case 'select':
	    case 'textarea':
	      return !!props.autoFocus;
	  }
	  return false;
	}

	function getRootHostContext(rootContainerInstance) {
	  var type = void 0;
	  var namespace = void 0;
	  var nodeType = rootContainerInstance.nodeType;
	  switch (nodeType) {
	    case DOCUMENT_NODE:
	    case DOCUMENT_FRAGMENT_NODE:
	      {
	        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
	        var root = rootContainerInstance.documentElement;
	        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
	        break;
	      }
	    default:
	      {
	        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
	        var ownNamespace = container.namespaceURI || null;
	        type = container.tagName;
	        namespace = getChildNamespace(ownNamespace, type);
	        break;
	      }
	  }
	  {
	    var validatedTag = type.toLowerCase();
	    var _ancestorInfo = updatedAncestorInfo(null, validatedTag);
	    return { namespace: namespace, ancestorInfo: _ancestorInfo };
	  }
	  return namespace;
	}

	function getChildHostContext(parentHostContext, type, rootContainerInstance) {
	  {
	    var parentHostContextDev = parentHostContext;
	    var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
	    var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
	    return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };
	  }
	  var parentNamespace = parentHostContext;
	  return getChildNamespace(parentNamespace, type);
	}

	function getPublicInstance(instance) {
	  return instance;
	}

	function prepareForCommit(containerInfo) {
	  eventsEnabled = isEnabled();
	  selectionInformation = getSelectionInformation();
	  setEnabled(false);
	}

	function resetAfterCommit(containerInfo) {
	  restoreSelection(selectionInformation);
	  selectionInformation = null;
	  setEnabled(eventsEnabled);
	  eventsEnabled = null;
	}

	function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  var parentNamespace = void 0;
	  {
	    // TODO: take namespace into account when validating.
	    var hostContextDev = hostContext;
	    validateDOMNesting(type, null, hostContextDev.ancestorInfo);
	    if (typeof props.children === 'string' || typeof props.children === 'number') {
	      var string = '' + props.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }
	    parentNamespace = hostContextDev.namespace;
	  }
	  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
	  precacheFiberNode(internalInstanceHandle, domElement);
	  updateFiberProps(domElement, props);
	  return domElement;
	}

	function appendInitialChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}

	function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
	  setInitialProperties(domElement, type, props, rootContainerInstance);
	  return shouldAutoFocusHostComponent(type, props);
	}

	function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
	  {
	    var hostContextDev = hostContext;
	    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
	      var string = '' + newProps.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }
	  }
	  return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
	}

	function shouldSetTextContent(type, props) {
	  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
	}

	function shouldDeprioritizeSubtree(type, props) {
	  return !!props.hidden;
	}

	function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
	  {
	    var hostContextDev = hostContext;
	    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
	  }
	  var textNode = createTextNode(text, rootContainerInstance);
	  precacheFiberNode(internalInstanceHandle, textNode);
	  return textNode;
	}
	// This initialization code may run even on server environments
	// if a component just imports ReactDOM (e.g. for findDOMNode).
	// Some environments might not have setTimeout or clearTimeout.
	var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
	var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
	var noTimeout = -1;

	function commitMount(domElement, type, newProps, internalInstanceHandle) {
	  // Despite the naming that might imply otherwise, this method only
	  // fires if there is an `Update` effect scheduled during mounting.
	  // This happens if `finalizeInitialChildren` returns `true` (which it
	  // does to implement the `autoFocus` attribute on the client). But
	  // there are also other cases when this might happen (such as patching
	  // up text content during hydration mismatch). So we'll check this again.
	  if (shouldAutoFocusHostComponent(type, newProps)) {
	    domElement.focus();
	  }
	}

	function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
	  // Update the props handle so that we know which props are the ones with
	  // with current event handlers.
	  updateFiberProps(domElement, newProps);
	  // Apply the diff to the DOM node.
	  updateProperties(domElement, updatePayload, type, oldProps, newProps);
	}

	function resetTextContent(domElement) {
	  setTextContent(domElement, '');
	}

	function commitTextUpdate(textInstance, oldText, newText) {
	  textInstance.nodeValue = newText;
	}

	function appendChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}

	function appendChildToContainer(container, child) {
	  var parentNode = void 0;
	  if (container.nodeType === COMMENT_NODE) {
	    parentNode = container.parentNode;
	    parentNode.insertBefore(child, container);
	  } else {
	    parentNode = container;
	    parentNode.appendChild(child);
	  }
	  // This container might be used for a portal.
	  // If something inside a portal is clicked, that click should bubble
	  // through the React tree. However, on Mobile Safari the click would
	  // never bubble through the *DOM* tree unless an ancestor with onclick
	  // event exists. So we wouldn't see it and dispatch it.
	  // This is why we ensure that non React root containers have inline onclick
	  // defined.
	  // https://github.com/facebook/react/issues/11918
	  var reactRootContainer = container._reactRootContainer;
	  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
	    // TODO: This cast may not be sound for SVG, MathML or custom elements.
	    trapClickOnNonInteractiveElement(parentNode);
	  }
	}

	function insertBefore(parentInstance, child, beforeChild) {
	  parentInstance.insertBefore(child, beforeChild);
	}

	function insertInContainerBefore(container, child, beforeChild) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.insertBefore(child, beforeChild);
	  } else {
	    container.insertBefore(child, beforeChild);
	  }
	}

	function removeChild(parentInstance, child) {
	  parentInstance.removeChild(child);
	}

	function removeChildFromContainer(container, child) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.removeChild(child);
	  } else {
	    container.removeChild(child);
	  }
	}

	function hideInstance(instance) {
	  // TODO: Does this work for all element types? What about MathML? Should we
	  // pass host context to this method?
	  instance = instance;
	  instance.style.display = 'none';
	}

	function hideTextInstance(textInstance) {
	  textInstance.nodeValue = '';
	}

	function unhideInstance(instance, props) {
	  instance = instance;
	  var styleProp = props[STYLE];
	  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
	  instance.style.display = dangerousStyleValue('display', display);
	}

	function unhideTextInstance(textInstance, text) {
	  textInstance.nodeValue = text;
	}

	function canHydrateInstance(instance, type, props) {
	  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
	    return null;
	  }
	  // This has now been refined to an element node.
	  return instance;
	}

	function canHydrateTextInstance(instance, text) {
	  if (text === '' || instance.nodeType !== TEXT_NODE) {
	    // Empty strings are not parsed by HTML so there won't be a correct match here.
	    return null;
	  }
	  // This has now been refined to a text node.
	  return instance;
	}

	function getNextHydratableSibling(instance) {
	  var node = instance.nextSibling;
	  // Skip non-hydratable nodes.
	  while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE) {
	    node = node.nextSibling;
	  }
	  return node;
	}

	function getFirstHydratableChild(parentInstance) {
	  var next = parentInstance.firstChild;
	  // Skip non-hydratable nodes.
	  while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE) {
	    next = next.nextSibling;
	  }
	  return next;
	}

	function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, instance);
	  // TODO: Possibly defer this until the commit phase where all the events
	  // get attached.
	  updateFiberProps(instance, props);
	  var parentNamespace = void 0;
	  {
	    var hostContextDev = hostContext;
	    parentNamespace = hostContextDev.namespace;
	  }
	  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
	}

	function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, textInstance);
	  return diffHydratedText(textInstance, text);
	}

	function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
	  {
	    warnForUnmatchedText(textInstance, text);
	  }
	}

	function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
	  if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	    warnForUnmatchedText(textInstance, text);
	  }
	}

	function didNotHydrateContainerInstance(parentContainer, instance) {
	  {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentContainer, instance);
	    } else {
	      warnForDeletedHydratableText(parentContainer, instance);
	    }
	  }
	}

	function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
	  if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentInstance, instance);
	    } else {
	      warnForDeletedHydratableText(parentInstance, instance);
	    }
	  }
	}

	function didNotFindHydratableContainerInstance(parentContainer, type, props) {
	  {
	    warnForInsertedHydratedElement(parentContainer, type, props);
	  }
	}

	function didNotFindHydratableContainerTextInstance(parentContainer, text) {
	  {
	    warnForInsertedHydratedText(parentContainer, text);
	  }
	}

	function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
	  if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	    warnForInsertedHydratedElement(parentInstance, type, props);
	  }
	}

	function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
	  if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	    warnForInsertedHydratedText(parentInstance, text);
	  }
	}

	// Prefix measurements so that it's possible to filter them.
	// Longer prefixes are hard to read in DevTools.
	var reactEmoji = '\u269B';
	var warningEmoji = '\u26D4';
	var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

	// Keep track of current fiber so that we know the path to unwind on pause.
	// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
	var currentFiber = null;
	// If we're in the middle of user code, which fiber and method is it?
	// Reusing `currentFiber` would be confusing for this because user code fiber
	// can change during commit phase too, but we don't need to unwind it (since
	// lifecycles in the commit phase don't resemble a tree).
	var currentPhase = null;
	var currentPhaseFiber = null;
	// Did lifecycle hook schedule an update? This is often a performance problem,
	// so we will keep track of it, and include it in the report.
	// Track commits caused by cascading updates.
	var isCommitting = false;
	var hasScheduledUpdateInCurrentCommit = false;
	var hasScheduledUpdateInCurrentPhase = false;
	var commitCountInCurrentWorkLoop = 0;
	var effectCountInCurrentCommit = 0;
	var isWaitingForCallback = false;
	// During commits, we only show a measurement once per method name
	// to avoid stretch the commit phase with measurement overhead.
	var labelsInCurrentCommit = new Set();

	var formatMarkName = function (markName) {
	  return reactEmoji + ' ' + markName;
	};

	var formatLabel = function (label, warning) {
	  var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';
	  var suffix = warning ? ' Warning: ' + warning : '';
	  return '' + prefix + label + suffix;
	};

	var beginMark = function (markName) {
	  performance.mark(formatMarkName(markName));
	};

	var clearMark = function (markName) {
	  performance.clearMarks(formatMarkName(markName));
	};

	var endMark = function (label, markName, warning) {
	  var formattedMarkName = formatMarkName(markName);
	  var formattedLabel = formatLabel(label, warning);
	  try {
	    performance.measure(formattedLabel, formattedMarkName);
	  } catch (err) {}
	  // If previous mark was missing for some reason, this will throw.
	  // This could only happen if React crashed in an unexpected place earlier.
	  // Don't pile on with more errors.

	  // Clear marks immediately to avoid growing buffer.
	  performance.clearMarks(formattedMarkName);
	  performance.clearMeasures(formattedLabel);
	};

	var getFiberMarkName = function (label, debugID) {
	  return label + ' (#' + debugID + ')';
	};

	var getFiberLabel = function (componentName, isMounted, phase) {
	  if (phase === null) {
	    // These are composite component total time measurements.
	    return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
	  } else {
	    // Composite component methods.
	    return componentName + '.' + phase;
	  }
	};

	var beginFiberMark = function (fiber, phase) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);

	  if (isCommitting && labelsInCurrentCommit.has(label)) {
	    // During the commit phase, we don't show duplicate labels because
	    // there is a fixed overhead for every measurement, and we don't
	    // want to stretch the commit phase beyond necessary.
	    return false;
	  }
	  labelsInCurrentCommit.add(label);

	  var markName = getFiberMarkName(label, debugID);
	  beginMark(markName);
	  return true;
	};

	var clearFiberMark = function (fiber, phase) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);
	  var markName = getFiberMarkName(label, debugID);
	  clearMark(markName);
	};

	var endFiberMark = function (fiber, phase, warning) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);
	  var markName = getFiberMarkName(label, debugID);
	  endMark(label, markName, warning);
	};

	var shouldIgnoreFiber = function (fiber) {
	  // Host components should be skipped in the timeline.
	  // We could check typeof fiber.type, but does this work with RN?
	  switch (fiber.tag) {
	    case HostRoot:
	    case HostComponent:
	    case HostText:
	    case HostPortal:
	    case Fragment:
	    case ContextProvider:
	    case ContextConsumer:
	    case Mode:
	      return true;
	    default:
	      return false;
	  }
	};

	var clearPendingPhaseMeasurement = function () {
	  if (currentPhase !== null && currentPhaseFiber !== null) {
	    clearFiberMark(currentPhaseFiber, currentPhase);
	  }
	  currentPhaseFiber = null;
	  currentPhase = null;
	  hasScheduledUpdateInCurrentPhase = false;
	};

	var pauseTimers = function () {
	  // Stops all currently active measurements so that they can be resumed
	  // if we continue in a later deferred loop from the same unit of work.
	  var fiber = currentFiber;
	  while (fiber) {
	    if (fiber._debugIsCurrentlyTiming) {
	      endFiberMark(fiber, null, null);
	    }
	    fiber = fiber.return;
	  }
	};

	var resumeTimersRecursively = function (fiber) {
	  if (fiber.return !== null) {
	    resumeTimersRecursively(fiber.return);
	  }
	  if (fiber._debugIsCurrentlyTiming) {
	    beginFiberMark(fiber, null);
	  }
	};

	var resumeTimers = function () {
	  // Resumes all measurements that were active during the last deferred loop.
	  if (currentFiber !== null) {
	    resumeTimersRecursively(currentFiber);
	  }
	};

	function recordEffect() {
	  {
	    effectCountInCurrentCommit++;
	  }
	}

	function recordScheduleUpdate() {
	  {
	    if (isCommitting) {
	      hasScheduledUpdateInCurrentCommit = true;
	    }
	    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
	      hasScheduledUpdateInCurrentPhase = true;
	    }
	  }
	}

	function startRequestCallbackTimer() {
	  {
	    if (supportsUserTiming && !isWaitingForCallback) {
	      isWaitingForCallback = true;
	      beginMark('(Waiting for async callback...)');
	    }
	  }
	}

	function stopRequestCallbackTimer(didExpire, expirationTime) {
	  {
	    if (supportsUserTiming) {
	      isWaitingForCallback = false;
	      var warning = didExpire ? 'React was blocked by main thread' : null;
	      endMark('(Waiting for async callback... will force flush in ' + expirationTime + ' ms)', '(Waiting for async callback...)', warning);
	    }
	  }
	}

	function startWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    }
	    // If we pause, this is the fiber to unwind from.
	    currentFiber = fiber;
	    if (!beginFiberMark(fiber, null)) {
	      return;
	    }
	    fiber._debugIsCurrentlyTiming = true;
	  }
	}

	function cancelWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    }
	    // Remember we shouldn't complete measurement for this fiber.
	    // Otherwise flamechart will be deep even for small updates.
	    fiber._debugIsCurrentlyTiming = false;
	    clearFiberMark(fiber, null);
	  }
	}

	function stopWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    }
	    // If we pause, its parent is the fiber to unwind from.
	    currentFiber = fiber.return;
	    if (!fiber._debugIsCurrentlyTiming) {
	      return;
	    }
	    fiber._debugIsCurrentlyTiming = false;
	    endFiberMark(fiber, null, null);
	  }
	}

	function stopFailedWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    }
	    // If we pause, its parent is the fiber to unwind from.
	    currentFiber = fiber.return;
	    if (!fiber._debugIsCurrentlyTiming) {
	      return;
	    }
	    fiber._debugIsCurrentlyTiming = false;
	    var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
	    endFiberMark(fiber, null, warning);
	  }
	}

	function startPhaseTimer(fiber, phase) {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }
	    clearPendingPhaseMeasurement();
	    if (!beginFiberMark(fiber, phase)) {
	      return;
	    }
	    currentPhaseFiber = fiber;
	    currentPhase = phase;
	  }
	}

	function stopPhaseTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }
	    if (currentPhase !== null && currentPhaseFiber !== null) {
	      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
	      endFiberMark(currentPhaseFiber, currentPhase, warning);
	    }
	    currentPhase = null;
	    currentPhaseFiber = null;
	  }
	}

	function startWorkLoopTimer(nextUnitOfWork) {
	  {
	    currentFiber = nextUnitOfWork;
	    if (!supportsUserTiming) {
	      return;
	    }
	    commitCountInCurrentWorkLoop = 0;
	    // This is top level call.
	    // Any other measurements are performed within.
	    beginMark('(React Tree Reconciliation)');
	    // Resume any measurements that were in progress during the last loop.
	    resumeTimers();
	  }
	}

	function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }
	    var warning = null;
	    if (interruptedBy !== null) {
	      if (interruptedBy.tag === HostRoot) {
	        warning = 'A top-level update interrupted the previous render';
	      } else {
	        var componentName = getComponentName(interruptedBy.type) || 'Unknown';
	        warning = 'An update to ' + componentName + ' interrupted the previous render';
	      }
	    } else if (commitCountInCurrentWorkLoop > 1) {
	      warning = 'There were cascading updates';
	    }
	    commitCountInCurrentWorkLoop = 0;
	    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)';
	    // Pause any measurements until the next loop.
	    pauseTimers();
	    endMark(label, '(React Tree Reconciliation)', warning);
	  }
	}

	function startCommitTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }
	    isCommitting = true;
	    hasScheduledUpdateInCurrentCommit = false;
	    labelsInCurrentCommit.clear();
	    beginMark('(Committing Changes)');
	  }
	}

	function stopCommitTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var warning = null;
	    if (hasScheduledUpdateInCurrentCommit) {
	      warning = 'Lifecycle hook scheduled a cascading update';
	    } else if (commitCountInCurrentWorkLoop > 0) {
	      warning = 'Caused by a cascading update in earlier commit';
	    }
	    hasScheduledUpdateInCurrentCommit = false;
	    commitCountInCurrentWorkLoop++;
	    isCommitting = false;
	    labelsInCurrentCommit.clear();

	    endMark('(Committing Changes)', '(Committing Changes)', warning);
	  }
	}

	function startCommitSnapshotEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }
	    effectCountInCurrentCommit = 0;
	    beginMark('(Committing Snapshot Effects)');
	  }
	}

	function stopCommitSnapshotEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }
	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark('(Committing Snapshot Effects: ' + count + ' Total)', '(Committing Snapshot Effects)', null);
	  }
	}

	function startCommitHostEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }
	    effectCountInCurrentCommit = 0;
	    beginMark('(Committing Host Effects)');
	  }
	}

	function stopCommitHostEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }
	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
	  }
	}

	function startCommitLifeCyclesTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }
	    effectCountInCurrentCommit = 0;
	    beginMark('(Calling Lifecycle Methods)');
	  }
	}

	function stopCommitLifeCyclesTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }
	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
	  }
	}

	var valueStack = [];

	var fiberStack = void 0;

	{
	  fiberStack = [];
	}

	var index = -1;

	function createCursor(defaultValue) {
	  return {
	    current: defaultValue
	  };
	}

	function pop(cursor, fiber) {
	  if (index < 0) {
	    {
	      warningWithoutStack$1(false, 'Unexpected pop.');
	    }
	    return;
	  }

	  {
	    if (fiber !== fiberStack[index]) {
	      warningWithoutStack$1(false, 'Unexpected Fiber popped.');
	    }
	  }

	  cursor.current = valueStack[index];

	  valueStack[index] = null;

	  {
	    fiberStack[index] = null;
	  }

	  index--;
	}

	function push(cursor, value, fiber) {
	  index++;

	  valueStack[index] = cursor.current;

	  {
	    fiberStack[index] = fiber;
	  }

	  cursor.current = value;
	}

	function checkThatStackIsEmpty() {
	  {
	    if (index !== -1) {
	      warningWithoutStack$1(false, 'Expected an empty stack. Something was not reset properly.');
	    }
	  }
	}

	function resetStackAfterFatalErrorInDev() {
	  {
	    index = -1;
	    valueStack.length = 0;
	    fiberStack.length = 0;
	  }
	}

	var warnedAboutMissingGetChildContext = void 0;

	{
	  warnedAboutMissingGetChildContext = {};
	}

	var emptyContextObject = {};
	{
	  Object.freeze(emptyContextObject);
	}

	// A cursor to the current merged context object on the stack.
	var contextStackCursor = createCursor(emptyContextObject);
	// A cursor to a boolean indicating whether the context has changed.
	var didPerformWorkStackCursor = createCursor(false);
	// Keep track of the previous context object that was on the stack.
	// We use this to get access to the parent context after we have already
	// pushed the next context provider, and now need to merge their contexts.
	var previousContext = emptyContextObject;

	function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
	  if (didPushOwnContextIfProvider && isContextProvider(Component)) {
	    // If the fiber is a context provider itself, when we read its context
	    // we may have already pushed its own child context on the stack. A context
	    // provider should not "see" its own child context. Therefore we read the
	    // previous (parent) context instead for a context provider.
	    return previousContext;
	  }
	  return contextStackCursor.current;
	}

	function cacheContext(workInProgress, unmaskedContext, maskedContext) {
	  var instance = workInProgress.stateNode;
	  instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
	  instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
	}

	function getMaskedContext(workInProgress, unmaskedContext) {
	  var type = workInProgress.type;
	  var contextTypes = type.contextTypes;
	  if (!contextTypes) {
	    return emptyContextObject;
	  }

	  // Avoid recreating masked context unless unmasked context has changed.
	  // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
	  // This may trigger infinite loops if componentWillReceiveProps calls setState.
	  var instance = workInProgress.stateNode;
	  if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
	    return instance.__reactInternalMemoizedMaskedChildContext;
	  }

	  var context = {};
	  for (var key in contextTypes) {
	    context[key] = unmaskedContext[key];
	  }

	  {
	    var name = getComponentName(type) || 'Unknown';
	    checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
	  }

	  // Cache unmasked context so we can avoid recreating masked context unless necessary.
	  // Context is created before the class component is instantiated so check for instance.
	  if (instance) {
	    cacheContext(workInProgress, unmaskedContext, context);
	  }

	  return context;
	}

	function hasContextChanged() {
	  return didPerformWorkStackCursor.current;
	}

	function isContextProvider(type) {
	  var childContextTypes = type.childContextTypes;
	  return childContextTypes !== null && childContextTypes !== undefined;
	}

	function popContext(fiber) {
	  pop(didPerformWorkStackCursor, fiber);
	  pop(contextStackCursor, fiber);
	}

	function popTopLevelContextObject(fiber) {
	  pop(didPerformWorkStackCursor, fiber);
	  pop(contextStackCursor, fiber);
	}

	function pushTopLevelContextObject(fiber, context, didChange) {
	  !(contextStackCursor.current === emptyContextObject) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  push(contextStackCursor, context, fiber);
	  push(didPerformWorkStackCursor, didChange, fiber);
	}

	function processChildContext(fiber, type, parentContext) {
	  var instance = fiber.stateNode;
	  var childContextTypes = type.childContextTypes;

	  // TODO (bvaughn) Replace this behavior with an invariant() in the future.
	  // It has only been added in Fiber to match the (unintentional) behavior in Stack.
	  if (typeof instance.getChildContext !== 'function') {
	    {
	      var componentName = getComponentName(type) || 'Unknown';

	      if (!warnedAboutMissingGetChildContext[componentName]) {
	        warnedAboutMissingGetChildContext[componentName] = true;
	        warningWithoutStack$1(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
	      }
	    }
	    return parentContext;
	  }

	  var childContext = void 0;
	  {
	    setCurrentPhase('getChildContext');
	  }
	  startPhaseTimer(fiber, 'getChildContext');
	  childContext = instance.getChildContext();
	  stopPhaseTimer();
	  {
	    setCurrentPhase(null);
	  }
	  for (var contextKey in childContext) {
	    !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(type) || 'Unknown', contextKey) : void 0;
	  }
	  {
	    var name = getComponentName(type) || 'Unknown';
	    checkPropTypes(childContextTypes, childContext, 'child context', name,
	    // In practice, there is one case in which we won't get a stack. It's when
	    // somebody calls unstable_renderSubtreeIntoContainer() and we process
	    // context from the parent component instance. The stack will be missing
	    // because it's outside of the reconciliation, and so the pointer has not
	    // been set. This is rare and doesn't matter. We'll also remove that API.
	    getCurrentFiberStackInDev);
	  }

	  return _assign({}, parentContext, childContext);
	}

	function pushContextProvider(workInProgress) {
	  var instance = workInProgress.stateNode;
	  // We push the context as early as possible to ensure stack integrity.
	  // If the instance does not exist yet, we will push null at first,
	  // and replace it on the stack later when invalidating the context.
	  var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;

	  // Remember the parent context so we can merge with it later.
	  // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
	  previousContext = contextStackCursor.current;
	  push(contextStackCursor, memoizedMergedChildContext, workInProgress);
	  push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);

	  return true;
	}

	function invalidateContextProvider(workInProgress, type, didChange) {
	  var instance = workInProgress.stateNode;
	  !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  if (didChange) {
	    // Merge parent and own context.
	    // Skip this if we're not updating due to sCU.
	    // This avoids unnecessarily recomputing memoized values.
	    var mergedContext = processChildContext(workInProgress, type, previousContext);
	    instance.__reactInternalMemoizedMergedChildContext = mergedContext;

	    // Replace the old (or empty) context with the new one.
	    // It is important to unwind the context in the reverse order.
	    pop(didPerformWorkStackCursor, workInProgress);
	    pop(contextStackCursor, workInProgress);
	    // Now push the new context and mark that it has changed.
	    push(contextStackCursor, mergedContext, workInProgress);
	    push(didPerformWorkStackCursor, didChange, workInProgress);
	  } else {
	    pop(didPerformWorkStackCursor, workInProgress);
	    push(didPerformWorkStackCursor, didChange, workInProgress);
	  }
	}

	function findCurrentUnmaskedContext(fiber) {
	  // Currently this is only used with renderSubtreeIntoContainer; not sure if it
	  // makes sense elsewhere
	  !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  var node = fiber;
	  do {
	    switch (node.tag) {
	      case HostRoot:
	        return node.stateNode.context;
	      case ClassComponent:
	        {
	          var Component = node.type;
	          if (isContextProvider(Component)) {
	            return node.stateNode.__reactInternalMemoizedMergedChildContext;
	          }
	          break;
	        }
	    }
	    node = node.return;
	  } while (node !== null);
	  invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.');
	}

	var onCommitFiberRoot = null;
	var onCommitFiberUnmount = null;
	var hasLoggedError = false;

	function catchErrors(fn) {
	  return function (arg) {
	    try {
	      return fn(arg);
	    } catch (err) {
	      if (!hasLoggedError) {
	        hasLoggedError = true;
	        warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
	      }
	    }
	  };
	}

	var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';

	function injectInternals(internals) {
	  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	    // No DevTools
	    return false;
	  }
	  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
	  if (hook.isDisabled) {
	    // This isn't a real property on the hook, but it can be set to opt out
	    // of DevTools integration and associated warnings and logs.
	    // https://github.com/facebook/react/issues/3877
	    return true;
	  }
	  if (!hook.supportsFiber) {
	    {
	      warningWithoutStack$1(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
	    }
	    // DevTools exists, even though it doesn't support Fiber.
	    return true;
	  }
	  try {
	    var rendererID = hook.inject(internals);
	    // We have successfully injected, so now it is safe to set up hooks.
	    onCommitFiberRoot = catchErrors(function (root) {
	      return hook.onCommitFiberRoot(rendererID, root);
	    });
	    onCommitFiberUnmount = catchErrors(function (fiber) {
	      return hook.onCommitFiberUnmount(rendererID, fiber);
	    });
	  } catch (err) {
	    // Catch all errors because it is unsafe to throw during initialization.
	    {
	      warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
	    }
	  }
	  // DevTools exists
	  return true;
	}

	function onCommitRoot(root) {
	  if (typeof onCommitFiberRoot === 'function') {
	    onCommitFiberRoot(root);
	  }
	}

	function onCommitUnmount(fiber) {
	  if (typeof onCommitFiberUnmount === 'function') {
	    onCommitFiberUnmount(fiber);
	  }
	}

	// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
	// Math.pow(2, 30) - 1
	// 0b111111111111111111111111111111
	var maxSigned31BitInt = 1073741823;

	var NoWork = 0;
	var Never = 1;
	var Sync = maxSigned31BitInt;

	var UNIT_SIZE = 10;
	var MAGIC_NUMBER_OFFSET = maxSigned31BitInt - 1;

	// 1 unit of expiration time represents 10ms.
	function msToExpirationTime(ms) {
	  // Always add an offset so that we don't clash with the magic number for NoWork.
	  return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
	}

	function expirationTimeToMs(expirationTime) {
	  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
	}

	function ceiling(num, precision) {
	  return ((num / precision | 0) + 1) * precision;
	}

	function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
	  return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
	}

	var LOW_PRIORITY_EXPIRATION = 5000;
	var LOW_PRIORITY_BATCH_SIZE = 250;

	function computeAsyncExpiration(currentTime) {
	  return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
	}

	// We intentionally set a higher expiration time for interactive updates in
	// dev than in production.
	//
	// If the main thread is being blocked so long that you hit the expiration,
	// it's a problem that could be solved with better scheduling.
	//
	// People will be more likely to notice this and fix it with the long
	// expiration time in development.
	//
	// In production we opt for better UX at the risk of masking scheduling
	// problems, by expiring fast.
	var HIGH_PRIORITY_EXPIRATION = 500;
	var HIGH_PRIORITY_BATCH_SIZE = 100;

	function computeInteractiveExpiration(currentTime) {
	  return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
	}

	var NoContext = 0;
	var ConcurrentMode = 1;
	var StrictMode = 2;
	var ProfileMode = 4;

	var hasBadMapPolyfill = void 0;

	{
	  hasBadMapPolyfill = false;
	  try {
	    var nonExtensibleObject = Object.preventExtensions({});
	    var testMap = new Map([[nonExtensibleObject, null]]);
	    var testSet = new Set([nonExtensibleObject]);
	    // This is necessary for Rollup to not consider these unused.
	    // https://github.com/rollup/rollup/issues/1771
	    // TODO: we can remove these if Rollup fixes the bug.
	    testMap.set(0, 0);
	    testSet.add(0);
	  } catch (e) {
	    // TODO: Consider warning about bad polyfills
	    hasBadMapPolyfill = true;
	  }
	}

	// A Fiber is work on a Component that needs to be done or was done. There can
	// be more than one per component.


	var debugCounter = void 0;

	{
	  debugCounter = 1;
	}

	function FiberNode(tag, pendingProps, key, mode) {
	  // Instance
	  this.tag = tag;
	  this.key = key;
	  this.elementType = null;
	  this.type = null;
	  this.stateNode = null;

	  // Fiber
	  this.return = null;
	  this.child = null;
	  this.sibling = null;
	  this.index = 0;

	  this.ref = null;

	  this.pendingProps = pendingProps;
	  this.memoizedProps = null;
	  this.updateQueue = null;
	  this.memoizedState = null;
	  this.firstContextDependency = null;

	  this.mode = mode;

	  // Effects
	  this.effectTag = NoEffect;
	  this.nextEffect = null;

	  this.firstEffect = null;
	  this.lastEffect = null;

	  this.expirationTime = NoWork;
	  this.childExpirationTime = NoWork;

	  this.alternate = null;

	  {
	    this.actualDuration = 0;
	    this.actualStartTime = -1;
	    this.selfBaseDuration = 0;
	    this.treeBaseDuration = 0;
	  }

	  {
	    this._debugID = debugCounter++;
	    this._debugSource = null;
	    this._debugOwner = null;
	    this._debugIsCurrentlyTiming = false;
	    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
	      Object.preventExtensions(this);
	    }
	  }
	}

	// This is a constructor function, rather than a POJO constructor, still
	// please ensure we do the following:
	// 1) Nobody should add any instance methods on this. Instance methods can be
	//    more difficult to predict when they get optimized and they are almost
	//    never inlined properly in static compilers.
	// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
	//    always know when it is a fiber.
	// 3) We might want to experiment with using numeric keys since they are easier
	//    to optimize in a non-JIT environment.
	// 4) We can easily go from a constructor to a createFiber object literal if that
	//    is faster.
	// 5) It should be easy to port this to a C struct and keep a C implementation
	//    compatible.
	var createFiber = function (tag, pendingProps, key, mode) {
	  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
	  return new FiberNode(tag, pendingProps, key, mode);
	};

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function isSimpleFunctionComponent(type) {
	  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
	}

	function resolveLazyComponentTag(Component) {
	  if (typeof Component === 'function') {
	    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
	  } else if (Component !== undefined && Component !== null) {
	    var $$typeof = Component.$$typeof;
	    if ($$typeof === REACT_FORWARD_REF_TYPE) {
	      return ForwardRef;
	    }
	    if ($$typeof === REACT_MEMO_TYPE) {
	      return MemoComponent;
	    }
	  }
	  return IndeterminateComponent;
	}

	// This is used to create an alternate fiber to do work on.
	function createWorkInProgress(current, pendingProps, expirationTime) {
	  var workInProgress = current.alternate;
	  if (workInProgress === null) {
	    // We use a double buffering pooling technique because we know that we'll
	    // only ever need at most two versions of a tree. We pool the "other" unused
	    // node that we're free to reuse. This is lazily created to avoid allocating
	    // extra objects for things that are never updated. It also allow us to
	    // reclaim the extra memory if needed.
	    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
	    workInProgress.elementType = current.elementType;
	    workInProgress.type = current.type;
	    workInProgress.stateNode = current.stateNode;

	    {
	      // DEV-only fields
	      workInProgress._debugID = current._debugID;
	      workInProgress._debugSource = current._debugSource;
	      workInProgress._debugOwner = current._debugOwner;
	    }

	    workInProgress.alternate = current;
	    current.alternate = workInProgress;
	  } else {
	    workInProgress.pendingProps = pendingProps;

	    // We already have an alternate.
	    // Reset the effect tag.
	    workInProgress.effectTag = NoEffect;

	    // The effect list is no longer valid.
	    workInProgress.nextEffect = null;
	    workInProgress.firstEffect = null;
	    workInProgress.lastEffect = null;

	    {
	      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
	      // This prevents time from endlessly accumulating in new commits.
	      // This has the downside of resetting values for different priority renders,
	      // But works for yielding (the common case) and should support resuming.
	      workInProgress.actualDuration = 0;
	      workInProgress.actualStartTime = -1;
	    }
	  }

	  workInProgress.childExpirationTime = current.childExpirationTime;
	  workInProgress.expirationTime = current.expirationTime;

	  workInProgress.child = current.child;
	  workInProgress.memoizedProps = current.memoizedProps;
	  workInProgress.memoizedState = current.memoizedState;
	  workInProgress.updateQueue = current.updateQueue;
	  workInProgress.firstContextDependency = current.firstContextDependency;

	  // These will be overridden during the parent's reconciliation
	  workInProgress.sibling = current.sibling;
	  workInProgress.index = current.index;
	  workInProgress.ref = current.ref;

	  {
	    workInProgress.selfBaseDuration = current.selfBaseDuration;
	    workInProgress.treeBaseDuration = current.treeBaseDuration;
	  }

	  return workInProgress;
	}

	function createHostRootFiber(isConcurrent) {
	  var mode = isConcurrent ? ConcurrentMode | StrictMode : NoContext;

	  if (isDevToolsPresent) {
	    // Always collect profile timings when DevTools are present.
	    // This enables DevTools to start capturing timing at any point–
	    // Without some nodes in the tree having empty base times.
	    mode |= ProfileMode;
	  }

	  return createFiber(HostRoot, null, null, mode);
	}

	function createFiberFromTypeAndProps(type, // React$ElementType
	key, pendingProps, owner, mode, expirationTime) {
	  var fiber = void 0;

	  var fiberTag = IndeterminateComponent;
	  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
	  var resolvedType = type;
	  if (typeof type === 'function') {
	    if (shouldConstruct(type)) {
	      fiberTag = ClassComponent;
	    }
	  } else if (typeof type === 'string') {
	    fiberTag = HostComponent;
	  } else {
	    getTag: switch (type) {
	      case REACT_FRAGMENT_TYPE:
	        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
	      case REACT_CONCURRENT_MODE_TYPE:
	        return createFiberFromMode(pendingProps, mode | ConcurrentMode | StrictMode, expirationTime, key);
	      case REACT_STRICT_MODE_TYPE:
	        return createFiberFromMode(pendingProps, mode | StrictMode, expirationTime, key);
	      case REACT_PROFILER_TYPE:
	        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
	      case REACT_SUSPENSE_TYPE:
	        return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
	      default:
	        {
	          if (typeof type === 'object' && type !== null) {
	            switch (type.$$typeof) {
	              case REACT_PROVIDER_TYPE:
	                fiberTag = ContextProvider;
	                break getTag;
	              case REACT_CONTEXT_TYPE:
	                // This is a consumer
	                fiberTag = ContextConsumer;
	                break getTag;
	              case REACT_FORWARD_REF_TYPE:
	                fiberTag = ForwardRef;
	                break getTag;
	              case REACT_MEMO_TYPE:
	                fiberTag = MemoComponent;
	                break getTag;
	              case REACT_LAZY_TYPE:
	                fiberTag = LazyComponent;
	                resolvedType = null;
	                break getTag;
	            }
	          }
	          var info = '';
	          {
	            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
	            }
	            var ownerName = owner ? getComponentName(owner.type) : null;
	            if (ownerName) {
	              info += '\n\nCheck the render method of `' + ownerName + '`.';
	            }
	          }
	          invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
	        }
	    }
	  }

	  fiber = createFiber(fiberTag, pendingProps, key, mode);
	  fiber.elementType = type;
	  fiber.type = resolvedType;
	  fiber.expirationTime = expirationTime;

	  return fiber;
	}

	function createFiberFromElement(element, mode, expirationTime) {
	  var owner = null;
	  {
	    owner = element._owner;
	  }
	  var type = element.type;
	  var key = element.key;
	  var pendingProps = element.props;
	  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
	  {
	    fiber._debugSource = element._source;
	    fiber._debugOwner = element._owner;
	  }
	  return fiber;
	}

	function createFiberFromFragment(elements, mode, expirationTime, key) {
	  var fiber = createFiber(Fragment, elements, key, mode);
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
	  {
	    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
	      warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
	    }
	  }

	  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
	  // TODO: The Profiler fiber shouldn't have a type. It has a tag.
	  fiber.elementType = REACT_PROFILER_TYPE;
	  fiber.type = REACT_PROFILER_TYPE;
	  fiber.expirationTime = expirationTime;

	  return fiber;
	}

	function createFiberFromMode(pendingProps, mode, expirationTime, key) {
	  var fiber = createFiber(Mode, pendingProps, key, mode);

	  // TODO: The Mode fiber shouldn't have a type. It has a tag.
	  var type = (mode & ConcurrentMode) === NoContext ? REACT_STRICT_MODE_TYPE : REACT_CONCURRENT_MODE_TYPE;
	  fiber.elementType = type;
	  fiber.type = type;

	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
	  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);

	  // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
	  var type = REACT_SUSPENSE_TYPE;
	  fiber.elementType = type;
	  fiber.type = type;

	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromText(content, mode, expirationTime) {
	  var fiber = createFiber(HostText, content, null, mode);
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromHostInstanceForDeletion() {
	  var fiber = createFiber(HostComponent, null, null, NoContext);
	  // TODO: These should not need a type.
	  fiber.elementType = 'DELETED';
	  fiber.type = 'DELETED';
	  return fiber;
	}

	function createFiberFromPortal(portal, mode, expirationTime) {
	  var pendingProps = portal.children !== null ? portal.children : [];
	  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
	  fiber.expirationTime = expirationTime;
	  fiber.stateNode = {
	    containerInfo: portal.containerInfo,
	    pendingChildren: null, // Used by persistent updates
	    implementation: portal.implementation
	  };
	  return fiber;
	}

	// Used for stashing WIP properties to replay failed work in DEV.
	function assignFiberPropertiesInDEV(target, source) {
	  if (target === null) {
	    // This Fiber's initial properties will always be overwritten.
	    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
	    target = createFiber(IndeterminateComponent, null, null, NoContext);
	  }

	  // This is intentionally written as a list of all properties.
	  // We tried to use Object.assign() instead but this is called in
	  // the hottest path, and Object.assign() was too slow:
	  // https://github.com/facebook/react/issues/12502
	  // This code is DEV-only so size is not a concern.

	  target.tag = source.tag;
	  target.key = source.key;
	  target.elementType = source.elementType;
	  target.type = source.type;
	  target.stateNode = source.stateNode;
	  target.return = source.return;
	  target.child = source.child;
	  target.sibling = source.sibling;
	  target.index = source.index;
	  target.ref = source.ref;
	  target.pendingProps = source.pendingProps;
	  target.memoizedProps = source.memoizedProps;
	  target.updateQueue = source.updateQueue;
	  target.memoizedState = source.memoizedState;
	  target.firstContextDependency = source.firstContextDependency;
	  target.mode = source.mode;
	  target.effectTag = source.effectTag;
	  target.nextEffect = source.nextEffect;
	  target.firstEffect = source.firstEffect;
	  target.lastEffect = source.lastEffect;
	  target.expirationTime = source.expirationTime;
	  target.childExpirationTime = source.childExpirationTime;
	  target.alternate = source.alternate;
	  {
	    target.actualDuration = source.actualDuration;
	    target.actualStartTime = source.actualStartTime;
	    target.selfBaseDuration = source.selfBaseDuration;
	    target.treeBaseDuration = source.treeBaseDuration;
	  }
	  target._debugID = source._debugID;
	  target._debugSource = source._debugSource;
	  target._debugOwner = source._debugOwner;
	  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
	  return target;
	}

	// TODO: This should be lifted into the renderer.


	// The following attributes are only used by interaction tracing builds.
	// They enable interactions to be associated with their async work,
	// And expose interaction metadata to the React DevTools Profiler plugin.
	// Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.


	// Exported FiberRoot type includes all properties,
	// To avoid requiring potentially error-prone :any casts throughout the project.
	// Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
	// The types are defined separately within this file to ensure they stay in sync.
	// (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)


	function createFiberRoot(containerInfo, isConcurrent, hydrate) {
	  // Cyclic construction. This cheats the type system right now because
	  // stateNode is any.
	  var uninitializedFiber = createHostRootFiber(isConcurrent);

	  var root = void 0;
	  {
	    root = {
	      current: uninitializedFiber,
	      containerInfo: containerInfo,
	      pendingChildren: null,

	      earliestPendingTime: NoWork,
	      latestPendingTime: NoWork,
	      earliestSuspendedTime: NoWork,
	      latestSuspendedTime: NoWork,
	      latestPingedTime: NoWork,

	      didError: false,

	      pendingCommitExpirationTime: NoWork,
	      finishedWork: null,
	      timeoutHandle: noTimeout,
	      context: null,
	      pendingContext: null,
	      hydrate: hydrate,
	      nextExpirationTimeToWorkOn: NoWork,
	      expirationTime: NoWork,
	      firstBatch: null,
	      nextScheduledRoot: null,

	      interactionThreadID: tracing$1.unstable_getThreadID(),
	      memoizedInteractions: new Set(),
	      pendingInteractionMap: new Map()
	    };
	  }

	  uninitializedFiber.stateNode = root;

	  // The reason for the way the Flow types are structured in this file,
	  // Is to avoid needing :any casts everywhere interaction tracing fields are used.
	  // Unfortunately that requires an :any cast for non-interaction tracing capable builds.
	  // $FlowFixMe Remove this :any cast and replace it with something better.
	  return root;
	}

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var lowPriorityWarning = function () {};

	{
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarning = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	var lowPriorityWarning$1 = lowPriorityWarning;

	var ReactStrictModeWarnings = {
	  discardPendingWarnings: function () {},
	  flushPendingDeprecationWarnings: function () {},
	  flushPendingUnsafeLifecycleWarnings: function () {},
	  recordDeprecationWarnings: function (fiber, instance) {},
	  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
	  recordLegacyContextWarning: function (fiber, instance) {},
	  flushLegacyContextWarning: function () {}
	};

	{
	  var LIFECYCLE_SUGGESTIONS = {
	    UNSAFE_componentWillMount: 'componentDidMount',
	    UNSAFE_componentWillReceiveProps: 'static getDerivedStateFromProps',
	    UNSAFE_componentWillUpdate: 'componentDidUpdate'
	  };

	  var pendingComponentWillMountWarnings = [];
	  var pendingComponentWillReceivePropsWarnings = [];
	  var pendingComponentWillUpdateWarnings = [];
	  var pendingUnsafeLifecycleWarnings = new Map();
	  var pendingLegacyContextWarning = new Map();

	  // Tracks components we have already warned about.
	  var didWarnAboutDeprecatedLifecycles = new Set();
	  var didWarnAboutUnsafeLifecycles = new Set();
	  var didWarnAboutLegacyContext = new Set();

	  var setToSortedString = function (set) {
	    var array = [];
	    set.forEach(function (value) {
	      array.push(value);
	    });
	    return array.sort().join(', ');
	  };

	  ReactStrictModeWarnings.discardPendingWarnings = function () {
	    pendingComponentWillMountWarnings = [];
	    pendingComponentWillReceivePropsWarnings = [];
	    pendingComponentWillUpdateWarnings = [];
	    pendingUnsafeLifecycleWarnings = new Map();
	    pendingLegacyContextWarning = new Map();
	  };

	  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
	    pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {
	      var lifecyclesWarningMesages = [];

	      Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {
	        var lifecycleWarnings = lifecycleWarningsMap[lifecycle];
	        if (lifecycleWarnings.length > 0) {
	          var componentNames = new Set();
	          lifecycleWarnings.forEach(function (fiber) {
	            componentNames.add(getComponentName(fiber.type) || 'Component');
	            didWarnAboutUnsafeLifecycles.add(fiber.type);
	          });

	          var formatted = lifecycle.replace('UNSAFE_', '');
	          var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
	          var sortedComponentNames = setToSortedString(componentNames);

	          lifecyclesWarningMesages.push(formatted + ': Please update the following components to use ' + (suggestion + ' instead: ' + sortedComponentNames));
	        }
	      });

	      if (lifecyclesWarningMesages.length > 0) {
	        var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);

	        warningWithoutStack$1(false, 'Unsafe lifecycle methods were found within a strict-mode tree:%s' + '\n\n%s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, lifecyclesWarningMesages.join('\n\n'));
	      }
	    });

	    pendingUnsafeLifecycleWarnings = new Map();
	  };

	  var findStrictRoot = function (fiber) {
	    var maybeStrictRoot = null;

	    var node = fiber;
	    while (node !== null) {
	      if (node.mode & StrictMode) {
	        maybeStrictRoot = node;
	      }
	      node = node.return;
	    }

	    return maybeStrictRoot;
	  };

	  ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {
	    if (pendingComponentWillMountWarnings.length > 0) {
	      var uniqueNames = new Set();
	      pendingComponentWillMountWarnings.forEach(function (fiber) {
	        uniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutDeprecatedLifecycles.add(fiber.type);
	      });

	      var sortedNames = setToSortedString(uniqueNames);

	      lowPriorityWarning$1(false, 'componentWillMount is deprecated and will be removed in the next major version. ' + 'Use componentDidMount instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillMount.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', sortedNames);

	      pendingComponentWillMountWarnings = [];
	    }

	    if (pendingComponentWillReceivePropsWarnings.length > 0) {
	      var _uniqueNames = new Set();
	      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        _uniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutDeprecatedLifecycles.add(fiber.type);
	      });

	      var _sortedNames = setToSortedString(_uniqueNames);

	      lowPriorityWarning$1(false, 'componentWillReceiveProps is deprecated and will be removed in the next major version. ' + 'Use static getDerivedStateFromProps instead.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames);

	      pendingComponentWillReceivePropsWarnings = [];
	    }

	    if (pendingComponentWillUpdateWarnings.length > 0) {
	      var _uniqueNames2 = new Set();
	      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
	        _uniqueNames2.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutDeprecatedLifecycles.add(fiber.type);
	      });

	      var _sortedNames2 = setToSortedString(_uniqueNames2);

	      lowPriorityWarning$1(false, 'componentWillUpdate is deprecated and will be removed in the next major version. ' + 'Use componentDidUpdate instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillUpdate.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames2);

	      pendingComponentWillUpdateWarnings = [];
	    }
	  };

	  ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {
	    // Dedup strategy: Warn once per component.
	    if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
	      return;
	    }

	    // Don't warn about react-lifecycles-compat polyfilled components.
	    if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
	      pendingComponentWillMountWarnings.push(fiber);
	    }
	    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	      pendingComponentWillReceivePropsWarnings.push(fiber);
	    }
	    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	      pendingComponentWillUpdateWarnings.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
	    var strictRoot = findStrictRoot(fiber);
	    if (strictRoot === null) {
	      warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	      return;
	    }

	    // Dedup strategy: Warn once per component.
	    // This is difficult to track any other way since component names
	    // are often vague and are likely to collide between 3rd party libraries.
	    // An expand property is probably okay to use here since it's DEV-only,
	    // and will only be set in the event of serious warnings.
	    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
	      return;
	    }

	    var warningsForRoot = void 0;
	    if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
	      warningsForRoot = {
	        UNSAFE_componentWillMount: [],
	        UNSAFE_componentWillReceiveProps: [],
	        UNSAFE_componentWillUpdate: []
	      };

	      pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);
	    } else {
	      warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);
	    }

	    var unsafeLifecycles = [];
	    if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillMount === 'function') {
	      unsafeLifecycles.push('UNSAFE_componentWillMount');
	    }
	    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	      unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');
	    }
	    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillUpdate === 'function') {
	      unsafeLifecycles.push('UNSAFE_componentWillUpdate');
	    }

	    if (unsafeLifecycles.length > 0) {
	      unsafeLifecycles.forEach(function (lifecycle) {
	        warningsForRoot[lifecycle].push(fiber);
	      });
	    }
	  };

	  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
	    var strictRoot = findStrictRoot(fiber);
	    if (strictRoot === null) {
	      warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	      return;
	    }

	    // Dedup strategy: Warn once per component.
	    if (didWarnAboutLegacyContext.has(fiber.type)) {
	      return;
	    }

	    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

	    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
	      if (warningsForRoot === undefined) {
	        warningsForRoot = [];
	        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
	      }
	      warningsForRoot.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
	    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
	      var uniqueNames = new Set();
	      fiberArray.forEach(function (fiber) {
	        uniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutLegacyContext.add(fiber.type);
	      });

	      var sortedNames = setToSortedString(uniqueNames);
	      var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);

	      warningWithoutStack$1(false, 'Legacy context API has been detected within a strict-mode tree: %s' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, sortedNames);
	    });
	  };
	}

	// TODO: Offscreen updates should never suspend. However, a promise that
	// suspended inside an offscreen subtree should be able to ping at the priority
	// of the outer render.

	function markPendingPriorityLevel(root, expirationTime) {
	  // If there's a gap between completing a failed root and retrying it,
	  // additional updates may be scheduled. Clear `didError`, in case the update
	  // is sufficient to fix the error.
	  root.didError = false;

	  // Update the latest and earliest pending times
	  var earliestPendingTime = root.earliestPendingTime;
	  if (earliestPendingTime === NoWork) {
	    // No other pending updates.
	    root.earliestPendingTime = root.latestPendingTime = expirationTime;
	  } else {
	    if (earliestPendingTime < expirationTime) {
	      // This is the earliest pending update.
	      root.earliestPendingTime = expirationTime;
	    } else {
	      var latestPendingTime = root.latestPendingTime;
	      if (latestPendingTime > expirationTime) {
	        // This is the latest pending update
	        root.latestPendingTime = expirationTime;
	      }
	    }
	  }
	  findNextExpirationTimeToWorkOn(expirationTime, root);
	}

	function markCommittedPriorityLevels(root, earliestRemainingTime) {
	  root.didError = false;

	  if (earliestRemainingTime === NoWork) {
	    // Fast path. There's no remaining work. Clear everything.
	    root.earliestPendingTime = NoWork;
	    root.latestPendingTime = NoWork;
	    root.earliestSuspendedTime = NoWork;
	    root.latestSuspendedTime = NoWork;
	    root.latestPingedTime = NoWork;
	    findNextExpirationTimeToWorkOn(NoWork, root);
	    return;
	  }

	  // Let's see if the previous latest known pending level was just flushed.
	  var latestPendingTime = root.latestPendingTime;
	  if (latestPendingTime !== NoWork) {
	    if (latestPendingTime > earliestRemainingTime) {
	      // We've flushed all the known pending levels.
	      root.earliestPendingTime = root.latestPendingTime = NoWork;
	    } else {
	      var earliestPendingTime = root.earliestPendingTime;
	      if (earliestPendingTime > earliestRemainingTime) {
	        // We've flushed the earliest known pending level. Set this to the
	        // latest pending time.
	        root.earliestPendingTime = root.latestPendingTime;
	      }
	    }
	  }

	  // Now let's handle the earliest remaining level in the whole tree. We need to
	  // decide whether to treat it as a pending level or as suspended. Check
	  // it falls within the range of known suspended levels.

	  var earliestSuspendedTime = root.earliestSuspendedTime;
	  if (earliestSuspendedTime === NoWork) {
	    // There's no suspended work. Treat the earliest remaining level as a
	    // pending level.
	    markPendingPriorityLevel(root, earliestRemainingTime);
	    findNextExpirationTimeToWorkOn(NoWork, root);
	    return;
	  }

	  var latestSuspendedTime = root.latestSuspendedTime;
	  if (earliestRemainingTime < latestSuspendedTime) {
	    // The earliest remaining level is later than all the suspended work. That
	    // means we've flushed all the suspended work.
	    root.earliestSuspendedTime = NoWork;
	    root.latestSuspendedTime = NoWork;
	    root.latestPingedTime = NoWork;

	    // There's no suspended work. Treat the earliest remaining level as a
	    // pending level.
	    markPendingPriorityLevel(root, earliestRemainingTime);
	    findNextExpirationTimeToWorkOn(NoWork, root);
	    return;
	  }

	  if (earliestRemainingTime > earliestSuspendedTime) {
	    // The earliest remaining time is earlier than all the suspended work.
	    // Treat it as a pending update.
	    markPendingPriorityLevel(root, earliestRemainingTime);
	    findNextExpirationTimeToWorkOn(NoWork, root);
	    return;
	  }

	  // The earliest remaining time falls within the range of known suspended
	  // levels. We should treat this as suspended work.
	  findNextExpirationTimeToWorkOn(NoWork, root);
	}

	function hasLowerPriorityWork(root, erroredExpirationTime) {
	  var latestPendingTime = root.latestPendingTime;
	  var latestSuspendedTime = root.latestSuspendedTime;
	  var latestPingedTime = root.latestPingedTime;
	  return latestPendingTime !== NoWork && latestPendingTime < erroredExpirationTime || latestSuspendedTime !== NoWork && latestSuspendedTime < erroredExpirationTime || latestPingedTime !== NoWork && latestPingedTime < erroredExpirationTime;
	}

	function isPriorityLevelSuspended(root, expirationTime) {
	  var earliestSuspendedTime = root.earliestSuspendedTime;
	  var latestSuspendedTime = root.latestSuspendedTime;
	  return earliestSuspendedTime !== NoWork && expirationTime <= earliestSuspendedTime && expirationTime >= latestSuspendedTime;
	}

	function markSuspendedPriorityLevel(root, suspendedTime) {
	  root.didError = false;
	  clearPing(root, suspendedTime);

	  // First, check the known pending levels and update them if needed.
	  var earliestPendingTime = root.earliestPendingTime;
	  var latestPendingTime = root.latestPendingTime;
	  if (earliestPendingTime === suspendedTime) {
	    if (latestPendingTime === suspendedTime) {
	      // Both known pending levels were suspended. Clear them.
	      root.earliestPendingTime = root.latestPendingTime = NoWork;
	    } else {
	      // The earliest pending level was suspended. Clear by setting it to the
	      // latest pending level.
	      root.earliestPendingTime = latestPendingTime;
	    }
	  } else if (latestPendingTime === suspendedTime) {
	    // The latest pending level was suspended. Clear by setting it to the
	    // latest pending level.
	    root.latestPendingTime = earliestPendingTime;
	  }

	  // Finally, update the known suspended levels.
	  var earliestSuspendedTime = root.earliestSuspendedTime;
	  var latestSuspendedTime = root.latestSuspendedTime;
	  if (earliestSuspendedTime === NoWork) {
	    // No other suspended levels.
	    root.earliestSuspendedTime = root.latestSuspendedTime = suspendedTime;
	  } else {
	    if (earliestSuspendedTime < suspendedTime) {
	      // This is the earliest suspended level.
	      root.earliestSuspendedTime = suspendedTime;
	    } else if (latestSuspendedTime > suspendedTime) {
	      // This is the latest suspended level
	      root.latestSuspendedTime = suspendedTime;
	    }
	  }

	  findNextExpirationTimeToWorkOn(suspendedTime, root);
	}

	function markPingedPriorityLevel(root, pingedTime) {
	  root.didError = false;

	  // TODO: When we add back resuming, we need to ensure the progressed work
	  // is thrown out and not reused during the restarted render. One way to
	  // invalidate the progressed work is to restart at expirationTime + 1.
	  var latestPingedTime = root.latestPingedTime;
	  if (latestPingedTime === NoWork || latestPingedTime > pingedTime) {
	    root.latestPingedTime = pingedTime;
	  }
	  findNextExpirationTimeToWorkOn(pingedTime, root);
	}

	function clearPing(root, completedTime) {
	  // TODO: Track whether the root was pinged during the render phase. If so,
	  // we need to make sure we don't lose track of it.
	  var latestPingedTime = root.latestPingedTime;
	  if (latestPingedTime !== NoWork && latestPingedTime >= completedTime) {
	    root.latestPingedTime = NoWork;
	  }
	}

	function findEarliestOutstandingPriorityLevel(root, renderExpirationTime) {
	  var earliestExpirationTime = renderExpirationTime;

	  var earliestPendingTime = root.earliestPendingTime;
	  var earliestSuspendedTime = root.earliestSuspendedTime;
	  if (earliestPendingTime > earliestExpirationTime) {
	    earliestExpirationTime = earliestPendingTime;
	  }
	  if (earliestSuspendedTime > earliestExpirationTime) {
	    earliestExpirationTime = earliestSuspendedTime;
	  }
	  return earliestExpirationTime;
	}

	function didExpireAtExpirationTime(root, currentTime) {
	  var expirationTime = root.expirationTime;
	  if (expirationTime !== NoWork && currentTime <= expirationTime) {
	    // The root has expired. Flush all work up to the current time.
	    root.nextExpirationTimeToWorkOn = currentTime;
	  }
	}

	function findNextExpirationTimeToWorkOn(completedExpirationTime, root) {
	  var earliestSuspendedTime = root.earliestSuspendedTime;
	  var latestSuspendedTime = root.latestSuspendedTime;
	  var earliestPendingTime = root.earliestPendingTime;
	  var latestPingedTime = root.latestPingedTime;

	  // Work on the earliest pending time. Failing that, work on the latest
	  // pinged time.
	  var nextExpirationTimeToWorkOn = earliestPendingTime !== NoWork ? earliestPendingTime : latestPingedTime;

	  // If there is no pending or pinged work, check if there's suspended work
	  // that's lower priority than what we just completed.
	  if (nextExpirationTimeToWorkOn === NoWork && (completedExpirationTime === NoWork || latestSuspendedTime < completedExpirationTime)) {
	    // The lowest priority suspended work is the work most likely to be
	    // committed next. Let's start rendering it again, so that if it times out,
	    // it's ready to commit.
	    nextExpirationTimeToWorkOn = latestSuspendedTime;
	  }

	  var expirationTime = nextExpirationTimeToWorkOn;
	  if (expirationTime !== NoWork && earliestSuspendedTime > expirationTime) {
	    // Expire using the earliest known expiration time.
	    expirationTime = earliestSuspendedTime;
	  }

	  root.nextExpirationTimeToWorkOn = nextExpirationTimeToWorkOn;
	  root.expirationTime = expirationTime;
	}

	// UpdateQueue is a linked list of prioritized updates.
	//
	// Like fibers, update queues come in pairs: a current queue, which represents
	// the visible state of the screen, and a work-in-progress queue, which is
	// can be mutated and processed asynchronously before it is committed — a form
	// of double buffering. If a work-in-progress render is discarded before
	// finishing, we create a new work-in-progress by cloning the current queue.
	//
	// Both queues share a persistent, singly-linked list structure. To schedule an
	// update, we append it to the end of both queues. Each queue maintains a
	// pointer to first update in the persistent list that hasn't been processed.
	// The work-in-progress pointer always has a position equal to or greater than
	// the current queue, since we always work on that one. The current queue's
	// pointer is only updated during the commit phase, when we swap in the
	// work-in-progress.
	//
	// For example:
	//
	//   Current pointer:           A - B - C - D - E - F
	//   Work-in-progress pointer:              D - E - F
	//                                          ^
	//                                          The work-in-progress queue has
	//                                          processed more updates than current.
	//
	// The reason we append to both queues is because otherwise we might drop
	// updates without ever processing them. For example, if we only add updates to
	// the work-in-progress queue, some updates could be lost whenever a work-in
	// -progress render restarts by cloning from current. Similarly, if we only add
	// updates to the current queue, the updates will be lost whenever an already
	// in-progress queue commits and swaps with the current queue. However, by
	// adding to both queues, we guarantee that the update will be part of the next
	// work-in-progress. (And because the work-in-progress queue becomes the
	// current queue once it commits, there's no danger of applying the same
	// update twice.)
	//
	// Prioritization
	// --------------
	//
	// Updates are not sorted by priority, but by insertion; new updates are always
	// appended to the end of the list.
	//
	// The priority is still important, though. When processing the update queue
	// during the render phase, only the updates with sufficient priority are
	// included in the result. If we skip an update because it has insufficient
	// priority, it remains in the queue to be processed later, during a lower
	// priority render. Crucially, all updates subsequent to a skipped update also
	// remain in the queue *regardless of their priority*. That means high priority
	// updates are sometimes processed twice, at two separate priorities. We also
	// keep track of a base state, that represents the state before the first
	// update in the queue is applied.
	//
	// For example:
	//
	//   Given a base state of '', and the following queue of updates
	//
	//     A1 - B2 - C1 - D2
	//
	//   where the number indicates the priority, and the update is applied to the
	//   previous state by appending a letter, React will process these updates as
	//   two separate renders, one per distinct priority level:
	//
	//   First render, at priority 1:
	//     Base state: ''
	//     Updates: [A1, C1]
	//     Result state: 'AC'
	//
	//   Second render, at priority 2:
	//     Base state: 'A'            <-  The base state does not include C1,
	//                                    because B2 was skipped.
	//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
	//     Result state: 'ABCD'
	//
	// Because we process updates in insertion order, and rebase high priority
	// updates when preceding updates are skipped, the final result is deterministic
	// regardless of priority. Intermediate state may vary according to system
	// resources, but the final state is always the same.

	var UpdateState = 0;
	var ReplaceState = 1;
	var ForceUpdate = 2;
	var CaptureUpdate = 3;

	// Global state that is reset at the beginning of calling `processUpdateQueue`.
	// It should only be read right after calling `processUpdateQueue`, via
	// `checkHasForceUpdateAfterProcessing`.
	var hasForceUpdate = false;

	var didWarnUpdateInsideUpdate = void 0;
	var currentlyProcessingQueue = void 0;
	var resetCurrentlyProcessingQueue = void 0;
	{
	  didWarnUpdateInsideUpdate = false;
	  currentlyProcessingQueue = null;
	  resetCurrentlyProcessingQueue = function () {
	    currentlyProcessingQueue = null;
	  };
	}

	function createUpdateQueue(baseState) {
	  var queue = {
	    baseState: baseState,
	    firstUpdate: null,
	    lastUpdate: null,
	    firstCapturedUpdate: null,
	    lastCapturedUpdate: null,
	    firstEffect: null,
	    lastEffect: null,
	    firstCapturedEffect: null,
	    lastCapturedEffect: null
	  };
	  return queue;
	}

	function cloneUpdateQueue(currentQueue) {
	  var queue = {
	    baseState: currentQueue.baseState,
	    firstUpdate: currentQueue.firstUpdate,
	    lastUpdate: currentQueue.lastUpdate,

	    // TODO: With resuming, if we bail out and resuse the child tree, we should
	    // keep these effects.
	    firstCapturedUpdate: null,
	    lastCapturedUpdate: null,

	    firstEffect: null,
	    lastEffect: null,

	    firstCapturedEffect: null,
	    lastCapturedEffect: null
	  };
	  return queue;
	}

	function createUpdate(expirationTime) {
	  return {
	    expirationTime: expirationTime,

	    tag: UpdateState,
	    payload: null,
	    callback: null,

	    next: null,
	    nextEffect: null
	  };
	}

	function appendUpdateToQueue(queue, update) {
	  // Append the update to the end of the list.
	  if (queue.lastUpdate === null) {
	    // Queue is empty
	    queue.firstUpdate = queue.lastUpdate = update;
	  } else {
	    queue.lastUpdate.next = update;
	    queue.lastUpdate = update;
	  }
	}

	function enqueueUpdate(fiber, update) {
	  // Update queues are created lazily.
	  var alternate = fiber.alternate;
	  var queue1 = void 0;
	  var queue2 = void 0;
	  if (alternate === null) {
	    // There's only one fiber.
	    queue1 = fiber.updateQueue;
	    queue2 = null;
	    if (queue1 === null) {
	      queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
	    }
	  } else {
	    // There are two owners.
	    queue1 = fiber.updateQueue;
	    queue2 = alternate.updateQueue;
	    if (queue1 === null) {
	      if (queue2 === null) {
	        // Neither fiber has an update queue. Create new ones.
	        queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
	        queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
	      } else {
	        // Only one fiber has an update queue. Clone to create a new one.
	        queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
	      }
	    } else {
	      if (queue2 === null) {
	        // Only one fiber has an update queue. Clone to create a new one.
	        queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
	      }
	    }
	  }
	  if (queue2 === null || queue1 === queue2) {
	    // There's only a single queue.
	    appendUpdateToQueue(queue1, update);
	  } else {
	    // There are two queues. We need to append the update to both queues,
	    // while accounting for the persistent structure of the list — we don't
	    // want the same update to be added multiple times.
	    if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
	      // One of the queues is not empty. We must add the update to both queues.
	      appendUpdateToQueue(queue1, update);
	      appendUpdateToQueue(queue2, update);
	    } else {
	      // Both queues are non-empty. The last update is the same in both lists,
	      // because of structural sharing. So, only append to one of the lists.
	      appendUpdateToQueue(queue1, update);
	      // But we still need to update the `lastUpdate` pointer of queue2.
	      queue2.lastUpdate = update;
	    }
	  }

	  {
	    if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
	      warningWithoutStack$1(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
	      didWarnUpdateInsideUpdate = true;
	    }
	  }
	}

	function enqueueCapturedUpdate(workInProgress, update) {
	  // Captured updates go into a separate list, and only on the work-in-
	  // progress queue.
	  var workInProgressQueue = workInProgress.updateQueue;
	  if (workInProgressQueue === null) {
	    workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
	  } else {
	    // TODO: I put this here rather than createWorkInProgress so that we don't
	    // clone the queue unnecessarily. There's probably a better way to
	    // structure this.
	    workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
	  }

	  // Append the update to the end of the list.
	  if (workInProgressQueue.lastCapturedUpdate === null) {
	    // This is the first render phase update
	    workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
	  } else {
	    workInProgressQueue.lastCapturedUpdate.next = update;
	    workInProgressQueue.lastCapturedUpdate = update;
	  }
	}

	function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
	  var current = workInProgress.alternate;
	  if (current !== null) {
	    // If the work-in-progress queue is equal to the current queue,
	    // we need to clone it first.
	    if (queue === current.updateQueue) {
	      queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
	    }
	  }
	  return queue;
	}

	function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
	  switch (update.tag) {
	    case ReplaceState:
	      {
	        var _payload = update.payload;
	        if (typeof _payload === 'function') {
	          // Updater function
	          {
	            if (workInProgress.mode & StrictMode) {
	              _payload.call(instance, prevState, nextProps);
	            }
	          }
	          return _payload.call(instance, prevState, nextProps);
	        }
	        // State object
	        return _payload;
	      }
	    case CaptureUpdate:
	      {
	        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
	      }
	    // Intentional fallthrough
	    case UpdateState:
	      {
	        var _payload2 = update.payload;
	        var partialState = void 0;
	        if (typeof _payload2 === 'function') {
	          // Updater function
	          {
	            if (workInProgress.mode & StrictMode) {
	              _payload2.call(instance, prevState, nextProps);
	            }
	          }
	          partialState = _payload2.call(instance, prevState, nextProps);
	        } else {
	          // Partial state object
	          partialState = _payload2;
	        }
	        if (partialState === null || partialState === undefined) {
	          // Null and undefined are treated as no-ops.
	          return prevState;
	        }
	        // Merge the partial state and the previous state.
	        return _assign({}, prevState, partialState);
	      }
	    case ForceUpdate:
	      {
	        hasForceUpdate = true;
	        return prevState;
	      }
	  }
	  return prevState;
	}

	function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
	  hasForceUpdate = false;

	  queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

	  {
	    currentlyProcessingQueue = queue;
	  }

	  // These values may change as we process the queue.
	  var newBaseState = queue.baseState;
	  var newFirstUpdate = null;
	  var newExpirationTime = NoWork;

	  // Iterate through the list of updates to compute the result.
	  var update = queue.firstUpdate;
	  var resultState = newBaseState;
	  while (update !== null) {
	    var updateExpirationTime = update.expirationTime;
	    if (updateExpirationTime < renderExpirationTime) {
	      // This update does not have sufficient priority. Skip it.
	      if (newFirstUpdate === null) {
	        // This is the first skipped update. It will be the first update in
	        // the new list.
	        newFirstUpdate = update;
	        // Since this is the first update that was skipped, the current result
	        // is the new base state.
	        newBaseState = resultState;
	      }
	      // Since this update will remain in the list, update the remaining
	      // expiration time.
	      if (newExpirationTime < updateExpirationTime) {
	        newExpirationTime = updateExpirationTime;
	      }
	    } else {
	      // This update does have sufficient priority. Process it and compute
	      // a new result.
	      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
	      var _callback = update.callback;
	      if (_callback !== null) {
	        workInProgress.effectTag |= Callback;
	        // Set this to null, in case it was mutated during an aborted render.
	        update.nextEffect = null;
	        if (queue.lastEffect === null) {
	          queue.firstEffect = queue.lastEffect = update;
	        } else {
	          queue.lastEffect.nextEffect = update;
	          queue.lastEffect = update;
	        }
	      }
	    }
	    // Continue to the next update.
	    update = update.next;
	  }

	  // Separately, iterate though the list of captured updates.
	  var newFirstCapturedUpdate = null;
	  update = queue.firstCapturedUpdate;
	  while (update !== null) {
	    var _updateExpirationTime = update.expirationTime;
	    if (_updateExpirationTime < renderExpirationTime) {
	      // This update does not have sufficient priority. Skip it.
	      if (newFirstCapturedUpdate === null) {
	        // This is the first skipped captured update. It will be the first
	        // update in the new list.
	        newFirstCapturedUpdate = update;
	        // If this is the first update that was skipped, the current result is
	        // the new base state.
	        if (newFirstUpdate === null) {
	          newBaseState = resultState;
	        }
	      }
	      // Since this update will remain in the list, update the remaining
	      // expiration time.
	      if (newExpirationTime < _updateExpirationTime) {
	        newExpirationTime = _updateExpirationTime;
	      }
	    } else {
	      // This update does have sufficient priority. Process it and compute
	      // a new result.
	      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
	      var _callback2 = update.callback;
	      if (_callback2 !== null) {
	        workInProgress.effectTag |= Callback;
	        // Set this to null, in case it was mutated during an aborted render.
	        update.nextEffect = null;
	        if (queue.lastCapturedEffect === null) {
	          queue.firstCapturedEffect = queue.lastCapturedEffect = update;
	        } else {
	          queue.lastCapturedEffect.nextEffect = update;
	          queue.lastCapturedEffect = update;
	        }
	      }
	    }
	    update = update.next;
	  }

	  if (newFirstUpdate === null) {
	    queue.lastUpdate = null;
	  }
	  if (newFirstCapturedUpdate === null) {
	    queue.lastCapturedUpdate = null;
	  } else {
	    workInProgress.effectTag |= Callback;
	  }
	  if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
	    // We processed every update, without skipping. That means the new base
	    // state is the same as the result state.
	    newBaseState = resultState;
	  }

	  queue.baseState = newBaseState;
	  queue.firstUpdate = newFirstUpdate;
	  queue.firstCapturedUpdate = newFirstCapturedUpdate;

	  // Set the remaining expiration time to be whatever is remaining in the queue.
	  // This should be fine because the only two other things that contribute to
	  // expiration time are props and context. We're already in the middle of the
	  // begin phase by the time we start processing the queue, so we've already
	  // dealt with the props. Context in components that specify
	  // shouldComponentUpdate is tricky; but we'll have to account for
	  // that regardless.
	  workInProgress.expirationTime = newExpirationTime;
	  workInProgress.memoizedState = resultState;

	  {
	    currentlyProcessingQueue = null;
	  }
	}

	function callCallback(callback, context) {
	  !(typeof callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', callback) : void 0;
	  callback.call(context);
	}

	function resetHasForceUpdateBeforeProcessing() {
	  hasForceUpdate = false;
	}

	function checkHasForceUpdateAfterProcessing() {
	  return hasForceUpdate;
	}

	function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
	  // If the finished render included captured updates, and there are still
	  // lower priority updates left over, we need to keep the captured updates
	  // in the queue so that they are rebased and not dropped once we process the
	  // queue again at the lower priority.
	  if (finishedQueue.firstCapturedUpdate !== null) {
	    // Join the captured update list to the end of the normal list.
	    if (finishedQueue.lastUpdate !== null) {
	      finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
	      finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
	    }
	    // Clear the list of captured updates.
	    finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
	  }

	  // Commit the effects
	  commitUpdateEffects(finishedQueue.firstEffect, instance);
	  finishedQueue.firstEffect = finishedQueue.lastEffect = null;

	  commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
	  finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
	}

	function commitUpdateEffects(effect, instance) {
	  while (effect !== null) {
	    var _callback3 = effect.callback;
	    if (_callback3 !== null) {
	      effect.callback = null;
	      callCallback(_callback3, instance);
	    }
	    effect = effect.nextEffect;
	  }
	}

	function createCapturedValue(value, source) {
	  // If the value is an error, call this function immediately after it is thrown
	  // so the stack is accurate.
	  return {
	    value: value,
	    source: source,
	    stack: getStackByFiberInDevAndProd(source)
	  };
	}

	var valueCursor = createCursor(null);

	var rendererSigil = void 0;
	{
	  // Use this to detect multiple renderers using the same context
	  rendererSigil = {};
	}

	var currentlyRenderingFiber = null;
	var lastContextDependency = null;
	var lastContextWithAllBitsObserved = null;

	function resetContextDependences() {
	  // This is called right before React yields execution, to ensure `readContext`
	  // cannot be called outside the render phase.
	  currentlyRenderingFiber = null;
	  lastContextDependency = null;
	  lastContextWithAllBitsObserved = null;
	}

	function pushProvider(providerFiber, nextValue) {
	  var context = providerFiber.type._context;

	  {
	    push(valueCursor, context._currentValue, providerFiber);

	    context._currentValue = nextValue;
	    {
	      !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
	      context._currentRenderer = rendererSigil;
	    }
	  }
	}

	function popProvider(providerFiber) {
	  var currentValue = valueCursor.current;

	  pop(valueCursor, providerFiber);

	  var context = providerFiber.type._context;
	  {
	    context._currentValue = currentValue;
	  }
	}

	function calculateChangedBits(context, newValue, oldValue) {
	  // Use Object.is to compare the new context value to the old value. Inlined
	  // Object.is polyfill.
	  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	  if (oldValue === newValue && (oldValue !== 0 || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue // eslint-disable-line no-self-compare
	  ) {
	      // No change
	      return 0;
	    } else {
	    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : maxSigned31BitInt;

	    {
	      !((changedBits & maxSigned31BitInt) === changedBits) ? warning$1(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;
	    }
	    return changedBits | 0;
	  }
	}

	function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
	  var fiber = workInProgress.child;
	  if (fiber !== null) {
	    // Set the return pointer of the child to the work-in-progress fiber.
	    fiber.return = workInProgress;
	  }
	  while (fiber !== null) {
	    var nextFiber = void 0;

	    // Visit this fiber.
	    var dependency = fiber.firstContextDependency;
	    if (dependency !== null) {
	      do {
	        // Check if the context matches.
	        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
	          // Match! Schedule an update on this fiber.

	          if (fiber.tag === ClassComponent) {
	            // Schedule a force update on the work-in-progress.
	            var update = createUpdate(renderExpirationTime);
	            update.tag = ForceUpdate;
	            // TODO: Because we don't have a work-in-progress, this will add the
	            // update to the current fiber, too, which means it will persist even if
	            // this render is thrown away. Since it's a race condition, not sure it's
	            // worth fixing.
	            enqueueUpdate(fiber, update);
	          }

	          if (fiber.expirationTime < renderExpirationTime) {
	            fiber.expirationTime = renderExpirationTime;
	          }
	          var alternate = fiber.alternate;
	          if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
	            alternate.expirationTime = renderExpirationTime;
	          }
	          // Update the child expiration time of all the ancestors, including
	          // the alternates.
	          var node = fiber.return;
	          while (node !== null) {
	            alternate = node.alternate;
	            if (node.childExpirationTime < renderExpirationTime) {
	              node.childExpirationTime = renderExpirationTime;
	              if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
	                alternate.childExpirationTime = renderExpirationTime;
	              }
	            } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
	              alternate.childExpirationTime = renderExpirationTime;
	            } else {
	              // Neither alternate was updated, which means the rest of the
	              // ancestor path already has sufficient priority.
	              break;
	            }
	            node = node.return;
	          }
	        }
	        nextFiber = fiber.child;
	        dependency = dependency.next;
	      } while (dependency !== null);
	    } else if (fiber.tag === ContextProvider) {
	      // Don't scan deeper if this is a matching provider
	      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
	    } else {
	      // Traverse down.
	      nextFiber = fiber.child;
	    }

	    if (nextFiber !== null) {
	      // Set the return pointer of the child to the work-in-progress fiber.
	      nextFiber.return = fiber;
	    } else {
	      // No child. Traverse to next sibling.
	      nextFiber = fiber;
	      while (nextFiber !== null) {
	        if (nextFiber === workInProgress) {
	          // We're back to the root of this subtree. Exit.
	          nextFiber = null;
	          break;
	        }
	        var sibling = nextFiber.sibling;
	        if (sibling !== null) {
	          // Set the return pointer of the sibling to the work-in-progress fiber.
	          sibling.return = nextFiber.return;
	          nextFiber = sibling;
	          break;
	        }
	        // No more siblings. Traverse up.
	        nextFiber = nextFiber.return;
	      }
	    }
	    fiber = nextFiber;
	  }
	}

	function prepareToReadContext(workInProgress, renderExpirationTime) {
	  currentlyRenderingFiber = workInProgress;
	  lastContextDependency = null;
	  lastContextWithAllBitsObserved = null;

	  // Reset the work-in-progress list
	  workInProgress.firstContextDependency = null;
	}

	function readContext(context, observedBits) {
	  if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
	    var resolvedObservedBits = void 0; // Avoid deopting on observable arguments or heterogeneous types.
	    if (typeof observedBits !== 'number' || observedBits === maxSigned31BitInt) {
	      // Observe all updates.
	      lastContextWithAllBitsObserved = context;
	      resolvedObservedBits = maxSigned31BitInt;
	    } else {
	      resolvedObservedBits = observedBits;
	    }

	    var contextItem = {
	      context: context,
	      observedBits: resolvedObservedBits,
	      next: null
	    };

	    if (lastContextDependency === null) {
	      !(currentlyRenderingFiber !== null) ? invariant(false, 'Context can only be read while React is rendering, e.g. inside the render method or getDerivedStateFromProps.') : void 0;
	      // This is the first dependency in the list
	      currentlyRenderingFiber.firstContextDependency = lastContextDependency = contextItem;
	    } else {
	      // Append a new context item.
	      lastContextDependency = lastContextDependency.next = contextItem;
	    }
	  }
	  return context._currentValue;
	}

	var NoEffect$1 = /*             */0;
	var UnmountSnapshot = /*      */2;
	var UnmountMutation = /*      */4;
	var MountMutation = /*        */8;
	var UnmountLayout = /*        */16;
	var MountLayout = /*          */32;
	// The work-in-progress fiber. I've named it differently to distinguish it from
	// the work-in-progress hook.
	var currentlyRenderingFiber$1 = null;

	// Hooks are stored as a linked list on the fiber's memoizedState field. The
	// current hook list is the list that belongs to the current fiber. The
	// work-in-progress hook list is a new list that will be added to the
	// work-in-progress fiber.
	var firstCurrentHook = null;
	var currentHook = null;
	var firstWorkInProgressHook = null;

	var remainingExpirationTime = NoWork;
	var componentUpdateQueue = null;
	// Whether an update was scheduled during the currently executing render pass.
	var didScheduleRenderPhaseUpdate = false;

	function prepareToUseHooks(current, workInProgress, nextRenderExpirationTime) {
	  {
	    return;
	  }
	  currentlyRenderingFiber$1 = workInProgress;
	  firstCurrentHook = current !== null ? current.memoizedState : null;

	  // The following should have already been reset
	  // currentHook = null;
	  // workInProgressHook = null;

	  // remainingExpirationTime = NoWork;
	  // componentUpdateQueue = null;

	  // isReRender = false;
	  // didScheduleRenderPhaseUpdate = false;
	  // renderPhaseUpdates = null;
	  // numberOfReRenders = 0;
	}

	function finishHooks(Component, props, children, refOrContext) {
	  {
	    return children;
	  }

	  // This must be called after every function component to prevent hooks from
	  // being used in classes.

	  while (didScheduleRenderPhaseUpdate) {
	    // Updates were scheduled during the render phase. They are stored in
	    // the `renderPhaseUpdates` map. Call the component again, reusing the
	    // work-in-progress hooks and applying the additional updates on top. Keep
	    // restarting until no more updates are scheduled.
	    didScheduleRenderPhaseUpdate = false;

	    // Start over from the beginning of the list
	    currentHook = null;
	    componentUpdateQueue = null;

	    children = Component(props, refOrContext);
	  }

	  var renderedWork = currentlyRenderingFiber$1;

	  renderedWork.memoizedState = firstWorkInProgressHook;
	  renderedWork.expirationTime = remainingExpirationTime;
	  renderedWork.updateQueue = componentUpdateQueue;

	  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
	  currentlyRenderingFiber$1 = null;

	  firstCurrentHook = null;
	  currentHook = null;
	  firstWorkInProgressHook = null;

	  remainingExpirationTime = NoWork;
	  componentUpdateQueue = null;

	  // Always set during createWorkInProgress
	  // isReRender = false;

	  // These were reset above
	  // didScheduleRenderPhaseUpdate = false;
	  // renderPhaseUpdates = null;
	  // numberOfReRenders = 0;

	  !!didRenderTooFewHooks ? invariant(false, 'Rendered fewer hooks than expected. This may be caused by an accidental early return statement.') : void 0;

	  return children;
	}

	function resetHooks() {
	  {
	    return;
	  }
	  currentlyRenderingFiber$1 = null;

	  firstCurrentHook = null;
	  currentHook = null;
	  firstWorkInProgressHook = null;

	  remainingExpirationTime = NoWork;
	  componentUpdateQueue = null;

	  // Always set during createWorkInProgress
	  // isReRender = false;

	  didScheduleRenderPhaseUpdate = false;
	}

	var NO_CONTEXT = {};

	var contextStackCursor$1 = createCursor(NO_CONTEXT);
	var contextFiberStackCursor = createCursor(NO_CONTEXT);
	var rootInstanceStackCursor = createCursor(NO_CONTEXT);

	function requiredContext(c) {
	  !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  return c;
	}

	function getRootHostContainer() {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  return rootInstance;
	}

	function pushHostContainer(fiber, nextRootInstance) {
	  // Push current root instance onto the stack;
	  // This allows us to reset root when portals are popped.
	  push(rootInstanceStackCursor, nextRootInstance, fiber);
	  // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.
	  push(contextFiberStackCursor, fiber, fiber);

	  // Finally, we need to push the host context to the stack.
	  // However, we can't just call getRootHostContext() and push it because
	  // we'd have a different number of entries on the stack depending on
	  // whether getRootHostContext() throws somewhere in renderer code or not.
	  // So we push an empty value first. This lets us safely unwind on errors.
	  push(contextStackCursor$1, NO_CONTEXT, fiber);
	  var nextRootContext = getRootHostContext(nextRootInstance);
	  // Now that we know this function doesn't throw, replace it.
	  pop(contextStackCursor$1, fiber);
	  push(contextStackCursor$1, nextRootContext, fiber);
	}

	function popHostContainer(fiber) {
	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	  pop(rootInstanceStackCursor, fiber);
	}

	function getHostContext() {
	  var context = requiredContext(contextStackCursor$1.current);
	  return context;
	}

	function pushHostContext(fiber) {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  var context = requiredContext(contextStackCursor$1.current);
	  var nextContext = getChildHostContext(context, fiber.type, rootInstance);

	  // Don't push this Fiber's context unless it's unique.
	  if (context === nextContext) {
	    return;
	  }

	  // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.
	  push(contextFiberStackCursor, fiber, fiber);
	  push(contextStackCursor$1, nextContext, fiber);
	}

	function popHostContext(fiber) {
	  // Do not pop unless this Fiber provided the current context.
	  // pushHostContext() only pushes Fibers that provide unique contexts.
	  if (contextFiberStackCursor.current !== fiber) {
	    return;
	  }

	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	}

	var commitTime = 0;
	var profilerStartTime = -1;

	function getCommitTime() {
	  return commitTime;
	}

	function recordCommitTime() {
	  commitTime = scheduler$1.unstable_now();
	}

	function startProfilerTimer(fiber) {

	  profilerStartTime = scheduler$1.unstable_now();

	  if (fiber.actualStartTime < 0) {
	    fiber.actualStartTime = scheduler$1.unstable_now();
	  }
	}

	function stopProfilerTimerIfRunning(fiber) {
	  profilerStartTime = -1;
	}

	function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

	  if (profilerStartTime >= 0) {
	    var elapsedTime = scheduler$1.unstable_now() - profilerStartTime;
	    fiber.actualDuration += elapsedTime;
	    if (overrideBaseTime) {
	      fiber.selfBaseDuration = elapsedTime;
	    }
	    profilerStartTime = -1;
	  }
	}

	function resolveDefaultProps(Component, baseProps) {
	  if (Component && Component.defaultProps) {
	    // Resolve default props. Taken from ReactElement
	    var props = _assign({}, baseProps);
	    var defaultProps = Component.defaultProps;
	    for (var propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	    return props;
	  }
	  return baseProps;
	}

	function readLazyComponentType(lazyComponent) {
	  var status = lazyComponent._status;
	  var result = lazyComponent._result;
	  switch (status) {
	    case Resolved:
	      {
	        var Component = result;
	        return Component;
	      }
	    case Rejected:
	      {
	        var error = result;
	        throw error;
	      }
	    case Pending:
	      {
	        var thenable = result;
	        throw thenable;
	      }
	    default:
	      {
	        lazyComponent._status = Pending;
	        var ctor = lazyComponent._ctor;
	        var _thenable = ctor();
	        _thenable.then(function (moduleObject) {
	          if (lazyComponent._status === Pending) {
	            var defaultExport = moduleObject.default;
	            {
	              if (defaultExport === undefined) {
	                warning$1(false, 'lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
	              }
	            }
	            lazyComponent._status = Resolved;
	            lazyComponent._result = defaultExport;
	          }
	        }, function (error) {
	          if (lazyComponent._status === Pending) {
	            lazyComponent._status = Rejected;
	            lazyComponent._result = error;
	          }
	        });
	        lazyComponent._result = _thenable;
	        throw _thenable;
	      }
	  }
	}

	var ReactCurrentOwner$4 = ReactSharedInternals.ReactCurrentOwner;

	function readContext$1(contextType) {
	  var dispatcher = ReactCurrentOwner$4.currentDispatcher;
	  return dispatcher.readContext(contextType);
	}

	var fakeInternalInstance = {};
	var isArray$1 = Array.isArray;

	// React.Component uses a shared frozen object by default.
	// We'll use it to determine whether we need to initialize legacy refs.
	var emptyRefsObject = new React.Component().refs;

	var didWarnAboutStateAssignmentForComponent = void 0;
	var didWarnAboutUninitializedState = void 0;
	var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
	var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
	var didWarnAboutUndefinedDerivedState = void 0;
	var warnOnUndefinedDerivedState = void 0;
	var warnOnInvalidCallback$1 = void 0;
	var didWarnAboutDirectlyAssigningPropsToState = void 0;
	var didWarnAboutContextTypeAndContextTypes = void 0;
	var didWarnAboutInvalidateContextType = void 0;

	{
	  didWarnAboutStateAssignmentForComponent = new Set();
	  didWarnAboutUninitializedState = new Set();
	  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
	  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
	  didWarnAboutDirectlyAssigningPropsToState = new Set();
	  didWarnAboutUndefinedDerivedState = new Set();
	  didWarnAboutContextTypeAndContextTypes = new Set();
	  didWarnAboutInvalidateContextType = new Set();

	  var didWarnOnInvalidCallback = new Set();

	  warnOnInvalidCallback$1 = function (callback, callerName) {
	    if (callback === null || typeof callback === 'function') {
	      return;
	    }
	    var key = callerName + '_' + callback;
	    if (!didWarnOnInvalidCallback.has(key)) {
	      didWarnOnInvalidCallback.add(key);
	      warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  };

	  warnOnUndefinedDerivedState = function (type, partialState) {
	    if (partialState === undefined) {
	      var componentName = getComponentName(type) || 'Component';
	      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
	        didWarnAboutUndefinedDerivedState.add(componentName);
	        warningWithoutStack$1(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
	      }
	    }
	  };

	  // This is so gross but it's at least non-critical and can be removed if
	  // it causes problems. This is meant to give a nicer error message for
	  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
	  // ...)) which otherwise throws a "_processChildContext is not a function"
	  // exception.
	  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
	    enumerable: false,
	    value: function () {
	      invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
	    }
	  });
	  Object.freeze(fakeInternalInstance);
	}

	function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
	  var prevState = workInProgress.memoizedState;

	  {
	    if (workInProgress.mode & StrictMode) {
	      // Invoke the function an extra time to help detect side-effects.
	      getDerivedStateFromProps(nextProps, prevState);
	    }
	  }

	  var partialState = getDerivedStateFromProps(nextProps, prevState);

	  {
	    warnOnUndefinedDerivedState(ctor, partialState);
	  }
	  // Merge the partial state and the previous state.
	  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
	  workInProgress.memoizedState = memoizedState;

	  // Once the update queue is empty, persist the derived state onto the
	  // base state.
	  var updateQueue = workInProgress.updateQueue;
	  if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
	    updateQueue.baseState = memoizedState;
	  }
	}

	var classComponentUpdater = {
	  isMounted: isMounted,
	  enqueueSetState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTime();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber);

	    var update = createUpdate(expirationTime);
	    update.payload = payload;
	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback$1(callback, 'setState');
	      }
	      update.callback = callback;
	    }

	    flushPassiveEffects();
	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  },
	  enqueueReplaceState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTime();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber);

	    var update = createUpdate(expirationTime);
	    update.tag = ReplaceState;
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback$1(callback, 'replaceState');
	      }
	      update.callback = callback;
	    }

	    flushPassiveEffects();
	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  },
	  enqueueForceUpdate: function (inst, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTime();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber);

	    var update = createUpdate(expirationTime);
	    update.tag = ForceUpdate;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback$1(callback, 'forceUpdate');
	      }
	      update.callback = callback;
	    }

	    flushPassiveEffects();
	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  }
	};

	function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
	  var instance = workInProgress.stateNode;
	  if (typeof instance.shouldComponentUpdate === 'function') {
	    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
	    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
	    stopPhaseTimer();

	    {
	      !(shouldUpdate !== undefined) ? warningWithoutStack$1(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component') : void 0;
	    }

	    return shouldUpdate;
	  }

	  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
	    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
	  }

	  return true;
	}

	function checkClassInstance(workInProgress, ctor, newProps) {
	  var instance = workInProgress.stateNode;
	  {
	    var name = getComponentName(ctor) || 'Component';
	    var renderPresent = instance.render;

	    if (!renderPresent) {
	      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
	        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
	      } else {
	        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
	      }
	    }

	    var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
	    !noGetInitialStateOnES6 ? warningWithoutStack$1(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;
	    var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
	    !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;
	    var noInstancePropTypes = !instance.propTypes;
	    !noInstancePropTypes ? warningWithoutStack$1(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;
	    var noInstanceContextType = !instance.contextType;
	    !noInstanceContextType ? warningWithoutStack$1(false, 'contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name) : void 0;
	    var noInstanceContextTypes = !instance.contextTypes;
	    !noInstanceContextTypes ? warningWithoutStack$1(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;

	    if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
	      didWarnAboutContextTypeAndContextTypes.add(ctor);
	      warningWithoutStack$1(false, '%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
	    }

	    var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
	    !noComponentShouldUpdate ? warningWithoutStack$1(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;
	    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
	      warningWithoutStack$1(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
	    }
	    var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
	    !noComponentDidUnmount ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;
	    var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
	    !noComponentDidReceiveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;
	    var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
	    !noComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;
	    var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
	    !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;
	    var hasMutatedProps = instance.props !== newProps;
	    !(instance.props === undefined || !hasMutatedProps) ? warningWithoutStack$1(false, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name) : void 0;
	    var noInstanceDefaultProps = !instance.defaultProps;
	    !noInstanceDefaultProps ? warningWithoutStack$1(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;

	    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
	      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
	      warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
	    }

	    var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
	    !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
	    var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromError !== 'function';
	    !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, '%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
	    var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';
	    !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;
	    var _state = instance.state;
	    if (_state && (typeof _state !== 'object' || isArray$1(_state))) {
	      warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
	    }
	    if (typeof instance.getChildContext === 'function') {
	      !(typeof ctor.childContextTypes === 'object') ? warningWithoutStack$1(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;
	    }
	  }
	}

	function adoptClassInstance(workInProgress, instance) {
	  instance.updater = classComponentUpdater;
	  workInProgress.stateNode = instance;
	  // The instance needs access to the fiber so that it can schedule updates
	  set(instance, workInProgress);
	  {
	    instance._reactInternalInstance = fakeInternalInstance;
	  }
	}

	function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
	  var isLegacyContextConsumer = false;
	  var unmaskedContext = emptyContextObject;
	  var context = null;
	  var contextType = ctor.contextType;
	  if (typeof contextType === 'object' && contextType !== null) {
	    {
	      if (contextType.$$typeof !== REACT_CONTEXT_TYPE && !didWarnAboutInvalidateContextType.has(ctor)) {
	        didWarnAboutInvalidateContextType.add(ctor);
	        warningWithoutStack$1(false, '%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext(). ' + 'Did you accidentally pass the Context.Provider instead?', getComponentName(ctor) || 'Component');
	      }
	    }

	    context = readContext$1(contextType);
	  } else {
	    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    var contextTypes = ctor.contextTypes;
	    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
	    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
	  }

	  // Instantiate twice to help detect side-effects.
	  {
	    if (workInProgress.mode & StrictMode) {
	      new ctor(props, context); // eslint-disable-line no-new
	    }
	  }

	  var instance = new ctor(props, context);
	  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
	  adoptClassInstance(workInProgress, instance);

	  {
	    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
	      var componentName = getComponentName(ctor) || 'Component';
	      if (!didWarnAboutUninitializedState.has(componentName)) {
	        didWarnAboutUninitializedState.add(componentName);
	        warningWithoutStack$1(false, '`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
	      }
	    }

	    // If new component APIs are defined, "unsafe" lifecycles won't be called.
	    // Warn about these lifecycles if they are present.
	    // Don't warn about react-lifecycles-compat polyfilled methods though.
	    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
	      var foundWillMountName = null;
	      var foundWillReceivePropsName = null;
	      var foundWillUpdateName = null;
	      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
	        foundWillMountName = 'componentWillMount';
	      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        foundWillMountName = 'UNSAFE_componentWillMount';
	      }
	      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	        foundWillReceivePropsName = 'componentWillReceiveProps';
	      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
	      }
	      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	        foundWillUpdateName = 'componentWillUpdate';
	      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
	      }
	      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
	        var _componentName = getComponentName(ctor) || 'Component';
	        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
	        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
	          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
	          warningWithoutStack$1(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks', _componentName, newApiName, foundWillMountName !== null ? '\n  ' + foundWillMountName : '', foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '', foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '');
	        }
	      }
	    }
	  }

	  // Cache unmasked context so we can avoid recreating masked context unless necessary.
	  // ReactFiberContext usually updates this cache but can't for newly-created instances.
	  if (isLegacyContextConsumer) {
	    cacheContext(workInProgress, unmaskedContext, context);
	  }

	  return instance;
	}

	function callComponentWillMount(workInProgress, instance) {
	  startPhaseTimer(workInProgress, 'componentWillMount');
	  var oldState = instance.state;

	  if (typeof instance.componentWillMount === 'function') {
	    instance.componentWillMount();
	  }
	  if (typeof instance.UNSAFE_componentWillMount === 'function') {
	    instance.UNSAFE_componentWillMount();
	  }

	  stopPhaseTimer();

	  if (oldState !== instance.state) {
	    {
	      warningWithoutStack$1(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
	    }
	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	}

	function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
	  var oldState = instance.state;
	  startPhaseTimer(workInProgress, 'componentWillReceiveProps');
	  if (typeof instance.componentWillReceiveProps === 'function') {
	    instance.componentWillReceiveProps(newProps, nextContext);
	  }
	  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
	  }
	  stopPhaseTimer();

	  if (instance.state !== oldState) {
	    {
	      var componentName = getComponentName(workInProgress.type) || 'Component';
	      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
	        didWarnAboutStateAssignmentForComponent.add(componentName);
	        warningWithoutStack$1(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
	      }
	    }
	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	}

	// Invokes the mount life-cycles on a previously never rendered instance.
	function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
	  {
	    checkClassInstance(workInProgress, ctor, newProps);
	  }

	  var instance = workInProgress.stateNode;
	  instance.props = newProps;
	  instance.state = workInProgress.memoizedState;
	  instance.refs = emptyRefsObject;

	  var contextType = ctor.contextType;
	  if (typeof contextType === 'object' && contextType !== null) {
	    instance.context = readContext$1(contextType);
	  } else {
	    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    instance.context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  {
	    if (instance.state === newProps) {
	      var componentName = getComponentName(ctor) || 'Component';
	      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
	        didWarnAboutDirectlyAssigningPropsToState.add(componentName);
	        warningWithoutStack$1(false, '%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
	      }
	    }

	    if (workInProgress.mode & StrictMode) {
	      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);

	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
	    }
	  }

	  var updateQueue = workInProgress.updateQueue;
	  if (updateQueue !== null) {
	    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
	    instance.state = workInProgress.memoizedState;
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    instance.state = workInProgress.memoizedState;
	  }

	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.
	  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	    callComponentWillMount(workInProgress, instance);
	    // If we had additional state updates during this life-cycle, let's
	    // process them now.
	    updateQueue = workInProgress.updateQueue;
	    if (updateQueue !== null) {
	      processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
	      instance.state = workInProgress.memoizedState;
	    }
	  }

	  if (typeof instance.componentDidMount === 'function') {
	    workInProgress.effectTag |= Update;
	  }
	}

	function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
	  var instance = workInProgress.stateNode;

	  var oldProps = workInProgress.memoizedProps;
	  instance.props = oldProps;

	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = void 0;
	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext$1(contextType);
	  } else {
	    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';

	  // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.

	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.
	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();

	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  var updateQueue = workInProgress.updateQueue;
	  if (updateQueue !== null) {
	    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
	    newState = workInProgress.memoizedState;
	  }
	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    }
	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	      startPhaseTimer(workInProgress, 'componentWillMount');
	      if (typeof instance.componentWillMount === 'function') {
	        instance.componentWillMount();
	      }
	      if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        instance.UNSAFE_componentWillMount();
	      }
	      stopPhaseTimer();
	    }
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    }

	    // If shouldComponentUpdate returned false, we should still update the
	    // memoized state to indicate that this work can be reused.
	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  }

	  // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.
	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;

	  return shouldUpdate;
	}

	// Invokes the update life-cycles and returns false if it shouldn't rerender.
	function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
	  var instance = workInProgress.stateNode;

	  var oldProps = workInProgress.memoizedProps;
	  instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);

	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = void 0;
	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext$1(contextType);
	  } else {
	    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';

	  // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.

	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.
	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();

	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  var updateQueue = workInProgress.updateQueue;
	  if (updateQueue !== null) {
	    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
	    newState = workInProgress.memoizedState;
	  }

	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Update;
	      }
	    }
	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Snapshot;
	      }
	    }
	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
	      startPhaseTimer(workInProgress, 'componentWillUpdate');
	      if (typeof instance.componentWillUpdate === 'function') {
	        instance.componentWillUpdate(newProps, newState, nextContext);
	      }
	      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
	      }
	      stopPhaseTimer();
	    }
	    if (typeof instance.componentDidUpdate === 'function') {
	      workInProgress.effectTag |= Update;
	    }
	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      workInProgress.effectTag |= Snapshot;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Update;
	      }
	    }
	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Snapshot;
	      }
	    }

	    // If shouldComponentUpdate returned false, we should still update the
	    // memoized props/state to indicate that this work can be reused.
	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  }

	  // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.
	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;

	  return shouldUpdate;
	}

	var didWarnAboutMaps = void 0;
	var didWarnAboutGenerators = void 0;
	var didWarnAboutStringRefInStrictMode = void 0;
	var ownerHasKeyUseWarning = void 0;
	var ownerHasFunctionTypeWarning = void 0;
	var warnForMissingKey = function (child) {};

	{
	  didWarnAboutMaps = false;
	  didWarnAboutGenerators = false;
	  didWarnAboutStringRefInStrictMode = {};

	  /**
	   * Warn if there's no key explicitly set on dynamic arrays of children or
	   * object keys are not valid. This allows us to keep track of children between
	   * updates.
	   */
	  ownerHasKeyUseWarning = {};
	  ownerHasFunctionTypeWarning = {};

	  warnForMissingKey = function (child) {
	    if (child === null || typeof child !== 'object') {
	      return;
	    }
	    if (!child._store || child._store.validated || child.key != null) {
	      return;
	    }
	    !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	    child._store.validated = true;

	    var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();
	    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	      return;
	    }
	    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

	    warning$1(false, 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
	  };
	}

	var isArray = Array.isArray;

	function coerceRef(returnFiber, current$$1, element) {
	  var mixedRef = element.ref;
	  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
	    {
	      if (returnFiber.mode & StrictMode) {
	        var componentName = getComponentName(returnFiber.type) || 'Component';
	        if (!didWarnAboutStringRefInStrictMode[componentName]) {
	          warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using createRef() instead.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-string-ref', mixedRef, getStackByFiberInDevAndProd(returnFiber));
	          didWarnAboutStringRefInStrictMode[componentName] = true;
	        }
	      }
	    }

	    if (element._owner) {
	      var owner = element._owner;
	      var inst = void 0;
	      if (owner) {
	        var ownerFiber = owner;
	        !(ownerFiber.tag === ClassComponent) ? invariant(false, 'Function components cannot have refs.') : void 0;
	        inst = ownerFiber.stateNode;
	      }
	      !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
	      var stringRef = '' + mixedRef;
	      // Check if previous string ref matches new string ref
	      if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === 'function' && current$$1.ref._stringRef === stringRef) {
	        return current$$1.ref;
	      }
	      var ref = function (value) {
	        var refs = inst.refs;
	        if (refs === emptyRefsObject) {
	          // This is a lazy pooled frozen object, so we need to initialize.
	          refs = inst.refs = {};
	        }
	        if (value === null) {
	          delete refs[stringRef];
	        } else {
	          refs[stringRef] = value;
	        }
	      };
	      ref._stringRef = stringRef;
	      return ref;
	    } else {
	      !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function, a string, an object returned by React.createRef(), or null.') : void 0;
	      !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component\'s render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.', mixedRef) : void 0;
	    }
	  }
	  return mixedRef;
	}

	function throwOnInvalidObjectType(returnFiber, newChild) {
	  if (returnFiber.type !== 'textarea') {
	    var addendum = '';
	    {
	      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
	    }
	    invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
	  }
	}

	function warnOnFunctionType() {
	  var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

	  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
	    return;
	  }
	  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

	  warning$1(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
	}

	// This wrapper function exists because I expect to clone the code in each path
	// to be able to optimize each path individually by branching early. This needs
	// a compiler or we can do it manually. Helpers that don't need this branching
	// live outside of this function.
	function ChildReconciler(shouldTrackSideEffects) {
	  function deleteChild(returnFiber, childToDelete) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return;
	    }
	    // Deletions are added in reversed order so we add it to the front.
	    // At this point, the return fiber's effect list is empty except for
	    // deletions, so we can just append the deletion to the list. The remaining
	    // effects aren't added until the complete phase. Once we implement
	    // resuming, this may not be true.
	    var last = returnFiber.lastEffect;
	    if (last !== null) {
	      last.nextEffect = childToDelete;
	      returnFiber.lastEffect = childToDelete;
	    } else {
	      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
	    }
	    childToDelete.nextEffect = null;
	    childToDelete.effectTag = Deletion;
	  }

	  function deleteRemainingChildren(returnFiber, currentFirstChild) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return null;
	    }

	    // TODO: For the shouldClone case, this could be micro-optimized a bit by
	    // assuming that after the first child we've already added everything.
	    var childToDelete = currentFirstChild;
	    while (childToDelete !== null) {
	      deleteChild(returnFiber, childToDelete);
	      childToDelete = childToDelete.sibling;
	    }
	    return null;
	  }

	  function mapRemainingChildren(returnFiber, currentFirstChild) {
	    // Add the remaining children to a temporary map so that we can find them by
	    // keys quickly. Implicit (null) keys get added to this set with their index
	    var existingChildren = new Map();

	    var existingChild = currentFirstChild;
	    while (existingChild !== null) {
	      if (existingChild.key !== null) {
	        existingChildren.set(existingChild.key, existingChild);
	      } else {
	        existingChildren.set(existingChild.index, existingChild);
	      }
	      existingChild = existingChild.sibling;
	    }
	    return existingChildren;
	  }

	  function useFiber(fiber, pendingProps, expirationTime) {
	    // We currently set sibling to null and index to 0 here because it is easy
	    // to forget to do before returning it. E.g. for the single child case.
	    var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	  }

	  function placeChild(newFiber, lastPlacedIndex, newIndex) {
	    newFiber.index = newIndex;
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return lastPlacedIndex;
	    }
	    var current$$1 = newFiber.alternate;
	    if (current$$1 !== null) {
	      var oldIndex = current$$1.index;
	      if (oldIndex < lastPlacedIndex) {
	        // This is a move.
	        newFiber.effectTag = Placement;
	        return lastPlacedIndex;
	      } else {
	        // This item can stay in place.
	        return oldIndex;
	      }
	    } else {
	      // This is an insertion.
	      newFiber.effectTag = Placement;
	      return lastPlacedIndex;
	    }
	  }

	  function placeSingleChild(newFiber) {
	    // This is simpler for the single child case. We only need to do a
	    // placement for inserting new children.
	    if (shouldTrackSideEffects && newFiber.alternate === null) {
	      newFiber.effectTag = Placement;
	    }
	    return newFiber;
	  }

	  function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
	    if (current$$1 === null || current$$1.tag !== HostText) {
	      // Insert
	      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current$$1, textContent, expirationTime);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateElement(returnFiber, current$$1, element, expirationTime) {
	    if (current$$1 !== null && current$$1.elementType === element.type) {
	      // Move based on index
	      var existing = useFiber(current$$1, element.props, expirationTime);
	      existing.ref = coerceRef(returnFiber, current$$1, element);
	      existing.return = returnFiber;
	      {
	        existing._debugSource = element._source;
	        existing._debugOwner = element._owner;
	      }
	      return existing;
	    } else {
	      // Insert
	      var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
	      created.ref = coerceRef(returnFiber, current$$1, element);
	      created.return = returnFiber;
	      return created;
	    }
	  }

	  function updatePortal(returnFiber, current$$1, portal, expirationTime) {
	    if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
	      // Insert
	      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current$$1, portal.children || [], expirationTime);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
	    if (current$$1 === null || current$$1.tag !== Fragment) {
	      // Insert
	      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current$$1, fragment, expirationTime);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function createChild(returnFiber, newChild, expirationTime) {
	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
	            _created.ref = coerceRef(returnFiber, null, newChild);
	            _created.return = returnFiber;
	            return _created;
	          }
	        case REACT_PORTAL_TYPE:
	          {
	            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
	            _created2.return = returnFiber;
	            return _created2;
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
	        _created3.return = returnFiber;
	        return _created3;
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
	    // Update the fiber if the keys match, otherwise return null.

	    var key = oldFiber !== null ? oldFiber.key : null;

	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      if (key !== null) {
	        return null;
	      }
	      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            if (newChild.key === key) {
	              if (newChild.type === REACT_FRAGMENT_TYPE) {
	                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
	              }
	              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
	            } else {
	              return null;
	            }
	          }
	        case REACT_PORTAL_TYPE:
	          {
	            if (newChild.key === key) {
	              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
	            } else {
	              return null;
	            }
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        if (key !== null) {
	          return null;
	        }

	        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys, so we neither have to check the old nor
	      // new node for the key. If both are text nodes, they match.
	      var matchedFiber = existingChildren.get(newIdx) || null;
	      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
	            if (newChild.type === REACT_FRAGMENT_TYPE) {
	              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
	            }
	            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
	          }
	        case REACT_PORTAL_TYPE:
	          {
	            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
	            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        var _matchedFiber3 = existingChildren.get(newIdx) || null;
	        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  /**
	   * Warns if there is a duplicate or missing key
	   */
	  function warnOnInvalidKey(child, knownKeys) {
	    {
	      if (typeof child !== 'object' || child === null) {
	        return knownKeys;
	      }
	      switch (child.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	        case REACT_PORTAL_TYPE:
	          warnForMissingKey(child);
	          var key = child.key;
	          if (typeof key !== 'string') {
	            break;
	          }
	          if (knownKeys === null) {
	            knownKeys = new Set();
	            knownKeys.add(key);
	            break;
	          }
	          if (!knownKeys.has(key)) {
	            knownKeys.add(key);
	            break;
	          }
	          warning$1(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
	          break;
	        default:
	          break;
	      }
	    }
	    return knownKeys;
	  }

	  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
	    // This algorithm can't optimize by searching from boths ends since we
	    // don't have backpointers on fibers. I'm trying to see how far we can get
	    // with that model. If it ends up not being worth the tradeoffs, we can
	    // add it later.

	    // Even with a two ended optimization, we'd want to optimize for the case
	    // where there are few changes and brute force the comparison instead of
	    // going for the Map. It'd like to explore hitting that path first in
	    // forward-only mode and only go for the Map once we notice that we need
	    // lots of look ahead. This doesn't handle reversal as well as two ended
	    // search but that's unusual. Besides, for the two ended optimization to
	    // work on Iterables, we'd need to copy the whole set.

	    // In this first iteration, we'll just live with hitting the bad case
	    // (adding everything to a Map) in for every insert/move.

	    // If you change this code, also update reconcileChildrenIterator() which
	    // uses the same algorithm.

	    {
	      // First, validate keys.
	      var knownKeys = null;
	      for (var i = 0; i < newChildren.length; i++) {
	        var child = newChildren[i];
	        knownKeys = warnOnInvalidKey(child, knownKeys);
	      }
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;

	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;
	    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }
	      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }
	        break;
	      }
	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }
	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }
	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (newIdx === newChildren.length) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);
	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; newIdx < newChildren.length; newIdx++) {
	        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
	        if (!_newFiber) {
	          continue;
	        }
	        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber;
	        } else {
	          previousNewFiber.sibling = _newFiber;
	        }
	        previousNewFiber = _newFiber;
	      }
	      return resultingFirstChild;
	    }

	    // Add all children to a key map for quick lookups.
	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

	    // Keep scanning and use the map to restore deleted items as moves.
	    for (; newIdx < newChildren.length; newIdx++) {
	      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
	      if (_newFiber2) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber2.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
	          }
	        }
	        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber2;
	        } else {
	          previousNewFiber.sibling = _newFiber2;
	        }
	        previousNewFiber = _newFiber2;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    return resultingFirstChild;
	  }

	  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
	    // This is the same implementation as reconcileChildrenArray(),
	    // but using the iterator instead.

	    var iteratorFn = getIteratorFn(newChildrenIterable);
	    !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	    {
	      // We don't support rendering Generators because it's a mutation.
	      // See https://github.com/facebook/react/issues/12995
	      if (typeof Symbol === 'function' &&
	      // $FlowFixMe Flow doesn't know about toStringTag
	      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
	        !didWarnAboutGenerators ? warning$1(false, 'Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.') : void 0;
	        didWarnAboutGenerators = true;
	      }

	      // Warn about using Maps as children
	      if (newChildrenIterable.entries === iteratorFn) {
	        !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
	        didWarnAboutMaps = true;
	      }

	      // First, validate keys.
	      // We'll get a different iterator later for the main pass.
	      var _newChildren = iteratorFn.call(newChildrenIterable);
	      if (_newChildren) {
	        var knownKeys = null;
	        var _step = _newChildren.next();
	        for (; !_step.done; _step = _newChildren.next()) {
	          var child = _step.value;
	          knownKeys = warnOnInvalidKey(child, knownKeys);
	        }
	      }
	    }

	    var newChildren = iteratorFn.call(newChildrenIterable);
	    !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;

	    var resultingFirstChild = null;
	    var previousNewFiber = null;

	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;

	    var step = newChildren.next();
	    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }
	      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (!oldFiber) {
	          oldFiber = nextOldFiber;
	        }
	        break;
	      }
	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }
	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }
	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (step.done) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);
	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; !step.done; newIdx++, step = newChildren.next()) {
	        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
	        if (_newFiber3 === null) {
	          continue;
	        }
	        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber3;
	        } else {
	          previousNewFiber.sibling = _newFiber3;
	        }
	        previousNewFiber = _newFiber3;
	      }
	      return resultingFirstChild;
	    }

	    // Add all children to a key map for quick lookups.
	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

	    // Keep scanning and use the map to restore deleted items as moves.
	    for (; !step.done; newIdx++, step = newChildren.next()) {
	      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
	      if (_newFiber4 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber4.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
	          }
	        }
	        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber4;
	        } else {
	          previousNewFiber.sibling = _newFiber4;
	        }
	        previousNewFiber = _newFiber4;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    return resultingFirstChild;
	  }

	  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
	    // There's no need to check for keys on text nodes since we don't have a
	    // way to define them.
	    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
	      // We already have an existing node so let's just update it and delete
	      // the rest.
	      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
	      var existing = useFiber(currentFirstChild, textContent, expirationTime);
	      existing.return = returnFiber;
	      return existing;
	    }
	    // The existing first child is not a text node so we need to create one
	    // and delete the existing ones.
	    deleteRemainingChildren(returnFiber, currentFirstChild);
	    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
	    created.return = returnFiber;
	    return created;
	  }

	  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
	    var key = element.key;
	    var child = currentFirstChild;
	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
	          existing.ref = coerceRef(returnFiber, child, element);
	          existing.return = returnFiber;
	          {
	            existing._debugSource = element._source;
	            existing._debugOwner = element._owner;
	          }
	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }
	      child = child.sibling;
	    }

	    if (element.type === REACT_FRAGMENT_TYPE) {
	      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
	      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
	      _created4.return = returnFiber;
	      return _created4;
	    }
	  }

	  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
	    var key = portal.key;
	    var child = currentFirstChild;
	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, portal.children || [], expirationTime);
	          existing.return = returnFiber;
	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }
	      child = child.sibling;
	    }

	    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
	    created.return = returnFiber;
	    return created;
	  }

	  // This API will tag the children with the side-effect of the reconciliation
	  // itself. They will be added to the side-effect list as we pass through the
	  // children and the parent.
	  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
	    // This function is not recursive.
	    // If the top level item is an array, we treat it as a set of children,
	    // not as a fragment. Nested arrays on the other hand will be treated as
	    // fragment nodes. Recursion happens at the normal flow.

	    // Handle top level unkeyed fragments as if they were arrays.
	    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
	    // We treat the ambiguous cases above the same.
	    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
	    if (isUnkeyedTopLevelFragment) {
	      newChild = newChild.props.children;
	    }

	    // Handle object types
	    var isObject = typeof newChild === 'object' && newChild !== null;

	    if (isObject) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
	        case REACT_PORTAL_TYPE:
	          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
	      }
	    }

	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
	    }

	    if (isArray(newChild)) {
	      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
	    }

	    if (getIteratorFn(newChild)) {
	      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
	    }

	    if (isObject) {
	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }
	    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
	      // If the new child is undefined, and the return fiber is a composite
	      // component, throw an error. If Fiber return types are disabled,
	      // we already threw above.
	      switch (returnFiber.tag) {
	        case ClassComponent:
	          {
	            {
	              var instance = returnFiber.stateNode;
	              if (instance.render._isMockFunction) {
	                // We allow auto-mocks to proceed as if they're returning null.
	                break;
	              }
	            }
	          }
	        // Intentionally fall through to the next case, which handles both
	        // functions and classes
	        // eslint-disable-next-lined no-fallthrough
	        case FunctionComponent:
	          {
	            var Component = returnFiber.type;
	            invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
	          }
	      }
	    }

	    // Remaining cases are all treated as empty.
	    return deleteRemainingChildren(returnFiber, currentFirstChild);
	  }

	  return reconcileChildFibers;
	}

	var reconcileChildFibers = ChildReconciler(true);
	var mountChildFibers = ChildReconciler(false);

	function cloneChildFibers(current$$1, workInProgress) {
	  !(current$$1 === null || workInProgress.child === current$$1.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;

	  if (workInProgress.child === null) {
	    return;
	  }

	  var currentChild = workInProgress.child;
	  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
	  workInProgress.child = newChild;

	  newChild.return = workInProgress;
	  while (currentChild.sibling !== null) {
	    currentChild = currentChild.sibling;
	    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
	    newChild.return = workInProgress;
	  }
	  newChild.sibling = null;
	}

	// The deepest Fiber on the stack involved in a hydration context.
	// This may have been an insertion or a hydration.
	var hydrationParentFiber = null;
	var nextHydratableInstance = null;
	var isHydrating = false;

	function enterHydrationState(fiber) {

	  var parentInstance = fiber.stateNode.containerInfo;
	  nextHydratableInstance = getFirstHydratableChild(parentInstance);
	  hydrationParentFiber = fiber;
	  isHydrating = true;
	  return true;
	}

	function deleteHydratableInstance(returnFiber, instance) {
	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
	        break;
	      case HostComponent:
	        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
	        break;
	    }
	  }

	  var childToDelete = createFiberFromHostInstanceForDeletion();
	  childToDelete.stateNode = instance;
	  childToDelete.return = returnFiber;
	  childToDelete.effectTag = Deletion;

	  // This might seem like it belongs on progressedFirstDeletion. However,
	  // these children are not part of the reconciliation list of children.
	  // Even if we abort and rereconcile the children, that will try to hydrate
	  // again and the nodes are still in the host tree so these will be
	  // recreated.
	  if (returnFiber.lastEffect !== null) {
	    returnFiber.lastEffect.nextEffect = childToDelete;
	    returnFiber.lastEffect = childToDelete;
	  } else {
	    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
	  }
	}

	function insertNonHydratedInstance(returnFiber, fiber) {
	  fiber.effectTag |= Placement;
	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        {
	          var parentContainer = returnFiber.stateNode.containerInfo;
	          switch (fiber.tag) {
	            case HostComponent:
	              var type = fiber.type;
	              var props = fiber.pendingProps;
	              didNotFindHydratableContainerInstance(parentContainer, type, props);
	              break;
	            case HostText:
	              var text = fiber.pendingProps;
	              didNotFindHydratableContainerTextInstance(parentContainer, text);
	              break;
	          }
	          break;
	        }
	      case HostComponent:
	        {
	          var parentType = returnFiber.type;
	          var parentProps = returnFiber.memoizedProps;
	          var parentInstance = returnFiber.stateNode;
	          switch (fiber.tag) {
	            case HostComponent:
	              var _type = fiber.type;
	              var _props = fiber.pendingProps;
	              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
	              break;
	            case HostText:
	              var _text = fiber.pendingProps;
	              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
	              break;
	          }
	          break;
	        }
	      default:
	        return;
	    }
	  }
	}

	function tryHydrate(fiber, nextInstance) {
	  switch (fiber.tag) {
	    case HostComponent:
	      {
	        var type = fiber.type;
	        var props = fiber.pendingProps;
	        var instance = canHydrateInstance(nextInstance, type, props);
	        if (instance !== null) {
	          fiber.stateNode = instance;
	          return true;
	        }
	        return false;
	      }
	    case HostText:
	      {
	        var text = fiber.pendingProps;
	        var textInstance = canHydrateTextInstance(nextInstance, text);
	        if (textInstance !== null) {
	          fiber.stateNode = textInstance;
	          return true;
	        }
	        return false;
	      }
	    default:
	      return false;
	  }
	}

	function tryToClaimNextHydratableInstance(fiber) {
	  if (!isHydrating) {
	    return;
	  }
	  var nextInstance = nextHydratableInstance;
	  if (!nextInstance) {
	    // Nothing to hydrate. Make it an insertion.
	    insertNonHydratedInstance(hydrationParentFiber, fiber);
	    isHydrating = false;
	    hydrationParentFiber = fiber;
	    return;
	  }
	  var firstAttemptedInstance = nextInstance;
	  if (!tryHydrate(fiber, nextInstance)) {
	    // If we can't hydrate this instance let's try the next one.
	    // We use this as a heuristic. It's based on intuition and not data so it
	    // might be flawed or unnecessary.
	    nextInstance = getNextHydratableSibling(firstAttemptedInstance);
	    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
	      // Nothing to hydrate. Make it an insertion.
	      insertNonHydratedInstance(hydrationParentFiber, fiber);
	      isHydrating = false;
	      hydrationParentFiber = fiber;
	      return;
	    }
	    // We matched the next one, we'll now assume that the first one was
	    // superfluous and we'll delete it. Since we can't eagerly delete it
	    // we'll have to schedule a deletion. To do that, this node needs a dummy
	    // fiber associated with it.
	    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
	  }
	  hydrationParentFiber = fiber;
	  nextHydratableInstance = getFirstHydratableChild(nextInstance);
	}

	function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

	  var instance = fiber.stateNode;
	  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
	  // TODO: Type this specific to this type of component.
	  fiber.updateQueue = updatePayload;
	  // If the update payload indicates that there is a change or if there
	  // is a new ref we mark this as an update.
	  if (updatePayload !== null) {
	    return true;
	  }
	  return false;
	}

	function prepareToHydrateHostTextInstance(fiber) {

	  var textInstance = fiber.stateNode;
	  var textContent = fiber.memoizedProps;
	  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
	  {
	    if (shouldUpdate) {
	      // We assume that prepareToHydrateHostTextInstance is called in a context where the
	      // hydration parent is the parent host component of this host text.
	      var returnFiber = hydrationParentFiber;
	      if (returnFiber !== null) {
	        switch (returnFiber.tag) {
	          case HostRoot:
	            {
	              var parentContainer = returnFiber.stateNode.containerInfo;
	              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
	              break;
	            }
	          case HostComponent:
	            {
	              var parentType = returnFiber.type;
	              var parentProps = returnFiber.memoizedProps;
	              var parentInstance = returnFiber.stateNode;
	              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
	              break;
	            }
	        }
	      }
	    }
	  }
	  return shouldUpdate;
	}

	function popToNextHostParent(fiber) {
	  var parent = fiber.return;
	  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
	    parent = parent.return;
	  }
	  hydrationParentFiber = parent;
	}

	function popHydrationState(fiber) {
	  if (fiber !== hydrationParentFiber) {
	    // We're deeper than the current hydration context, inside an inserted
	    // tree.
	    return false;
	  }
	  if (!isHydrating) {
	    // If we're not currently hydrating but we're in a hydration context, then
	    // we were an insertion and now need to pop up reenter hydration of our
	    // siblings.
	    popToNextHostParent(fiber);
	    isHydrating = true;
	    return false;
	  }

	  var type = fiber.type;

	  // If we have any remaining hydratable nodes, we need to delete them now.
	  // We only do this deeper than head and body since they tend to have random
	  // other nodes in them. We also ignore components with pure text content in
	  // side of them.
	  // TODO: Better heuristic.
	  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
	    var nextInstance = nextHydratableInstance;
	    while (nextInstance) {
	      deleteHydratableInstance(fiber, nextInstance);
	      nextInstance = getNextHydratableSibling(nextInstance);
	    }
	  }

	  popToNextHostParent(fiber);
	  nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
	  return true;
	}

	function resetHydrationState() {

	  hydrationParentFiber = null;
	  nextHydratableInstance = null;
	  isHydrating = false;
	}

	var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;

	var didWarnAboutBadClass = void 0;
	var didWarnAboutContextTypeOnFunctionComponent = void 0;
	var didWarnAboutGetDerivedStateOnFunctionComponent = void 0;
	var didWarnAboutFunctionRefs = void 0;

	{
	  didWarnAboutBadClass = {};
	  didWarnAboutContextTypeOnFunctionComponent = {};
	  didWarnAboutGetDerivedStateOnFunctionComponent = {};
	  didWarnAboutFunctionRefs = {};
	}

	function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
	  if (current$$1 === null) {
	    // If this is a fresh new component that hasn't been rendered yet, we
	    // won't update its child set by applying minimal side-effects. Instead,
	    // we will add them all to the child before it gets rendered. That means
	    // we can optimize this reconciliation pass by not tracking side-effects.
	    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	  } else {
	    // If the current child is the same as the work in progress, it means that
	    // we haven't yet started any work on these children. Therefore, we use
	    // the clone algorithm to create a copy of all the current children.

	    // If we had any progressed work already, that is invalid at this point so
	    // let's throw it out.
	    workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
	  }
	}

	function forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime) {
	  // This function is fork of reconcileChildren. It's used in cases where we
	  // want to reconcile without matching against the existing set. This has the
	  // effect of all current children being unmounted; even if the type and key
	  // are the same, the old child is unmounted and a new child is created.
	  //
	  // To do this, we're going to go through the reconcile algorithm twice. In
	  // the first pass, we schedule a deletion for all the current children by
	  // passing null.
	  workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime);
	  // In the second pass, we mount the new children. The trick here is that we
	  // pass null in place of where we usually pass the current child set. This has
	  // the effect of remounting all children regardless of whether their their
	  // identity matches.
	  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	}

	function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
	  var render = Component.render;
	  var ref = workInProgress.ref;

	  // The rest is a fork of updateFunctionComponent
	  var nextChildren = void 0;
	  prepareToReadContext(workInProgress, renderExpirationTime);
	  prepareToUseHooks(current$$1, workInProgress, renderExpirationTime);
	  {
	    ReactCurrentOwner$3.current = workInProgress;
	    setCurrentPhase('render');
	    nextChildren = render(nextProps, ref);
	    setCurrentPhase(null);
	  }
	  nextChildren = finishHooks(render, nextProps, nextChildren, ref);

	  // React DevTools reads this flag.
	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
	  if (current$$1 === null) {
	    var type = Component.type;
	    if (isSimpleFunctionComponent(type) && Component.compare === null) {
	      // If this is a plain function component without default props,
	      // and with only the default shallow comparison, we upgrade it
	      // to a SimpleMemoComponent to allow fast path updates.
	      workInProgress.tag = SimpleMemoComponent;
	      workInProgress.type = type;
	      return updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
	    }
	    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
	    child.ref = workInProgress.ref;
	    child.return = workInProgress;
	    workInProgress.child = child;
	    return child;
	  }
	  var currentChild = current$$1.child; // This is always exactly one child
	  if (updateExpirationTime < renderExpirationTime) {
	    // This will be the props with resolved defaultProps,
	    // unlike current.memoizedProps which will be the unresolved ones.
	    var prevProps = currentChild.memoizedProps;
	    // Default to shallow comparison
	    var compare = Component.compare;
	    compare = compare !== null ? compare : shallowEqual;
	    if (compare(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
	      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	    }
	  }
	  // React DevTools reads this flag.
	  workInProgress.effectTag |= PerformedWork;
	  var newChild = createWorkInProgress(currentChild, nextProps, renderExpirationTime);
	  newChild.ref = workInProgress.ref;
	  newChild.return = workInProgress;
	  workInProgress.child = newChild;
	  return newChild;
	}

	function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
	  if (current$$1 !== null && updateExpirationTime < renderExpirationTime) {
	    var prevProps = current$$1.memoizedProps;
	    if (shallowEqual(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
	      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	    }
	  }
	  return updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
	}

	function updateFragment(current$$1, workInProgress, renderExpirationTime) {
	  var nextChildren = workInProgress.pendingProps;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateMode(current$$1, workInProgress, renderExpirationTime) {
	  var nextChildren = workInProgress.pendingProps.children;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
	  {
	    workInProgress.effectTag |= Update;
	  }
	  var nextProps = workInProgress.pendingProps;
	  var nextChildren = nextProps.children;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function markRef(current$$1, workInProgress) {
	  var ref = workInProgress.ref;
	  if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {
	    // Schedule a Ref effect
	    workInProgress.effectTag |= Ref;
	  }
	}

	function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
	  var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
	  var context = getMaskedContext(workInProgress, unmaskedContext);

	  var nextChildren = void 0;
	  prepareToReadContext(workInProgress, renderExpirationTime);
	  prepareToUseHooks(current$$1, workInProgress, renderExpirationTime);
	  {
	    ReactCurrentOwner$3.current = workInProgress;
	    setCurrentPhase('render');
	    nextChildren = Component(nextProps, context);
	    setCurrentPhase(null);
	  }
	  nextChildren = finishHooks(Component, nextProps, nextChildren, context);

	  // React DevTools reads this flag.
	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
	  // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.
	  var hasContext = void 0;
	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }
	  prepareToReadContext(workInProgress, renderExpirationTime);

	  var instance = workInProgress.stateNode;
	  var shouldUpdate = void 0;
	  if (instance === null) {
	    if (current$$1 !== null) {
	      // An class component without an instance only mounts if it suspended
	      // inside a non- concurrent tree, in an inconsistent state. We want to
	      // tree it like a new mount, even though an empty version of it already
	      // committed. Disconnect the alternate pointers.
	      current$$1.alternate = null;
	      workInProgress.alternate = null;
	      // Since this is conceptually a new fiber, schedule a Placement effect
	      workInProgress.effectTag |= Placement;
	    }
	    // In the initial pass we might need to construct the instance.
	    constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	    mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	    shouldUpdate = true;
	  } else if (current$$1 === null) {
	    // In a resume, we'll already have an instance we can reuse.
	    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	  } else {
	    shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
	  }
	  return finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);
	}

	function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
	  // Refs should update even if shouldComponentUpdate returns false
	  markRef(current$$1, workInProgress);

	  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

	  if (!shouldUpdate && !didCaptureError) {
	    // Context providers should defer to sCU for rendering
	    if (hasContext) {
	      invalidateContextProvider(workInProgress, Component, false);
	    }

	    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	  }

	  var instance = workInProgress.stateNode;

	  // Rerender
	  ReactCurrentOwner$3.current = workInProgress;
	  var nextChildren = void 0;
	  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
	    // If we captured an error, but getDerivedStateFrom catch is not defined,
	    // unmount all the children. componentDidCatch will schedule an update to
	    // re-render a fallback. This is temporary until we migrate everyone to
	    // the new API.
	    // TODO: Warn in a future release.
	    nextChildren = null;

	    {
	      stopProfilerTimerIfRunning(workInProgress);
	    }
	  } else {
	    {
	      setCurrentPhase('render');
	      nextChildren = instance.render();
	      if (workInProgress.mode & StrictMode) {
	        instance.render();
	      }
	      setCurrentPhase(null);
	    }
	  }

	  // React DevTools reads this flag.
	  workInProgress.effectTag |= PerformedWork;
	  if (current$$1 !== null && didCaptureError) {
	    // If we're recovering from an error, reconcile without reusing any of
	    // the existing children. Conceptually, the normal children and the children
	    // that are shown on error are two different sets, so we shouldn't reuse
	    // normal children even if their identities match.
	    forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  } else {
	    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  }

	  // Memoize state using the values we just used to render.
	  // TODO: Restructure so we never read values from the instance.
	  workInProgress.memoizedState = instance.state;

	  // The context might have changed so we need to recalculate it.
	  if (hasContext) {
	    invalidateContextProvider(workInProgress, Component, true);
	  }

	  return workInProgress.child;
	}

	function pushHostRootContext(workInProgress) {
	  var root = workInProgress.stateNode;
	  if (root.pendingContext) {
	    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
	  } else if (root.context) {
	    // Should always be set
	    pushTopLevelContextObject(workInProgress, root.context, false);
	  }
	  pushHostContainer(workInProgress, root.containerInfo);
	}

	function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
	  pushHostRootContext(workInProgress);
	  var updateQueue = workInProgress.updateQueue;
	  !(updateQueue !== null) ? invariant(false, 'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  var nextProps = workInProgress.pendingProps;
	  var prevState = workInProgress.memoizedState;
	  var prevChildren = prevState !== null ? prevState.element : null;
	  processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
	  var nextState = workInProgress.memoizedState;
	  // Caution: React DevTools currently depends on this property
	  // being called "element".
	  var nextChildren = nextState.element;
	  if (nextChildren === prevChildren) {
	    // If the state is the same as before, that's a bailout because we had
	    // no work that expires at this time.
	    resetHydrationState();
	    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	  }
	  var root = workInProgress.stateNode;
	  if ((current$$1 === null || current$$1.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
	    // If we don't have any current children this might be the first pass.
	    // We always try to hydrate. If this isn't a hydration pass there won't
	    // be any children to hydrate which is effectively the same thing as
	    // not hydrating.

	    // This is a bit of a hack. We track the host root as a placement to
	    // know that we're currently in a mounting state. That way isMounted
	    // works as expected. We must reset this before committing.
	    // TODO: Delete this when we delete isMounted and findDOMNode.
	    workInProgress.effectTag |= Placement;

	    // Ensure that children mount into this root without tracking
	    // side-effects. This ensures that we don't store Placement effects on
	    // nodes that will be hydrated.
	    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	  } else {
	    // Otherwise reset hydration state in case we aborted and resumed another
	    // root.
	    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	    resetHydrationState();
	  }
	  return workInProgress.child;
	}

	function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
	  pushHostContext(workInProgress);

	  if (current$$1 === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  }

	  var type = workInProgress.type;
	  var nextProps = workInProgress.pendingProps;
	  var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;

	  var nextChildren = nextProps.children;
	  var isDirectTextChild = shouldSetTextContent(type, nextProps);

	  if (isDirectTextChild) {
	    // We special case a direct text child of a host node. This is a common
	    // case. We won't handle it as a reified child. We will instead handle
	    // this in the host environment that also have access to this prop. That
	    // avoids allocating another HostText fiber and traversing it.
	    nextChildren = null;
	  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
	    // If we're switching from a direct text child to a normal child, or to
	    // empty, we need to schedule the text content to be reset.
	    workInProgress.effectTag |= ContentReset;
	  }

	  markRef(current$$1, workInProgress);

	  // Check the host config to see if the children are offscreen/hidden.
	  if (renderExpirationTime !== Never && workInProgress.mode & ConcurrentMode && shouldDeprioritizeSubtree(type, nextProps)) {
	    // Schedule this fiber to re-render at offscreen priority. Then bailout.
	    workInProgress.expirationTime = Never;
	    return null;
	  }

	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateHostText(current$$1, workInProgress) {
	  if (current$$1 === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  }
	  // Nothing to do here. This is terminal. We'll do the completion step
	  // immediately after.
	  return null;
	}

	function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
	  if (_current !== null) {
	    // An lazy component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null;
	    // Since this is conceptually a new fiber, schedule a Placement effect
	    workInProgress.effectTag |= Placement;
	  }

	  var props = workInProgress.pendingProps;
	  // We can't start a User Timing measurement with correct label yet.
	  // Cancel and resume right after we know the tag.
	  cancelWorkTimer(workInProgress);
	  var Component = readLazyComponentType(elementType);
	  // Store the unwrapped component in the type.
	  workInProgress.type = Component;
	  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
	  startWorkTimer(workInProgress);
	  var resolvedProps = resolveDefaultProps(Component, props);
	  var child = void 0;
	  switch (resolvedTag) {
	    case FunctionComponent:
	      {
	        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        break;
	      }
	    case ClassComponent:
	      {
	        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        break;
	      }
	    case ForwardRef:
	      {
	        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        break;
	      }
	    case MemoComponent:
	      {
	        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
	        updateExpirationTime, renderExpirationTime);
	        break;
	      }
	    default:
	      {
	        // This message intentionally doesn't mention ForwardRef or MemoComponent
	        // because the fact that it's a separate type of work is an
	        // implementation detail.
	        invariant(false, 'Element type is invalid. Received a promise that resolves to: %s. Promise elements must resolve to a class or function.', Component);
	      }
	  }
	  return child;
	}

	function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
	  if (_current !== null) {
	    // An incomplete component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null;
	    // Since this is conceptually a new fiber, schedule a Placement effect
	    workInProgress.effectTag |= Placement;
	  }

	  // Promote the fiber to a class and try rendering again.
	  workInProgress.tag = ClassComponent;

	  // The rest of this function is a fork of `updateClassComponent`

	  // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.
	  var hasContext = void 0;
	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }
	  prepareToReadContext(workInProgress, renderExpirationTime);

	  constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	  mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);

	  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
	}

	function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
	  if (_current !== null) {
	    // An indeterminate component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null;
	    // Since this is conceptually a new fiber, schedule a Placement effect
	    workInProgress.effectTag |= Placement;
	  }

	  var props = workInProgress.pendingProps;
	  var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
	  var context = getMaskedContext(workInProgress, unmaskedContext);

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  prepareToUseHooks(null, workInProgress, renderExpirationTime);

	  var value = void 0;

	  {
	    if (Component.prototype && typeof Component.prototype.render === 'function') {
	      var componentName = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutBadClass[componentName]) {
	        warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
	        didWarnAboutBadClass[componentName] = true;
	      }
	    }

	    if (workInProgress.mode & StrictMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
	    }

	    ReactCurrentOwner$3.current = workInProgress;
	    value = Component(props, context);
	  }
	  // React DevTools reads this flag.
	  workInProgress.effectTag |= PerformedWork;

	  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
	    // Proceed under the assumption that this is a class instance
	    workInProgress.tag = ClassComponent;

	    // Throw out any hooks that were used.
	    resetHooks();

	    // Push context providers early to prevent context stack mismatches.
	    // During mounting we don't know the child context yet as the instance doesn't exist.
	    // We will invalidate the child context in finishClassComponent() right after rendering.
	    var hasContext = false;
	    if (isContextProvider(Component)) {
	      hasContext = true;
	      pushContextProvider(workInProgress);
	    } else {
	      hasContext = false;
	    }

	    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;

	    var getDerivedStateFromProps = Component.getDerivedStateFromProps;
	    if (typeof getDerivedStateFromProps === 'function') {
	      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
	    }

	    adoptClassInstance(workInProgress, value);
	    mountClassInstance(workInProgress, Component, props, renderExpirationTime);
	    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
	  } else {
	    // Proceed under the assumption that this is a function component
	    workInProgress.tag = FunctionComponent;
	    value = finishHooks(Component, props, value, context);
	    {
	      if (Component) {
	        !!Component.childContextTypes ? warningWithoutStack$1(false, '%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component') : void 0;
	      }
	      if (workInProgress.ref !== null) {
	        var info = '';
	        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
	        if (ownerName) {
	          info += '\n\nCheck the render method of `' + ownerName + '`.';
	        }

	        var warningKey = ownerName || workInProgress._debugID || '';
	        var debugSource = workInProgress._debugSource;
	        if (debugSource) {
	          warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
	        }
	        if (!didWarnAboutFunctionRefs[warningKey]) {
	          didWarnAboutFunctionRefs[warningKey] = true;
	          warning$1(false, 'Function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s', info);
	        }
	      }

	      if (typeof Component.getDerivedStateFromProps === 'function') {
	        var _componentName = getComponentName(Component) || 'Unknown';

	        if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName]) {
	          warningWithoutStack$1(false, '%s: Function components do not support getDerivedStateFromProps.', _componentName);
	          didWarnAboutGetDerivedStateOnFunctionComponent[_componentName] = true;
	        }
	      }

	      if (typeof Component.contextType === 'object' && Component.contextType !== null) {
	        var _componentName2 = getComponentName(Component) || 'Unknown';

	        if (!didWarnAboutContextTypeOnFunctionComponent[_componentName2]) {
	          warningWithoutStack$1(false, '%s: Function components do not support contextType.', _componentName2);
	          didWarnAboutContextTypeOnFunctionComponent[_componentName2] = true;
	        }
	      }
	    }
	    reconcileChildren(null, workInProgress, value, renderExpirationTime);
	    return workInProgress.child;
	  }
	}

	function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
	  var mode = workInProgress.mode;
	  var nextProps = workInProgress.pendingProps;

	  // We should attempt to render the primary children unless this boundary
	  // already suspended during this render (`alreadyCaptured` is true).
	  var nextState = workInProgress.memoizedState;

	  var nextDidTimeout = void 0;
	  if ((workInProgress.effectTag & DidCapture) === NoEffect) {
	    // This is the first attempt.
	    nextState = null;
	    nextDidTimeout = false;
	  } else {
	    // Something in this boundary's subtree already suspended. Switch to
	    // rendering the fallback children.
	    nextState = {
	      timedOutAt: nextState !== null ? nextState.timedOutAt : NoWork
	    };
	    nextDidTimeout = true;
	    workInProgress.effectTag &= ~DidCapture;
	  }

	  // This next part is a bit confusing. If the children timeout, we switch to
	  // showing the fallback children in place of the "primary" children.
	  // However, we don't want to delete the primary children because then their
	  // state will be lost (both the React state and the host state, e.g.
	  // uncontrolled form inputs). Instead we keep them mounted and hide them.
	  // Both the fallback children AND the primary children are rendered at the
	  // same time. Once the primary children are un-suspended, we can delete
	  // the fallback children — don't need to preserve their state.
	  //
	  // The two sets of children are siblings in the host environment, but
	  // semantically, for purposes of reconciliation, they are two separate sets.
	  // So we store them using two fragment fibers.
	  //
	  // However, we want to avoid allocating extra fibers for every placeholder.
	  // They're only necessary when the children time out, because that's the
	  // only time when both sets are mounted.
	  //
	  // So, the extra fragment fibers are only used if the children time out.
	  // Otherwise, we render the primary children directly. This requires some
	  // custom reconciliation logic to preserve the state of the primary
	  // children. It's essentially a very basic form of re-parenting.

	  // `child` points to the child fiber. In the normal case, this is the first
	  // fiber of the primary children set. In the timed-out case, it's a
	  // a fragment fiber containing the primary children.
	  var child = void 0;
	  // `next` points to the next fiber React should render. In the normal case,
	  // it's the same as `child`: the first fiber of the primary children set.
	  // In the timed-out case, it's a fragment fiber containing the *fallback*
	  // children -- we skip over the primary children entirely.
	  var next = void 0;
	  if (current$$1 === null) {
	    // This is the initial mount. This branch is pretty simple because there's
	    // no previous state that needs to be preserved.
	    if (nextDidTimeout) {
	      // Mount separate fragments for primary and fallback children.
	      var nextFallbackChildren = nextProps.fallback;
	      var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);

	      if ((workInProgress.mode & ConcurrentMode) === NoContext) {
	        // Outside of concurrent mode, we commit the effects from the
	        var progressedState = workInProgress.memoizedState;
	        var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
	        primaryChildFragment.child = progressedPrimaryChild;
	      }

	      var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
	      primaryChildFragment.sibling = fallbackChildFragment;
	      child = primaryChildFragment;
	      // Skip the primary children, and continue working on the
	      // fallback children.
	      next = fallbackChildFragment;
	      child.return = next.return = workInProgress;
	    } else {
	      // Mount the primary children without an intermediate fragment fiber.
	      var nextPrimaryChildren = nextProps.children;
	      child = next = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
	    }
	  } else {
	    // This is an update. This branch is more complicated because we need to
	    // ensure the state of the primary children is preserved.
	    var prevState = current$$1.memoizedState;
	    var prevDidTimeout = prevState !== null;
	    if (prevDidTimeout) {
	      // The current tree already timed out. That means each child set is
	      var currentPrimaryChildFragment = current$$1.child;
	      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
	      if (nextDidTimeout) {
	        // Still timed out. Reuse the current primary children by cloning
	        // its fragment. We're going to skip over these entirely.
	        var _nextFallbackChildren = nextProps.fallback;
	        var _primaryChildFragment = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps, NoWork);

	        if ((workInProgress.mode & ConcurrentMode) === NoContext) {
	          // Outside of concurrent mode, we commit the effects from the
	          var _progressedState = workInProgress.memoizedState;
	          var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;
	          if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
	            _primaryChildFragment.child = _progressedPrimaryChild;
	          }
	        }

	        // Because primaryChildFragment is a new fiber that we're inserting as the
	        // parent of a new tree, we need to set its treeBaseDuration.
	        if (workInProgress.mode & ProfileMode) {
	          // treeBaseDuration is the sum of all the child tree base durations.
	          var treeBaseDuration = 0;
	          var hiddenChild = _primaryChildFragment.child;
	          while (hiddenChild !== null) {
	            treeBaseDuration += hiddenChild.treeBaseDuration;
	            hiddenChild = hiddenChild.sibling;
	          }
	          _primaryChildFragment.treeBaseDuration = treeBaseDuration;
	        }

	        // Clone the fallback child fragment, too. These we'll continue
	        // working on.
	        var _fallbackChildFragment = _primaryChildFragment.sibling = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren, currentFallbackChildFragment.expirationTime);
	        child = _primaryChildFragment;
	        _primaryChildFragment.childExpirationTime = NoWork;
	        // Skip the primary children, and continue working on the
	        // fallback children.
	        next = _fallbackChildFragment;
	        child.return = next.return = workInProgress;
	      } else {
	        // No longer suspended. Switch back to showing the primary children,
	        // and remove the intermediate fragment fiber.
	        var _nextPrimaryChildren = nextProps.children;
	        var currentPrimaryChild = currentPrimaryChildFragment.child;
	        var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime);

	        // If this render doesn't suspend, we need to delete the fallback
	        // children. Wait until the complete phase, after we've confirmed the
	        // fallback is no longer needed.
	        // TODO: Would it be better to store the fallback fragment on
	        // the stateNode?

	        // Continue rendering the children, like we normally do.
	        child = next = primaryChild;
	      }
	    } else {
	      // The current tree has not already timed out. That means the primary
	      // children are not wrapped in a fragment fiber.
	      var _currentPrimaryChild = current$$1.child;
	      if (nextDidTimeout) {
	        // Timed out. Wrap the children in a fragment fiber to keep them
	        // separate from the fallback children.
	        var _nextFallbackChildren2 = nextProps.fallback;
	        var _primaryChildFragment2 = createFiberFromFragment(
	        // It shouldn't matter what the pending props are because we aren't
	        // going to render this fragment.
	        null, mode, NoWork, null);
	        _primaryChildFragment2.child = _currentPrimaryChild;

	        // Even though we're creating a new fiber, there are no new children,
	        // because we're reusing an already mounted tree. So we don't need to
	        // schedule a placement.
	        // primaryChildFragment.effectTag |= Placement;

	        if ((workInProgress.mode & ConcurrentMode) === NoContext) {
	          // Outside of concurrent mode, we commit the effects from the
	          var _progressedState2 = workInProgress.memoizedState;
	          var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;
	          _primaryChildFragment2.child = _progressedPrimaryChild2;
	        }

	        // Because primaryChildFragment is a new fiber that we're inserting as the
	        // parent of a new tree, we need to set its treeBaseDuration.
	        if (workInProgress.mode & ProfileMode) {
	          // treeBaseDuration is the sum of all the child tree base durations.
	          var _treeBaseDuration = 0;
	          var _hiddenChild = _primaryChildFragment2.child;
	          while (_hiddenChild !== null) {
	            _treeBaseDuration += _hiddenChild.treeBaseDuration;
	            _hiddenChild = _hiddenChild.sibling;
	          }
	          _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
	        }

	        // Create a fragment from the fallback children, too.
	        var _fallbackChildFragment2 = _primaryChildFragment2.sibling = createFiberFromFragment(_nextFallbackChildren2, mode, renderExpirationTime, null);
	        _fallbackChildFragment2.effectTag |= Placement;
	        child = _primaryChildFragment2;
	        _primaryChildFragment2.childExpirationTime = NoWork;
	        // Skip the primary children, and continue working on the
	        // fallback children.
	        next = _fallbackChildFragment2;
	        child.return = next.return = workInProgress;
	      } else {
	        // Still haven't timed out.  Continue rendering the children, like we
	        // normally do.
	        var _nextPrimaryChildren2 = nextProps.children;
	        next = child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
	      }
	    }
	  }

	  workInProgress.memoizedState = nextState;
	  workInProgress.child = child;
	  return next;
	}

	function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
	  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	  var nextChildren = workInProgress.pendingProps;
	  if (current$$1 === null) {
	    // Portals are special because we don't append the children during mount
	    // but at commit. Therefore we need to track insertions which the normal
	    // flow doesn't do during mount. This doesn't happen at the root because
	    // the root always starts with a "current" with a null child.
	    // TODO: Consider unifying this with how the root works.
	    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	  } else {
	    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  }
	  return workInProgress.child;
	}

	function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
	  var providerType = workInProgress.type;
	  var context = providerType._context;

	  var newProps = workInProgress.pendingProps;
	  var oldProps = workInProgress.memoizedProps;

	  var newValue = newProps.value;

	  {
	    var providerPropTypes = workInProgress.type.propTypes;

	    if (providerPropTypes) {
	      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
	    }
	  }

	  pushProvider(workInProgress, newValue);

	  if (oldProps !== null) {
	    var oldValue = oldProps.value;
	    var changedBits = calculateChangedBits(context, newValue, oldValue);
	    if (changedBits === 0) {
	      // No change. Bailout early if children are the same.
	      if (oldProps.children === newProps.children && !hasContextChanged()) {
	        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	      }
	    } else {
	      // The context value changed. Search for matching consumers and schedule
	      // them to update.
	      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
	    }
	  }

	  var newChildren = newProps.children;
	  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	var hasWarnedAboutUsingContextAsConsumer = false;

	function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
	  var context = workInProgress.type;
	  // The logic below for Context differs depending on PROD or DEV mode. In
	  // DEV mode, we create a separate object for Context.Consumer that acts
	  // like a proxy to Context. This proxy object adds unnecessary code in PROD
	  // so we use the old behaviour (Context.Consumer references Context) to
	  // reduce size and overhead. The separate object references context via
	  // a property called "_context", which also gives us the ability to check
	  // in DEV mode if this property exists or not and warn if it does not.
	  {
	    if (context._context === undefined) {
	      // This may be because it's a Context (rather than a Consumer).
	      // Or it may be because it's older React where they're the same thing.
	      // We only want to warn if we're sure it's a new React.
	      if (context !== context.Consumer) {
	        if (!hasWarnedAboutUsingContextAsConsumer) {
	          hasWarnedAboutUsingContextAsConsumer = true;
	          warning$1(false, 'Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	        }
	      }
	    } else {
	      context = context._context;
	    }
	  }
	  var newProps = workInProgress.pendingProps;
	  var render = newProps.children;

	  {
	    !(typeof render === 'function') ? warningWithoutStack$1(false, 'A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  var newValue = readContext(context, newProps.unstable_observedBits);
	  var newChildren = void 0;
	  {
	    ReactCurrentOwner$3.current = workInProgress;
	    setCurrentPhase('render');
	    newChildren = render(newValue);
	    setCurrentPhase(null);
	  }

	  // React DevTools reads this flag.
	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
	  cancelWorkTimer(workInProgress);

	  if (current$$1 !== null) {
	    // Reuse previous context list
	    workInProgress.firstContextDependency = current$$1.firstContextDependency;
	  }

	  {
	    // Don't update "base" render times for bailouts.
	    stopProfilerTimerIfRunning(workInProgress);
	  }

	  // Check if the children have any pending work.
	  var childExpirationTime = workInProgress.childExpirationTime;
	  if (childExpirationTime < renderExpirationTime) {
	    // The children don't have any work either. We can skip them.
	    // TODO: Once we add back resuming, we should check if the children are
	    // a work-in-progress set. If so, we need to transfer their effects.
	    return null;
	  } else {
	    // This fiber doesn't have work, but its subtree does. Clone the child
	    // fibers and continue.
	    cloneChildFibers(current$$1, workInProgress);
	    return workInProgress.child;
	  }
	}

	function beginWork(current$$1, workInProgress, renderExpirationTime) {
	  var updateExpirationTime = workInProgress.expirationTime;

	  if (current$$1 !== null) {
	    var oldProps = current$$1.memoizedProps;
	    var newProps = workInProgress.pendingProps;
	    if (oldProps === newProps && !hasContextChanged() && updateExpirationTime < renderExpirationTime) {
	      // This fiber does not have any pending work. Bailout without entering
	      // the begin phase. There's still some bookkeeping we that needs to be done
	      // in this optimized path, mostly pushing stuff onto the stack.
	      switch (workInProgress.tag) {
	        case HostRoot:
	          pushHostRootContext(workInProgress);
	          resetHydrationState();
	          break;
	        case HostComponent:
	          pushHostContext(workInProgress);
	          break;
	        case ClassComponent:
	          {
	            var Component = workInProgress.type;
	            if (isContextProvider(Component)) {
	              pushContextProvider(workInProgress);
	            }
	            break;
	          }
	        case HostPortal:
	          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	          break;
	        case ContextProvider:
	          {
	            var newValue = workInProgress.memoizedProps.value;
	            pushProvider(workInProgress, newValue);
	            break;
	          }
	        case Profiler:
	          {
	            workInProgress.effectTag |= Update;
	          }
	          break;
	        case SuspenseComponent:
	          {
	            var state = workInProgress.memoizedState;
	            var didTimeout = state !== null;
	            if (didTimeout) {
	              // If this boundary is currently timed out, we need to decide
	              // whether to retry the primary children, or to skip over it and
	              // go straight to the fallback. Check the priority of the primary
	              var primaryChildFragment = workInProgress.child;
	              var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
	              if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
	                // The primary children have pending work. Use the normal path
	                // to attempt to render the primary children again.
	                return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
	              } else {
	                // The primary children do not have pending work with sufficient
	                // priority. Bailout.
	                var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	                if (child !== null) {
	                  // The fallback children have pending work. Skip over the
	                  // primary children and work on the fallback.
	                  return child.sibling;
	                } else {
	                  return null;
	                }
	              }
	            }
	            break;
	          }
	      }
	      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	    }
	  }

	  // Before entering the begin phase, clear the expiration time.
	  workInProgress.expirationTime = NoWork;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	      {
	        var elementType = workInProgress.elementType;
	        return mountIndeterminateComponent(current$$1, workInProgress, elementType, renderExpirationTime);
	      }
	    case LazyComponent:
	      {
	        var _elementType = workInProgress.elementType;
	        return mountLazyComponent(current$$1, workInProgress, _elementType, updateExpirationTime, renderExpirationTime);
	      }
	    case FunctionComponent:
	      {
	        var _Component = workInProgress.type;
	        var unresolvedProps = workInProgress.pendingProps;
	        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
	        return updateFunctionComponent(current$$1, workInProgress, _Component, resolvedProps, renderExpirationTime);
	      }
	    case ClassComponent:
	      {
	        var _Component2 = workInProgress.type;
	        var _unresolvedProps = workInProgress.pendingProps;
	        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
	        return updateClassComponent(current$$1, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
	      }
	    case HostRoot:
	      return updateHostRoot(current$$1, workInProgress, renderExpirationTime);
	    case HostComponent:
	      return updateHostComponent(current$$1, workInProgress, renderExpirationTime);
	    case HostText:
	      return updateHostText(current$$1, workInProgress);
	    case SuspenseComponent:
	      return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
	    case HostPortal:
	      return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);
	    case ForwardRef:
	      {
	        var type = workInProgress.type;
	        var _unresolvedProps2 = workInProgress.pendingProps;
	        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
	        return updateForwardRef(current$$1, workInProgress, type, _resolvedProps2, renderExpirationTime);
	      }
	    case Fragment:
	      return updateFragment(current$$1, workInProgress, renderExpirationTime);
	    case Mode:
	      return updateMode(current$$1, workInProgress, renderExpirationTime);
	    case Profiler:
	      return updateProfiler(current$$1, workInProgress, renderExpirationTime);
	    case ContextProvider:
	      return updateContextProvider(current$$1, workInProgress, renderExpirationTime);
	    case ContextConsumer:
	      return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);
	    case MemoComponent:
	      {
	        var _type = workInProgress.type;
	        var _unresolvedProps3 = workInProgress.pendingProps;
	        var _resolvedProps3 = resolveDefaultProps(_type.type, _unresolvedProps3);
	        return updateMemoComponent(current$$1, workInProgress, _type, _resolvedProps3, updateExpirationTime, renderExpirationTime);
	      }
	    case SimpleMemoComponent:
	      {
	        return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
	      }
	    case IncompleteClassComponent:
	      {
	        var _Component3 = workInProgress.type;
	        var _unresolvedProps4 = workInProgress.pendingProps;
	        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
	        return mountIncompleteClassComponent(current$$1, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
	      }
	    default:
	      invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
	  }
	}

	function markUpdate(workInProgress) {
	  // Tag the fiber with an update effect. This turns a Placement into
	  // a PlacementAndUpdate.
	  workInProgress.effectTag |= Update;
	}

	function markRef$1(workInProgress) {
	  workInProgress.effectTag |= Ref;
	}

	var appendAllChildren = void 0;
	var updateHostContainer = void 0;
	var updateHostComponent$1 = void 0;
	var updateHostText$1 = void 0;
	{
	  // Mutation mode

	  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;
	    while (node !== null) {
	      if (node.tag === HostComponent || node.tag === HostText) {
	        appendInitialChild(parent, node.stateNode);
	      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	      if (node === workInProgress) {
	        return;
	      }
	      while (node.sibling === null) {
	        if (node.return === null || node.return === workInProgress) {
	          return;
	        }
	        node = node.return;
	      }
	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  };

	  updateHostContainer = function (workInProgress) {
	    // Noop
	  };
	  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
	    // If we have an alternate, that means this is an update and we need to
	    // schedule a side-effect to do the updates.
	    var oldProps = current.memoizedProps;
	    if (oldProps === newProps) {
	      // In mutation mode, this is sufficient for a bailout because
	      // we won't touch this node even if children changed.
	      return;
	    }

	    // If we get updated because one of our children updated, we don't
	    // have newProps so we'll have to reuse them.
	    // TODO: Split the update API as separate for the props vs. children.
	    // Even better would be if children weren't special cased at all tho.
	    var instance = workInProgress.stateNode;
	    var currentHostContext = getHostContext();
	    // TODO: Experiencing an error where oldProps is null. Suggests a host
	    // component is hitting the resume path. Figure out why. Possibly
	    // related to `hidden`.
	    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
	    // TODO: Type this specific to this type of component.
	    workInProgress.updateQueue = updatePayload;
	    // If the update payload indicates that there is a change or if there
	    // is a new ref we mark this as an update. All the work is done in commitWork.
	    if (updatePayload) {
	      markUpdate(workInProgress);
	    }
	  };
	  updateHostText$1 = function (current, workInProgress, oldText, newText) {
	    // If the text differs, mark it as an update. All the work in done in commitWork.
	    if (oldText !== newText) {
	      markUpdate(workInProgress);
	    }
	  };
	}

	function completeWork(current, workInProgress, renderExpirationTime) {
	  var newProps = workInProgress.pendingProps;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	      break;
	    case LazyComponent:
	      break;
	    case SimpleMemoComponent:
	    case FunctionComponent:
	      break;
	    case ClassComponent:
	      {
	        var Component = workInProgress.type;
	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }
	        break;
	      }
	    case HostRoot:
	      {
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        var fiberRoot = workInProgress.stateNode;
	        if (fiberRoot.pendingContext) {
	          fiberRoot.context = fiberRoot.pendingContext;
	          fiberRoot.pendingContext = null;
	        }
	        if (current === null || current.child === null) {
	          // If we hydrated, pop so that we can delete any remaining children
	          // that weren't hydrated.
	          popHydrationState(workInProgress);
	          // This resets the hacky state to fix isMounted before committing.
	          // TODO: Delete this when we delete isMounted and findDOMNode.
	          workInProgress.effectTag &= ~Placement;
	        }
	        updateHostContainer(workInProgress);
	        break;
	      }
	    case HostComponent:
	      {
	        popHostContext(workInProgress);
	        var rootContainerInstance = getRootHostContainer();
	        var type = workInProgress.type;
	        if (current !== null && workInProgress.stateNode != null) {
	          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

	          if (current.ref !== workInProgress.ref) {
	            markRef$1(workInProgress);
	          }
	        } else {
	          if (!newProps) {
	            !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	            // This can happen when we abort work.
	            break;
	          }

	          var currentHostContext = getHostContext();
	          // TODO: Move createInstance to beginWork and keep it on a context
	          // "stack" as the parent. Then append children as we go in beginWork
	          // or completeWork depending on we want to add then top->down or
	          // bottom->up. Top->down is faster in IE11.
	          var wasHydrated = popHydrationState(workInProgress);
	          if (wasHydrated) {
	            // TODO: Move this and createInstance step into the beginPhase
	            // to consolidate.
	            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
	              // If changes to the hydrated node needs to be applied at the
	              // commit-phase we mark this as such.
	              markUpdate(workInProgress);
	            }
	          } else {
	            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);

	            appendAllChildren(instance, workInProgress, false, false);

	            // Certain renderers require commit-time effects for initial mount.
	            // (eg DOM renderer supports auto-focus for certain elements).
	            // Make sure such renderers get scheduled for later work.
	            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
	              markUpdate(workInProgress);
	            }
	            workInProgress.stateNode = instance;
	          }

	          if (workInProgress.ref !== null) {
	            // If there is a ref on a host node we need to schedule a callback
	            markRef$1(workInProgress);
	          }
	        }
	        break;
	      }
	    case HostText:
	      {
	        var newText = newProps;
	        if (current && workInProgress.stateNode != null) {
	          var oldText = current.memoizedProps;
	          // If we have an alternate, that means this is an update and we need
	          // to schedule a side-effect to do the updates.
	          updateHostText$1(current, workInProgress, oldText, newText);
	        } else {
	          if (typeof newText !== 'string') {
	            !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	            // This can happen when we abort work.
	          }
	          var _rootContainerInstance = getRootHostContainer();
	          var _currentHostContext = getHostContext();
	          var _wasHydrated = popHydrationState(workInProgress);
	          if (_wasHydrated) {
	            if (prepareToHydrateHostTextInstance(workInProgress)) {
	              markUpdate(workInProgress);
	            }
	          } else {
	            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
	          }
	        }
	        break;
	      }
	    case ForwardRef:
	      break;
	    case SuspenseComponent:
	      {
	        var nextState = workInProgress.memoizedState;
	        if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
	          // Something suspended. Re-render with the fallback children.
	          workInProgress.expirationTime = renderExpirationTime;
	          // Do not reset the effect list.
	          return workInProgress;
	        }

	        var nextDidTimeout = nextState !== null;
	        var prevDidTimeout = current !== null && current.memoizedState !== null;

	        if (current !== null && !nextDidTimeout && prevDidTimeout) {
	          // We just switched from the fallback to the normal children. Delete
	          // the fallback.
	          // TODO: Would it be better to store the fallback fragment on
	          var currentFallbackChild = current.child.sibling;
	          if (currentFallbackChild !== null) {
	            // Deletions go at the beginning of the return fiber's effect list
	            var first = workInProgress.firstEffect;
	            if (first !== null) {
	              workInProgress.firstEffect = currentFallbackChild;
	              currentFallbackChild.nextEffect = first;
	            } else {
	              workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
	              currentFallbackChild.nextEffect = null;
	            }
	            currentFallbackChild.effectTag = Deletion;
	          }
	        }

	        // The children either timed out after previously being visible, or
	        // were restored after previously being hidden. Schedule an effect
	        // to update their visiblity.
	        if (
	        //
	        nextDidTimeout !== prevDidTimeout ||
	        // Outside concurrent mode, the primary children commit in an
	        // inconsistent state, even if they are hidden. So if they are hidden,
	        // we need to schedule an effect to re-hide them, just in case.
	        (workInProgress.effectTag & ConcurrentMode) === NoContext && nextDidTimeout) {
	          workInProgress.effectTag |= Update;
	        }
	        break;
	      }
	    case Fragment:
	      break;
	    case Mode:
	      break;
	    case Profiler:
	      break;
	    case HostPortal:
	      popHostContainer(workInProgress);
	      updateHostContainer(workInProgress);
	      break;
	    case ContextProvider:
	      // Pop provider fiber
	      popProvider(workInProgress);
	      break;
	    case ContextConsumer:
	      break;
	    case MemoComponent:
	      break;
	    case IncompleteClassComponent:
	      {
	        // Same as class component case. I put it down here so that the tags are
	        // sequential to ensure this switch is compiled to a jump table.
	        var _Component = workInProgress.type;
	        if (isContextProvider(_Component)) {
	          popContext(workInProgress);
	        }
	        break;
	      }
	    default:
	      invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
	  }

	  return null;
	}

	function shouldCaptureSuspense(current, workInProgress) {
	  // In order to capture, the Suspense component must have a fallback prop.
	  if (workInProgress.memoizedProps.fallback === undefined) {
	    return false;
	  }
	  // If it was the primary children that just suspended, capture and render the
	  // fallback. Otherwise, don't capture and bubble to the next boundary.
	  var nextState = workInProgress.memoizedState;
	  return nextState === null;
	}

	function logCapturedError(capturedError) {

	  var error = capturedError.error;
	  {
	    var componentName = capturedError.componentName,
	        componentStack = capturedError.componentStack,
	        errorBoundaryName = capturedError.errorBoundaryName,
	        errorBoundaryFound = capturedError.errorBoundaryFound,
	        willRetry = capturedError.willRetry;

	    // Browsers support silencing uncaught errors by calling
	    // `preventDefault()` in window `error` handler.
	    // We record this information as an expando on the error.

	    if (error != null && error._suppressLogging) {
	      if (errorBoundaryFound && willRetry) {
	        // The error is recoverable and was silenced.
	        // Ignore it and don't print the stack addendum.
	        // This is handy for testing error boundaries without noise.
	        return;
	      }
	      // The error is fatal. Since the silencing might have
	      // been accidental, we'll surface it anyway.
	      // However, the browser would have silenced the original error
	      // so we'll print it first, and then print the stack addendum.
	      console.error(error);
	      // For a more detailed description of this block, see:
	      // https://github.com/facebook/react/pull/13384
	    }

	    var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';

	    var errorBoundaryMessage = void 0;
	    // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
	    if (errorBoundaryFound && errorBoundaryName) {
	      if (willRetry) {
	        errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
	      } else {
	        errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
	      }
	    } else {
	      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
	    }
	    var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);

	    // In development, we provide our own message with just the component stack.
	    // We don't include the original error message and JS stack because the browser
	    // has already printed it. Even if the application swallows the error, it is still
	    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
	    console.error(combinedMessage);
	  }
	}

	var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
	{
	  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
	}

	function logError(boundary, errorInfo) {
	  var source = errorInfo.source;
	  var stack = errorInfo.stack;
	  if (stack === null && source !== null) {
	    stack = getStackByFiberInDevAndProd(source);
	  }

	  var capturedError = {
	    componentName: source !== null ? getComponentName(source.type) : null,
	    componentStack: stack !== null ? stack : '',
	    error: errorInfo.value,
	    errorBoundary: null,
	    errorBoundaryName: null,
	    errorBoundaryFound: false,
	    willRetry: false
	  };

	  if (boundary !== null && boundary.tag === ClassComponent) {
	    capturedError.errorBoundary = boundary.stateNode;
	    capturedError.errorBoundaryName = getComponentName(boundary.type);
	    capturedError.errorBoundaryFound = true;
	    capturedError.willRetry = true;
	  }

	  try {
	    logCapturedError(capturedError);
	  } catch (e) {
	    // This method must not throw, or React internal state will get messed up.
	    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
	    // we want to report this error outside of the normal stack as a last resort.
	    // https://github.com/facebook/react/issues/13188
	    setTimeout(function () {
	      throw e;
	    });
	  }
	}

	var callComponentWillUnmountWithTimer = function (current$$1, instance) {
	  startPhaseTimer(current$$1, 'componentWillUnmount');
	  instance.props = current$$1.memoizedProps;
	  instance.state = current$$1.memoizedState;
	  instance.componentWillUnmount();
	  stopPhaseTimer();
	};

	// Capture errors so they don't interrupt unmounting.
	function safelyCallComponentWillUnmount(current$$1, instance) {
	  {
	    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);
	    if (hasCaughtError()) {
	      var unmountError = clearCaughtError();
	      captureCommitPhaseError(current$$1, unmountError);
	    }
	  }
	}

	function safelyDetachRef(current$$1) {
	  var ref = current$$1.ref;
	  if (ref !== null) {
	    if (typeof ref === 'function') {
	      {
	        invokeGuardedCallback(null, ref, null, null);
	        if (hasCaughtError()) {
	          var refError = clearCaughtError();
	          captureCommitPhaseError(current$$1, refError);
	        }
	      }
	    } else {
	      ref.current = null;
	    }
	  }
	}

	function safelyCallDestroy(current$$1, destroy) {
	  {
	    invokeGuardedCallback(null, destroy, null);
	    if (hasCaughtError()) {
	      var error = clearCaughtError();
	      captureCommitPhaseError(current$$1, error);
	    }
	  }
	}

	function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
	        return;
	      }
	    case ClassComponent:
	      {
	        if (finishedWork.effectTag & Snapshot) {
	          if (current$$1 !== null) {
	            var prevProps = current$$1.memoizedProps;
	            var prevState = current$$1.memoizedState;
	            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
	            var instance = finishedWork.stateNode;
	            // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.
	            {
	              if (finishedWork.type === finishedWork.elementType) {
	                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected instance props to match memoized props before ' + 'getSnapshotBeforeUpdate. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
	                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected instance state to match memoized state before ' + 'getSnapshotBeforeUpdate. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
	              }
	            }
	            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
	            {
	              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
	              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
	                didWarnSet.add(finishedWork.type);
	                warningWithoutStack$1(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
	              }
	            }
	            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
	            stopPhaseTimer();
	          }
	        }
	        return;
	      }
	    case HostRoot:
	    case HostComponent:
	    case HostText:
	    case HostPortal:
	    case IncompleteClassComponent:
	      // Nothing to do for these component types
	      return;
	    default:
	      {
	        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
	      }
	  }
	}

	function commitHookEffectList(unmountTag, mountTag, finishedWork) {
	  {
	    return;
	  }
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;
	    do {
	      if ((effect.tag & unmountTag) !== NoEffect$1) {
	        // Unmount
	        var destroy = effect.destroy;
	        effect.destroy = null;
	        if (destroy !== null) {
	          destroy();
	        }
	      }
	      if ((effect.tag & mountTag) !== NoEffect$1) {
	        // Mount
	        var create = effect.create;
	        var _destroy = create();
	        if (typeof _destroy !== 'function') {
	          {
	            if (_destroy !== null && _destroy !== undefined) {
	              warningWithoutStack$1(false, 'useEffect function must return a cleanup function or ' + 'nothing.%s%s', typeof _destroy.then === 'function' ? ' Promises and useEffect(async () => ...) are not ' + 'supported, but you can call an async function inside an ' + 'effect.' : '', getStackByFiberInDevAndProd(finishedWork));
	            }
	          }
	          _destroy = null;
	        }
	        effect.destroy = _destroy;
	      }
	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
	        break;
	      }
	    case ClassComponent:
	      {
	        var instance = finishedWork.stateNode;
	        if (finishedWork.effectTag & Update) {
	          if (current$$1 === null) {
	            startPhaseTimer(finishedWork, 'componentDidMount');
	            // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.
	            {
	              if (finishedWork.type === finishedWork.elementType) {
	                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected instance props to match memoized props before ' + 'componentDidMount. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
	                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected instance state to match memoized state before ' + 'componentDidMount. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
	              }
	            }
	            instance.componentDidMount();
	            stopPhaseTimer();
	          } else {
	            var prevProps = finishedWork.elementType === finishedWork.type ? current$$1.memoizedProps : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
	            var prevState = current$$1.memoizedState;
	            startPhaseTimer(finishedWork, 'componentDidUpdate');
	            // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.
	            {
	              if (finishedWork.type === finishedWork.elementType) {
	                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected instance props to match memoized props before ' + 'componentDidUpdate. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
	                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected instance state to match memoized state before ' + 'componentDidUpdate. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
	              }
	            }
	            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
	            stopPhaseTimer();
	          }
	        }
	        var updateQueue = finishedWork.updateQueue;
	        if (updateQueue !== null) {
	          {
	            if (finishedWork.type === finishedWork.elementType) {
	              !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected instance props to match memoized props before ' + 'processing the update queue. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
	              !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected instance state to match memoized state before ' + 'processing the update queue. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
	            }
	          }
	          // We could update instance props and state here,
	          // but instead we rely on them being set during last render.
	          // TODO: revisit this when we implement resuming.
	          commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
	        }
	        return;
	      }
	    case HostRoot:
	      {
	        var _updateQueue = finishedWork.updateQueue;
	        if (_updateQueue !== null) {
	          var _instance = null;
	          if (finishedWork.child !== null) {
	            switch (finishedWork.child.tag) {
	              case HostComponent:
	                _instance = getPublicInstance(finishedWork.child.stateNode);
	                break;
	              case ClassComponent:
	                _instance = finishedWork.child.stateNode;
	                break;
	            }
	          }
	          commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
	        }
	        return;
	      }
	    case HostComponent:
	      {
	        var _instance2 = finishedWork.stateNode;

	        // Renderers may schedule work to be done after host components are mounted
	        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
	        // These effects should only be committed when components are first mounted,
	        // aka when there is no current/alternate.
	        if (current$$1 === null && finishedWork.effectTag & Update) {
	          var type = finishedWork.type;
	          var props = finishedWork.memoizedProps;
	          commitMount(_instance2, type, props, finishedWork);
	        }

	        return;
	      }
	    case HostText:
	      {
	        // We have no life-cycles associated with text.
	        return;
	      }
	    case HostPortal:
	      {
	        // We have no life-cycles associated with portals.
	        return;
	      }
	    case Profiler:
	      {
	        {
	          var onRender = finishedWork.memoizedProps.onRender;

	          {
	            onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
	          }
	        }
	        return;
	      }
	    case SuspenseComponent:
	      break;
	    case IncompleteClassComponent:
	      break;
	    default:
	      {
	        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
	      }
	  }
	}

	function hideOrUnhideAllChildren(finishedWork, isHidden) {
	  {
	    // We only have the top Fiber that was inserted but we need recurse down its
	    var node = finishedWork;
	    while (true) {
	      if (node.tag === HostComponent) {
	        var instance = node.stateNode;
	        if (isHidden) {
	          hideInstance(instance);
	        } else {
	          unhideInstance(node.stateNode, node.memoizedProps);
	        }
	      } else if (node.tag === HostText) {
	        var _instance3 = node.stateNode;
	        if (isHidden) {
	          hideTextInstance(_instance3);
	        } else {
	          unhideTextInstance(_instance3, node.memoizedProps);
	        }
	      } else if (node.tag === SuspenseComponent && node.memoizedState !== null) {
	        // Found a nested Suspense component that timed out. Skip over the
	        var fallbackChildFragment = node.child.sibling;
	        fallbackChildFragment.return = node;
	        node = fallbackChildFragment;
	        continue;
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	      if (node === finishedWork) {
	        return;
	      }
	      while (node.sibling === null) {
	        if (node.return === null || node.return === finishedWork) {
	          return;
	        }
	        node = node.return;
	      }
	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }
	}

	function commitAttachRef(finishedWork) {
	  var ref = finishedWork.ref;
	  if (ref !== null) {
	    var instance = finishedWork.stateNode;
	    var instanceToUse = void 0;
	    switch (finishedWork.tag) {
	      case HostComponent:
	        instanceToUse = getPublicInstance(instance);
	        break;
	      default:
	        instanceToUse = instance;
	    }
	    if (typeof ref === 'function') {
	      ref(instanceToUse);
	    } else {
	      {
	        if (!ref.hasOwnProperty('current')) {
	          warningWithoutStack$1(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
	        }
	      }

	      ref.current = instanceToUse;
	    }
	  }
	}

	function commitDetachRef(current$$1) {
	  var currentRef = current$$1.ref;
	  if (currentRef !== null) {
	    if (typeof currentRef === 'function') {
	      currentRef(null);
	    } else {
	      currentRef.current = null;
	    }
	  }
	}

	// User-originating errors (lifecycles and refs) should not interrupt
	// deletion, so don't let them throw. Host-originating errors should
	// interrupt deletion, so it's okay
	function commitUnmount(current$$1) {
	  onCommitUnmount(current$$1);

	  switch (current$$1.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      {
	        var updateQueue = current$$1.updateQueue;
	        if (updateQueue !== null) {
	          var lastEffect = updateQueue.lastEffect;
	          if (lastEffect !== null) {
	            var firstEffect = lastEffect.next;
	            var effect = firstEffect;
	            do {
	              var destroy = effect.destroy;
	              if (destroy !== null) {
	                safelyCallDestroy(current$$1, destroy);
	              }
	              effect = effect.next;
	            } while (effect !== firstEffect);
	          }
	        }
	        break;
	      }
	    case ClassComponent:
	      {
	        safelyDetachRef(current$$1);
	        var instance = current$$1.stateNode;
	        if (typeof instance.componentWillUnmount === 'function') {
	          safelyCallComponentWillUnmount(current$$1, instance);
	        }
	        return;
	      }
	    case HostComponent:
	      {
	        safelyDetachRef(current$$1);
	        return;
	      }
	    case HostPortal:
	      {
	        // TODO: this is recursive.
	        // We are also not using this parent because
	        // the portal will get pushed immediately.
	        {
	          unmountHostComponents(current$$1);
	        }
	        return;
	      }
	  }
	}

	function commitNestedUnmounts(root) {
	  // While we're inside a removed host node we don't want to call
	  // removeChild on the inner nodes because they're removed by the top
	  // call anyway. We also want to call componentWillUnmount on all
	  // composites before this host node is removed from the tree. Therefore
	  var node = root;
	  while (true) {
	    commitUnmount(node);
	    // Visit children because they may contain more composite or host nodes.
	    // Skip portals because commitUnmount() currently visits them recursively.
	    if (node.child !== null && (
	    // If we use mutation we drill down into portals using commitUnmount above.
	    // If we don't use mutation we drill down into portals here instead.
	    node.tag !== HostPortal)) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }
	    if (node === root) {
	      return;
	    }
	    while (node.sibling === null) {
	      if (node.return === null || node.return === root) {
	        return;
	      }
	      node = node.return;
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function detachFiber(current$$1) {
	  // Cut off the return pointers to disconnect it from the tree. Ideally, we
	  // should clear the child pointer of the parent alternate to let this
	  // get GC:ed but we don't know which for sure which parent is the current
	  // one so we'll settle for GC:ing the subtree of this child. This child
	  // itself will be GC:ed when the parent updates the next time.
	  current$$1.return = null;
	  current$$1.child = null;
	  if (current$$1.alternate) {
	    current$$1.alternate.child = null;
	    current$$1.alternate.return = null;
	  }
	}

	function getHostParentFiber(fiber) {
	  var parent = fiber.return;
	  while (parent !== null) {
	    if (isHostParent(parent)) {
	      return parent;
	    }
	    parent = parent.return;
	  }
	  invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
	}

	function isHostParent(fiber) {
	  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
	}

	function getHostSibling(fiber) {
	  // We're going to search forward into the tree until we find a sibling host
	  // node. Unfortunately, if multiple insertions are done in a row we have to
	  // search past them. This leads to exponential search for the next sibling.
	  var node = fiber;
	  siblings: while (true) {
	    // If we didn't find anything, let's try the next sibling.
	    while (node.sibling === null) {
	      if (node.return === null || isHostParent(node.return)) {
	        // If we pop out of the root or hit the parent the fiber we are the
	        // last sibling.
	        return null;
	      }
	      node = node.return;
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	    while (node.tag !== HostComponent && node.tag !== HostText) {
	      // If it is not host node and, we might have a host node inside it.
	      // Try to search down until we find one.
	      if (node.effectTag & Placement) {
	        // If we don't have a child, try the siblings instead.
	        continue siblings;
	      }
	      // If we don't have a child, try the siblings instead.
	      // We also skip portals because they are not part of this host tree.
	      if (node.child === null || node.tag === HostPortal) {
	        continue siblings;
	      } else {
	        node.child.return = node;
	        node = node.child;
	      }
	    }
	    // Check if this host node is stable or about to be placed.
	    if (!(node.effectTag & Placement)) {
	      // Found it!
	      return node.stateNode;
	    }
	  }
	}

	function commitPlacement(finishedWork) {

	  // Recursively insert all host nodes into the parent.
	  var parentFiber = getHostParentFiber(finishedWork);

	  // Note: these two variables *must* always be updated together.
	  var parent = void 0;
	  var isContainer = void 0;

	  switch (parentFiber.tag) {
	    case HostComponent:
	      parent = parentFiber.stateNode;
	      isContainer = false;
	      break;
	    case HostRoot:
	      parent = parentFiber.stateNode.containerInfo;
	      isContainer = true;
	      break;
	    case HostPortal:
	      parent = parentFiber.stateNode.containerInfo;
	      isContainer = true;
	      break;
	    default:
	      invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
	  }
	  if (parentFiber.effectTag & ContentReset) {
	    // Reset the text content of the parent before doing any insertions
	    resetTextContent(parent);
	    // Clear ContentReset from the effect tag
	    parentFiber.effectTag &= ~ContentReset;
	  }

	  var before = getHostSibling(finishedWork);
	  // We only have the top Fiber that was inserted but we need recurse down its
	  // children to find all the terminal nodes.
	  var node = finishedWork;
	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText) {
	      if (before) {
	        if (isContainer) {
	          insertInContainerBefore(parent, node.stateNode, before);
	        } else {
	          insertBefore(parent, node.stateNode, before);
	        }
	      } else {
	        if (isContainer) {
	          appendChildToContainer(parent, node.stateNode);
	        } else {
	          appendChild(parent, node.stateNode);
	        }
	      }
	    } else if (node.tag === HostPortal) ; else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }
	    if (node === finishedWork) {
	      return;
	    }
	    while (node.sibling === null) {
	      if (node.return === null || node.return === finishedWork) {
	        return;
	      }
	      node = node.return;
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function unmountHostComponents(current$$1) {
	  // We only have the top Fiber that was deleted but we need recurse down its
	  var node = current$$1;

	  // Each iteration, currentParent is populated with node's host parent if not
	  // currentParentIsValid.
	  var currentParentIsValid = false;

	  // Note: these two variables *must* always be updated together.
	  var currentParent = void 0;
	  var currentParentIsContainer = void 0;

	  while (true) {
	    if (!currentParentIsValid) {
	      var parent = node.return;
	      findParent: while (true) {
	        !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	        switch (parent.tag) {
	          case HostComponent:
	            currentParent = parent.stateNode;
	            currentParentIsContainer = false;
	            break findParent;
	          case HostRoot:
	            currentParent = parent.stateNode.containerInfo;
	            currentParentIsContainer = true;
	            break findParent;
	          case HostPortal:
	            currentParent = parent.stateNode.containerInfo;
	            currentParentIsContainer = true;
	            break findParent;
	        }
	        parent = parent.return;
	      }
	      currentParentIsValid = true;
	    }

	    if (node.tag === HostComponent || node.tag === HostText) {
	      commitNestedUnmounts(node);
	      // After all the children have unmounted, it is now safe to remove the
	      // node from the tree.
	      if (currentParentIsContainer) {
	        removeChildFromContainer(currentParent, node.stateNode);
	      } else {
	        removeChild(currentParent, node.stateNode);
	      }
	      // Don't visit children because we already visited them.
	    } else if (node.tag === HostPortal) {
	      // When we go into a portal, it becomes the parent to remove from.
	      // We will reassign it back when we pop the portal on the way up.
	      currentParent = node.stateNode.containerInfo;
	      currentParentIsContainer = true;
	      // Visit children because portals might contain host components.
	      if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	    } else {
	      commitUnmount(node);
	      // Visit children because we may find more host components below.
	      if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	    }
	    if (node === current$$1) {
	      return;
	    }
	    while (node.sibling === null) {
	      if (node.return === null || node.return === current$$1) {
	        return;
	      }
	      node = node.return;
	      if (node.tag === HostPortal) {
	        // When we go out of the portal, we need to restore the parent.
	        // Since we don't keep a stack of them, we will search for it.
	        currentParentIsValid = false;
	      }
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function commitDeletion(current$$1) {
	  {
	    // Recursively delete all host nodes from the parent.
	    // Detach refs and call componentWillUnmount() on the whole subtree.
	    unmountHostComponents(current$$1);
	  }
	  detachFiber(current$$1);
	}

	function commitWork(current$$1, finishedWork) {

	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      {
	        commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
	        return;
	      }
	    case ClassComponent:
	      {
	        return;
	      }
	    case HostComponent:
	      {
	        var instance = finishedWork.stateNode;
	        if (instance != null) {
	          // Commit the work prepared earlier.
	          var newProps = finishedWork.memoizedProps;
	          // For hydration we reuse the update path but we treat the oldProps
	          // as the newProps. The updatePayload will contain the real change in
	          // this case.
	          var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
	          var type = finishedWork.type;
	          // TODO: Type the updateQueue to be specific to host components.
	          var updatePayload = finishedWork.updateQueue;
	          finishedWork.updateQueue = null;
	          if (updatePayload !== null) {
	            commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
	          }
	        }
	        return;
	      }
	    case HostText:
	      {
	        !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	        var textInstance = finishedWork.stateNode;
	        var newText = finishedWork.memoizedProps;
	        // For hydration we reuse the update path but we treat the oldProps
	        // as the newProps. The updatePayload will contain the real change in
	        // this case.
	        var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
	        commitTextUpdate(textInstance, oldText, newText);
	        return;
	      }
	    case HostRoot:
	      {
	        return;
	      }
	    case Profiler:
	      {
	        return;
	      }
	    case SuspenseComponent:
	      {
	        var newState = finishedWork.memoizedState;

	        var newDidTimeout = void 0;
	        var primaryChildParent = finishedWork;
	        if (newState === null) {
	          newDidTimeout = false;
	        } else {
	          newDidTimeout = true;
	          primaryChildParent = finishedWork.child;
	          if (newState.timedOutAt === NoWork) {
	            // If the children had not already timed out, record the time.
	            // This is used to compute the elapsed time during subsequent
	            // attempts to render the children.
	            newState.timedOutAt = requestCurrentTime();
	          }
	        }

	        if (primaryChildParent !== null) {
	          hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
	        }
	        return;
	      }
	    case IncompleteClassComponent:
	      {
	        return;
	      }
	    default:
	      {
	        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
	      }
	  }
	}

	function commitResetTextContent(current$$1) {
	  resetTextContent(current$$1.stateNode);
	}

	function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
	  var update = createUpdate(expirationTime);
	  // Unmount the root by rendering null.
	  update.tag = CaptureUpdate;
	  // Caution: React DevTools currently depends on this property
	  // being called "element".
	  update.payload = { element: null };
	  var error = errorInfo.value;
	  update.callback = function () {
	    onUncaughtError(error);
	    logError(fiber, errorInfo);
	  };
	  return update;
	}

	function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
	  var update = createUpdate(expirationTime);
	  update.tag = CaptureUpdate;
	  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
	  if (typeof getDerivedStateFromError === 'function') {
	    var error = errorInfo.value;
	    update.payload = function () {
	      return getDerivedStateFromError(error);
	    };
	  }

	  var inst = fiber.stateNode;
	  if (inst !== null && typeof inst.componentDidCatch === 'function') {
	    update.callback = function callback() {
	      if (typeof getDerivedStateFromError !== 'function') {
	        // To preserve the preexisting retry behavior of error boundaries,
	        // we keep track of which ones already failed during this batch.
	        // This gets reset before we yield back to the browser.
	        // TODO: Warn in strict mode if getDerivedStateFromError is
	        // not defined.
	        markLegacyErrorBoundaryAsFailed(this);
	      }
	      var error = errorInfo.value;
	      var stack = errorInfo.stack;
	      logError(fiber, errorInfo);
	      this.componentDidCatch(error, {
	        componentStack: stack !== null ? stack : ''
	      });
	      {
	        if (typeof getDerivedStateFromError !== 'function') {
	          // If componentDidCatch is the only error boundary method defined,
	          // then it needs to call setState to recover from errors.
	          // If no state update is scheduled then the boundary will swallow the error.
	          !(fiber.expirationTime === Sync) ? warningWithoutStack$1(false, '%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown') : void 0;
	        }
	      }
	    };
	  }
	  return update;
	}

	function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
	  // The source fiber did not complete.
	  sourceFiber.effectTag |= Incomplete;
	  // Its effect list is no longer valid.
	  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

	  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
	    // This is a thenable.
	    var thenable = value;

	    // Find the earliest timeout threshold of all the placeholders in the
	    // ancestor path. We could avoid this traversal by storing the thresholds on
	    // the stack, but we choose not to because we only hit this path if we're
	    // IO-bound (i.e. if something suspends). Whereas the stack is used even in
	    // the non-IO- bound case.
	    var _workInProgress = returnFiber;
	    var earliestTimeoutMs = -1;
	    var startTimeMs = -1;
	    do {
	      if (_workInProgress.tag === SuspenseComponent) {
	        var current$$1 = _workInProgress.alternate;
	        if (current$$1 !== null) {
	          var currentState = current$$1.memoizedState;
	          if (currentState !== null) {
	            // Reached a boundary that already timed out. Do not search
	            // any further.
	            var timedOutAt = currentState.timedOutAt;
	            startTimeMs = expirationTimeToMs(timedOutAt);
	            // Do not search any further.
	            break;
	          }
	        }
	        var timeoutPropMs = _workInProgress.pendingProps.maxDuration;
	        if (typeof timeoutPropMs === 'number') {
	          if (timeoutPropMs <= 0) {
	            earliestTimeoutMs = 0;
	          } else if (earliestTimeoutMs === -1 || timeoutPropMs < earliestTimeoutMs) {
	            earliestTimeoutMs = timeoutPropMs;
	          }
	        }
	      }
	      _workInProgress = _workInProgress.return;
	    } while (_workInProgress !== null);

	    // Schedule the nearest Suspense to re-render the timed out view.
	    _workInProgress = returnFiber;
	    do {
	      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress.alternate, _workInProgress)) {
	        // Found the nearest boundary.

	        // If the boundary is not in concurrent mode, we should not suspend, and
	        // likewise, when the promise resolves, we should ping synchronously.
	        var pingTime = (_workInProgress.mode & ConcurrentMode) === NoEffect ? Sync : renderExpirationTime;

	        // Attach a listener to the promise to "ping" the root and retry.
	        var onResolveOrReject = retrySuspendedRoot.bind(null, root, _workInProgress, sourceFiber, pingTime);
	        {
	          onResolveOrReject = tracing$1.unstable_wrap(onResolveOrReject);
	        }
	        thenable.then(onResolveOrReject, onResolveOrReject);

	        // If the boundary is outside of concurrent mode, we should *not*
	        // suspend the commit. Pretend as if the suspended component rendered
	        // null and keep rendering. In the commit phase, we'll schedule a
	        // subsequent synchronous update to re-render the Suspense.
	        //
	        // Note: It doesn't matter whether the component that suspended was
	        // inside a concurrent mode tree. If the Suspense is outside of it, we
	        // should *not* suspend the commit.
	        if ((_workInProgress.mode & ConcurrentMode) === NoEffect) {
	          _workInProgress.effectTag |= DidCapture;

	          // We're going to commit this fiber even though it didn't complete.
	          // But we shouldn't call any lifecycle methods or callbacks. Remove
	          // all lifecycle effect tags.
	          sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

	          if (sourceFiber.tag === ClassComponent) {
	            var _current = sourceFiber.alternate;
	            if (_current === null) {
	              // This is a new mount. Change the tag so it's not mistaken for a
	              // completed class component. For example, we should not call
	              // componentWillUnmount if it is deleted.
	              sourceFiber.tag = IncompleteClassComponent;
	            }
	          }

	          // The source fiber did not complete. Mark it with the current
	          // render priority to indicate that it still has pending work.
	          sourceFiber.expirationTime = renderExpirationTime;

	          // Exit without suspending.
	          return;
	        }

	        // Confirmed that the boundary is in a concurrent mode tree. Continue
	        // with the normal suspend path.

	        var absoluteTimeoutMs = void 0;
	        if (earliestTimeoutMs === -1) {
	          // If no explicit threshold is given, default to an abitrarily large
	          // value. The actual size doesn't matter because the threshold for the
	          // whole tree will be clamped to the expiration time.
	          absoluteTimeoutMs = maxSigned31BitInt;
	        } else {
	          if (startTimeMs === -1) {
	            // This suspend happened outside of any already timed-out
	            // placeholders. We don't know exactly when the update was
	            // scheduled, but we can infer an approximate start time from the
	            // expiration time. First, find the earliest uncommitted expiration
	            // time in the tree, including work that is suspended. Then subtract
	            // the offset used to compute an async update's expiration time.
	            // This will cause high priority (interactive) work to expire
	            // earlier than necessary, but we can account for this by adjusting
	            // for the Just Noticeable Difference.
	            var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, renderExpirationTime);
	            var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
	            startTimeMs = earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
	          }
	          absoluteTimeoutMs = startTimeMs + earliestTimeoutMs;
	        }

	        // Mark the earliest timeout in the suspended fiber's ancestor path.
	        // After completing the root, we'll take the largest of all the
	        // suspended fiber's timeouts and use it to compute a timeout for the
	        // whole tree.
	        renderDidSuspend(root, absoluteTimeoutMs, renderExpirationTime);

	        _workInProgress.effectTag |= ShouldCapture;
	        _workInProgress.expirationTime = renderExpirationTime;
	        return;
	      }
	      // This boundary already captured during this render. Continue to the next
	      // boundary.
	      _workInProgress = _workInProgress.return;
	    } while (_workInProgress !== null);
	    // No boundary was found. Fallthrough to error mode.
	    // TODO: Use invariant so the message is stripped in prod?
	    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
	  }

	  // We didn't find a boundary that could handle this type of exception. Start
	  // over and traverse parent path again, this time treating the exception
	  // as an error.
	  renderDidError();
	  value = createCapturedValue(value, sourceFiber);
	  var workInProgress = returnFiber;
	  do {
	    switch (workInProgress.tag) {
	      case HostRoot:
	        {
	          var _errorInfo = value;
	          workInProgress.effectTag |= ShouldCapture;
	          workInProgress.expirationTime = renderExpirationTime;
	          var update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);
	          enqueueCapturedUpdate(workInProgress, update);
	          return;
	        }
	      case ClassComponent:
	        // Capture and retry
	        var errorInfo = value;
	        var ctor = workInProgress.type;
	        var instance = workInProgress.stateNode;
	        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
	          workInProgress.effectTag |= ShouldCapture;
	          workInProgress.expirationTime = renderExpirationTime;
	          // Schedule the error boundary to re-render using updated state
	          var _update = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);
	          enqueueCapturedUpdate(workInProgress, _update);
	          return;
	        }
	        break;
	      default:
	        break;
	    }
	    workInProgress = workInProgress.return;
	  } while (workInProgress !== null);
	}

	function unwindWork(workInProgress, renderExpirationTime) {
	  switch (workInProgress.tag) {
	    case ClassComponent:
	      {
	        var Component = workInProgress.type;
	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }
	        var effectTag = workInProgress.effectTag;
	        if (effectTag & ShouldCapture) {
	          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
	          return workInProgress;
	        }
	        return null;
	      }
	    case HostRoot:
	      {
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        var _effectTag = workInProgress.effectTag;
	        !((_effectTag & DidCapture) === NoEffect) ? invariant(false, 'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.') : void 0;
	        workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
	        return workInProgress;
	      }
	    case HostComponent:
	      {
	        popHostContext(workInProgress);
	        return null;
	      }
	    case SuspenseComponent:
	      {
	        var _effectTag2 = workInProgress.effectTag;
	        if (_effectTag2 & ShouldCapture) {
	          workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
	          // Captured a suspense effect. Re-render the boundary.
	          return workInProgress;
	        }
	        return null;
	      }
	    case HostPortal:
	      popHostContainer(workInProgress);
	      return null;
	    case ContextProvider:
	      popProvider(workInProgress);
	      return null;
	    default:
	      return null;
	  }
	}

	function unwindInterruptedWork(interruptedWork) {
	  switch (interruptedWork.tag) {
	    case ClassComponent:
	      {
	        var childContextTypes = interruptedWork.type.childContextTypes;
	        if (childContextTypes !== null && childContextTypes !== undefined) {
	          popContext(interruptedWork);
	        }
	        break;
	      }
	    case HostRoot:
	      {
	        popHostContainer(interruptedWork);
	        popTopLevelContextObject(interruptedWork);
	        break;
	      }
	    case HostComponent:
	      {
	        popHostContext(interruptedWork);
	        break;
	      }
	    case HostPortal:
	      popHostContainer(interruptedWork);
	      break;
	    case ContextProvider:
	      popProvider(interruptedWork);
	      break;
	    default:
	      break;
	  }
	}
	var DispatcherWithoutHooks = {
	  readContext: readContext
	};

	var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;


	var didWarnAboutStateTransition = void 0;
	var didWarnSetStateChildContext = void 0;
	var warnAboutUpdateOnUnmounted = void 0;
	var warnAboutInvalidUpdates = void 0;

	{
	  // Provide explicit error message when production+profiling bundle of e.g. react-dom
	  // is used with production (non-profiling) bundle of scheduler/tracing
	  !(tracing$1.__interactionsRef != null && tracing$1.__interactionsRef.current != null) ? invariant(false, 'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling') : void 0;
	}

	{
	  didWarnAboutStateTransition = false;
	  didWarnSetStateChildContext = false;
	  var didWarnStateUpdateForUnmountedComponent = {};

	  warnAboutUpdateOnUnmounted = function (fiber, isClass) {
	    // We show the whole stack but dedupe on the top component's name because
	    // the problematic code almost always lies inside that component.
	    var componentName = getComponentName(fiber.type) || 'ReactComponent';
	    if (didWarnStateUpdateForUnmountedComponent[componentName]) {
	      return;
	    }
	    warningWithoutStack$1(false, "Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', isClass ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
	    didWarnStateUpdateForUnmountedComponent[componentName] = true;
	  };

	  warnAboutInvalidUpdates = function (instance) {
	    switch (phase) {
	      case 'getChildContext':
	        if (didWarnSetStateChildContext) {
	          return;
	        }
	        warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
	        didWarnSetStateChildContext = true;
	        break;
	      case 'render':
	        if (didWarnAboutStateTransition) {
	          return;
	        }
	        warningWithoutStack$1(false, 'Cannot update during an existing state transition (such as within ' + '`render`). Render methods should be a pure function of props and state.');
	        didWarnAboutStateTransition = true;
	        break;
	    }
	  };
	}

	// Used to ensure computeUniqueAsyncExpiration is monotonically decreasing.
	var lastUniqueAsyncExpiration = Sync - 1;

	// Represents the expiration time that incoming updates should use. (If this
	// is NoWork, use the default strategy: async updates in async mode, sync
	// updates in sync mode.)
	var expirationContext = NoWork;

	var isWorking = false;

	// The next work in progress fiber that we're currently working on.
	var nextUnitOfWork = null;
	var nextRoot = null;
	// The time at which we're currently rendering work.
	var nextRenderExpirationTime = NoWork;
	var nextLatestAbsoluteTimeoutMs = -1;
	var nextRenderDidError = false;

	// The next fiber with an effect that we're currently committing.
	var nextEffect = null;

	var isCommitting$1 = false;
	var passiveEffectCallbackHandle = null;
	var passiveEffectCallback = null;

	var legacyErrorBoundariesThatAlreadyFailed = null;

	// Used for performance tracking.
	var interruptedBy = null;

	var stashedWorkInProgressProperties = void 0;
	var replayUnitOfWork = void 0;
	var mayReplayFailedUnitOfWork = void 0;
	var isReplayingFailedUnitOfWork = void 0;
	var originalReplayError = void 0;
	var rethrowOriginalError = void 0;
	{
	  stashedWorkInProgressProperties = null;
	  mayReplayFailedUnitOfWork = true;
	  isReplayingFailedUnitOfWork = false;
	  originalReplayError = null;
	  replayUnitOfWork = function (failedUnitOfWork, thrownValue, isYieldy) {
	    if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
	      // Don't replay promises. Treat everything else like an error.
	      // TODO: Need to figure out a different strategy if/when we add
	      // support for catching other types.
	      return;
	    }

	    // Restore the original state of the work-in-progress
	    if (stashedWorkInProgressProperties === null) {
	      // This should never happen. Don't throw because this code is DEV-only.
	      warningWithoutStack$1(false, 'Could not replay rendering after an error. This is likely a bug in React. ' + 'Please file an issue.');
	      return;
	    }
	    assignFiberPropertiesInDEV(failedUnitOfWork, stashedWorkInProgressProperties);

	    switch (failedUnitOfWork.tag) {
	      case HostRoot:
	        popHostContainer(failedUnitOfWork);
	        popTopLevelContextObject(failedUnitOfWork);
	        break;
	      case HostComponent:
	        popHostContext(failedUnitOfWork);
	        break;
	      case ClassComponent:
	        {
	          var Component = failedUnitOfWork.type;
	          if (isContextProvider(Component)) {
	            popContext(failedUnitOfWork);
	          }
	          break;
	        }
	      case HostPortal:
	        popHostContainer(failedUnitOfWork);
	        break;
	      case ContextProvider:
	        popProvider(failedUnitOfWork);
	        break;
	    }
	    // Replay the begin phase.
	    isReplayingFailedUnitOfWork = true;
	    originalReplayError = thrownValue;
	    invokeGuardedCallback(null, workLoop, null, isYieldy);
	    isReplayingFailedUnitOfWork = false;
	    originalReplayError = null;
	    if (hasCaughtError()) {
	      var replayError = clearCaughtError();
	      if (replayError != null && thrownValue != null) {
	        try {
	          // Reading the expando property is intentionally
	          // inside `try` because it might be a getter or Proxy.
	          if (replayError._suppressLogging) {
	            // Also suppress logging for the original error.
	            thrownValue._suppressLogging = true;
	          }
	        } catch (inner) {
	          // Ignore.
	        }
	      }
	    } else {
	      // If the begin phase did not fail the second time, set this pointer
	      // back to the original value.
	      nextUnitOfWork = failedUnitOfWork;
	    }
	  };
	  rethrowOriginalError = function () {
	    throw originalReplayError;
	  };
	}

	function resetStack() {
	  if (nextUnitOfWork !== null) {
	    var interruptedWork = nextUnitOfWork.return;
	    while (interruptedWork !== null) {
	      unwindInterruptedWork(interruptedWork);
	      interruptedWork = interruptedWork.return;
	    }
	  }

	  {
	    ReactStrictModeWarnings.discardPendingWarnings();
	    checkThatStackIsEmpty();
	  }

	  nextRoot = null;
	  nextRenderExpirationTime = NoWork;
	  nextLatestAbsoluteTimeoutMs = -1;
	  nextRenderDidError = false;
	  nextUnitOfWork = null;
	}

	function commitAllHostEffects() {
	  while (nextEffect !== null) {
	    {
	      setCurrentFiber(nextEffect);
	    }
	    recordEffect();

	    var effectTag = nextEffect.effectTag;

	    if (effectTag & ContentReset) {
	      commitResetTextContent(nextEffect);
	    }

	    if (effectTag & Ref) {
	      var current$$1 = nextEffect.alternate;
	      if (current$$1 !== null) {
	        commitDetachRef(current$$1);
	      }
	    }

	    // The following switch statement is only concerned about placement,
	    // updates, and deletions. To avoid needing to add a case for every
	    // possible bitmap value, we remove the secondary effects from the
	    // effect tag and switch on that value.
	    var primaryEffectTag = effectTag & (Placement | Update | Deletion);
	    switch (primaryEffectTag) {
	      case Placement:
	        {
	          commitPlacement(nextEffect);
	          // Clear the "placement" from effect tag so that we know that this is inserted, before
	          // any life-cycles like componentDidMount gets called.
	          // TODO: findDOMNode doesn't rely on this any more but isMounted
	          // does and isMounted is deprecated anyway so we should be able
	          // to kill this.
	          nextEffect.effectTag &= ~Placement;
	          break;
	        }
	      case PlacementAndUpdate:
	        {
	          // Placement
	          commitPlacement(nextEffect);
	          // Clear the "placement" from effect tag so that we know that this is inserted, before
	          // any life-cycles like componentDidMount gets called.
	          nextEffect.effectTag &= ~Placement;

	          // Update
	          var _current = nextEffect.alternate;
	          commitWork(_current, nextEffect);
	          break;
	        }
	      case Update:
	        {
	          var _current2 = nextEffect.alternate;
	          commitWork(_current2, nextEffect);
	          break;
	        }
	      case Deletion:
	        {
	          commitDeletion(nextEffect);
	          break;
	        }
	    }
	    nextEffect = nextEffect.nextEffect;
	  }

	  {
	    resetCurrentFiber();
	  }
	}

	function commitBeforeMutationLifecycles() {
	  while (nextEffect !== null) {
	    {
	      setCurrentFiber(nextEffect);
	    }

	    var effectTag = nextEffect.effectTag;
	    if (effectTag & Snapshot) {
	      recordEffect();
	      var current$$1 = nextEffect.alternate;
	      commitBeforeMutationLifeCycles(current$$1, nextEffect);
	    }

	    nextEffect = nextEffect.nextEffect;
	  }

	  {
	    resetCurrentFiber();
	  }
	}

	function commitAllLifeCycles(finishedRoot, committedExpirationTime) {
	  {
	    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
	    ReactStrictModeWarnings.flushLegacyContextWarning();
	  }
	  while (nextEffect !== null) {
	    var effectTag = nextEffect.effectTag;

	    if (effectTag & (Update | Callback)) {
	      recordEffect();
	      var current$$1 = nextEffect.alternate;
	      commitLifeCycles(finishedRoot, current$$1, nextEffect, committedExpirationTime);
	    }

	    if (effectTag & Ref) {
	      recordEffect();
	      commitAttachRef(nextEffect);
	    }

	    nextEffect = nextEffect.nextEffect;
	  }
	}

	function isAlreadyFailedLegacyErrorBoundary(instance) {
	  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
	}

	function markLegacyErrorBoundaryAsFailed(instance) {
	  if (legacyErrorBoundariesThatAlreadyFailed === null) {
	    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
	  } else {
	    legacyErrorBoundariesThatAlreadyFailed.add(instance);
	  }
	}

	function flushPassiveEffects() {
	  if (passiveEffectCallback !== null) {
	    scheduler$1.unstable_cancelCallback(passiveEffectCallbackHandle);
	    // We call the scheduled callback instead of commitPassiveEffects directly
	    // to ensure tracing works correctly.
	    passiveEffectCallback();
	  }
	}

	function commitRoot(root, finishedWork) {
	  isWorking = true;
	  isCommitting$1 = true;
	  startCommitTimer();

	  !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  var committedExpirationTime = root.pendingCommitExpirationTime;
	  !(committedExpirationTime !== NoWork) ? invariant(false, 'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  root.pendingCommitExpirationTime = NoWork;

	  // Update the pending priority levels to account for the work that we are
	  // about to commit. This needs to happen before calling the lifecycles, since
	  // they may schedule additional updates.
	  var updateExpirationTimeBeforeCommit = finishedWork.expirationTime;
	  var childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
	  var earliestRemainingTimeBeforeCommit = childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
	  markCommittedPriorityLevels(root, earliestRemainingTimeBeforeCommit);

	  var prevInteractions = null;
	  {
	    // Restore any pending interactions at this point,
	    // So that cascading work triggered during the render phase will be accounted for.
	    prevInteractions = tracing$1.__interactionsRef.current;
	    tracing$1.__interactionsRef.current = root.memoizedInteractions;
	  }

	  // Reset this to null before calling lifecycles
	  ReactCurrentOwner$2.current = null;

	  var firstEffect = void 0;
	  if (finishedWork.effectTag > PerformedWork) {
	    // A fiber's effect list consists only of its children, not itself. So if
	    // the root has an effect, we need to add it to the end of the list. The
	    // resulting list is the set that would belong to the root's parent, if
	    // it had one; that is, all the effects in the tree including the root.
	    if (finishedWork.lastEffect !== null) {
	      finishedWork.lastEffect.nextEffect = finishedWork;
	      firstEffect = finishedWork.firstEffect;
	    } else {
	      firstEffect = finishedWork;
	    }
	  } else {
	    // There is no effect on the root.
	    firstEffect = finishedWork.firstEffect;
	  }

	  prepareForCommit(root.containerInfo);

	  // Invoke instances of getSnapshotBeforeUpdate before mutation.
	  nextEffect = firstEffect;
	  startCommitSnapshotEffectsTimer();
	  while (nextEffect !== null) {
	    var didError = false;
	    var error = void 0;
	    {
	      invokeGuardedCallback(null, commitBeforeMutationLifecycles, null);
	      if (hasCaughtError()) {
	        didError = true;
	        error = clearCaughtError();
	      }
	    }
	    if (didError) {
	      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	      captureCommitPhaseError(nextEffect, error);
	      // Clean-up
	      if (nextEffect !== null) {
	        nextEffect = nextEffect.nextEffect;
	      }
	    }
	  }
	  stopCommitSnapshotEffectsTimer();

	  {
	    // Mark the current commit time to be shared by all Profilers in this batch.
	    // This enables them to be grouped later.
	    recordCommitTime();
	  }

	  // Commit all the side-effects within a tree. We'll do this in two passes.
	  // The first pass performs all the host insertions, updates, deletions and
	  // ref unmounts.
	  nextEffect = firstEffect;
	  startCommitHostEffectsTimer();
	  while (nextEffect !== null) {
	    var _didError = false;
	    var _error = void 0;
	    {
	      invokeGuardedCallback(null, commitAllHostEffects, null);
	      if (hasCaughtError()) {
	        _didError = true;
	        _error = clearCaughtError();
	      }
	    }
	    if (_didError) {
	      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	      captureCommitPhaseError(nextEffect, _error);
	      // Clean-up
	      if (nextEffect !== null) {
	        nextEffect = nextEffect.nextEffect;
	      }
	    }
	  }
	  stopCommitHostEffectsTimer();

	  resetAfterCommit(root.containerInfo);

	  // The work-in-progress tree is now the current tree. This must come after
	  // the first pass of the commit phase, so that the previous tree is still
	  // current during componentWillUnmount, but before the second pass, so that
	  // the finished work is current during componentDidMount/Update.
	  root.current = finishedWork;

	  // In the second pass we'll perform all life-cycles and ref callbacks.
	  // Life-cycles happen as a separate pass so that all placements, updates,
	  // and deletions in the entire tree have already been invoked.
	  // This pass also triggers any renderer-specific initial effects.
	  nextEffect = firstEffect;
	  startCommitLifeCyclesTimer();
	  while (nextEffect !== null) {
	    var _didError2 = false;
	    var _error2 = void 0;
	    {
	      invokeGuardedCallback(null, commitAllLifeCycles, null, root, committedExpirationTime);
	      if (hasCaughtError()) {
	        _didError2 = true;
	        _error2 = clearCaughtError();
	      }
	    }
	    if (_didError2) {
	      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	      captureCommitPhaseError(nextEffect, _error2);
	      if (nextEffect !== null) {
	        nextEffect = nextEffect.nextEffect;
	      }
	    }
	  }

	  isCommitting$1 = false;
	  isWorking = false;
	  stopCommitLifeCyclesTimer();
	  stopCommitTimer();
	  onCommitRoot(finishedWork.stateNode);

	  var updateExpirationTimeAfterCommit = finishedWork.expirationTime;
	  var childExpirationTimeAfterCommit = finishedWork.childExpirationTime;
	  var earliestRemainingTimeAfterCommit = childExpirationTimeAfterCommit > updateExpirationTimeAfterCommit ? childExpirationTimeAfterCommit : updateExpirationTimeAfterCommit;
	  if (earliestRemainingTimeAfterCommit === NoWork) {
	    // If there's no remaining work, we can clear the set of already failed
	    // error boundaries.
	    legacyErrorBoundariesThatAlreadyFailed = null;
	  }
	  onCommit(root, earliestRemainingTimeAfterCommit);

	  {
	    tracing$1.__interactionsRef.current = prevInteractions;

	    var subscriber = void 0;

	    try {
	      subscriber = tracing$1.__subscriberRef.current;
	      if (subscriber !== null && root.memoizedInteractions.size > 0) {
	        var threadID = computeThreadID(committedExpirationTime, root.interactionThreadID);
	        subscriber.onWorkStopped(root.memoizedInteractions, threadID);
	      }
	    } catch (error) {
	      // It's not safe for commitRoot() to throw.
	      // Store the error for now and we'll re-throw in finishRendering().
	      if (!hasUnhandledError) {
	        hasUnhandledError = true;
	        unhandledError = error;
	      }
	    } finally {
	      // Clear completed interactions from the pending Map.
	      // Unless the render was suspended or cascading work was scheduled,
	      // In which case– leave pending interactions until the subsequent render.
	      var pendingInteractionMap = root.pendingInteractionMap;
	      pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
	        // Only decrement the pending interaction count if we're done.
	        // If there's still work at the current priority,
	        // That indicates that we are waiting for suspense data.
	        if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
	          pendingInteractionMap.delete(scheduledExpirationTime);

	          scheduledInteractions.forEach(function (interaction) {
	            interaction.__count--;

	            if (subscriber !== null && interaction.__count === 0) {
	              try {
	                subscriber.onInteractionScheduledWorkCompleted(interaction);
	              } catch (error) {
	                // It's not safe for commitRoot() to throw.
	                // Store the error for now and we'll re-throw in finishRendering().
	                if (!hasUnhandledError) {
	                  hasUnhandledError = true;
	                  unhandledError = error;
	                }
	              }
	            }
	          });
	        }
	      });
	    }
	  }
	}

	function resetChildExpirationTime(workInProgress, renderTime) {
	  if (renderTime !== Never && workInProgress.childExpirationTime === Never) {
	    // The children of this component are hidden. Don't bubble their
	    // expiration times.
	    return;
	  }

	  var newChildExpirationTime = NoWork;

	  // Bubble up the earliest expiration time.
	  if (workInProgress.mode & ProfileMode) {
	    // We're in profiling mode.
	    // Let's use this same traversal to update the render durations.
	    var actualDuration = workInProgress.actualDuration;
	    var treeBaseDuration = workInProgress.selfBaseDuration;

	    // When a fiber is cloned, its actualDuration is reset to 0.
	    // This value will only be updated if work is done on the fiber (i.e. it doesn't bailout).
	    // When work is done, it should bubble to the parent's actualDuration.
	    // If the fiber has not been cloned though, (meaning no work was done),
	    // Then this value will reflect the amount of time spent working on a previous render.
	    // In that case it should not bubble.
	    // We determine whether it was cloned by comparing the child pointer.
	    var shouldBubbleActualDurations = workInProgress.alternate === null || workInProgress.child !== workInProgress.alternate.child;

	    var child = workInProgress.child;
	    while (child !== null) {
	      var childUpdateExpirationTime = child.expirationTime;
	      var childChildExpirationTime = child.childExpirationTime;
	      if (childUpdateExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = childUpdateExpirationTime;
	      }
	      if (childChildExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = childChildExpirationTime;
	      }
	      if (shouldBubbleActualDurations) {
	        actualDuration += child.actualDuration;
	      }
	      treeBaseDuration += child.treeBaseDuration;
	      child = child.sibling;
	    }
	    workInProgress.actualDuration = actualDuration;
	    workInProgress.treeBaseDuration = treeBaseDuration;
	  } else {
	    var _child = workInProgress.child;
	    while (_child !== null) {
	      var _childUpdateExpirationTime = _child.expirationTime;
	      var _childChildExpirationTime = _child.childExpirationTime;
	      if (_childUpdateExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = _childUpdateExpirationTime;
	      }
	      if (_childChildExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = _childChildExpirationTime;
	      }
	      _child = _child.sibling;
	    }
	  }

	  workInProgress.childExpirationTime = newChildExpirationTime;
	}

	function completeUnitOfWork(workInProgress) {
	  // Attempt to complete the current unit of work, then move to the
	  // next sibling. If there are no more siblings, return to the
	  // parent fiber.
	  while (true) {
	    // The current, flushed, state of this fiber is the alternate.
	    // Ideally nothing should rely on this, but relying on it here
	    // means that we don't need an additional field on the work in
	    // progress.
	    var current$$1 = workInProgress.alternate;
	    {
	      setCurrentFiber(workInProgress);
	    }

	    var returnFiber = workInProgress.return;
	    var siblingFiber = workInProgress.sibling;

	    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
	      {
	        // Don't replay if it fails during completion phase.
	        mayReplayFailedUnitOfWork = false;
	      }
	      // This fiber completed.
	      // Remember we're completing this unit so we can find a boundary if it fails.
	      nextUnitOfWork = workInProgress;
	      {
	        if (workInProgress.mode & ProfileMode) {
	          startProfilerTimer(workInProgress);
	        }
	        nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);
	        if (workInProgress.mode & ProfileMode) {
	          // Update render duration assuming we didn't error.
	          stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
	        }
	      }
	      {
	        // We're out of completion phase so replaying is fine now.
	        mayReplayFailedUnitOfWork = true;
	      }
	      stopWorkTimer(workInProgress);
	      resetChildExpirationTime(workInProgress, nextRenderExpirationTime);
	      {
	        resetCurrentFiber();
	      }

	      if (nextUnitOfWork !== null) {
	        // Completing this fiber spawned new work. Work on that next.
	        return nextUnitOfWork;
	      }

	      if (returnFiber !== null &&
	      // Do not append effects to parents if a sibling failed to complete
	      (returnFiber.effectTag & Incomplete) === NoEffect) {
	        // Append all the effects of the subtree and this fiber onto the effect
	        // list of the parent. The completion order of the children affects the
	        // side-effect order.
	        if (returnFiber.firstEffect === null) {
	          returnFiber.firstEffect = workInProgress.firstEffect;
	        }
	        if (workInProgress.lastEffect !== null) {
	          if (returnFiber.lastEffect !== null) {
	            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
	          }
	          returnFiber.lastEffect = workInProgress.lastEffect;
	        }

	        // If this fiber had side-effects, we append it AFTER the children's
	        // side-effects. We can perform certain side-effects earlier if
	        // needed, by doing multiple passes over the effect list. We don't want
	        // to schedule our own side-effect on our own list because if end up
	        // reusing children we'll schedule this effect onto itself since we're
	        // at the end.
	        var effectTag = workInProgress.effectTag;
	        // Skip both NoWork and PerformedWork tags when creating the effect list.
	        // PerformedWork effect is read by React DevTools but shouldn't be committed.
	        if (effectTag > PerformedWork) {
	          if (returnFiber.lastEffect !== null) {
	            returnFiber.lastEffect.nextEffect = workInProgress;
	          } else {
	            returnFiber.firstEffect = workInProgress;
	          }
	          returnFiber.lastEffect = workInProgress;
	        }
	      }

	      if (siblingFiber !== null) {
	        // If there is more work to do in this returnFiber, do that next.
	        return siblingFiber;
	      } else if (returnFiber !== null) {
	        // If there's no more work in this returnFiber. Complete the returnFiber.
	        workInProgress = returnFiber;
	        continue;
	      } else {
	        // We've reached the root.
	        return null;
	      }
	    } else {
	      if (workInProgress.mode & ProfileMode) {
	        // Record the render duration for the fiber that errored.
	        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);

	        // Include the time spent working on failed children before continuing.
	        var actualDuration = workInProgress.actualDuration;
	        var child = workInProgress.child;
	        while (child !== null) {
	          actualDuration += child.actualDuration;
	          child = child.sibling;
	        }
	        workInProgress.actualDuration = actualDuration;
	      }

	      // This fiber did not complete because something threw. Pop values off
	      // the stack without entering the complete phase. If this is a boundary,
	      // capture values if possible.
	      var next = unwindWork(workInProgress, nextRenderExpirationTime);
	      // Because this fiber did not complete, don't reset its expiration time.
	      if (workInProgress.effectTag & DidCapture) {
	        // Restarting an error boundary
	        stopFailedWorkTimer(workInProgress);
	      } else {
	        stopWorkTimer(workInProgress);
	      }

	      {
	        resetCurrentFiber();
	      }

	      if (next !== null) {
	        stopWorkTimer(workInProgress);

	        // If completing this work spawned new work, do that next. We'll come
	        // back here again.
	        // Since we're restarting, remove anything that is not a host effect
	        // from the effect tag.
	        next.effectTag &= HostEffectMask;
	        return next;
	      }

	      if (returnFiber !== null) {
	        // Mark the parent fiber as incomplete and clear its effect list.
	        returnFiber.firstEffect = returnFiber.lastEffect = null;
	        returnFiber.effectTag |= Incomplete;
	      }

	      if (siblingFiber !== null) {
	        // If there is more work to do in this returnFiber, do that next.
	        return siblingFiber;
	      } else if (returnFiber !== null) {
	        // If there's no more work in this returnFiber. Complete the returnFiber.
	        workInProgress = returnFiber;
	        continue;
	      } else {
	        return null;
	      }
	    }
	  }

	  // Without this explicit null return Flow complains of invalid return type
	  // TODO Remove the above while(true) loop
	  // eslint-disable-next-line no-unreachable
	  return null;
	}

	function performUnitOfWork(workInProgress) {
	  // The current, flushed, state of this fiber is the alternate.
	  // Ideally nothing should rely on this, but relying on it here
	  // means that we don't need an additional field on the work in
	  // progress.
	  var current$$1 = workInProgress.alternate;

	  // See if beginning this work spawns more work.
	  startWorkTimer(workInProgress);
	  {
	    setCurrentFiber(workInProgress);
	  }

	  {
	    stashedWorkInProgressProperties = assignFiberPropertiesInDEV(stashedWorkInProgressProperties, workInProgress);
	  }

	  var next = void 0;
	  {
	    if (workInProgress.mode & ProfileMode) {
	      startProfilerTimer(workInProgress);
	    }

	    next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
	    workInProgress.memoizedProps = workInProgress.pendingProps;

	    if (workInProgress.mode & ProfileMode) {
	      // Record the render duration assuming we didn't bailout (or error).
	      stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
	    }
	  }

	  {
	    resetCurrentFiber();
	    if (isReplayingFailedUnitOfWork) {
	      // Currently replaying a failed unit of work. This should be unreachable,
	      // because the render phase is meant to be idempotent, and it should
	      // have thrown again. Since it didn't, rethrow the original error, so
	      // React's internal stack is not misaligned.
	      rethrowOriginalError();
	    }
	  }

	  if (next === null) {
	    // If this doesn't spawn new work, complete the current work.
	    next = completeUnitOfWork(workInProgress);
	  }

	  ReactCurrentOwner$2.current = null;

	  return next;
	}

	function workLoop(isYieldy) {
	  if (!isYieldy) {
	    // Flush work without yielding
	    while (nextUnitOfWork !== null) {
	      nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
	    }
	  } else {
	    // Flush asynchronous work until there's a higher priority event
	    while (nextUnitOfWork !== null && !shouldYieldToRenderer()) {
	      nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
	    }
	  }
	}

	function renderRoot(root, isYieldy) {
	  !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  flushPassiveEffects();

	  isWorking = true;
	  {
	    ReactCurrentOwner$2.currentDispatcher = DispatcherWithoutHooks;
	  }

	  var expirationTime = root.nextExpirationTimeToWorkOn;

	  // Check if we're starting from a fresh stack, or if we're resuming from
	  // previously yielded work.
	  if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {
	    // Reset the stack and start working from the root.
	    resetStack();
	    nextRoot = root;
	    nextRenderExpirationTime = expirationTime;
	    nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
	    root.pendingCommitExpirationTime = NoWork;

	    {
	      // Determine which interactions this batch of work currently includes,
	      // So that we can accurately attribute time spent working on it,
	      var interactions = new Set();
	      root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
	        if (scheduledExpirationTime >= expirationTime) {
	          scheduledInteractions.forEach(function (interaction) {
	            return interactions.add(interaction);
	          });
	        }
	      });

	      // Store the current set of interactions on the FiberRoot for a few reasons:
	      // We can re-use it in hot functions like renderRoot() without having to recalculate it.
	      // We will also use it in commitWork() to pass to any Profiler onRender() hooks.
	      // This also provides DevTools with a way to access it when the onCommitRoot() hook is called.
	      root.memoizedInteractions = interactions;

	      if (interactions.size > 0) {
	        var subscriber = tracing$1.__subscriberRef.current;
	        if (subscriber !== null) {
	          var threadID = computeThreadID(expirationTime, root.interactionThreadID);
	          try {
	            subscriber.onWorkStarted(interactions, threadID);
	          } catch (error) {
	            // Work thrown by an interaction tracing subscriber should be rethrown,
	            // But only once it's safe (to avoid leaveing the scheduler in an invalid state).
	            // Store the error for now and we'll re-throw in finishRendering().
	            if (!hasUnhandledError) {
	              hasUnhandledError = true;
	              unhandledError = error;
	            }
	          }
	        }
	      }
	    }
	  }

	  var prevInteractions = null;
	  {
	    // We're about to start new traced work.
	    // Restore pending interactions so cascading work triggered during the render phase will be accounted for.
	    prevInteractions = tracing$1.__interactionsRef.current;
	    tracing$1.__interactionsRef.current = root.memoizedInteractions;
	  }

	  var didFatal = false;

	  startWorkLoopTimer(nextUnitOfWork);

	  do {
	    try {
	      workLoop(isYieldy);
	    } catch (thrownValue) {
	      resetContextDependences();
	      resetHooks();

	      // Reset in case completion throws.
	      // This is only used in DEV and when replaying is on.
	      var mayReplay = void 0;
	      {
	        mayReplay = mayReplayFailedUnitOfWork;
	        mayReplayFailedUnitOfWork = true;
	      }

	      if (nextUnitOfWork === null) {
	        // This is a fatal error.
	        didFatal = true;
	        onUncaughtError(thrownValue);
	      } else {
	        if (nextUnitOfWork.mode & ProfileMode) {
	          // Record the time spent rendering before an error was thrown.
	          // This avoids inaccurate Profiler durations in the case of a suspended render.
	          stopProfilerTimerIfRunningAndRecordDelta(nextUnitOfWork, true);
	        }

	        {
	          // Reset global debug state
	          // We assume this is defined in DEV
	          resetCurrentlyProcessingQueue();
	        }

	        {
	          if (mayReplay) {
	            var failedUnitOfWork = nextUnitOfWork;
	            replayUnitOfWork(failedUnitOfWork, thrownValue, isYieldy);
	          }
	        }

	        // TODO: we already know this isn't true in some cases.
	        // At least this shows a nicer error message until we figure out the cause.
	        // https://github.com/facebook/react/issues/12449#issuecomment-386727431
	        !(nextUnitOfWork !== null) ? invariant(false, 'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.') : void 0;

	        var sourceFiber = nextUnitOfWork;
	        var returnFiber = sourceFiber.return;
	        if (returnFiber === null) {
	          // This is the root. The root could capture its own errors. However,
	          // we don't know if it errors before or after we pushed the host
	          // context. This information is needed to avoid a stack mismatch.
	          // Because we're not sure, treat this as a fatal error. We could track
	          // which phase it fails in, but doesn't seem worth it. At least
	          // for now.
	          didFatal = true;
	          onUncaughtError(thrownValue);
	        } else {
	          throwException(root, returnFiber, sourceFiber, thrownValue, nextRenderExpirationTime);
	          nextUnitOfWork = completeUnitOfWork(sourceFiber);
	          continue;
	        }
	      }
	    }
	    break;
	  } while (true);

	  {
	    // Traced work is done for now; restore the previous interactions.
	    tracing$1.__interactionsRef.current = prevInteractions;
	  }

	  // We're done performing work. Time to clean up.
	  isWorking = false;
	  ReactCurrentOwner$2.currentDispatcher = null;
	  resetContextDependences();
	  resetHooks();

	  // Yield back to main thread.
	  if (didFatal) {
	    var _didCompleteRoot = false;
	    stopWorkLoopTimer(interruptedBy, _didCompleteRoot);
	    interruptedBy = null;
	    // There was a fatal error.
	    {
	      resetStackAfterFatalErrorInDev();
	    }
	    // `nextRoot` points to the in-progress root. A non-null value indicates
	    // that we're in the middle of an async render. Set it to null to indicate
	    // there's no more work to be done in the current batch.
	    nextRoot = null;
	    onFatal(root);
	    return;
	  }

	  if (nextUnitOfWork !== null) {
	    // There's still remaining async work in this tree, but we ran out of time
	    // in the current frame. Yield back to the renderer. Unless we're
	    // interrupted by a higher priority update, we'll continue later from where
	    // we left off.
	    var _didCompleteRoot2 = false;
	    stopWorkLoopTimer(interruptedBy, _didCompleteRoot2);
	    interruptedBy = null;
	    onYield(root);
	    return;
	  }

	  // We completed the whole tree.
	  var didCompleteRoot = true;
	  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
	  var rootWorkInProgress = root.current.alternate;
	  !(rootWorkInProgress !== null) ? invariant(false, 'Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  // `nextRoot` points to the in-progress root. A non-null value indicates
	  // that we're in the middle of an async render. Set it to null to indicate
	  // there's no more work to be done in the current batch.
	  nextRoot = null;
	  interruptedBy = null;

	  if (nextRenderDidError) {
	    // There was an error
	    if (hasLowerPriorityWork(root, expirationTime)) {
	      // There's lower priority work. If so, it may have the effect of fixing
	      // the exception that was just thrown. Exit without committing. This is
	      // similar to a suspend, but without a timeout because we're not waiting
	      // for a promise to resolve. React will restart at the lower
	      // priority level.
	      markSuspendedPriorityLevel(root, expirationTime);
	      var suspendedExpirationTime = expirationTime;
	      var rootExpirationTime = root.expirationTime;
	      onSuspend(root, rootWorkInProgress, suspendedExpirationTime, rootExpirationTime, -1 // Indicates no timeout
	      );
	      return;
	    } else if (
	    // There's no lower priority work, but we're rendering asynchronously.
	    // Synchronsouly attempt to render the same level one more time. This is
	    // similar to a suspend, but without a timeout because we're not waiting
	    // for a promise to resolve.
	    !root.didError && isYieldy) {
	      root.didError = true;
	      var _suspendedExpirationTime = root.nextExpirationTimeToWorkOn = expirationTime;
	      var _rootExpirationTime = root.expirationTime = Sync;
	      onSuspend(root, rootWorkInProgress, _suspendedExpirationTime, _rootExpirationTime, -1 // Indicates no timeout
	      );
	      return;
	    }
	  }

	  if (isYieldy && nextLatestAbsoluteTimeoutMs !== -1) {
	    // The tree was suspended.
	    var _suspendedExpirationTime2 = expirationTime;
	    markSuspendedPriorityLevel(root, _suspendedExpirationTime2);

	    // Find the earliest uncommitted expiration time in the tree, including
	    // work that is suspended. The timeout threshold cannot be longer than
	    // the overall expiration.
	    var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, expirationTime);
	    var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
	    if (earliestExpirationTimeMs < nextLatestAbsoluteTimeoutMs) {
	      nextLatestAbsoluteTimeoutMs = earliestExpirationTimeMs;
	    }

	    // Subtract the current time from the absolute timeout to get the number
	    // of milliseconds until the timeout. In other words, convert an absolute
	    // timestamp to a relative time. This is the value that is passed
	    // to `setTimeout`.
	    var currentTimeMs = expirationTimeToMs(requestCurrentTime());
	    var msUntilTimeout = nextLatestAbsoluteTimeoutMs - currentTimeMs;
	    msUntilTimeout = msUntilTimeout < 0 ? 0 : msUntilTimeout;

	    // TODO: Account for the Just Noticeable Difference

	    var _rootExpirationTime2 = root.expirationTime;
	    onSuspend(root, rootWorkInProgress, _suspendedExpirationTime2, _rootExpirationTime2, msUntilTimeout);
	    return;
	  }

	  // Ready to commit.
	  onComplete(root, rootWorkInProgress, expirationTime);
	}

	function captureCommitPhaseError(sourceFiber, value) {
	  var expirationTime = Sync;
	  var fiber = sourceFiber.return;
	  while (fiber !== null) {
	    switch (fiber.tag) {
	      case ClassComponent:
	        var ctor = fiber.type;
	        var instance = fiber.stateNode;
	        if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
	          var errorInfo = createCapturedValue(value, sourceFiber);
	          var update = createClassErrorUpdate(fiber, errorInfo, expirationTime);
	          enqueueUpdate(fiber, update);
	          scheduleWork(fiber, expirationTime);
	          return;
	        }
	        break;
	      case HostRoot:
	        {
	          var _errorInfo = createCapturedValue(value, sourceFiber);
	          var _update = createRootErrorUpdate(fiber, _errorInfo, expirationTime);
	          enqueueUpdate(fiber, _update);
	          scheduleWork(fiber, expirationTime);
	          return;
	        }
	    }
	    fiber = fiber.return;
	  }

	  if (sourceFiber.tag === HostRoot) {
	    // Error was thrown at the root. There is no parent, so the root
	    // itself should capture it.
	    var rootFiber = sourceFiber;
	    var _errorInfo2 = createCapturedValue(value, rootFiber);
	    var _update2 = createRootErrorUpdate(rootFiber, _errorInfo2, expirationTime);
	    enqueueUpdate(rootFiber, _update2);
	    scheduleWork(rootFiber, expirationTime);
	  }
	}

	function computeThreadID(expirationTime, interactionThreadID) {
	  // Interaction threads are unique per root and expiration time.
	  return expirationTime * 1000 + interactionThreadID;
	}

	// Creates a unique async expiration time.
	function computeUniqueAsyncExpiration() {
	  var currentTime = requestCurrentTime();
	  var result = computeAsyncExpiration(currentTime);
	  if (result >= lastUniqueAsyncExpiration) {
	    // Since we assume the current time monotonically increases, we only hit
	    // this branch when computeUniqueAsyncExpiration is fired multiple times
	    // within a 200ms window (or whatever the async bucket size is).
	    result = lastUniqueAsyncExpiration - 1;
	  }
	  lastUniqueAsyncExpiration = result;
	  return lastUniqueAsyncExpiration;
	}

	function computeExpirationForFiber(currentTime, fiber) {
	  var expirationTime = void 0;
	  if (expirationContext !== NoWork) {
	    // An explicit expiration context was set;
	    expirationTime = expirationContext;
	  } else if (isWorking) {
	    if (isCommitting$1) {
	      // Updates that occur during the commit phase should have sync priority
	      // by default.
	      expirationTime = Sync;
	    } else {
	      // Updates during the render phase should expire at the same time as
	      // the work that is being rendered.
	      expirationTime = nextRenderExpirationTime;
	    }
	  } else {
	    // No explicit expiration context was set, and we're not currently
	    // performing work. Calculate a new expiration time.
	    if (fiber.mode & ConcurrentMode) {
	      if (isBatchingInteractiveUpdates) {
	        // This is an interactive update
	        expirationTime = computeInteractiveExpiration(currentTime);
	      } else {
	        // This is an async update
	        expirationTime = computeAsyncExpiration(currentTime);
	      }
	      // If we're in the middle of rendering a tree, do not update at the same
	      // expiration time that is already rendering.
	      if (nextRoot !== null && expirationTime === nextRenderExpirationTime) {
	        expirationTime -= 1;
	      }
	    } else {
	      // This is a sync update
	      expirationTime = Sync;
	    }
	  }
	  if (isBatchingInteractiveUpdates) {
	    // This is an interactive update. Keep track of the lowest pending
	    // interactive expiration time. This allows us to synchronously flush
	    // all interactive updates when needed.
	    if (lowestPriorityPendingInteractiveExpirationTime === NoWork || expirationTime < lowestPriorityPendingInteractiveExpirationTime) {
	      lowestPriorityPendingInteractiveExpirationTime = expirationTime;
	    }
	  }
	  return expirationTime;
	}

	function renderDidSuspend(root, absoluteTimeoutMs, suspendedTime) {
	  // Schedule the timeout.
	  if (absoluteTimeoutMs >= 0 && nextLatestAbsoluteTimeoutMs < absoluteTimeoutMs) {
	    nextLatestAbsoluteTimeoutMs = absoluteTimeoutMs;
	  }
	}

	function renderDidError() {
	  nextRenderDidError = true;
	}

	function retrySuspendedRoot(root, boundaryFiber, sourceFiber, suspendedTime) {
	  var retryTime = void 0;

	  if (isPriorityLevelSuspended(root, suspendedTime)) {
	    // Ping at the original level
	    retryTime = suspendedTime;

	    markPingedPriorityLevel(root, retryTime);
	  } else {
	    // Suspense already timed out. Compute a new expiration time
	    var currentTime = requestCurrentTime();
	    retryTime = computeExpirationForFiber(currentTime, boundaryFiber);
	    markPendingPriorityLevel(root, retryTime);
	  }

	  // TODO: If the suspense fiber has already rendered the primary children
	  // without suspending (that is, all of the promises have already resolved),
	  // we should not trigger another update here. One case this happens is when
	  // we are in sync mode and a single promise is thrown both on initial render
	  // and on update; we attach two .then(retrySuspendedRoot) callbacks and each
	  // one performs Sync work, rerendering the Suspense.

	  if ((boundaryFiber.mode & ConcurrentMode) !== NoContext) {
	    if (root === nextRoot && nextRenderExpirationTime === suspendedTime) {
	      // Received a ping at the same priority level at which we're currently
	      // rendering. Restart from the root.
	      nextRoot = null;
	    }
	  }

	  scheduleWorkToRoot(boundaryFiber, retryTime);
	  if ((boundaryFiber.mode & ConcurrentMode) === NoContext) {
	    // Outside of concurrent mode, we must schedule an update on the source
	    // fiber, too, since it already committed in an inconsistent state and
	    // therefore does not have any pending work.
	    scheduleWorkToRoot(sourceFiber, retryTime);
	    var sourceTag = sourceFiber.tag;
	    if (sourceTag === ClassComponent && sourceFiber.stateNode !== null) {
	      // When we try rendering again, we should not reuse the current fiber,
	      // since it's known to be in an inconsistent state. Use a force updte to
	      // prevent a bail out.
	      var update = createUpdate(retryTime);
	      update.tag = ForceUpdate;
	      enqueueUpdate(sourceFiber, update);
	    }
	  }

	  var rootExpirationTime = root.expirationTime;
	  if (rootExpirationTime !== NoWork) {
	    requestWork(root, rootExpirationTime);
	  }
	}

	function scheduleWorkToRoot(fiber, expirationTime) {
	  recordScheduleUpdate();

	  {
	    if (fiber.tag === ClassComponent) {
	      var instance = fiber.stateNode;
	      warnAboutInvalidUpdates(instance);
	    }
	  }

	  // Update the source fiber's expiration time
	  if (fiber.expirationTime < expirationTime) {
	    fiber.expirationTime = expirationTime;
	  }
	  var alternate = fiber.alternate;
	  if (alternate !== null && alternate.expirationTime < expirationTime) {
	    alternate.expirationTime = expirationTime;
	  }
	  // Walk the parent path to the root and update the child expiration time.
	  var node = fiber.return;
	  var root = null;
	  if (node === null && fiber.tag === HostRoot) {
	    root = fiber.stateNode;
	  } else {
	    while (node !== null) {
	      alternate = node.alternate;
	      if (node.childExpirationTime < expirationTime) {
	        node.childExpirationTime = expirationTime;
	        if (alternate !== null && alternate.childExpirationTime < expirationTime) {
	          alternate.childExpirationTime = expirationTime;
	        }
	      } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
	        alternate.childExpirationTime = expirationTime;
	      }
	      if (node.return === null && node.tag === HostRoot) {
	        root = node.stateNode;
	        break;
	      }
	      node = node.return;
	    }
	  }

	  {
	    if (root !== null) {
	      var interactions = tracing$1.__interactionsRef.current;
	      if (interactions.size > 0) {
	        var pendingInteractionMap = root.pendingInteractionMap;
	        var pendingInteractions = pendingInteractionMap.get(expirationTime);
	        if (pendingInteractions != null) {
	          interactions.forEach(function (interaction) {
	            if (!pendingInteractions.has(interaction)) {
	              // Update the pending async work count for previously unscheduled interaction.
	              interaction.__count++;
	            }

	            pendingInteractions.add(interaction);
	          });
	        } else {
	          pendingInteractionMap.set(expirationTime, new Set(interactions));

	          // Update the pending async work count for the current interactions.
	          interactions.forEach(function (interaction) {
	            interaction.__count++;
	          });
	        }

	        var subscriber = tracing$1.__subscriberRef.current;
	        if (subscriber !== null) {
	          var threadID = computeThreadID(expirationTime, root.interactionThreadID);
	          subscriber.onWorkScheduled(interactions, threadID);
	        }
	      }
	    }
	  }
	  return root;
	}

	function scheduleWork(fiber, expirationTime) {
	  var root = scheduleWorkToRoot(fiber, expirationTime);
	  if (root === null) {
	    {
	      switch (fiber.tag) {
	        case ClassComponent:
	          warnAboutUpdateOnUnmounted(fiber, true);
	          break;
	        case FunctionComponent:
	        case ForwardRef:
	        case MemoComponent:
	        case SimpleMemoComponent:
	          warnAboutUpdateOnUnmounted(fiber, false);
	          break;
	      }
	    }
	    return;
	  }

	  if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime > nextRenderExpirationTime) {
	    // This is an interruption. (Used for performance tracking.)
	    interruptedBy = fiber;
	    resetStack();
	  }
	  markPendingPriorityLevel(root, expirationTime);
	  if (
	  // If we're in the render phase, we don't need to schedule this root
	  // for an update, because we'll do it before we exit...
	  !isWorking || isCommitting$1 ||
	  // ...unless this is a different root than the one we're rendering.
	  nextRoot !== root) {
	    var rootExpirationTime = root.expirationTime;
	    requestWork(root, rootExpirationTime);
	  }
	  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
	    // Reset this back to zero so subsequent updates don't throw.
	    nestedUpdateCount = 0;
	    invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
	  }
	}

	function syncUpdates(fn, a, b, c, d) {
	  var previousExpirationContext = expirationContext;
	  expirationContext = Sync;
	  try {
	    return fn(a, b, c, d);
	  } finally {
	    expirationContext = previousExpirationContext;
	  }
	}

	// TODO: Everything below this is written as if it has been lifted to the
	// renderers. I'll do this in a follow-up.

	// Linked-list of roots
	var firstScheduledRoot = null;
	var lastScheduledRoot = null;

	var callbackExpirationTime = NoWork;
	var callbackID = void 0;
	var isRendering = false;
	var nextFlushedRoot = null;
	var nextFlushedExpirationTime = NoWork;
	var lowestPriorityPendingInteractiveExpirationTime = NoWork;
	var hasUnhandledError = false;
	var unhandledError = null;

	var isBatchingUpdates = false;
	var isUnbatchingUpdates = false;
	var isBatchingInteractiveUpdates = false;

	var completedBatches = null;

	var originalStartTimeMs = scheduler$1.unstable_now();
	var currentRendererTime = msToExpirationTime(originalStartTimeMs);
	var currentSchedulerTime = currentRendererTime;

	// Use these to prevent an infinite loop of nested updates
	var NESTED_UPDATE_LIMIT = 50;
	var nestedUpdateCount = 0;
	var lastCommittedRootDuringThisBatch = null;

	function recomputeCurrentRendererTime() {
	  var currentTimeMs = scheduler$1.unstable_now() - originalStartTimeMs;
	  currentRendererTime = msToExpirationTime(currentTimeMs);
	}

	function scheduleCallbackWithExpirationTime(root, expirationTime) {
	  if (callbackExpirationTime !== NoWork) {
	    // A callback is already scheduled. Check its expiration time (timeout).
	    if (expirationTime < callbackExpirationTime) {
	      // Existing callback has sufficient timeout. Exit.
	      return;
	    } else {
	      if (callbackID !== null) {
	        // Existing callback has insufficient timeout. Cancel and schedule a
	        // new one.
	        scheduler$1.unstable_cancelCallback(callbackID);
	      }
	    }
	    // The request callback timer is already running. Don't start a new one.
	  } else {
	    startRequestCallbackTimer();
	  }

	  callbackExpirationTime = expirationTime;
	  var currentMs = scheduler$1.unstable_now() - originalStartTimeMs;
	  var expirationTimeMs = expirationTimeToMs(expirationTime);
	  var timeout = expirationTimeMs - currentMs;
	  callbackID = scheduler$1.unstable_scheduleCallback(performAsyncWork, { timeout: timeout });
	}

	// For every call to renderRoot, one of onFatal, onComplete, onSuspend, and
	// onYield is called upon exiting. We use these in lieu of returning a tuple.
	// I've also chosen not to inline them into renderRoot because these will
	// eventually be lifted into the renderer.
	function onFatal(root) {
	  root.finishedWork = null;
	}

	function onComplete(root, finishedWork, expirationTime) {
	  root.pendingCommitExpirationTime = expirationTime;
	  root.finishedWork = finishedWork;
	}

	function onSuspend(root, finishedWork, suspendedExpirationTime, rootExpirationTime, msUntilTimeout) {
	  root.expirationTime = rootExpirationTime;
	  if (msUntilTimeout === 0 && !shouldYieldToRenderer()) {
	    // Don't wait an additional tick. Commit the tree immediately.
	    root.pendingCommitExpirationTime = suspendedExpirationTime;
	    root.finishedWork = finishedWork;
	  } else if (msUntilTimeout > 0) {
	    // Wait `msUntilTimeout` milliseconds before committing.
	    root.timeoutHandle = scheduleTimeout(onTimeout.bind(null, root, finishedWork, suspendedExpirationTime), msUntilTimeout);
	  }
	}

	function onYield(root) {
	  root.finishedWork = null;
	}

	function onTimeout(root, finishedWork, suspendedExpirationTime) {
	  // The root timed out. Commit it.
	  root.pendingCommitExpirationTime = suspendedExpirationTime;
	  root.finishedWork = finishedWork;
	  // Read the current time before entering the commit phase. We can be
	  // certain this won't cause tearing related to batching of event updates
	  // because we're at the top of a timer event.
	  recomputeCurrentRendererTime();
	  currentSchedulerTime = currentRendererTime;
	  flushRoot(root, suspendedExpirationTime);
	}

	function onCommit(root, expirationTime) {
	  root.expirationTime = expirationTime;
	  root.finishedWork = null;
	}

	function requestCurrentTime() {
	  // requestCurrentTime is called by the scheduler to compute an expiration
	  // time.
	  //
	  // Expiration times are computed by adding to the current time (the start
	  // time). However, if two updates are scheduled within the same event, we
	  // should treat their start times as simultaneous, even if the actual clock
	  // time has advanced between the first and second call.

	  // In other words, because expiration times determine how updates are batched,
	  // we want all updates of like priority that occur within the same event to
	  // receive the same expiration time. Otherwise we get tearing.
	  //
	  // We keep track of two separate times: the current "renderer" time and the
	  // current "scheduler" time. The renderer time can be updated whenever; it
	  // only exists to minimize the calls performance.now.
	  //
	  // But the scheduler time can only be updated if there's no pending work, or
	  // if we know for certain that we're not in the middle of an event.

	  if (isRendering) {
	    // We're already rendering. Return the most recently read time.
	    return currentSchedulerTime;
	  }
	  // Check if there's pending work.
	  findHighestPriorityRoot();
	  if (nextFlushedExpirationTime === NoWork || nextFlushedExpirationTime === Never) {
	    // If there's no pending work, or if the pending work is offscreen, we can
	    // read the current time without risk of tearing.
	    recomputeCurrentRendererTime();
	    currentSchedulerTime = currentRendererTime;
	    return currentSchedulerTime;
	  }
	  // There's already pending work. We might be in the middle of a browser
	  // event. If we were to read the current time, it could cause multiple updates
	  // within the same event to receive different expiration times, leading to
	  // tearing. Return the last read time. During the next idle callback, the
	  // time will be updated.
	  return currentSchedulerTime;
	}

	// requestWork is called by the scheduler whenever a root receives an update.
	// It's up to the renderer to call renderRoot at some point in the future.
	function requestWork(root, expirationTime) {
	  addRootToSchedule(root, expirationTime);
	  if (isRendering) {
	    // Prevent reentrancy. Remaining work will be scheduled at the end of
	    // the currently rendering batch.
	    return;
	  }

	  if (isBatchingUpdates) {
	    // Flush work at the end of the batch.
	    if (isUnbatchingUpdates) {
	      // ...unless we're inside unbatchedUpdates, in which case we should
	      // flush it now.
	      nextFlushedRoot = root;
	      nextFlushedExpirationTime = Sync;
	      performWorkOnRoot(root, Sync, false);
	    }
	    return;
	  }

	  // TODO: Get rid of Sync and use current time?
	  if (expirationTime === Sync) {
	    performSyncWork();
	  } else {
	    scheduleCallbackWithExpirationTime(root, expirationTime);
	  }
	}

	function addRootToSchedule(root, expirationTime) {
	  // Add the root to the schedule.
	  // Check if this root is already part of the schedule.
	  if (root.nextScheduledRoot === null) {
	    // This root is not already scheduled. Add it.
	    root.expirationTime = expirationTime;
	    if (lastScheduledRoot === null) {
	      firstScheduledRoot = lastScheduledRoot = root;
	      root.nextScheduledRoot = root;
	    } else {
	      lastScheduledRoot.nextScheduledRoot = root;
	      lastScheduledRoot = root;
	      lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
	    }
	  } else {
	    // This root is already scheduled, but its priority may have increased.
	    var remainingExpirationTime = root.expirationTime;
	    if (expirationTime > remainingExpirationTime) {
	      // Update the priority.
	      root.expirationTime = expirationTime;
	    }
	  }
	}

	function findHighestPriorityRoot() {
	  var highestPriorityWork = NoWork;
	  var highestPriorityRoot = null;
	  if (lastScheduledRoot !== null) {
	    var previousScheduledRoot = lastScheduledRoot;
	    var root = firstScheduledRoot;
	    while (root !== null) {
	      var remainingExpirationTime = root.expirationTime;
	      if (remainingExpirationTime === NoWork) {
	        // This root no longer has work. Remove it from the scheduler.

	        // TODO: This check is redudant, but Flow is confused by the branch
	        // below where we set lastScheduledRoot to null, even though we break
	        // from the loop right after.
	        !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	        if (root === root.nextScheduledRoot) {
	          // This is the only root in the list.
	          root.nextScheduledRoot = null;
	          firstScheduledRoot = lastScheduledRoot = null;
	          break;
	        } else if (root === firstScheduledRoot) {
	          // This is the first root in the list.
	          var next = root.nextScheduledRoot;
	          firstScheduledRoot = next;
	          lastScheduledRoot.nextScheduledRoot = next;
	          root.nextScheduledRoot = null;
	        } else if (root === lastScheduledRoot) {
	          // This is the last root in the list.
	          lastScheduledRoot = previousScheduledRoot;
	          lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
	          root.nextScheduledRoot = null;
	          break;
	        } else {
	          previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
	          root.nextScheduledRoot = null;
	        }
	        root = previousScheduledRoot.nextScheduledRoot;
	      } else {
	        if (remainingExpirationTime > highestPriorityWork) {
	          // Update the priority, if it's higher
	          highestPriorityWork = remainingExpirationTime;
	          highestPriorityRoot = root;
	        }
	        if (root === lastScheduledRoot) {
	          break;
	        }
	        if (highestPriorityWork === Sync) {
	          // Sync is highest priority by definition so
	          // we can stop searching.
	          break;
	        }
	        previousScheduledRoot = root;
	        root = root.nextScheduledRoot;
	      }
	    }
	  }

	  nextFlushedRoot = highestPriorityRoot;
	  nextFlushedExpirationTime = highestPriorityWork;
	}

	// TODO: This wrapper exists because many of the older tests (the ones that use
	// flushDeferredPri) rely on the number of times `shouldYield` is called. We
	// should get rid of it.
	var didYield = false;
	function shouldYieldToRenderer() {
	  if (didYield) {
	    return true;
	  }
	  if (scheduler$1.unstable_shouldYield()) {
	    didYield = true;
	    return true;
	  }
	  return false;
	}

	function performAsyncWork() {
	  try {
	    if (!shouldYieldToRenderer()) {
	      // The callback timed out. That means at least one update has expired.
	      // Iterate through the root schedule. If they contain expired work, set
	      // the next render expiration time to the current time. This has the effect
	      // of flushing all expired work in a single batch, instead of flushing each
	      // level one at a time.
	      if (firstScheduledRoot !== null) {
	        recomputeCurrentRendererTime();
	        var root = firstScheduledRoot;
	        do {
	          didExpireAtExpirationTime(root, currentRendererTime);
	          // The root schedule is circular, so this is never null.
	          root = root.nextScheduledRoot;
	        } while (root !== firstScheduledRoot);
	      }
	    }
	    performWork(NoWork, true);
	  } finally {
	    didYield = false;
	  }
	}

	function performSyncWork() {
	  performWork(Sync, false);
	}

	function performWork(minExpirationTime, isYieldy) {
	  // Keep working on roots until there's no more work, or until there's a higher
	  // priority event.
	  findHighestPriorityRoot();

	  if (isYieldy) {
	    recomputeCurrentRendererTime();
	    currentSchedulerTime = currentRendererTime;

	    {
	      var didExpire = nextFlushedExpirationTime > currentRendererTime;
	      var timeout = expirationTimeToMs(nextFlushedExpirationTime);
	      stopRequestCallbackTimer(didExpire, timeout);
	    }

	    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime && !(didYield && currentRendererTime > nextFlushedExpirationTime)) {
	      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, currentRendererTime > nextFlushedExpirationTime);
	      findHighestPriorityRoot();
	      recomputeCurrentRendererTime();
	      currentSchedulerTime = currentRendererTime;
	    }
	  } else {
	    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime) {
	      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false);
	      findHighestPriorityRoot();
	    }
	  }

	  // We're done flushing work. Either we ran out of time in this callback,
	  // or there's no more work left with sufficient priority.

	  // If we're inside a callback, set this to false since we just completed it.
	  if (isYieldy) {
	    callbackExpirationTime = NoWork;
	    callbackID = null;
	  }
	  // If there's work left over, schedule a new callback.
	  if (nextFlushedExpirationTime !== NoWork) {
	    scheduleCallbackWithExpirationTime(nextFlushedRoot, nextFlushedExpirationTime);
	  }

	  // Clean-up.
	  finishRendering();
	}

	function flushRoot(root, expirationTime) {
	  !!isRendering ? invariant(false, 'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.') : void 0;
	  // Perform work on root as if the given expiration time is the current time.
	  // This has the effect of synchronously flushing all work up to and
	  // including the given time.
	  nextFlushedRoot = root;
	  nextFlushedExpirationTime = expirationTime;
	  performWorkOnRoot(root, expirationTime, false);
	  // Flush any sync work that was scheduled by lifecycles
	  performSyncWork();
	}

	function finishRendering() {
	  nestedUpdateCount = 0;
	  lastCommittedRootDuringThisBatch = null;

	  if (completedBatches !== null) {
	    var batches = completedBatches;
	    completedBatches = null;
	    for (var i = 0; i < batches.length; i++) {
	      var batch = batches[i];
	      try {
	        batch._onComplete();
	      } catch (error) {
	        if (!hasUnhandledError) {
	          hasUnhandledError = true;
	          unhandledError = error;
	        }
	      }
	    }
	  }

	  if (hasUnhandledError) {
	    var error = unhandledError;
	    unhandledError = null;
	    hasUnhandledError = false;
	    throw error;
	  }
	}

	function performWorkOnRoot(root, expirationTime, isYieldy) {
	  !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  isRendering = true;

	  // Check if this is async work or sync/expired work.
	  if (!isYieldy) {
	    // Flush work without yielding.
	    // TODO: Non-yieldy work does not necessarily imply expired work. A renderer
	    // may want to perform some work without yielding, but also without
	    // requiring the root to complete (by triggering placeholders).

	    var finishedWork = root.finishedWork;
	    if (finishedWork !== null) {
	      // This root is already complete. We can commit it.
	      completeRoot(root, finishedWork, expirationTime);
	    } else {
	      root.finishedWork = null;
	      // If this root previously suspended, clear its existing timeout, since
	      // we're about to try rendering again.
	      var timeoutHandle = root.timeoutHandle;
	      if (timeoutHandle !== noTimeout) {
	        root.timeoutHandle = noTimeout;
	        // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
	        cancelTimeout(timeoutHandle);
	      }
	      renderRoot(root, isYieldy);
	      finishedWork = root.finishedWork;
	      if (finishedWork !== null) {
	        // We've completed the root. Commit it.
	        completeRoot(root, finishedWork, expirationTime);
	      }
	    }
	  } else {
	    // Flush async work.
	    var _finishedWork = root.finishedWork;
	    if (_finishedWork !== null) {
	      // This root is already complete. We can commit it.
	      completeRoot(root, _finishedWork, expirationTime);
	    } else {
	      root.finishedWork = null;
	      // If this root previously suspended, clear its existing timeout, since
	      // we're about to try rendering again.
	      var _timeoutHandle = root.timeoutHandle;
	      if (_timeoutHandle !== noTimeout) {
	        root.timeoutHandle = noTimeout;
	        // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
	        cancelTimeout(_timeoutHandle);
	      }
	      renderRoot(root, isYieldy);
	      _finishedWork = root.finishedWork;
	      if (_finishedWork !== null) {
	        // We've completed the root. Check the if we should yield one more time
	        // before committing.
	        if (!shouldYieldToRenderer()) {
	          // Still time left. Commit the root.
	          completeRoot(root, _finishedWork, expirationTime);
	        } else {
	          // There's no time left. Mark this root as complete. We'll come
	          // back and commit it later.
	          root.finishedWork = _finishedWork;
	        }
	      }
	    }
	  }

	  isRendering = false;
	}

	function completeRoot(root, finishedWork, expirationTime) {
	  // Check if there's a batch that matches this expiration time.
	  var firstBatch = root.firstBatch;
	  if (firstBatch !== null && firstBatch._expirationTime >= expirationTime) {
	    if (completedBatches === null) {
	      completedBatches = [firstBatch];
	    } else {
	      completedBatches.push(firstBatch);
	    }
	    if (firstBatch._defer) {
	      // This root is blocked from committing by a batch. Unschedule it until
	      // we receive another update.
	      root.finishedWork = finishedWork;
	      root.expirationTime = NoWork;
	      return;
	    }
	  }

	  // Commit the root.
	  root.finishedWork = null;

	  // Check if this is a nested update (a sync update scheduled during the
	  // commit phase).
	  if (root === lastCommittedRootDuringThisBatch) {
	    // If the next root is the same as the previous root, this is a nested
	    // update. To prevent an infinite loop, increment the nested update count.
	    nestedUpdateCount++;
	  } else {
	    // Reset whenever we switch roots.
	    lastCommittedRootDuringThisBatch = root;
	    nestedUpdateCount = 0;
	  }
	  commitRoot(root, finishedWork);
	}

	function onUncaughtError(error) {
	  !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  // Unschedule this root so we don't work on it again until there's
	  // another update.
	  nextFlushedRoot.expirationTime = NoWork;
	  if (!hasUnhandledError) {
	    hasUnhandledError = true;
	    unhandledError = error;
	  }
	}

	// TODO: Batching should be implemented at the renderer level, not inside
	// the reconciler.
	function batchedUpdates$1(fn, a) {
	  var previousIsBatchingUpdates = isBatchingUpdates;
	  isBatchingUpdates = true;
	  try {
	    return fn(a);
	  } finally {
	    isBatchingUpdates = previousIsBatchingUpdates;
	    if (!isBatchingUpdates && !isRendering) {
	      performSyncWork();
	    }
	  }
	}

	// TODO: Batching should be implemented at the renderer level, not inside
	// the reconciler.
	function unbatchedUpdates(fn, a) {
	  if (isBatchingUpdates && !isUnbatchingUpdates) {
	    isUnbatchingUpdates = true;
	    try {
	      return fn(a);
	    } finally {
	      isUnbatchingUpdates = false;
	    }
	  }
	  return fn(a);
	}

	// TODO: Batching should be implemented at the renderer level, not within
	// the reconciler.
	function flushSync(fn, a) {
	  !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
	  var previousIsBatchingUpdates = isBatchingUpdates;
	  isBatchingUpdates = true;
	  try {
	    return syncUpdates(fn, a);
	  } finally {
	    isBatchingUpdates = previousIsBatchingUpdates;
	    performSyncWork();
	  }
	}

	function interactiveUpdates$1(fn, a, b) {
	  if (isBatchingInteractiveUpdates) {
	    return fn(a, b);
	  }
	  // If there are any pending interactive updates, synchronously flush them.
	  // This needs to happen before we read any handlers, because the effect of
	  // the previous event may influence which handlers are called during
	  // this event.
	  if (!isBatchingUpdates && !isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
	    // Synchronously flush pending interactive updates.
	    performWork(lowestPriorityPendingInteractiveExpirationTime, false);
	    lowestPriorityPendingInteractiveExpirationTime = NoWork;
	  }
	  var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates;
	  var previousIsBatchingUpdates = isBatchingUpdates;
	  isBatchingInteractiveUpdates = true;
	  isBatchingUpdates = true;
	  try {
	    return fn(a, b);
	  } finally {
	    isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates;
	    isBatchingUpdates = previousIsBatchingUpdates;
	    if (!isBatchingUpdates && !isRendering) {
	      performSyncWork();
	    }
	  }
	}

	function flushInteractiveUpdates$1() {
	  if (!isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
	    // Synchronously flush pending interactive updates.
	    performWork(lowestPriorityPendingInteractiveExpirationTime, false);
	    lowestPriorityPendingInteractiveExpirationTime = NoWork;
	  }
	}

	function flushControlled(fn) {
	  var previousIsBatchingUpdates = isBatchingUpdates;
	  isBatchingUpdates = true;
	  try {
	    syncUpdates(fn);
	  } finally {
	    isBatchingUpdates = previousIsBatchingUpdates;
	    if (!isBatchingUpdates && !isRendering) {
	      performSyncWork();
	    }
	  }
	}

	// 0 is PROD, 1 is DEV.
	// Might add PROFILE later.


	var didWarnAboutNestedUpdates = void 0;
	var didWarnAboutFindNodeInStrictMode = void 0;

	{
	  didWarnAboutNestedUpdates = false;
	  didWarnAboutFindNodeInStrictMode = {};
	}

	function getContextForSubtree(parentComponent) {
	  if (!parentComponent) {
	    return emptyContextObject;
	  }

	  var fiber = get(parentComponent);
	  var parentContext = findCurrentUnmaskedContext(fiber);

	  if (fiber.tag === ClassComponent) {
	    var Component = fiber.type;
	    if (isContextProvider(Component)) {
	      return processChildContext(fiber, Component, parentContext);
	    }
	  }

	  return parentContext;
	}

	function scheduleRootUpdate(current$$1, element, expirationTime, callback) {
	  {
	    if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
	      didWarnAboutNestedUpdates = true;
	      warningWithoutStack$1(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
	    }
	  }

	  var update = createUpdate(expirationTime);
	  // Caution: React DevTools currently depends on this property
	  // being called "element".
	  update.payload = { element: element };

	  callback = callback === undefined ? null : callback;
	  if (callback !== null) {
	    !(typeof callback === 'function') ? warningWithoutStack$1(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;
	    update.callback = callback;
	  }

	  flushPassiveEffects();
	  enqueueUpdate(current$$1, update);
	  scheduleWork(current$$1, expirationTime);

	  return expirationTime;
	}

	function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
	  // TODO: If this is a nested container, this won't be the root.
	  var current$$1 = container.current;

	  var context = getContextForSubtree(parentComponent);
	  if (container.context === null) {
	    container.context = context;
	  } else {
	    container.pendingContext = context;
	  }

	  return scheduleRootUpdate(current$$1, element, expirationTime, callback);
	}

	function findHostInstance(component) {
	  var fiber = get(component);
	  if (fiber === undefined) {
	    if (typeof component.render === 'function') {
	      invariant(false, 'Unable to find node on an unmounted component.');
	    } else {
	      invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
	    }
	  }
	  var hostFiber = findCurrentHostFiber(fiber);
	  if (hostFiber === null) {
	    return null;
	  }
	  return hostFiber.stateNode;
	}

	function findHostInstanceWithWarning(component, methodName) {
	  {
	    var fiber = get(component);
	    if (fiber === undefined) {
	      if (typeof component.render === 'function') {
	        invariant(false, 'Unable to find node on an unmounted component.');
	      } else {
	        invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
	      }
	    }
	    var hostFiber = findCurrentHostFiber(fiber);
	    if (hostFiber === null) {
	      return null;
	    }
	    if (hostFiber.mode & StrictMode) {
	      var componentName = getComponentName(fiber.type) || 'Component';
	      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
	        didWarnAboutFindNodeInStrictMode[componentName] = true;
	        if (fiber.mode & StrictMode) {
	          warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
	        } else {
	          warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
	        }
	      }
	    }
	    return hostFiber.stateNode;
	  }
	  return findHostInstance(component);
	}

	function createContainer(containerInfo, isConcurrent, hydrate) {
	  return createFiberRoot(containerInfo, isConcurrent, hydrate);
	}

	function updateContainer(element, container, parentComponent, callback) {
	  var current$$1 = container.current;
	  var currentTime = requestCurrentTime();
	  var expirationTime = computeExpirationForFiber(currentTime, current$$1);
	  return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback);
	}

	function getPublicRootInstance(container) {
	  var containerFiber = container.current;
	  if (!containerFiber.child) {
	    return null;
	  }
	  switch (containerFiber.child.tag) {
	    case HostComponent:
	      return getPublicInstance(containerFiber.child.stateNode);
	    default:
	      return containerFiber.child.stateNode;
	  }
	}

	function findHostInstanceWithNoPortals(fiber) {
	  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
	  if (hostFiber === null) {
	    return null;
	  }
	  return hostFiber.stateNode;
	}

	function injectIntoDevTools(devToolsConfig) {
	  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;

	  return injectInternals(_assign({}, devToolsConfig, {
	    findHostInstanceByFiber: function (fiber) {
	      var hostFiber = findCurrentHostFiber(fiber);
	      if (hostFiber === null) {
	        return null;
	      }
	      return hostFiber.stateNode;
	    },
	    findFiberByHostInstance: function (instance) {
	      if (!findFiberByHostInstance) {
	        // Might not be implemented by the renderer.
	        return null;
	      }
	      return findFiberByHostInstance(instance);
	    }
	  }));
	}

	// This file intentionally does *not* have the Flow annotation.
	// Don't add it. See `./inline-typed.js` for an explanation.

	function createPortal$1(children, containerInfo,
	// TODO: figure out the API for cross-renderer implementation.
	implementation) {
	  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

	  return {
	    // This tag allow us to uniquely identify this as a React Portal
	    $$typeof: REACT_PORTAL_TYPE,
	    key: key == null ? null : '' + key,
	    children: children,
	    containerInfo: containerInfo,
	    implementation: implementation
	  };
	}

	// TODO: this is special because it gets imported during build.

	var ReactVersion = '16.6.3';

	// TODO: This type is shared between the reconciler and ReactDOM, but will
	// eventually be lifted out to the renderer.
	var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;

	var topLevelUpdateWarnings = void 0;
	var warnOnInvalidCallback = void 0;
	var didWarnAboutUnstableCreatePortal = false;

	{
	  if (typeof Map !== 'function' ||
	  // $FlowIssue Flow incorrectly thinks Map has no prototype
	  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' ||
	  // $FlowIssue Flow incorrectly thinks Set has no prototype
	  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
	    warningWithoutStack$1(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	  }

	  topLevelUpdateWarnings = function (container) {
	    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
	      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
	      if (hostInstance) {
	        !(hostInstance.parentNode === container) ? warningWithoutStack$1(false, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.') : void 0;
	      }
	    }

	    var isRootRenderedBySomeReact = !!container._reactRootContainer;
	    var rootEl = getReactRootElementInContainer(container);
	    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

	    !(!hasNonRootReactChild || isRootRenderedBySomeReact) ? warningWithoutStack$1(false, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

	    !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY') ? warningWithoutStack$1(false, 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
	  };

	  warnOnInvalidCallback = function (callback, callerName) {
	    !(callback === null || typeof callback === 'function') ? warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback) : void 0;
	  };
	}

	setRestoreImplementation(restoreControlledState$1);

	function ReactBatch(root) {
	  var expirationTime = computeUniqueAsyncExpiration();
	  this._expirationTime = expirationTime;
	  this._root = root;
	  this._next = null;
	  this._callbacks = null;
	  this._didComplete = false;
	  this._hasChildren = false;
	  this._children = null;
	  this._defer = true;
	}
	ReactBatch.prototype.render = function (children) {
	  !this._defer ? invariant(false, 'batch.render: Cannot render a batch that already committed.') : void 0;
	  this._hasChildren = true;
	  this._children = children;
	  var internalRoot = this._root._internalRoot;
	  var expirationTime = this._expirationTime;
	  var work = new ReactWork();
	  updateContainerAtExpirationTime(children, internalRoot, null, expirationTime, work._onCommit);
	  return work;
	};
	ReactBatch.prototype.then = function (onComplete) {
	  if (this._didComplete) {
	    onComplete();
	    return;
	  }
	  var callbacks = this._callbacks;
	  if (callbacks === null) {
	    callbacks = this._callbacks = [];
	  }
	  callbacks.push(onComplete);
	};
	ReactBatch.prototype.commit = function () {
	  var internalRoot = this._root._internalRoot;
	  var firstBatch = internalRoot.firstBatch;
	  !(this._defer && firstBatch !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;

	  if (!this._hasChildren) {
	    // This batch is empty. Return.
	    this._next = null;
	    this._defer = false;
	    return;
	  }

	  var expirationTime = this._expirationTime;

	  // Ensure this is the first batch in the list.
	  if (firstBatch !== this) {
	    // This batch is not the earliest batch. We need to move it to the front.
	    // Update its expiration time to be the expiration time of the earliest
	    // batch, so that we can flush it without flushing the other batches.
	    if (this._hasChildren) {
	      expirationTime = this._expirationTime = firstBatch._expirationTime;
	      // Rendering this batch again ensures its children will be the final state
	      // when we flush (updates are processed in insertion order: last
	      // update wins).
	      // TODO: This forces a restart. Should we print a warning?
	      this.render(this._children);
	    }

	    // Remove the batch from the list.
	    var previous = null;
	    var batch = firstBatch;
	    while (batch !== this) {
	      previous = batch;
	      batch = batch._next;
	    }
	    !(previous !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;
	    previous._next = batch._next;

	    // Add it to the front.
	    this._next = firstBatch;
	    firstBatch = internalRoot.firstBatch = this;
	  }

	  // Synchronously flush all the work up to this batch's expiration time.
	  this._defer = false;
	  flushRoot(internalRoot, expirationTime);

	  // Pop the batch from the list.
	  var next = this._next;
	  this._next = null;
	  firstBatch = internalRoot.firstBatch = next;

	  // Append the next earliest batch's children to the update queue.
	  if (firstBatch !== null && firstBatch._hasChildren) {
	    firstBatch.render(firstBatch._children);
	  }
	};
	ReactBatch.prototype._onComplete = function () {
	  if (this._didComplete) {
	    return;
	  }
	  this._didComplete = true;
	  var callbacks = this._callbacks;
	  if (callbacks === null) {
	    return;
	  }
	  // TODO: Error handling.
	  for (var i = 0; i < callbacks.length; i++) {
	    var _callback = callbacks[i];
	    _callback();
	  }
	};

	function ReactWork() {
	  this._callbacks = null;
	  this._didCommit = false;
	  // TODO: Avoid need to bind by replacing callbacks in the update queue with
	  // list of Work objects.
	  this._onCommit = this._onCommit.bind(this);
	}
	ReactWork.prototype.then = function (onCommit) {
	  if (this._didCommit) {
	    onCommit();
	    return;
	  }
	  var callbacks = this._callbacks;
	  if (callbacks === null) {
	    callbacks = this._callbacks = [];
	  }
	  callbacks.push(onCommit);
	};
	ReactWork.prototype._onCommit = function () {
	  if (this._didCommit) {
	    return;
	  }
	  this._didCommit = true;
	  var callbacks = this._callbacks;
	  if (callbacks === null) {
	    return;
	  }
	  // TODO: Error handling.
	  for (var i = 0; i < callbacks.length; i++) {
	    var _callback2 = callbacks[i];
	    !(typeof _callback2 === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback2) : void 0;
	    _callback2();
	  }
	};

	function ReactRoot(container, isConcurrent, hydrate) {
	  var root = createContainer(container, isConcurrent, hydrate);
	  this._internalRoot = root;
	}
	ReactRoot.prototype.render = function (children, callback) {
	  var root = this._internalRoot;
	  var work = new ReactWork();
	  callback = callback === undefined ? null : callback;
	  {
	    warnOnInvalidCallback(callback, 'render');
	  }
	  if (callback !== null) {
	    work.then(callback);
	  }
	  updateContainer(children, root, null, work._onCommit);
	  return work;
	};
	ReactRoot.prototype.unmount = function (callback) {
	  var root = this._internalRoot;
	  var work = new ReactWork();
	  callback = callback === undefined ? null : callback;
	  {
	    warnOnInvalidCallback(callback, 'render');
	  }
	  if (callback !== null) {
	    work.then(callback);
	  }
	  updateContainer(null, root, null, work._onCommit);
	  return work;
	};
	ReactRoot.prototype.legacy_renderSubtreeIntoContainer = function (parentComponent, children, callback) {
	  var root = this._internalRoot;
	  var work = new ReactWork();
	  callback = callback === undefined ? null : callback;
	  {
	    warnOnInvalidCallback(callback, 'render');
	  }
	  if (callback !== null) {
	    work.then(callback);
	  }
	  updateContainer(children, root, parentComponent, work._onCommit);
	  return work;
	};
	ReactRoot.prototype.createBatch = function () {
	  var batch = new ReactBatch(this);
	  var expirationTime = batch._expirationTime;

	  var internalRoot = this._internalRoot;
	  var firstBatch = internalRoot.firstBatch;
	  if (firstBatch === null) {
	    internalRoot.firstBatch = batch;
	    batch._next = null;
	  } else {
	    // Insert sorted by expiration time then insertion order
	    var insertAfter = null;
	    var insertBefore = firstBatch;
	    while (insertBefore !== null && insertBefore._expirationTime >= expirationTime) {
	      insertAfter = insertBefore;
	      insertBefore = insertBefore._next;
	    }
	    batch._next = insertBefore;
	    if (insertAfter !== null) {
	      insertAfter._next = batch;
	    }
	  }

	  return batch;
	};

	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
	}

	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOCUMENT_NODE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function shouldHydrateDueToLegacyHeuristic(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
	}

	setBatchingImplementation(batchedUpdates$1, interactiveUpdates$1, flushInteractiveUpdates$1);

	var warnedAboutHydrateAPI = false;

	function legacyCreateRootFromDOMContainer(container, forceHydrate) {
	  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
	  // First clear any existing content.
	  if (!shouldHydrate) {
	    var warned = false;
	    var rootSibling = void 0;
	    while (rootSibling = container.lastChild) {
	      {
	        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
	          warned = true;
	          warningWithoutStack$1(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
	        }
	      }
	      container.removeChild(rootSibling);
	    }
	  }
	  {
	    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
	      warnedAboutHydrateAPI = true;
	      lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
	    }
	  }
	  // Legacy roots are not async by default.
	  var isConcurrent = false;
	  return new ReactRoot(container, isConcurrent, shouldHydrate);
	}

	function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
	  // TODO: Ensure all entry points contain this check
	  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;

	  {
	    topLevelUpdateWarnings(container);
	  }

	  // TODO: Without `any` type, Flow says "Property cannot be accessed on any
	  // member of intersection type." Whyyyyyy.
	  var root = container._reactRootContainer;
	  if (!root) {
	    // Initial mount
	    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
	    if (typeof callback === 'function') {
	      var originalCallback = callback;
	      callback = function () {
	        var instance = getPublicRootInstance(root._internalRoot);
	        originalCallback.call(instance);
	      };
	    }
	    // Initial mount should not be batched.
	    unbatchedUpdates(function () {
	      if (parentComponent != null) {
	        root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
	      } else {
	        root.render(children, callback);
	      }
	    });
	  } else {
	    if (typeof callback === 'function') {
	      var _originalCallback = callback;
	      callback = function () {
	        var instance = getPublicRootInstance(root._internalRoot);
	        _originalCallback.call(instance);
	      };
	    }
	    // Update
	    if (parentComponent != null) {
	      root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
	    } else {
	      root.render(children, callback);
	    }
	  }
	  return getPublicRootInstance(root._internalRoot);
	}

	function createPortal(children, container) {
	  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
	  // TODO: pass ReactDOM portal implementation as third argument
	  return createPortal$1(children, container, null, key);
	}

	var ReactDOM = {
	  createPortal: createPortal,

	  findDOMNode: function (componentOrElement) {
	    {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null && owner.stateNode !== null) {
	        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
	        !warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component') : void 0;
	        owner.stateNode._warnedAboutRefsInRender = true;
	      }
	    }
	    if (componentOrElement == null) {
	      return null;
	    }
	    if (componentOrElement.nodeType === ELEMENT_NODE) {
	      return componentOrElement;
	    }
	    {
	      return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
	    }
	    return findHostInstance(componentOrElement);
	  },
	  hydrate: function (element, container, callback) {
	    // TODO: throw or warn if we couldn't hydrate?
	    return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
	  },
	  render: function (element, container, callback) {
	    return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
	  },
	  unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
	    !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
	    return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
	  },
	  unmountComponentAtNode: function (container) {
	    !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;

	    if (container._reactRootContainer) {
	      {
	        var rootEl = getReactRootElementInContainer(container);
	        var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
	        !!renderedByDifferentReact ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
	      }

	      // Unmount should not be batched.
	      unbatchedUpdates(function () {
	        legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
	          container._reactRootContainer = null;
	        });
	      });
	      // If you call unmountComponentAtNode twice in quick succession, you'll
	      // get `true` twice. That's probably fine?
	      return true;
	    } else {
	      {
	        var _rootEl = getReactRootElementInContainer(container);
	        var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));

	        // Check if the container itself is a React root node.
	        var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

	        !!hasNonRootReactChild ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }

	      return false;
	    }
	  },


	  // Temporary alias since we already shipped React 16 RC with it.
	  // TODO: remove in React 17.
	  unstable_createPortal: function () {
	    if (!didWarnAboutUnstableCreatePortal) {
	      didWarnAboutUnstableCreatePortal = true;
	      lowPriorityWarning$1(false, 'The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
	    }
	    return createPortal.apply(undefined, arguments);
	  },


	  unstable_batchedUpdates: batchedUpdates$1,

	  unstable_interactiveUpdates: interactiveUpdates$1,

	  flushSync: flushSync,

	  unstable_flushControlled: flushControlled,

	  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
	    // Keep in sync with ReactDOMUnstableNativeDependencies.js
	    // and ReactTestUtils.js. This is an array for better minification.
	    Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injection.injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch]
	  }
	};

	function createRoot(container, options) {
	  var functionName = 'unstable_createRoot';
	  !isValidContainer(container) ? invariant(false, '%s(...): Target container is not a DOM element.', functionName) : void 0;
	  var hydrate = options != null && options.hydrate === true;
	  return new ReactRoot(container, true, hydrate);
	}

	{
	  ReactDOM.unstable_createRoot = createRoot;
	}

	var foundDevTools = injectIntoDevTools({
	  findFiberByHostInstance: getClosestInstanceFromNode,
	  bundleType: 1,
	  version: ReactVersion,
	  rendererPackageName: 'react-dom'
	});

	{
	  if (!foundDevTools && canUseDOM && window.top === window.self) {
	    // If we're in Chrome or Firefox, provide a download link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	      var protocol = window.location.protocol;
	      // Don't warn in exotic cases like chrome-extension://.
	      if (/^(https?|file):$/.test(protocol)) {
	        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
	      }
	    }
	  }
	}



	var ReactDOM$2 = Object.freeze({
		default: ReactDOM
	});

	var ReactDOM$3 = ( ReactDOM$2 && ReactDOM ) || ReactDOM$2;

	// TODO: decide on the top-level export form.
	// This is hacky but makes it work with both Rollup and Jest.
	var reactDom = ReactDOM$3.default || ReactDOM$3;

	module.exports = reactDom;
	  })();
	}
	});

	var reactDom = createCommonjsModule(function (module) {

	{
	  module.exports = reactDom_development;
	}
	});

	var lodash = createCommonjsModule(function (module, exports) {
	(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined$1;

	  /** Used as the semantic version number. */
	  var VERSION = '4.17.11';

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Error message constants. */
	  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
	      FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';

	  /** Used as the maximum memoize cache size. */
	  var MAX_MEMOIZE_SIZE = 500;

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** Used to compose bitmasks for cloning. */
	  var CLONE_DEEP_FLAG = 1,
	      CLONE_FLAT_FLAG = 2,
	      CLONE_SYMBOLS_FLAG = 4;

	  /** Used to compose bitmasks for value comparisons. */
	  var COMPARE_PARTIAL_FLAG = 1,
	      COMPARE_UNORDERED_FLAG = 2;

	  /** Used to compose bitmasks for function metadata. */
	  var WRAP_BIND_FLAG = 1,
	      WRAP_BIND_KEY_FLAG = 2,
	      WRAP_CURRY_BOUND_FLAG = 4,
	      WRAP_CURRY_FLAG = 8,
	      WRAP_CURRY_RIGHT_FLAG = 16,
	      WRAP_PARTIAL_FLAG = 32,
	      WRAP_PARTIAL_RIGHT_FLAG = 64,
	      WRAP_ARY_FLAG = 128,
	      WRAP_REARG_FLAG = 256,
	      WRAP_FLIP_FLAG = 512;

	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 800,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;

	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;

	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	  /** Used to associate wrap methods with their bit flags. */
	  var wrapFlags = [
	    ['ary', WRAP_ARY_FLAG],
	    ['bind', WRAP_BIND_FLAG],
	    ['bindKey', WRAP_BIND_KEY_FLAG],
	    ['curry', WRAP_CURRY_FLAG],
	    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
	    ['flip', WRAP_FLIP_FLAG],
	    ['partial', WRAP_PARTIAL_FLAG],
	    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
	    ['rearg', WRAP_REARG_FLAG]
	  ];

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      asyncTag = '[object AsyncFunction]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      domExcTag = '[object DOMException]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      nullTag = '[object Null]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      proxyTag = '[object Proxy]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      undefinedTag = '[object Undefined]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
	      reUnescapedHtml = /[&<>"']/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	  /**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	   */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);

	  /** Used to match leading and trailing whitespace. */
	  var reTrim = /^\s+|\s+$/g,
	      reTrimStart = /^\s+/,
	      reTrimEnd = /\s+$/;

	  /** Used to match wrap detail comments. */
	  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
	      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	      reSplitDetails = /,? & /;

	  /** Used to match words composed of alphanumeric characters. */
	  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;

	  /** Used to detect host constructors (Safari). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;

	  /** Used to match Latin Unicode letters (excluding mathematical operators). */
	  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f',
	      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	      rsComboSymbolsRange = '\\u20d0-\\u20ff',
	      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsPunctuationRange = '\\u2000-\\u206f',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	  /** Used to compose unicode capture groups. */
	  var rsApos = "['\u2019]",
	      rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';

	  /** Used to compose unicode regexes. */
	  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
	      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	  /** Used to match apostrophes. */
	  var reApos = RegExp(rsApos, 'g');

	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');

	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	  /** Used to match complex or compound words. */
	  var reUnicodeWord = RegExp([
	    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
	    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
	    rsUpper + '+' + rsOptContrUpper,
	    rsOrdUpper,
	    rsOrdLower,
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');

	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
	  typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	  cloneableTags[boolTag] = cloneableTags[dateTag] =
	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[setTag] =
	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map Latin Unicode letters to basic Latin letters. */
	  var deburredLetters = {
	    // Latin-1 Supplement block.
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss',
	    // Latin Extended-A block.
	    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	    '\u0134': 'J',  '\u0135': 'j',
	    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	    '\u0174': 'W',  '\u0175': 'w',
	    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	    '\u0132': 'IJ', '\u0133': 'ij',
	    '\u0152': 'Oe', '\u0153': 'oe',
	    '\u0149': "'n", '\u017f': 's'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'"
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	  /** Detect free variable `self`. */
	  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	  /** Used as a reference to the global object. */
	  var root = freeGlobal || freeSelf || Function('return this')();

	  /** Detect free variable `exports`. */
	  var freeExports = exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports;

	  /** Detect free variable `process` from Node.js. */
	  var freeProcess = moduleExports && freeGlobal.process;

	  /** Used to access faster Node.js helpers. */
	  var nodeUtil = (function() {
	    try {
	      // Use `util.types` for Node.js 10+.
	      var types = freeModule && freeModule.require && freeModule.require('util').types;

	      if (types) {
	        return types;
	      }

	      // Legacy `process.binding('util')` for Node.js < 10.
	      return freeProcess && freeProcess.binding && freeProcess.binding('util');
	    } catch (e) {}
	  }());

	  /* Node.js helper references. */
	  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
	      nodeIsDate = nodeUtil && nodeUtil.isDate,
	      nodeIsMap = nodeUtil && nodeUtil.isMap,
	      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
	      nodeIsSet = nodeUtil && nodeUtil.isSet,
	      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    switch (args.length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }

	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array == null ? 0 : array.length;

	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }

	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    var length = array == null ? 0 : array.length;
	    return !!length && baseIndexOf(array, value, 0) > -1;
	  }

	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        result = Array(length);

	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }

	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;

	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array == null ? 0 : array.length;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * Gets the size of an ASCII `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  var asciiSize = baseProperty('length');

	  /**
	   * Converts an ASCII `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function asciiToArray(string) {
	    return string.split('');
	  }

	  /**
	   * Splits an ASCII `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function asciiWords(string) {
	    return string.match(reAsciiWord) || [];
	  }

	  /**
	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	   * without support for iteratee shorthands, which iterates over `collection`
	   * using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFindKey(collection, predicate, eachFunc) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = key;
	        return false;
	      }
	    });
	    return result;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 1 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    return value === value
	      ? strictIndexOf(array, value, fromIndex)
	      : baseFindIndex(array, baseIsNaN, fromIndex);
	  }

	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isNaN` without support for number objects.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	   */
	  function baseIsNaN(value) {
	    return value !== value;
	  }

	  /**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
	  function baseMean(array, iteratee) {
	    var length = array == null ? 0 : array.length;
	    return length ? (baseSum(array, iteratee) / length) : NAN;
	  }

	  /**
	   * The base implementation of `_.property` without support for deep paths.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function baseProperty(key) {
	    return function(object) {
	      return object == null ? undefined$1 : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.propertyOf` without support for deep paths.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function basePropertyOf(object) {
	    return function(key) {
	      return object == null ? undefined$1 : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }

	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;

	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }

	  /**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;

	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined$1) {
	        result = result === undefined$1 ? current : (result + current);
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);

	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }

	  /**
	   * The base implementation of `_.unary` without support for storing metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }

	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }

	  /**
	   * Checks if a `cache` value for `key` exists.
	   *
	   * @private
	   * @param {Object} cache The cache to query.
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */
	  function cacheHas(cache, key) {
	    return cache.has(key);
	  }

	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;

	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;

	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;

	    while (length--) {
	      if (array[length] === placeholder) {
	        ++result;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	   * letters to basic Latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  var deburrLetter = basePropertyOf(deburredLetters);

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  var escapeHtmlChar = basePropertyOf(htmlEscapes);

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the value at `key` of `object`.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {string} key The key of the property to get.
	   * @returns {*} Returns the property value.
	   */
	  function getValue(object, key) {
	    return object == null ? undefined$1 : object[key];
	  }

	  /**
	   * Checks if `string` contains Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	   */
	  function hasUnicode(string) {
	    return reHasUnicode.test(string);
	  }

	  /**
	   * Checks if `string` contains a word composed of Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a word is found, else `false`.
	   */
	  function hasUnicodeWord(string) {
	    return reHasUnicodeWord.test(string);
	  }

	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];

	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }

	  /**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);

	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }

	  /**
	   * Creates a unary function that invokes `func` with its argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */
	  function overArg(func, transform) {
	    return function(arg) {
	      return func(transform(arg));
	    };
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }

	  /**
	   * Converts `set` to its value-value pairs.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the value-value pairs.
	   */
	  function setToPairs(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = [value, value];
	    });
	    return result;
	  }

	  /**
	   * A specialized version of `_.indexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictIndexOf(array, value, fromIndex) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * A specialized version of `_.lastIndexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictLastIndexOf(array, value, fromIndex) {
	    var index = fromIndex + 1;
	    while (index--) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return index;
	  }

	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    return hasUnicode(string)
	      ? unicodeSize(string)
	      : asciiSize(string);
	  }

	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return hasUnicode(string)
	      ? unicodeToArray(string)
	      : asciiToArray(string);
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

	  /**
	   * Gets the size of a Unicode `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  function unicodeSize(string) {
	    var result = reUnicode.lastIndex = 0;
	    while (reUnicode.test(string)) {
	      ++result;
	    }
	    return result;
	  }

	  /**
	   * Converts a Unicode `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function unicodeToArray(string) {
	    return string.match(reUnicode) || [];
	  }

	  /**
	   * Splits a Unicode `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function unicodeWords(string) {
	    return string.match(reUnicodeWord) || [];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  var runInContext = (function runInContext(context) {
	    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

	    /** Built-in constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for built-in method references. */
	    var arrayProto = Array.prototype,
	        funcProto = Function.prototype,
	        objectProto = Object.prototype;

	    /** Used to detect overreaching core-js shims. */
	    var coreJsData = context['__core-js_shared__'];

	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = funcProto.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /** Used to detect methods masquerading as native. */
	    var maskSrcKey = (function() {
	      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	      return uid ? ('Symbol(src)_1.' + uid) : '';
	    }());

	    /**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var nativeObjectToString = objectProto.toString;

	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined$1,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
	        getPrototype = overArg(Object.getPrototypeOf, Object),
	        objectCreate = Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        splice = arrayProto.splice,
	        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
	        symIterator = Symbol ? Symbol.iterator : undefined$1,
	        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

	    var defineProperty = (function() {
	      try {
	        var func = getNative(Object, 'defineProperty');
	        func({}, '', {});
	        return func;
	      } catch (e) {}
	    }());

	    /** Mocked built-ins. */
	    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
	        ctxNow = Date && Date.now !== root.Date.now && Date.now,
	        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeGetSymbols = Object.getOwnPropertySymbols,
	        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = overArg(Object.keys, Object),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = Date.now,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReverse = arrayProto.reverse;

	    /* Built-in method references that are verified to be native. */
	    var DataView = getNative(context, 'DataView'),
	        Map = getNative(context, 'Map'),
	        Promise = getNative(context, 'Promise'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(Object, 'create');

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /** Used to detect maps, sets, and weakmaps. */
	    var dataViewCtorString = toSource(DataView),
	        mapCtorString = toSource(Map),
	        promiseCtorString = toSource(Promise),
	        setCtorString = toSource(Set),
	        weakMapCtorString = toSource(WeakMap);

	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
	        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array and iteratees accept only
	     * one argument. The heuristic for whether a section qualifies for shortcut
	     * fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	     * `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} proto The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(proto) {
	        if (!isObject(proto)) {
	          return {};
	        }
	        if (objectCreate) {
	          return objectCreate(proto);
	        }
	        object.prototype = proto;
	        var result = new object;
	        object.prototype = undefined$1;
	        return result;
	      };
	    }());

	    /**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined$1;
	    }

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
	     * following template settings to use alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Hash(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the hash.
	     *
	     * @private
	     * @name clear
	     * @memberOf Hash
	     */
	    function hashClear() {
	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @name delete
	     * @memberOf Hash
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(key) {
	      var result = this.has(key) && delete this.__data__[key];
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Hash
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(key) {
	      var data = this.__data__;
	      if (nativeCreate) {
	        var result = data[key];
	        return result === HASH_UNDEFINED ? undefined$1 : result;
	      }
	      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
	    }

	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Hash
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(key) {
	      var data = this.__data__;
	      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
	    }

	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Hash
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the hash instance.
	     */
	    function hashSet(key, value) {
	      var data = this.__data__;
	      this.size += this.has(key) ? 0 : 1;
	      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
	      return this;
	    }

	    // Add methods to `Hash`.
	    Hash.prototype.clear = hashClear;
	    Hash.prototype['delete'] = hashDelete;
	    Hash.prototype.get = hashGet;
	    Hash.prototype.has = hashHas;
	    Hash.prototype.set = hashSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an list cache object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function ListCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the list cache.
	     *
	     * @private
	     * @name clear
	     * @memberOf ListCache
	     */
	    function listCacheClear() {
	      this.__data__ = [];
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the list cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf ListCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function listCacheDelete(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = data.length - 1;
	      if (index == lastIndex) {
	        data.pop();
	      } else {
	        splice.call(data, index, 1);
	      }
	      --this.size;
	      return true;
	    }

	    /**
	     * Gets the list cache value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf ListCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function listCacheGet(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      return index < 0 ? undefined$1 : data[index][1];
	    }

	    /**
	     * Checks if a list cache value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf ListCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function listCacheHas(key) {
	      return assocIndexOf(this.__data__, key) > -1;
	    }

	    /**
	     * Sets the list cache `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf ListCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the list cache instance.
	     */
	    function listCacheSet(key, value) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        ++this.size;
	        data.push([key, value]);
	      } else {
	        data[index][1] = value;
	      }
	      return this;
	    }

	    // Add methods to `ListCache`.
	    ListCache.prototype.clear = listCacheClear;
	    ListCache.prototype['delete'] = listCacheDelete;
	    ListCache.prototype.get = listCacheGet;
	    ListCache.prototype.has = listCacheHas;
	    ListCache.prototype.set = listCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function MapCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapCacheClear() {
	      this.size = 0;
	      this.__data__ = {
	        'hash': new Hash,
	        'map': new (Map || ListCache),
	        'string': new Hash
	      };
	    }

	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapCacheDelete(key) {
	      var result = getMapData(this, key)['delete'](key);
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapCacheGet(key) {
	      return getMapData(this, key).get(key);
	    }

	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapCacheHas(key) {
	      return getMapData(this, key).has(key);
	    }

	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
	    function mapCacheSet(key, value) {
	      var data = getMapData(this, key),
	          size = data.size;

	      data.set(key, value);
	      this.size += data.size == size ? 0 : 1;
	      return this;
	    }

	    // Add methods to `MapCache`.
	    MapCache.prototype.clear = mapCacheClear;
	    MapCache.prototype['delete'] = mapCacheDelete;
	    MapCache.prototype.get = mapCacheGet;
	    MapCache.prototype.has = mapCacheHas;
	    MapCache.prototype.set = mapCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates an array cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values == null ? 0 : values.length;

	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.add(values[index]);
	      }
	    }

	    /**
	     * Adds `value` to the array cache.
	     *
	     * @private
	     * @name add
	     * @memberOf SetCache
	     * @alias push
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache instance.
	     */
	    function setCacheAdd(value) {
	      this.__data__.set(value, HASH_UNDEFINED);
	      return this;
	    }

	    /**
	     * Checks if `value` is in the array cache.
	     *
	     * @private
	     * @name has
	     * @memberOf SetCache
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function setCacheHas(value) {
	      return this.__data__.has(value);
	    }

	    // Add methods to `SetCache`.
	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	    SetCache.prototype.has = setCacheHas;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Stack(entries) {
	      var data = this.__data__ = new ListCache(entries);
	      this.size = data.size;
	    }

	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = new ListCache;
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      var data = this.__data__,
	          result = data['delete'](key);

	      this.size = data.size;
	      return result;
	    }

	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      return this.__data__.get(key);
	    }

	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      return this.__data__.has(key);
	    }

	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
	    function stackSet(key, value) {
	      var data = this.__data__;
	      if (data instanceof ListCache) {
	        var pairs = data.__data__;
	        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	          pairs.push([key, value]);
	          this.size = ++data.size;
	          return this;
	        }
	        data = this.__data__ = new MapCache(pairs);
	      }
	      data.set(key, value);
	      this.size = data.size;
	      return this;
	    }

	    // Add methods to `Stack`.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of the enumerable property names of the array-like `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @param {boolean} inherited Specify returning inherited property names.
	     * @returns {Array} Returns the array of property names.
	     */
	    function arrayLikeKeys(value, inherited) {
	      var isArr = isArray(value),
	          isArg = !isArr && isArguments(value),
	          isBuff = !isArr && !isArg && isBuffer(value),
	          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	          skipIndexes = isArr || isArg || isBuff || isType,
	          result = skipIndexes ? baseTimes(value.length, String) : [],
	          length = result.length;

	      for (var key in value) {
	        if ((inherited || hasOwnProperty.call(value, key)) &&
	            !(skipIndexes && (
	               // Safari 9 has enumerable `arguments.length` in strict mode.
	               key == 'length' ||
	               // Node.js 0.10 has enumerable non-index properties on buffers.
	               (isBuff && (key == 'offset' || key == 'parent')) ||
	               // PhantomJS 2 has enumerable non-index properties on typed arrays.
	               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	               // Skip index properties.
	               isIndex(key, length)
	            ))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.sample` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @returns {*} Returns the random element.
	     */
	    function arraySample(array) {
	      var length = array.length;
	      return length ? array[baseRandom(0, length - 1)] : undefined$1;
	    }

	    /**
	     * A specialized version of `_.sampleSize` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function arraySampleSize(array, n) {
	      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
	    }

	    /**
	     * A specialized version of `_.shuffle` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function arrayShuffle(array) {
	      return shuffleSelf(copyArray(array));
	    }

	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined$1 && !eq(object[key], value)) ||
	          (value === undefined$1 && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined$1 && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.assignIn` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssignIn(object, source) {
	      return object && copyObject(source, keysIn(source), object);
	    }

	    /**
	     * The base implementation of `assignValue` and `assignMergeValue` without
	     * value checks.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function baseAssignValue(object, key, value) {
	      if (key == '__proto__' && defineProperty) {
	        defineProperty(object, key, {
	          'configurable': true,
	          'enumerable': true,
	          'value': value,
	          'writable': true
	        });
	      } else {
	        object[key] = value;
	      }
	    }

	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Array} Returns the picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          length = paths.length,
	          result = Array(length),
	          skip = object == null;

	      while (++index < length) {
	        result[index] = skip ? undefined$1 : get(object, paths[index]);
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined$1) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined$1) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }

	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Deep clone
	     *  2 - Flatten inherited properties
	     *  4 - Clone symbols
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, bitmask, customizer, key, object, stack) {
	      var result,
	          isDeep = bitmask & CLONE_DEEP_FLAG,
	          isFlat = bitmask & CLONE_FLAT_FLAG,
	          isFull = bitmask & CLONE_SYMBOLS_FLAG;

	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined$1) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;

	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = (isFlat || isFunc) ? {} : initCloneObject(value);
	          if (!isDeep) {
	            return isFlat
	              ? copySymbolsIn(value, baseAssignIn(result, value))
	              : copySymbols(value, baseAssign(result, value));
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);

	      if (isSet(value)) {
	        value.forEach(function(subValue) {
	          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
	        });

	        return result;
	      }

	      if (isMap(value)) {
	        value.forEach(function(subValue, key) {
	          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
	        });

	        return result;
	      }

	      var keysFunc = isFull
	        ? (isFlat ? getAllKeysIn : getAllKeys)
	        : (isFlat ? keysIn : keys);

	      var props = isArr ? undefined$1 : keysFunc(value);
	      arrayEach(props || value, function(subValue, key) {
	        if (props) {
	          key = subValue;
	          subValue = value[key];
	        }
	        // Recursively populate clone (susceptible to call stack limits).
	        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseConforms(source) {
	      var props = keys(source);
	      return function(object) {
	        return baseConformsTo(object, source, props);
	      };
	    }

	    /**
	     * The base implementation of `_.conformsTo` which accepts `props` to check.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     */
	    function baseConformsTo(object, source, props) {
	      var length = props.length;
	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (length--) {
	        var key = props[length],
	            predicate = source[key],
	            value = object[key];

	        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
	     * to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Array} args The arguments to provide to `func`.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
	    }

	    /**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;

	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee == null ? value : iteratee(value);

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of methods like `_.max` and `_.min` which accepts a
	     * `comparator` to determine the extremum value.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The iteratee invoked per iteration.
	     * @param {Function} comparator The comparator used to compare values.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(array, iteratee, comparator) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index],
	            current = iteratee(value);

	        if (current != null && (computed === undefined$1
	              ? (current === current && !isSymbol(current))
	              : comparator(current, computed)
	            )) {
	          var computed = current,
	              result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined$1 || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, predicate, isStrict, result) {
	      var index = -1,
	          length = array.length;

	      predicate || (predicate = isFlattenable);
	      result || (result = []);

	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && predicate(value)) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, predicate, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the function names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }

	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = castPath(path, object);

	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[toKey(path[index++])];
	      }
	      return (index && index == length) ? object : undefined$1;
	    }

	    /**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	      var result = keysFunc(object);
	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	    }

	    /**
	     * The base implementation of `getTag` without fallbacks for buggy environments.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function baseGetTag(value) {
	      if (value == null) {
	        return value === undefined$1 ? undefinedTag : nullTag;
	      }
	      return (symToStringTag && symToStringTag in Object(value))
	        ? getRawTag(value)
	        : objectToString(value);
	    }

	    /**
	     * The base implementation of `_.gt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     */
	    function baseGt(value, other) {
	      return value > other;
	    }

	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      return object != null && hasOwnProperty.call(object, key);
	    }

	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return object != null && key in Object(object);
	    }

	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }

	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];

	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined$1;
	      }
	      array = arrays[0];

	      var index = -1,
	          seen = caches[0];

	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      var func = object == null ? object : object[toKey(last(path))];
	      return func == null ? undefined$1 : apply(func, object, args);
	    }

	    /**
	     * The base implementation of `_.isArguments`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     */
	    function baseIsArguments(value) {
	      return isObjectLike(value) && baseGetTag(value) == argsTag;
	    }

	    /**
	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     */
	    function baseIsArrayBuffer(value) {
	      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
	    }

	    /**
	     * The base implementation of `_.isDate` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     */
	    function baseIsDate(value) {
	      return isObjectLike(value) && baseGetTag(value) == dateTag;
	    }

	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Unordered comparison
	     *  2 - Partial comparison
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, bitmask, customizer, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = objIsArr ? arrayTag : getTag(object),
	          othTag = othIsArr ? arrayTag : getTag(other);

	      objTag = objTag == argsTag ? objectTag : objTag;
	      othTag = othTag == argsTag ? objectTag : othTag;

	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && isBuffer(object)) {
	        if (!isBuffer(other)) {
	          return false;
	        }
	        objIsArr = true;
	        objIsObj = false;
	      }
	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	      }
	      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          var objUnwrapped = objIsWrapped ? object.value() : object,
	              othUnwrapped = othIsWrapped ? other.value() : other;

	          stack || (stack = new Stack);
	          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	    }

	    /**
	     * The base implementation of `_.isMap` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     */
	    function baseIsMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined$1 && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack;
	          if (customizer) {
	            var result = customizer(objValue, srcValue, key, object, source, stack);
	          }
	          if (!(result === undefined$1
	                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.isNative` without bad shim checks.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     */
	    function baseIsNative(value) {
	      if (!isObject(value) || isMasked(value)) {
	        return false;
	      }
	      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	      return pattern.test(toSource(value));
	    }

	    /**
	     * The base implementation of `_.isRegExp` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     */
	    function baseIsRegExp(value) {
	      return isObjectLike(value) && baseGetTag(value) == regexpTag;
	    }

	    /**
	     * The base implementation of `_.isSet` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     */
	    function baseIsSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }

	    /**
	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     */
	    function baseIsTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	    }

	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	      if (typeof value == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (typeof value == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }

	    /**
	     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeys(object) {
	      if (!isPrototype(object)) {
	        return nativeKeys(object);
	      }
	      var result = [];
	      for (var key in Object(object)) {
	        if (hasOwnProperty.call(object, key) && key != 'constructor') {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      if (!isObject(object)) {
	        return nativeKeysIn(object);
	      }
	      var isProto = isPrototype(object),
	          result = [];

	      for (var key in object) {
	        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.lt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     */
	    function baseLt(value, other) {
	      return value < other;
	    }

	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      if (isKey(path) && isStrictComparable(srcValue)) {
	        return matchesStrictComparable(toKey(path), srcValue);
	      }
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined$1 && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      baseFor(source, function(srcValue, key) {
	        if (isObject(srcValue)) {
	          stack || (stack = new Stack);
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
	            : undefined$1;

	          if (newValue === undefined$1) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      }, keysIn);
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = safeGet(object, key),
	          srcValue = safeGet(source, key),
	          stacked = stack.get(srcValue);

	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined$1;

	      var isCommon = newValue === undefined$1;

	      if (isCommon) {
	        var isArr = isArray(srcValue),
	            isBuff = !isArr && isBuffer(srcValue),
	            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

	        newValue = srcValue;
	        if (isArr || isBuff || isTyped) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else if (isBuff) {
	            isCommon = false;
	            newValue = cloneBuffer(srcValue, true);
	          }
	          else if (isTyped) {
	            isCommon = false;
	            newValue = cloneTypedArray(srcValue, true);
	          }
	          else {
	            newValue = [];
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          newValue = objValue;
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || isFunction(objValue)) {
	            newValue = initCloneObject(srcValue);
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, newValue);
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	        stack['delete'](srcValue);
	      }
	      assignMergeValue(object, key, newValue);
	    }

	    /**
	     * The base implementation of `_.nth` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */
	    function baseNth(array, n) {
	      var length = array.length;
	      if (!length) {
	        return;
	      }
	      n += n < 0 ? length : 0;
	      return isIndex(n, length) ? array[n] : undefined$1;
	    }

	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      var index = -1;
	      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, paths) {
	      return basePickBy(object, paths, function(value, path) {
	        return hasIn(object, path);
	      });
	    }

	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, paths, predicate) {
	      var index = -1,
	          length = paths.length,
	          result = {};

	      while (++index < length) {
	        var path = paths[index],
	            value = baseGet(object, path);

	        if (predicate(value, path)) {
	          baseSet(result, castPath(path, object), value);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;

	      if (array === values) {
	        values = copyArray(values);
	      }
	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;

	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;

	      while (length--) {
	        var index = indexes[length];
	        if (length == lastIndex || index !== previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          } else {
	            baseUnset(array, index);
	          }
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }

	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the range of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
	    function baseRepeat(string, n) {
	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        if (n) {
	          string += string;
	        }
	      } while (n);

	      return result;
	    }

	    /**
	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     */
	    function baseRest(func, start) {
	      return setToString(overRest(func, start, identity), func + '');
	    }

	    /**
	     * The base implementation of `_.sample`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     */
	    function baseSample(collection) {
	      return arraySample(values(collection));
	    }

	    /**
	     * The base implementation of `_.sampleSize` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function baseSampleSize(collection, n) {
	      var array = values(collection);
	      return shuffleSelf(array, baseClamp(n, 0, array.length));
	    }

	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      if (!isObject(object)) {
	        return object;
	      }
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = toKey(path[index]),
	            newValue = value;

	        if (index != lastIndex) {
	          var objValue = nested[key];
	          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
	          if (newValue === undefined$1) {
	            newValue = isObject(objValue)
	              ? objValue
	              : (isIndex(path[index + 1]) ? [] : {});
	          }
	        }
	        assignValue(nested, key, newValue);
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `setToString` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetToString = !defineProperty ? identity : function(func, string) {
	      return defineProperty(func, 'toString', {
	        'configurable': true,
	        'enumerable': false,
	        'value': constant(string),
	        'writable': true
	      });
	    };

	    /**
	     * The base implementation of `_.shuffle`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function baseShuffle(collection) {
	      return shuffleSelf(values(collection));
	    }

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array == null ? low : array.length;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if (computed !== null && !isSymbol(computed) &&
	              (retHighest ? (computed <= value) : (computed < value))) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array == null ? 0 : array.length,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsSymbol = isSymbol(value),
	          valIsUndefined = value === undefined$1;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            othIsDefined = computed !== undefined$1,
	            othIsNull = computed === null,
	            othIsReflexive = computed === computed,
	            othIsSymbol = isSymbol(computed);

	        if (valIsNaN) {
	          var setLow = retHighest || othIsReflexive;
	        } else if (valIsUndefined) {
	          setLow = othIsReflexive && (retHighest || othIsDefined);
	        } else if (valIsNull) {
	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
	        } else if (valIsSymbol) {
	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
	        } else if (othIsNull || othIsSymbol) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	     * support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (!index || !eq(computed, seen)) {
	          var seen = computed;
	          result[resIndex++] = value === 0 ? 0 : value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.toNumber` which doesn't ensure correct
	     * conversions of binary, hexadecimal, or octal string values.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     */
	    function baseToNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      return +value;
	    }

	    /**
	     * The base implementation of `_.toString` which doesn't convert nullish
	     * values to empty strings.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     */
	    function baseToString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (isArray(value)) {
	        // Recursively convert values (susceptible to call stack limits).
	        return arrayMap(value, baseToString) + '';
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;

	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The property path to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      return object == null || delete object[toKey(last(path))];
	    }

	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }

	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}

	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }

	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var length = arrays.length;
	      if (length < 2) {
	        return length ? baseUniq(arrays[0]) : [];
	      }
	      var index = -1,
	          result = Array(length);

	      while (++index < length) {
	        var array = arrays[index],
	            othIndex = -1;

	        while (++othIndex < length) {
	          if (othIndex != index) {
	            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
	          }
	        }
	      }
	      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
	    }

	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};

	      while (++index < length) {
	        var value = index < valsLength ? values[index] : undefined$1;
	        assignFunc(result, props[index], value);
	      }
	      return result;
	    }

	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
	    function castArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }

	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
	    function castFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }

	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function castPath(value, object) {
	      if (isArray(value)) {
	        return value;
	      }
	      return isKey(value, object) ? [value] : stringToPath(toString(value));
	    }

	    /**
	     * A `baseRest` alias which can be replaced with `identity` by module
	     * replacement plugins.
	     *
	     * @private
	     * @type {Function}
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    var castRest = baseRest;

	    /**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */
	    function castSlice(array, start, end) {
	      var length = array.length;
	      end = end === undefined$1 ? length : end;
	      return (!start && end >= length) ? array : baseSlice(array, start, end);
	    }

	    /**
	     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
	     *
	     * @private
	     * @param {number|Object} id The timer id or timeout object of the timer to clear.
	     */
	    var clearTimeout = ctxClearTimeout || function(id) {
	      return root.clearTimeout(id);
	    };

	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var length = buffer.length,
	          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	      buffer.copy(result);
	      return result;
	    }

	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }

	    /**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
	    function cloneDataView(dataView, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	    }

	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }

	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }

	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }

	    /**
	     * Compares values to sort them in ascending order.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {number} Returns the sort order indicator for `value`.
	     */
	    function compareAscending(value, other) {
	      if (value !== other) {
	        var valIsDefined = value !== undefined$1,
	            valIsNull = value === null,
	            valIsReflexive = value === value,
	            valIsSymbol = isSymbol(value);

	        var othIsDefined = other !== undefined$1,
	            othIsNull = other === null,
	            othIsReflexive = other === other,
	            othIsSymbol = isSymbol(other);

	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	            (valIsNull && othIsDefined && othIsReflexive) ||
	            (!valIsDefined && othIsReflexive) ||
	            !valIsReflexive) {
	          return 1;
	        }
	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	            (othIsNull && valIsDefined && valIsReflexive) ||
	            (!othIsDefined && valIsReflexive) ||
	            !othIsReflexive) {
	          return -1;
	        }
	      }
	      return 0;
	    }

	    /**
	     * Used by `_.orderBy` to compare multiple properties of a value to another
	     * and stable sort them.
	     *
	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	     * specify an order of "desc" for descending or "asc" for ascending sort order
	     * of corresponding values.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {boolean[]|string[]} orders The order to sort by for each property.
	     * @returns {number} Returns the sort order indicator for `object`.
	     */
	    function compareMultiple(object, other, orders) {
	      var index = -1,
	          objCriteria = object.criteria,
	          othCriteria = other.criteria,
	          length = objCriteria.length,
	          ordersLength = orders.length;

	      while (++index < length) {
	        var result = compareAscending(objCriteria[index], othCriteria[index]);
	        if (result) {
	          if (index >= ordersLength) {
	            return result;
	          }
	          var order = orders[index];
	          return result * (order == 'desc' ? -1 : 1);
	        }
	      }
	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	      // that causes it, under certain circumstances, to provide the same value for
	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	      // for more details.
	      //
	      // This also ensures a stable sort in V8 and other engines.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	      return object.index - other.index;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;

	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object, customizer) {
	      var isNew = !object;
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];

	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : undefined$1;

	        if (newValue === undefined$1) {
	          newValue = source[key];
	        }
	        if (isNew) {
	          baseAssignValue(object, key, newValue);
	        } else {
	          assignValue(object, key, newValue);
	        }
	      }
	      return object;
	    }

	    /**
	     * Copies own symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }

	    /**
	     * Copies own and inherited symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbolsIn(source, object) {
	      return copyObject(source, getSymbolsIn(source), object);
	    }

	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};

	        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
	      };
	    }

	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return baseRest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined$1,
	            guard = length > 2 ? sources[2] : undefined$1;

	        customizer = (assigner.length > 3 && typeof customizer == 'function')
	          ? (length--, customizer)
	          : undefined$1;

	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined$1 : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;

	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBind(func, bitmask, thisArg) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new case function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);

	        var strSymbols = hasUnicode(string)
	          ? stringToArray(string)
	          : undefined$1;

	        var chr = strSymbols
	          ? strSymbols[0]
	          : string.charAt(0);

	        var trailing = strSymbols
	          ? castSlice(strSymbols, 1).join('')
	          : string.slice(1);

	        return chr[methodName]() + trailing;
	      };
	    }

	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtor(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors. See
	        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurry(func, bitmask, arity) {
	      var Ctor = createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getHolder(wrapper);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);

	        length -= holders.length;
	        if (length < arity) {
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
	            args, holders, undefined$1, undefined$1, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} findIndexFunc The function to find the collection index.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(findIndexFunc) {
	      return function(collection, predicate, fromIndex) {
	        var iterable = Object(collection);
	        if (!isArrayLike(collection)) {
	          var iteratee = getIteratee(predicate, 3);
	          collection = keys(collection);
	          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	        }
	        var index = findIndexFunc(collection, predicate, fromIndex);
	        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return flatRest(function(funcs) {
	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;

	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined$1;

	          if (data && isLaziable(data[0]) &&
	                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func))
	              ? wrapper[funcName]()
	              : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 && isArray(value)) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & WRAP_ARY_FLAG,
	          isBind = bitmask & WRAP_BIND_FLAG,
	          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
	          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
	          isFlip = bitmask & WRAP_FLIP_FLAG,
	          Ctor = isBindKey ? undefined$1 : createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length;

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getHolder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtor(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }

	    /**
	     * Creates a function that performs a mathematical operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @param {number} [defaultValue] The value used for `undefined` arguments.
	     * @returns {Function} Returns the new mathematical operation function.
	     */
	    function createMathOperation(operator, defaultValue) {
	      return function(value, other) {
	        var result;
	        if (value === undefined$1 && other === undefined$1) {
	          return defaultValue;
	        }
	        if (value !== undefined$1) {
	          result = value;
	        }
	        if (other !== undefined$1) {
	          if (result === undefined$1) {
	            return other;
	          }
	          if (typeof value == 'string' || typeof other == 'string') {
	            value = baseToString(value);
	            other = baseToString(other);
	          } else {
	            value = baseToNumber(value);
	            other = baseToNumber(other);
	          }
	          result = operator(value, other);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new over function.
	     */
	    function createOver(arrayFunc) {
	      return flatRest(function(iteratees) {
	        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
	        return baseRest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }

	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(length, chars) {
	      chars = chars === undefined$1 ? ' ' : baseToString(chars);

	      var charsLength = chars.length;
	      if (charsLength < 2) {
	        return charsLength ? baseRepeat(chars, length) : chars;
	      }
	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
	      return hasUnicode(chars)
	        ? castSlice(stringToArray(result), 0, length).join('')
	        : result.slice(0, length);
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartial(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined$1;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toFinite(start);
	        if (end === undefined$1) {
	          end = start;
	          start = 0;
	        } else {
	          end = toFinite(end);
	        }
	        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
	        return baseRange(start, end, step, fromRight);
	      };
	    }

	    /**
	     * Creates a function that performs a relational operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new relational operation function.
	     */
	    function createRelationalOperation(operator) {
	      return function(value, other) {
	        if (!(typeof value == 'string' && typeof other == 'string')) {
	          value = toNumber(value);
	          other = toNumber(other);
	        }
	        return operator(value, other);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & WRAP_CURRY_FLAG,
	          newHolders = isCurry ? holders : undefined$1,
	          newHoldersRight = isCurry ? undefined$1 : holders,
	          newPartials = isCurry ? partials : undefined$1,
	          newPartialsRight = isCurry ? undefined$1 : partials;

	      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

	      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
	        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, argPos, ary, arity
	      ];

	      var result = wrapFunc.apply(undefined$1, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return setWrapToString(result, func, bitmask);
	    }

	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
	        if (precision) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));

	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a set object of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	      return new Set(values);
	    };

	    /**
	     * Creates a `_.toPairs` or `_.toPairsIn` function.
	     *
	     * @private
	     * @param {Function} keysFunc The function to get the keys of a given object.
	     * @returns {Function} Returns the new pairs function.
	     */
	    function createToPairs(keysFunc) {
	      return function(object) {
	        var tag = getTag(object);
	        if (tag == mapTag) {
	          return mapToArray(object);
	        }
	        if (tag == setTag) {
	          return setToPairs(object);
	        }
	        return baseToPairs(object, keysFunc(object));
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags.
	     *    1 - `_.bind`
	     *    2 - `_.bindKey`
	     *    4 - `_.curry` or `_.curryRight` of a bound function
	     *    8 - `_.curry`
	     *   16 - `_.curryRight`
	     *   32 - `_.partial`
	     *   64 - `_.partialRight`
	     *  128 - `_.rearg`
	     *  256 - `_.ary`
	     *  512 - `_.flip`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined$1;
	      }
	      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined$1 ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;

	      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined$1;
	      }
	      var data = isBindKey ? undefined$1 : getData(func);

	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];

	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] === undefined$1
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);

	      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
	        var result = createBind(func, bitmask, thisArg);
	      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
	        result = createCurry(func, bitmask, arity);
	      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
	        result = createPartial(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybrid.apply(undefined$1, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setWrapToString(setter(result, newData), func, bitmask);
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
	     * of source objects to the destination object for all destination properties
	     * that resolve to `undefined`.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsAssignIn(objValue, srcValue, key, object) {
	      if (objValue === undefined$1 ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
	     * objects into destination objects that are passed thru.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, objValue);
	        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
	        stack['delete'](srcValue);
	      }
	      return objValue;
	    }

	    /**
	     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
	     * objects.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {string} key The key of the property to inspect.
	     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
	     */
	    function customOmitClone(value) {
	      return isPlainObject(value) ? undefined$1 : value;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(array);
	      if (stacked && stack.get(other)) {
	        return stacked == other;
	      }
	      var index = -1,
	          result = true,
	          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

	      stack.set(array, other);
	      stack.set(other, array);

	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined$1) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (seen) {
	          if (!arraySome(other, function(othValue, othIndex) {
	                if (!cacheHas(seen, othIndex) &&
	                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	                  return seen.push(othIndex);
	                }
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(
	              arrValue === othValue ||
	                equalFunc(arrValue, othValue, bitmask, customizer, stack)
	            )) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	      switch (tag) {
	        case dataViewTag:
	          if ((object.byteLength != other.byteLength) ||
	              (object.byteOffset != other.byteOffset)) {
	            return false;
	          }
	          object = object.buffer;
	          other = other.buffer;

	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;

	        case boolTag:
	        case dateTag:
	        case numberTag:
	          // Coerce booleans to `1` or `0` and dates to milliseconds.
	          // Invalid dates are coerced to `NaN`.
	          return eq(+object, +other);

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings, primitives and objects,
	          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	          // for more details.
	          return object == (other + '');

	        case mapTag:
	          var convert = mapToArray;

	        case setTag:
	          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	          convert || (convert = setToArray);

	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          bitmask |= COMPARE_UNORDERED_FLAG;

	          // Recursively compare objects (susceptible to call stack limits).
	          stack.set(object, other);
	          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	          stack['delete'](object);
	          return result;

	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          objProps = getAllKeys(object),
	          objLength = objProps.length,
	          othProps = getAllKeys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked && stack.get(other)) {
	        return stacked == other;
	      }
	      var result = true;
	      stack.set(object, other);
	      stack.set(other, object);

	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined$1
	              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseRest` which flattens the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    function flatRest(func) {
	      return setToString(overRest(func, undefined$1, flatten), func + '');
	    }

	    /**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeys(object) {
	      return baseGetAllKeys(object, keys, getSymbols);
	    }

	    /**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeysIn(object) {
	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getHolder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }

	    /**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }

	    /**
	     * Gets the data for `map`.
	     *
	     * @private
	     * @param {Object} map The map to query.
	     * @param {string} key The reference key.
	     * @returns {*} Returns the map data.
	     */
	    function getMapData(map, key) {
	      var data = map.__data__;
	      return isKeyable(key)
	        ? data[typeof key == 'string' ? 'string' : 'hash']
	        : data.map;
	    }

	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = keys(object),
	          length = result.length;

	      while (length--) {
	        var key = result[length],
	            value = object[key];

	        result[length] = [key, value, isStrictComparable(value)];
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = getValue(object, key);
	      return baseIsNative(value) ? value : undefined$1;
	    }

	    /**
	     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the raw `toStringTag`.
	     */
	    function getRawTag(value) {
	      var isOwn = hasOwnProperty.call(value, symToStringTag),
	          tag = value[symToStringTag];

	      try {
	        value[symToStringTag] = undefined$1;
	        var unmasked = true;
	      } catch (e) {}

	      var result = nativeObjectToString.call(value);
	      if (unmasked) {
	        if (isOwn) {
	          value[symToStringTag] = tag;
	        } else {
	          delete value[symToStringTag];
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
	      if (object == null) {
	        return [];
	      }
	      object = Object(object);
	      return arrayFilter(nativeGetSymbols(object), function(symbol) {
	        return propertyIsEnumerable.call(object, symbol);
	      });
	    };

	    /**
	     * Creates an array of the own and inherited enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
	      var result = [];
	      while (object) {
	        arrayPush(result, getSymbols(object));
	        object = getPrototype(object);
	      }
	      return result;
	    };

	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    var getTag = baseGetTag;

	    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	        (Map && getTag(new Map) != mapTag) ||
	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = baseGetTag(value),
	            Ctor = result == objectTag ? value.constructor : undefined$1,
	            ctorString = Ctor ? toSource(Ctor) : '';

	        if (ctorString) {
	          switch (ctorString) {
	            case dataViewCtorString: return dataViewTag;
	            case mapCtorString: return mapTag;
	            case promiseCtorString: return promiseTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Extracts wrapper details from the `source` body comment.
	     *
	     * @private
	     * @param {string} source The source to inspect.
	     * @returns {Array} Returns the wrapper details.
	     */
	    function getWrapDetails(source) {
	      var match = source.match(reWrapDetails);
	      return match ? match[1].split(reSplitDetails) : [];
	    }

	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length,
	          result = false;

	      while (++index < length) {
	        var key = toKey(path[index]);
	        if (!(result = object != null && hasFunc(object, key))) {
	          break;
	        }
	        object = object[key];
	      }
	      if (result || ++index != length) {
	        return result;
	      }
	      length = object == null ? 0 : object.length;
	      return !!length && isLength(length) && isIndex(key, length) &&
	        (isArray(object) || isArguments(object));
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototype(object))
	        : {};
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case dataViewTag:
	          return cloneDataView(object, isDeep);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);

	        case mapTag:
	          return new Ctor;

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          return cloneRegExp(object);

	        case setTag:
	          return new Ctor;

	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }

	    /**
	     * Inserts wrapper `details` in a comment at the top of the `source` body.
	     *
	     * @private
	     * @param {string} source The source to modify.
	     * @returns {Array} details The details to insert.
	     * @returns {string} Returns the modified source.
	     */
	    function insertWrapDetails(source, details) {
	      var length = details.length;
	      if (!length) {
	        return source;
	      }
	      var lastIndex = length - 1;
	      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	      details = details.join(length > 2 ? ', ' : ' ');
	      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	    }

	    /**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenable(value) {
	      return isArray(value) || isArguments(value) ||
	        !!(spreadableSymbol && value && value[spreadableSymbol]);
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      var type = typeof value;
	      length = length == null ? MAX_SAFE_INTEGER : length;

	      return !!length &&
	        (type == 'number' ||
	          (type != 'symbol' && reIsUint.test(value))) &&
	            (value > -1 && value % 1 == 0 && value < length);
	    }

	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	            ? (isArrayLike(object) && isIndex(index, object.length))
	            : (type == 'string' && index in object)
	          ) {
	        return eq(object[index], value);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      if (isArray(value)) {
	        return false;
	      }
	      var type = typeof value;
	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	          value == null || isSymbol(value)) {
	        return true;
	      }
	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	        (object != null && value in Object(object));
	    }

	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	        ? (value !== '__proto__')
	        : (value === null);
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];

	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `func` has its source masked.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	     */
	    function isMasked(func) {
	      return !!maskSrcKey && (maskSrcKey in func);
	    }

	    /**
	     * Checks if `func` is capable of being masked.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
	     */
	    var isMaskable = coreJsData ? isFunction : stubFalse;

	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	      return value === proto;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function matchesStrictComparable(key, srcValue) {
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        return object[key] === srcValue &&
	          (srcValue !== undefined$1 || (key in Object(object)));
	      };
	    }

	    /**
	     * A specialized version of `_.memoize` which clears the memoized function's
	     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	     *
	     * @private
	     * @param {Function} func The function to have its output memoized.
	     * @returns {Function} Returns the new memoized function.
	     */
	    function memoizeCapped(func) {
	      var result = memoize(func, function(key) {
	        if (cache.size === MAX_MEMOIZE_SIZE) {
	          cache.clear();
	        }
	        return key;
	      });

	      var cache = result.cache;
	      return result;
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

	      var isCombo =
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & WRAP_BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = value;
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & WRAP_ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * This function is like
	     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * except that it includes inherited enumerable properties.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function nativeKeysIn(object) {
	      var result = [];
	      if (object != null) {
	        for (var key in Object(object)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a string using `Object.prototype.toString`.
	     *
	     * @private
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     */
	    function objectToString(value) {
	      return nativeObjectToString.call(value);
	    }

	    /**
	     * A specialized version of `baseRest` which transforms the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @param {Function} transform The rest array transform.
	     * @returns {Function} Returns the new function.
	     */
	    function overRest(func, start, transform) {
	      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);

	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        index = -1;
	        var otherArgs = Array(start + 1);
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = transform(array);
	        return apply(func, this, otherArgs);
	      };
	    }

	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
	      }
	      return array;
	    }

	    /**
	     * Gets the value at `key`, unless `key` is "__proto__".
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the property to get.
	     * @returns {*} Returns the property value.
	     */
	    function safeGet(object, key) {
	      if (key == '__proto__') {
	        return;
	      }

	      return object[key];
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = shortOut(baseSetData);

	    /**
	     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    var setTimeout = ctxSetTimeout || function(func, wait) {
	      return root.setTimeout(func, wait);
	    };

	    /**
	     * Sets the `toString` method of `func` to return `string`.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var setToString = shortOut(baseSetToString);

	    /**
	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	     * with wrapper details in a comment at the top of the source body.
	     *
	     * @private
	     * @param {Function} wrapper The function to modify.
	     * @param {Function} reference The reference function.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Function} Returns `wrapper`.
	     */
	    function setWrapToString(wrapper, reference, bitmask) {
	      var source = (reference + '');
	      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
	    }

	    /**
	     * Creates a function that'll short out and invoke `identity` instead
	     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	     * milliseconds.
	     *
	     * @private
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new shortable function.
	     */
	    function shortOut(func) {
	      var count = 0,
	          lastCalled = 0;

	      return function() {
	        var stamp = nativeNow(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return arguments[0];
	          }
	        } else {
	          count = 0;
	        }
	        return func.apply(undefined$1, arguments);
	      };
	    }

	    /**
	     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @param {number} [size=array.length] The size of `array`.
	     * @returns {Array} Returns `array`.
	     */
	    function shuffleSelf(array, size) {
	      var index = -1,
	          length = array.length,
	          lastIndex = length - 1;

	      size = size === undefined$1 ? length : size;
	      while (++index < size) {
	        var rand = baseRandom(index, lastIndex),
	            value = array[rand];

	        array[rand] = array[index];
	        array[index] = value;
	      }
	      array.length = size;
	      return array;
	    }

	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    var stringToPath = memoizeCapped(function(string) {
	      var result = [];
	      if (string.charCodeAt(0) === 46 /* . */) {
	        result.push('');
	      }
	      string.replace(rePropName, function(match, number, quote, subString) {
	        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    });

	    /**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */
	    function toKey(value) {
	      if (typeof value == 'string' || isSymbol(value)) {
	        return value;
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to convert.
	     * @returns {string} Returns the source code.
	     */
	    function toSource(func) {
	      if (func != null) {
	        try {
	          return funcToString.call(func);
	        } catch (e) {}
	        try {
	          return (func + '');
	        } catch (e) {}
	      }
	      return '';
	    }

	    /**
	     * Updates wrapper `details` based on `bitmask` flags.
	     *
	     * @private
	     * @returns {Array} details The details to modify.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Array} Returns `details`.
	     */
	    function updateWrapDetails(details, bitmask) {
	      arrayEach(wrapFlags, function(pair) {
	        var value = '_.' + pair[0];
	        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
	          details.push(value);
	        }
	      });
	      return details.sort();
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array of chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
	        size = 1;
	      } else {
	        size = nativeMax(toInteger(size), 0);
	      }
	      var length = array == null ? 0 : array.length;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array == null ? 0 : array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    function concat() {
	      var length = arguments.length;
	      if (!length) {
	        return [];
	      }
	      var args = Array(length - 1),
	          array = arguments[0],
	          index = length;

	      while (index--) {
	        args[index - 1] = arguments[index];
	      }
	      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
	    }

	    /**
	     * Creates an array of `array` values not included in the other given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.without, _.xor
	     * @example
	     *
	     * _.difference([2, 1], [2, 3]);
	     * // => [1]
	     */
	    var difference = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = baseRest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. The order and
	     * references of result values are determined by the first array. The comparator
	     * is invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = baseRest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined$1;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index);
	    }

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length - 1;
	      if (fromIndex !== undefined$1) {
	        index = toInteger(fromIndex);
	        index = fromIndex < 0
	          ? nativeMax(length + index, 0)
	          : nativeMin(index, length - 1);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
	    }

	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, 1) : [];
	    }

	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }

	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined$1 ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }

	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['a', 1], ['b', 2]]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs == null ? 0 : pairs.length,
	          result = {};

	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return (array && array.length) ? array[0] : undefined$1;
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseIndexOf(array, value, index);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 0, -1) : [];
	    }

	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [2, 3]);
	     * // => [2]
	     */
	    var intersection = baseRest(function(arrays) {
	      var mapped = arrayMap(arrays, castArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      if (iteratee === last(mapped)) {
	        iteratee = undefined$1;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. The order and references
	     * of result values are determined by the first array. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = baseRest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      if (comparator) {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined$1, comparator)
	        : [];
	    });

	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array == null ? '' : nativeJoin.call(array, separator);
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? array[length - 1] : undefined$1;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined$1) {
	        index = toInteger(fromIndex);
	        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
	      }
	      return value === value
	        ? strictLastIndexOf(array, value, index)
	        : baseFindIndex(array, baseIsNaN, index, true);
	    }

	    /**
	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
	     * element from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */
	    function nth(array, n) {
	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
	    }

	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pull(array, 'a', 'c');
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    var pull = baseRest(pullAll);

	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pullAll(array, ['a', 'c']);
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee, 2))
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined$1, comparator)
	        : array;
	    }

	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     * var pulled = _.pullAt(array, [1, 3]);
	     *
	     * console.log(array);
	     * // => ['a', 'c']
	     *
	     * console.log(pulled);
	     * // => ['b', 'd']
	     */
	    var pullAt = flatRest(function(array, indexes) {
	      var length = array == null ? 0 : array.length,
	          result = baseAt(array, indexes);

	      basePullAt(array, arrayMap(indexes, function(index) {
	        return isIndex(index, length) ? +index : index;
	      }).sort(compareAscending));

	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array == null ? array : nativeReverse.call(array);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined$1 ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
	    }

	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 1
	     */
	    function sortedIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
	     * // => 4
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }

	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
	    }

	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniq(array, getIteratee(iteratee, 2))
	        : [];
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 1, length) : [];
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2], [1, 2]);
	     * // => [2, 1]
	     */
	    var union = baseRest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. Result values are chosen from the first
	     * array in which the value occurs. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. Result values are chosen from
	     * the first array in which the value occurs. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each element
	     * is kept. The order of result values is determined by the order they occur
	     * in the array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length) ? baseUniq(array) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The order of result values is determined by the
	     * order they occur in the array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The order of result values is
	     * determined by the order they occur in the array.The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['a', 'b'], [1, 2], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined$1, group);
	      });
	    }

	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.pull`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.xor
	     * @example
	     *
	     * _.without([2, 1, 2, 3], 1, 2);
	     * // => [3]
	     */
	    var without = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.without
	     * @example
	     *
	     * _.xor([2, 1], [2, 3]);
	     * // => [1, 3]
	     */
	    var xor = baseRest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The order of result values is determined
	     * by the order they occur in the arrays. The iteratee is invoked with one
	     * argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2, 3.4]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The order of result values is
	     * determined by the order they occur in the arrays. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
	    });

	    /**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     */
	    var zip = baseRest(unzip);

	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }

	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = baseRest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
	      return unzipWith(arrays, iteratee);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }

	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     */
	    var wrapperAt = flatRest(function(paths) {
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };

	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined$1
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined$1);
	        }
	        return array;
	      });
	    });

	    /**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined$1) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined$1 : this.__values__[this.__index__++];

	      return { 'done': done, 'value': value };
	    }

	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }

	    /**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined$1;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined$1
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }

	    /**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        ++result[key];
	      } else {
	        baseAssignValue(result, key, 1);
	      }
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * **Note:** This method returns `true` for
	     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	     * elements of empty collections.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined$1;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * **Note:** Unlike `_.remove`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.reject
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    var find = createFind(findIndex);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=collection.length-1] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(findLastIndex);

	    /**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMapDeep(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), INFINITY);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
	    function flatMapDepth(collection, iteratee, depth) {
	      depth = depth === undefined$1 ? 1 : toInteger(depth);
	      return baseFlatten(map(collection, iteratee), depth);
	    }

	    /**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEachRight
	     * @example
	     *
	     * _.forEach([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forEach(collection, iteratee) {
	      var func = isArray(collection) ? arrayEach : baseEach;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEach
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
	    function forEachRight(collection, iteratee) {
	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        baseAssignValue(result, key, [value]);
	      }
	    });

	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'a': 1, 'b': 2 }, 1);
	     * // => true
	     *
	     * _.includes('abcd', 'bc');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `path` is a function, it's invoked
	     * for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = baseRest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      baseAssignValue(result, key, value);
	    });

	    /**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined$1 : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduceRight
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduce
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.filter
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, negate(getIteratee(predicate, 3)));
	    }

	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var func = isArray(collection) ? arraySample : baseSample;
	      return func(collection);
	    }

	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n, guard) {
	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
	      return func(collection, n);
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      var func = isArray(collection) ? arrayShuffle : baseShuffle;
	      return func(collection);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        return isString(collection) ? stringSize(collection) : collection.length;
	      }
	      var tag = getTag(collection);
	      if (tag == mapTag || tag == setTag) {
	        return collection.size;
	      }
	      return baseKeys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined$1;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, [function(o) { return o.user; }]);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	     */
	    var sortBy = baseRest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees = [iteratees[0]];
	      }
	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred invocation.
	     */
	    var now = ctxNow || function() {
	      return root.Date.now();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined$1 : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => Allows adding up to 4 contacts to the list.
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined$1;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * function greet(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * }
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = baseRest(function(func, thisArg, partials) {
	      var bitmask = WRAP_BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bind));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = baseRest(function(object, key, partials) {
	      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bindKey));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined$1 : arity;
	      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined$1 : arity;
	      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide `options` to indicate whether `func` should be invoked on the
	     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent
	     * calls to the debounced function return the result of the last `func`
	     * invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the debounced function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var lastArgs,
	          lastThis,
	          maxWait,
	          result,
	          timerId,
	          lastCallTime,
	          lastInvokeTime = 0,
	          leading = false,
	          maxing = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxing = 'maxWait' in options;
	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function invokeFunc(time) {
	        var args = lastArgs,
	            thisArg = lastThis;

	        lastArgs = lastThis = undefined$1;
	        lastInvokeTime = time;
	        result = func.apply(thisArg, args);
	        return result;
	      }

	      function leadingEdge(time) {
	        // Reset any `maxWait` timer.
	        lastInvokeTime = time;
	        // Start the timer for the trailing edge.
	        timerId = setTimeout(timerExpired, wait);
	        // Invoke the leading edge.
	        return leading ? invokeFunc(time) : result;
	      }

	      function remainingWait(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime,
	            timeWaiting = wait - timeSinceLastCall;

	        return maxing
	          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
	          : timeWaiting;
	      }

	      function shouldInvoke(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime;

	        // Either this is the first call, activity has stopped and we're at the
	        // trailing edge, the system time has gone backwards and we're treating
	        // it as the trailing edge, or we've hit the `maxWait` limit.
	        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	      }

	      function timerExpired() {
	        var time = now();
	        if (shouldInvoke(time)) {
	          return trailingEdge(time);
	        }
	        // Restart the timer.
	        timerId = setTimeout(timerExpired, remainingWait(time));
	      }

	      function trailingEdge(time) {
	        timerId = undefined$1;

	        // Only invoke if we have `lastArgs` which means `func` has been
	        // debounced at least once.
	        if (trailing && lastArgs) {
	          return invokeFunc(time);
	        }
	        lastArgs = lastThis = undefined$1;
	        return result;
	      }

	      function cancel() {
	        if (timerId !== undefined$1) {
	          clearTimeout(timerId);
	        }
	        lastInvokeTime = 0;
	        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
	      }

	      function flush() {
	        return timerId === undefined$1 ? result : trailingEdge(now());
	      }

	      function debounced() {
	        var time = now(),
	            isInvoking = shouldInvoke(time);

	        lastArgs = arguments;
	        lastThis = this;
	        lastCallTime = time;

	        if (isInvoking) {
	          if (timerId === undefined$1) {
	            return leadingEdge(lastCallTime);
	          }
	          if (maxing) {
	            // Handle invocations in a tight loop.
	            timerId = setTimeout(timerExpired, wait);
	            return invokeFunc(lastCallTime);
	          }
	        }
	        if (timerId === undefined$1) {
	          timerId = setTimeout(timerExpired, wait);
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one millisecond.
	     */
	    var defer = baseRest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */
	    var delay = baseRest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new flipped function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrap(func, WRAP_FLIP_FLAG);
	    }

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoized function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result) || cache;
	        return result;
	      };
	      memoized.cache = new (memoize.Cache || MapCache);
	      return memoized;
	    }

	    // Expose `MapCache`.
	    memoize.Cache = MapCache;

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new negated function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        var args = arguments;
	        switch (args.length) {
	          case 0: return !predicate.call(this);
	          case 1: return !predicate.call(this, args[0]);
	          case 2: return !predicate.call(this, args[0], args[1]);
	          case 3: return !predicate.call(this, args[0], args[1], args[2]);
	        }
	        return !predicate.apply(this, args);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // => `createApplication` is invoked once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with its arguments transformed.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms=[_.identity]]
	     *  The argument transforms.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, [square, doubled]);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = castRest(function(func, transforms) {
	      transforms = (transforms.length == 1 && isArray(transforms[0]))
	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
	        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

	      var funcsLength = transforms.length;
	      return baseRest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);

	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });

	    /**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partial));
	      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
	    });

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partialRight));
	      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, [2, 0, 1]);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = flatRest(function(func, indexes) {
	      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined$1 ? start : toInteger(start);
	      return baseRest(func, start);
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start == null ? 0 : nativeMax(toInteger(start), 0);
	      return baseRest(function(args) {
	        var array = args[start],
	            otherArgs = castSlice(args, 0, start);

	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        return apply(func, this, otherArgs);
	      });
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide `options` to indicate whether `func`
	     * should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }

	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }

	    /**
	     * Creates a function that provides `value` to `wrapper` as its first
	     * argument. Any additional arguments provided to the function are appended
	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
	     * binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      return partial(castFunction(wrapper), value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }

	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeep
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeepWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.clone
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.cloneWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * Checks if `object` conforms to `source` by invoking the predicate
	     * properties of `source` with the corresponding property values of `object`.
	     *
	     * **Note:** This method is equivalent to `_.conforms` when `source` is
	     * partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
	     * // => true
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
	     * // => false
	     */
	    function conformsTo(object, source) {
	      return source == null || baseConformsTo(object, source, keys(source));
	    }

	    /**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @see _.lt
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    var gt = createRelationalOperation(baseGt);

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @see _.lte
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    var gte = createRelationalOperation(function(value, other) {
	      return value >= other;
	    });

	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	        !propertyIsEnumerable.call(value, 'callee');
	    };

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;

	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(value.length) && !isFunction(value);
	    }

	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && baseGetTag(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = nativeIsBuffer || stubFalse;

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) &&
	          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
	            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	        return !value.length;
	      }
	      var tag = getTag(value);
	      if (tag == mapTag || tag == setTag) {
	        return !value.size;
	      }
	      if (isPrototype(value)) {
	        return !baseKeys(value).length;
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are compared by strict equality, i.e. `===`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }

	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      var result = customizer ? customizer(value, other) : undefined$1;
	      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      var tag = baseGetTag(value);
	      return tag == errorTag || tag == domExcTag ||
	        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     *
	     * _.isFinite('3');
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      if (!isObject(value)) {
	        return false;
	      }
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 9 which returns 'object' for typed arrays and other constructors.
	      var tag = baseGetTag(value);
	      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	    }

	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return value != null && (type == 'object' || type == 'function');
	    }

	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return value != null && typeof value == 'object';
	    }

	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values.
	     *
	     * **Note:** This method is equivalent to `_.matches` when `source` is
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.isMatch(object, { 'b': 2 });
	     * // => true
	     *
	     * _.isMatch(object, { 'b': 1 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }

	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some
	      // ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a pristine native function.
	     *
	     * **Note:** This method can't reliably detect native functions in the presence
	     * of the core-js package because core-js circumvents this kind of detection.
	     * Despite multiple requests, the core-js maintainer has made it clear: any
	     * attempt to fix the detection will be obstructed. As a result, we're left
	     * with little choice but to throw an error. Unfortunately, this also affects
	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
	     * which rely on core-js.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (isMaskable(value)) {
	        throw new Error(CORE_ERROR_TEXT);
	      }
	      return baseIsNative(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && baseGetTag(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	        return false;
	      }
	      var proto = getPrototype(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	        funcToString.call(Ctor) == objectCtorString;
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && baseGetTag(value) == symbolTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined$1;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @see _.gt
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    var lt = createRelationalOperation(baseLt);

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @see _.gte
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    var lte = createRelationalOperation(function(value, other) {
	      return value <= other;
	    });

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (symIterator && value[symIterator]) {
	        return iteratorToArray(value[symIterator]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

	      return func(value);
	    }

	    /**
	     * Converts `value` to a finite number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.12.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted number.
	     * @example
	     *
	     * _.toFinite(3.2);
	     * // => 3.2
	     *
	     * _.toFinite(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toFinite(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toFinite('3.2');
	     * // => 3.2
	     */
	    function toFinite(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      return value === value ? value : 0;
	    }

	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3.2);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3.2');
	     * // => 3
	     */
	    function toInteger(value) {
	      var result = toFinite(value),
	          remainder = result % 1;

	      return result === result ? (remainder ? result - remainder : result) : 0;
	    }

	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3.2);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3.2');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }

	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3.2);
	     * // => 3.2
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3.2');
	     * // => 3.2
	     */
	    function toNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      if (isObject(value)) {
	        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ? value : +value;
	      }
	      value = value.replace(reTrim, '');
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }

	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3.2);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3.2');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return value
	        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
	        : (value === 0 ? value : 0);
	    }

	    /**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      return value == null ? '' : baseToString(value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assignIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assign({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });

	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assign
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      copyObject(source, keysIn(source), object);
	    });

	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keysIn(source), object, customizer);
	    });

	    /**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignInWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keys(source), object, customizer);
	    });

	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Array} Returns the picked values.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     */
	    var at = flatRest(baseAt);

	    /**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties == null ? result : baseAssign(result, properties);
	    }

	    /**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaultsDeep
	     * @example
	     *
	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var defaults = baseRest(function(object, sources) {
	      object = Object(object);

	      var index = -1;
	      var length = sources.length;
	      var guard = length > 2 ? sources[2] : undefined$1;

	      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	        length = 1;
	      }

	      while (++index < length) {
	        var source = sources[index];
	        var props = keysIn(source);
	        var propsIndex = -1;
	        var propsLength = props.length;

	        while (++propsIndex < propsLength) {
	          var key = props[propsIndex];
	          var value = object[key];

	          if (value === undefined$1 ||
	              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	            object[key] = source[key];
	          }
	        }
	      }

	      return object;
	    });

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaults
	     * @example
	     *
	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
	     * // => { 'a': { 'b': 2, 'c': 3 } }
	     */
	    var defaultsDeep = baseRest(function(args) {
	      args.push(undefined$1, customDefaultsMerge);
	      return apply(mergeWith, undefined$1, args);
	    });

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
	    }

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
	    }

	    /**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forInRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwnRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functionsIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }

	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functions
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is returned in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined$1 : baseGet(object, path);
	      return result === undefined$1 ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return object != null && hasPath(object, path, baseHas);
	    }

	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return object != null && hasPath(object, path, baseHasIn);
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      if (value != null &&
	          typeof value.toString != 'function') {
	        value = nativeObjectToString.call(value);
	      }

	      result[value] = key;
	    }, constant(identity));

	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (value != null &&
	          typeof value.toString != 'function') {
	        value = nativeObjectToString.call(value);
	      }

	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);

	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = baseRest(baseInvoke);

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapValues
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, iteratee(value, key, object), value);
	      });
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapKeys
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, key, iteratee(value, key, object));
	      });
	      return result;
	    }

	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively. Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {
	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
	     * };
	     *
	     * var other = {
	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
	     * };
	     *
	     * _.merge(object, other);
	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });

	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with six arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = { 'a': [1], 'b': [2] };
	     * var other = { 'a': [3], 'b': [4] };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'a': [1, 3], 'b': [2, 4] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable property paths of `object` that are not omitted.
	     *
	     * **Note:** This method is considerably slower than `_.pick`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = flatRest(function(object, paths) {
	      var result = {};
	      if (object == null) {
	        return result;
	      }
	      var isDeep = false;
	      paths = arrayMap(paths, function(path) {
	        path = castPath(path, object);
	        isDeep || (isDeep = path.length > 1);
	        return path;
	      });
	      copyObject(object, getAllKeysIn(object), result);
	      if (isDeep) {
	        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
	      }
	      var length = paths.length;
	      while (length--) {
	        baseUnset(result, paths[length]);
	      }
	      return result;
	    });

	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      return pickBy(object, negate(getIteratee(predicate)));
	    }

	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = flatRest(function(object, paths) {
	      return object == null ? {} : basePick(object, paths);
	    });

	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      if (object == null) {
	        return {};
	      }
	      var props = arrayMap(getAllKeysIn(object), function(prop) {
	        return [prop];
	      });
	      predicate = getIteratee(predicate);
	      return basePickBy(object, props, function(value, path) {
	        return predicate(value, path[0]);
	      });
	    }

	    /**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length;

	      // Ensure the loop is entered when path is empty.
	      if (!length) {
	        length = 1;
	        object = undefined$1;
	      }
	      while (++index < length) {
	        var value = object == null ? undefined$1 : object[toKey(path[index])];
	        if (value === undefined$1) {
	          index = length;
	          value = defaultValue;
	        }
	        object = isFunction(value) ? value.call(object) : value;
	      }
	      return object;
	    }

	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }

	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }

	    /**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	     * entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    var toPairs = createToPairs(keys);

	    /**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	     * or set, its entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	     */
	    var toPairsIn = createToPairs(keysIn);

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. If `accumulator` is not
	     * provided, a new object with the same `[[Prototype]]` will be used. The
	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object),
	          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

	      iteratee = getIteratee(iteratee, 4);
	      if (accumulator == null) {
	        var Ctor = object && object.constructor;
	        if (isArrLike) {
	          accumulator = isArr ? new Ctor : [];
	        }
	        else if (isObject(object)) {
	          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	        }
	        else {
	          accumulator = {};
	        }
	      }
	      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }

	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
	    }

	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	    }

	    /**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object == null ? [] : baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined$1) {
	        upper = lower;
	        lower = undefined$1;
	      }
	      if (upper !== undefined$1) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined$1) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }

	    /**
	     * Checks if `n` is between `start` and up to, but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @see _.range, _.rangeRight
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toFinite(start);
	      if (end === undefined$1) {
	        end = start;
	        start = 0;
	      } else {
	        end = toFinite(end);
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }

	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined$1;
	      }
	      if (floating === undefined$1) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined$1;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined$1;
	        }
	      }
	      if (lower === undefined$1 && upper === undefined$1) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toFinite(lower);
	        if (upper === undefined$1) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toFinite(upper);
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });

	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }

	    /**
	     * Deburrs `string` by converting
	     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	     * letters to basic Latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search up to.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = baseToString(target);

	      var length = string.length;
	      position = position === undefined$1
	        ? length
	        : baseClamp(toInteger(position), 0, length);

	      var end = position;
	      position -= target.length;
	      return position >= 0 && string.slice(position, end) == target;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
	     * corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2;
	      return (
	        createPadding(nativeFloor(mid), chars) +
	        string +
	        createPadding(nativeCeil(mid), chars)
	      );
	    }

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (string + createPadding(length - strLength, chars))
	        : string;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (createPadding(length - strLength, chars) + string)
	        : string;
	    }

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n, guard) {
	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      return baseRepeat(toString(string), n);
	    }

	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);

	      return args.length < 3 ? string : string.replace(args[1], args[2]);
	    }

	    /**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	        separator = limit = undefined$1;
	      }
	      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
	      if (!limit) {
	        return [];
	      }
	      string = toString(string);
	      if (string && (
	            typeof separator == 'string' ||
	            (separator != null && !isRegExp(separator))
	          )) {
	        separator = baseToString(separator);
	        if (!separator && hasUnicode(string)) {
	          return castSlice(stringToArray(string), 0, limit);
	        }
	      }
	      return string.split(separator, limit);
	    }

	    /**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + upperFirst(word);
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = position == null
	        ? 0
	        : baseClamp(toInteger(position), 0, string.length);

	      target = baseToString(target);
	      return string.slice(position, position + target.length) == target;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES template literal delimiter as an "interpolate" delimiter.
	     * // Disable support by replacing the "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation
	      // (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined$1;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, customDefaultsAssignIn);

	      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined$1, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }

	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return string.replace(reTrim, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars),
	          start = charsStartIndex(strSymbols, chrSymbols),
	          end = charsEndIndex(strSymbols, chrSymbols) + 1;

	      return castSlice(strSymbols, start, end).join('');
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return string.replace(reTrimEnd, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

	      return castSlice(strSymbols, 0, end).join('');
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return string.replace(reTrimStart, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          start = charsStartIndex(strSymbols, stringToArray(chars));

	      return castSlice(strSymbols, start).join('');
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? baseToString(options.omission) : omission;
	      }
	      string = toString(string);

	      var strLength = string.length;
	      if (hasUnicode(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? castSlice(strSymbols, 0, end).join('')
	        : string.slice(0, end);

	      if (separator === undefined$1) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;

	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
	        }
	      } else if (string.indexOf(baseToString(separator), end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });

	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined$1 : pattern;

	      if (pattern === undefined$1) {
	        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	      }
	      return string.match(pattern) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = baseRest(function(func, args) {
	      try {
	        return apply(func, undefined$1, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'click': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, ['click']);
	     * jQuery(element).on('click', view.click);
	     * // => Logs 'clicked docs' when clicked.
	     */
	    var bindAll = flatRest(function(object, methodNames) {
	      arrayEach(methodNames, function(key) {
	        key = toKey(key);
	        baseAssignValue(object, key, bind(object[key], object));
	      });
	      return object;
	    });

	    /**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new composite function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.stubTrue,                      _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs == null ? 0 : pairs.length,
	          toIteratee = getIteratee();

	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });

	      return baseRest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }

	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.conformsTo` with
	     * `source` partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 2, 'b': 1 },
	     *   { 'a': 1, 'b': 2 }
	     * ];
	     *
	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
	     * // => [{ 'a': 1, 'b': 2 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new constant function.
	     * @example
	     *
	     * var objects = _.times(2, _.constant({ 'a': 1 }));
	     *
	     * console.log(objects);
	     * // => [{ 'a': 1 }, { 'a': 1 }]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * Checks `value` to determine whether a default value should be returned in
	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
	     * or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Util
	     * @param {*} value The value to check.
	     * @param {*} defaultValue The default value.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * _.defaultTo(1, 10);
	     * // => 1
	     *
	     * _.defaultTo(undefined, 10);
	     * // => 10
	     */
	    function defaultTo(value, defaultValue) {
	      return (value == null || value !== value) ? defaultValue : value;
	    }

	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flowRight
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow([_.add, square]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 3.0.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flow
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight([square, _.add]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * This method returns the first argument it receives.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     *
	     * console.log(_.identity(object) === object);
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.isMatch` with `source`
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** Partial comparisons will match empty array and empty object
	     * `srcValue` values against any array or object value, respectively. See
	     * `_.isEqual` for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.find(objects, _.matchesProperty('a', 4));
	     * // => { 'a': 4, 'b': 5, 'c': 6 }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */
	    var method = baseRest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = baseRest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);

	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
	          isFunc = isFunction(object);

	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);

	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });

	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }

	    /**
	     * This method returns `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * _.times(2, _.noop);
	     * // => [undefined, undefined]
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that gets the argument at index `n`. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new pass-thru function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return baseRest(function(args) {
	        return baseNth(args, n);
	      });
	    }

	    /**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over([Math.max, Math.min]);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);

	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);

	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overSome = createOver(arraySome);

	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined$1 : baseGet(object, path);
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.rangeRight
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();

	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.range
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);

	    /**
	     * This method returns a new empty array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Array} Returns the new empty array.
	     * @example
	     *
	     * var arrays = _.times(2, _.stubArray);
	     *
	     * console.log(arrays);
	     * // => [[], []]
	     *
	     * console.log(arrays[0] === arrays[1]);
	     * // => false
	     */
	    function stubArray() {
	      return [];
	    }

	    /**
	     * This method returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `false`.
	     * @example
	     *
	     * _.times(2, _.stubFalse);
	     * // => [false, false]
	     */
	    function stubFalse() {
	      return false;
	    }

	    /**
	     * This method returns a new empty object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Object} Returns the new empty object.
	     * @example
	     *
	     * var objects = _.times(2, _.stubObject);
	     *
	     * console.log(objects);
	     * // => [{}, {}]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => false
	     */
	    function stubObject() {
	      return {};
	    }

	    /**
	     * This method returns an empty string.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {string} Returns the empty string.
	     * @example
	     *
	     * _.times(2, _.stubString);
	     * // => ['', '']
	     */
	    function stubString() {
	      return '';
	    }

	    /**
	     * This method returns `true`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `true`.
	     * @example
	     *
	     * _.times(2, _.stubTrue);
	     * // => [true, true]
	     */
	    function stubTrue() {
	      return true;
	    }

	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(0));
	     * // => [0, 0, 0, 0]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);

	      iteratee = getIteratee(iteratee);
	      n -= MAX_ARRAY_LENGTH;

	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return arrayMap(value, toKey);
	      }
	      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
	    }

	    /**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    var add = createMathOperation(function(augend, addend) {
	      return augend + addend;
	    }, 0);

	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */
	    var divide = createMathOperation(function(dividend, divisor) {
	      return dividend / divisor;
	    }, 1);

	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseGt)
	        : undefined$1;
	    }

	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
	        : undefined$1;
	    }

	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return baseMean(array, identity);
	    }

	    /**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
	    function meanBy(array, iteratee) {
	      return baseMean(array, getIteratee(iteratee, 2));
	    }

	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseLt)
	        : undefined$1;
	    }

	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
	        : undefined$1;
	    }

	    /**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */
	    var multiply = createMathOperation(function(multiplier, multiplicand) {
	      return multiplier * multiplicand;
	    }, 1);

	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    var subtract = createMathOperation(function(minuend, subtrahend) {
	      return minuend - subtrahend;
	    }, 0);

	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }

	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee, 2))
	        : 0;
	    }

	    /*------------------------------------------------------------------------*/

	    // Add methods that return wrapped values in chain sequences.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatMapDeep = flatMapDeep;
	    lodash.flatMapDepth = flatMapDepth;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.entries = toPairs;
	    lodash.entriesIn = toPairsIn;
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;

	    // Add methods to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add methods that return unwrapped values in chain sequences.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.conformsTo = conformsTo;
	    lodash.deburr = deburr;
	    lodash.defaultTo = defaultTo;
	    lodash.divide = divide;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.meanBy = meanBy;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.stubArray = stubArray;
	    lodash.stubFalse = stubFalse;
	    lodash.stubObject = stubObject;
	    lodash.stubString = stubString;
	    lodash.stubTrue = stubTrue;
	    lodash.multiply = multiply;
	    lodash.nth = nth;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toFinite = toFinite;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;

	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

	        var result = (this.__filtered__ && !index)
	          ? new LazyWrapper(this)
	          : this.clone();

	        if (result.__filtered__) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };

	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };

	    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });

	    LazyWrapper.prototype.reject = function(predicate) {
	      return this.filter(negate(getIteratee(predicate)));
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined$1) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;

	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });

	    // Add `Array` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          var value = this.value();
	          return func.apply(isArray(value) ? value : [], args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(isArray(value) ? value : [], args);
	        });
	      };
	    });

	    // Map minified method names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = (lodashFunc.name + ''),
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined$1
	    }];

	    // Add methods to `LazyWrapper`.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chain sequence methods to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add lazy aliases.
	    lodash.prototype.first = lodash.prototype.head;

	    if (symIterator) {
	      lodash.prototype[symIterator] = wrapperToIterator;
	    }
	    return lodash;
	  });

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers, like r.js, check for condition patterns like:
	  if (freeModule) {
	    // Export for Node.js.
	    (freeModule.exports = _)._ = _;
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(commonjsGlobal));
	});

	var global$1 = (typeof global !== "undefined" ? global :
	            typeof self !== "undefined" ? self :
	            typeof window !== "undefined" ? window : {});

	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
	var inited = false;
	function init () {
	  inited = true;
	  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	  for (var i = 0, len = code.length; i < len; ++i) {
	    lookup[i] = code[i];
	    revLookup[code.charCodeAt(i)] = i;
	  }

	  revLookup['-'.charCodeAt(0)] = 62;
	  revLookup['_'.charCodeAt(0)] = 63;
	}

	function toByteArray (b64) {
	  if (!inited) {
	    init();
	  }
	  var i, j, l, tmp, placeHolders, arr;
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

	  // base64 is 4/3 + up to two characters of the original data
	  arr = new Arr(len * 3 / 4 - placeHolders);

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len;

	  var L = 0;

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
	    arr[L++] = (tmp >> 16) & 0xFF;
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
	    arr[L++] = tmp & 0xFF;
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
	    output.push(tripletToBase64(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  if (!inited) {
	    init();
	  }
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var output = '';
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    output += lookup[tmp >> 2];
	    output += lookup[(tmp << 4) & 0x3F];
	    output += '==';
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
	    output += lookup[tmp >> 10];
	    output += lookup[(tmp >> 4) & 0x3F];
	    output += lookup[(tmp << 2) & 0x3F];
	    output += '=';
	  }

	  parts.push(output);

	  return parts.join('')
	}

	function read (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	function write (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	}

	var toString = {}.toString;

	var isArray = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};

	var INSPECT_MAX_BYTES = 50;

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
	  ? global$1.TYPED_ARRAY_SUPPORT
	  : true;

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	var _kMaxLength = kMaxLength();

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length);
	    that.__proto__ = Buffer.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length);
	    }
	    that.length = length;
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192; // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype;
	  return arr
	};

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	};

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype;
	  Buffer.__proto__ = Uint8Array;
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size);
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	};

	function allocUnsafe (that, size) {
	  assertSize(size);
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0;
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	};

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0;
	  that = createBuffer(that, length);

	  var actual = that.write(string, encoding);

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual);
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0;
	  that = createBuffer(that, length);
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array);
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset);
	  } else {
	    array = new Uint8Array(array, byteOffset, length);
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array;
	    that.__proto__ = Buffer.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array);
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (internalIsBuffer(obj)) {
	    var len = checked(obj.length) | 0;
	    that = createBuffer(that, len);

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len);
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0;
	  }
	  return Buffer.alloc(+length)
	}
	Buffer.isBuffer = isBuffer;
	function internalIsBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	};

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length);
	  var pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i];
	    if (!internalIsBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos);
	    pos += buf.length;
	  }
	  return buffer
	};

	function byteLength (string, encoding) {
	  if (internalIsBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string;
	  }

	  var len = string.length;
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer.byteLength = byteLength;

	function slowToString (encoding, start, end) {
	  var loweredCase = false;

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0;
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0;
	  start >>>= 0;

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8';

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true;

	function swap (b, n, m) {
	  var i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length;
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1);
	  }
	  return this
	};

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length;
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3);
	    swap(this, i + 1, i + 2);
	  }
	  return this
	};

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length;
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7);
	    swap(this, i + 1, i + 6);
	    swap(this, i + 2, i + 5);
	    swap(this, i + 3, i + 4);
	  }
	  return this
	};

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0;
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	};

	Buffer.prototype.equals = function equals (b) {
	  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	};

	Buffer.prototype.inspect = function inspect () {
	  var str = '';
	  var max = INSPECT_MAX_BYTES;
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
	    if (this.length > max) str += ' ... ';
	  }
	  return '<Buffer ' + str + '>'
	};

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!internalIsBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0;
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }
	  if (thisStart === undefined) {
	    thisStart = 0;
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;

	  if (this === target) return 0

	  var x = thisEnd - thisStart;
	  var y = end - start;
	  var len = Math.min(x, y);

	  var thisCopy = this.slice(thisStart, thisEnd);
	  var targetCopy = target.slice(start, end);

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }
	  byteOffset = +byteOffset;  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1);
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding);
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (internalIsBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF; // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1;
	  var arrLength = arr.length;
	  var valLength = val.length;

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i;
	  if (dir) {
	    var foundIndex = -1;
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true;
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false;
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	};

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	};

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	};

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length;
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed;
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0;
	    if (isFinite(length)) {
	      length = length | 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8';

	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	};

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return fromByteArray(buf)
	  } else {
	    return fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end);
	  var res = [];

	  var i = start;
	  while (i < end) {
	    var firstByte = buf[i];
	    var codePoint = null;
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1;

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint;

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1];
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }

	    res.push(codePoint);
	    i += bytesPerSequence;
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000;

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = '';
	  var i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    );
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  var out = '';
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i]);
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;

	  var newBuf;
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end);
	    newBuf.__proto__ = Buffer.prototype;
	  } else {
	    var sliceLen = end - start;
	    newBuf = new Buffer(sliceLen, undefined);
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start];
	    }
	  }

	  return newBuf
	};

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }

	  return val
	};

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }

	  var val = this[offset + --byteLength];
	  var mul = 1;
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }

	  return val
	};

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset]
	};

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | (this[offset + 1] << 8)
	};

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return (this[offset] << 8) | this[offset + 1]
	};

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	};

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	};

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var i = byteLength;
	  var mul = 1;
	  var val = this[offset + --i];
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	};

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset] | (this[offset + 1] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset + 1] | (this[offset] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	};

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	};

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, true, 23, 4)
	};

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, false, 23, 4)
	};

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, true, 52, 8)
	};

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, false, 52, 8)
	};

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var mul = 1;
	  var i = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8;
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 1] = (value >>> 8);
	    this[offset] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = 0;
	  var mul = 1;
	  var sub = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  var sub = 0;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 3] = (value >>> 24);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
	  }
	  write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	};

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	};

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
	  }
	  write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	};

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  var len = end - start;
	  var i;

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    );
	  }

	  return len
	};

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0);
	      if (code < 256) {
	        val = code;
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;

	  if (!val) val = 0;

	  var i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    var bytes = internalIsBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString());
	    var len = bytes.length;
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }

	  return this
	};

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint;

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }

	    leadSurrogate = null;

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo;
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }

	  return byteArray
	}


	function base64ToBytes (str) {
	  return toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i];
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}


	// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	function isBuffer(obj) {
	  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
	}

	function isFastBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
	}

	var bufferEs6 = /*#__PURE__*/Object.freeze({
		INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
		kMaxLength: _kMaxLength,
		Buffer: Buffer,
		SlowBuffer: SlowBuffer,
		isBuffer: isBuffer
	});

	var bn = createCommonjsModule(function (module) {
	(function (module, exports) {

	  // Utils
	  function assert (val, msg) {
	    if (!val) throw new Error(msg || 'Assertion failed');
	  }

	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits (ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  }

	  // BN

	  function BN (number, base, endian) {
	    if (BN.isBN(number)) {
	      return number;
	    }

	    this.negative = 0;
	    this.words = null;
	    this.length = 0;

	    // Reduction context
	    this.red = null;

	    if (number !== null) {
	      if (base === 'le' || base === 'be') {
	        endian = base;
	        base = 10;
	      }

	      this._init(number || 0, base || 10, endian || 'be');
	    }
	  }
	  if (typeof module === 'object') {
	    module.exports = BN;
	  } else {
	    exports.BN = BN;
	  }

	  BN.BN = BN;
	  BN.wordSize = 26;

	  var Buffer;
	  try {
	    Buffer = bufferEs6.Buffer;
	  } catch (e) {
	  }

	  BN.isBN = function isBN (num) {
	    if (num instanceof BN) {
	      return true;
	    }

	    return num !== null && typeof num === 'object' &&
	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };

	  BN.max = function max (left, right) {
	    if (left.cmp(right) > 0) return left;
	    return right;
	  };

	  BN.min = function min (left, right) {
	    if (left.cmp(right) < 0) return left;
	    return right;
	  };

	  BN.prototype._init = function init (number, base, endian) {
	    if (typeof number === 'number') {
	      return this._initNumber(number, base, endian);
	    }

	    if (typeof number === 'object') {
	      return this._initArray(number, base, endian);
	    }

	    if (base === 'hex') {
	      base = 16;
	    }
	    assert(base === (base | 0) && base >= 2 && base <= 36);

	    number = number.toString().replace(/\s+/g, '');
	    var start = 0;
	    if (number[0] === '-') {
	      start++;
	    }

	    if (base === 16) {
	      this._parseHex(number, start);
	    } else {
	      this._parseBase(number, base, start);
	    }

	    if (number[0] === '-') {
	      this.negative = 1;
	    }

	    this.strip();

	    if (endian !== 'le') return;

	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
	    if (number < 0) {
	      this.negative = 1;
	      number = -number;
	    }
	    if (number < 0x4000000) {
	      this.words = [ number & 0x3ffffff ];
	      this.length = 1;
	    } else if (number < 0x10000000000000) {
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff
	      ];
	      this.length = 2;
	    } else {
	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff,
	        1
	      ];
	      this.length = 3;
	    }

	    if (endian !== 'le') return;

	    // Reverse the bytes
	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initArray = function _initArray (number, base, endian) {
	    // Perhaps a Uint8Array
	    assert(typeof number.length === 'number');
	    if (number.length <= 0) {
	      this.words = [ 0 ];
	      this.length = 1;
	      return this;
	    }

	    this.length = Math.ceil(number.length / 3);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    var off = 0;
	    if (endian === 'be') {
	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    } else if (endian === 'le') {
	      for (i = 0, j = 0; i < number.length; i += 3) {
	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    }
	    return this.strip();
	  };

	  function parseHex (str, start, end) {
	    var r = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r <<= 4;

	      // 'a' - 'f'
	      if (c >= 49 && c <= 54) {
	        r |= c - 49 + 0xa;

	      // 'A' - 'F'
	      } else if (c >= 17 && c <= 22) {
	        r |= c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        r |= c & 0xf;
	      }
	    }
	    return r;
	  }

	  BN.prototype._parseHex = function _parseHex (number, start) {
	    // Create possibly bigger array to ensure that it fits the number
	    this.length = Math.ceil((number.length - start) / 6);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    // Scan 24-bit chunks and add them to the number
	    var off = 0;
	    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
	      w = parseHex(number, i, i + 6);
	      this.words[j] |= (w << off) & 0x3ffffff;
	      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
	      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
	      off += 24;
	      if (off >= 26) {
	        off -= 26;
	        j++;
	      }
	    }
	    if (i + 6 !== start) {
	      w = parseHex(number, start, i + 6);
	      this.words[j] |= (w << off) & 0x3ffffff;
	      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
	    }
	    this.strip();
	  };

	  function parseBase (str, start, end, mul) {
	    var r = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r *= mul;

	      // 'a'
	      if (c >= 49) {
	        r += c - 49 + 0xa;

	      // 'A'
	      } else if (c >= 17) {
	        r += c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        r += c;
	      }
	    }
	    return r;
	  }

	  BN.prototype._parseBase = function _parseBase (number, base, start) {
	    // Initialize as zero
	    this.words = [ 0 ];
	    this.length = 1;

	    // Find length of limb in base
	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
	      limbLen++;
	    }
	    limbLen--;
	    limbPow = (limbPow / base) | 0;

	    var total = number.length - start;
	    var mod = total % limbLen;
	    var end = Math.min(total, total - mod) + start;

	    var word = 0;
	    for (var i = start; i < end; i += limbLen) {
	      word = parseBase(number, i, i + limbLen, base);

	      this.imuln(limbPow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    if (mod !== 0) {
	      var pow = 1;
	      word = parseBase(number, i, number.length, base);

	      for (i = 0; i < mod; i++) {
	        pow *= base;
	      }

	      this.imuln(pow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }
	  };

	  BN.prototype.copy = function copy (dest) {
	    dest.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      dest.words[i] = this.words[i];
	    }
	    dest.length = this.length;
	    dest.negative = this.negative;
	    dest.red = this.red;
	  };

	  BN.prototype.clone = function clone () {
	    var r = new BN(null);
	    this.copy(r);
	    return r;
	  };

	  BN.prototype._expand = function _expand (size) {
	    while (this.length < size) {
	      this.words[this.length++] = 0;
	    }
	    return this;
	  };

	  // Remove leading `0` from `this`
	  BN.prototype.strip = function strip () {
	    while (this.length > 1 && this.words[this.length - 1] === 0) {
	      this.length--;
	    }
	    return this._normSign();
	  };

	  BN.prototype._normSign = function _normSign () {
	    // -0 = 0
	    if (this.length === 1 && this.words[0] === 0) {
	      this.negative = 0;
	    }
	    return this;
	  };

	  BN.prototype.inspect = function inspect () {
	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  };

	  /*

	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];

	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
	    zeros[i] = s;
	    s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
	    var groupSize = 0;
	    var groupBase = 1;
	    while (groupBase < (1 << BN.wordSize) / base) {
	      groupBase *= base;
	      groupSize += 1;
	    }
	    groupSizes[base] = groupSize;
	    groupBases[base] = groupBase;
	  }

	  */

	  var zeros = [
	    '',
	    '0',
	    '00',
	    '000',
	    '0000',
	    '00000',
	    '000000',
	    '0000000',
	    '00000000',
	    '000000000',
	    '0000000000',
	    '00000000000',
	    '000000000000',
	    '0000000000000',
	    '00000000000000',
	    '000000000000000',
	    '0000000000000000',
	    '00000000000000000',
	    '000000000000000000',
	    '0000000000000000000',
	    '00000000000000000000',
	    '000000000000000000000',
	    '0000000000000000000000',
	    '00000000000000000000000',
	    '000000000000000000000000',
	    '0000000000000000000000000'
	  ];

	  var groupSizes = [
	    0, 0,
	    25, 16, 12, 11, 10, 9, 8,
	    8, 7, 7, 7, 7, 6, 6,
	    6, 6, 6, 6, 6, 5, 5,
	    5, 5, 5, 5, 5, 5, 5,
	    5, 5, 5, 5, 5, 5, 5
	  ];

	  var groupBases = [
	    0, 0,
	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	  ];

	  BN.prototype.toString = function toString (base, padding) {
	    base = base || 10;
	    padding = padding | 0 || 1;

	    var out;
	    if (base === 16 || base === 'hex') {
	      out = '';
	      var off = 0;
	      var carry = 0;
	      for (var i = 0; i < this.length; i++) {
	        var w = this.words[i];
	        var word = (((w << off) | carry) & 0xffffff).toString(16);
	        carry = (w >>> (24 - off)) & 0xffffff;
	        if (carry !== 0 || i !== this.length - 1) {
	          out = zeros[6 - word.length] + word + out;
	        } else {
	          out = word + out;
	        }
	        off += 2;
	        if (off >= 26) {
	          off -= 26;
	          i--;
	        }
	      }
	      if (carry !== 0) {
	        out = carry.toString(16) + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    if (base === (base | 0) && base >= 2 && base <= 36) {
	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	      var groupSize = groupSizes[base];
	      // var groupBase = Math.pow(base, groupSize);
	      var groupBase = groupBases[base];
	      out = '';
	      var c = this.clone();
	      c.negative = 0;
	      while (!c.isZero()) {
	        var r = c.modn(groupBase).toString(base);
	        c = c.idivn(groupBase);

	        if (!c.isZero()) {
	          out = zeros[groupSize - r.length] + r + out;
	        } else {
	          out = r + out;
	        }
	      }
	      if (this.isZero()) {
	        out = '0' + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    assert(false, 'Base should be between 2 and 36');
	  };

	  BN.prototype.toNumber = function toNumber () {
	    var ret = this.words[0];
	    if (this.length === 2) {
	      ret += this.words[1] * 0x4000000;
	    } else if (this.length === 3 && this.words[2] === 0x01) {
	      // NOTE: at this stage it is known that the top bit is set
	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
	    } else if (this.length > 2) {
	      assert(false, 'Number can only safely store up to 53 bits');
	    }
	    return (this.negative !== 0) ? -ret : ret;
	  };

	  BN.prototype.toJSON = function toJSON () {
	    return this.toString(16);
	  };

	  BN.prototype.toBuffer = function toBuffer (endian, length) {
	    assert(typeof Buffer !== 'undefined');
	    return this.toArrayLike(Buffer, endian, length);
	  };

	  BN.prototype.toArray = function toArray (endian, length) {
	    return this.toArrayLike(Array, endian, length);
	  };

	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
	    var byteLength = this.byteLength();
	    var reqLength = length || Math.max(1, byteLength);
	    assert(byteLength <= reqLength, 'byte array longer than desired length');
	    assert(reqLength > 0, 'Requested array length <= 0');

	    this.strip();
	    var littleEndian = endian === 'le';
	    var res = new ArrayType(reqLength);

	    var b, i;
	    var q = this.clone();
	    if (!littleEndian) {
	      // Assume big-endian
	      for (i = 0; i < reqLength - byteLength; i++) {
	        res[i] = 0;
	      }

	      for (i = 0; !q.isZero(); i++) {
	        b = q.andln(0xff);
	        q.iushrn(8);

	        res[reqLength - i - 1] = b;
	      }
	    } else {
	      for (i = 0; !q.isZero(); i++) {
	        b = q.andln(0xff);
	        q.iushrn(8);

	        res[i] = b;
	      }

	      for (; i < reqLength; i++) {
	        res[i] = 0;
	      }
	    }

	    return res;
	  };

	  if (Math.clz32) {
	    BN.prototype._countBits = function _countBits (w) {
	      return 32 - Math.clz32(w);
	    };
	  } else {
	    BN.prototype._countBits = function _countBits (w) {
	      var t = w;
	      var r = 0;
	      if (t >= 0x1000) {
	        r += 13;
	        t >>>= 13;
	      }
	      if (t >= 0x40) {
	        r += 7;
	        t >>>= 7;
	      }
	      if (t >= 0x8) {
	        r += 4;
	        t >>>= 4;
	      }
	      if (t >= 0x02) {
	        r += 2;
	        t >>>= 2;
	      }
	      return r + t;
	    };
	  }

	  BN.prototype._zeroBits = function _zeroBits (w) {
	    // Short-cut
	    if (w === 0) return 26;

	    var t = w;
	    var r = 0;
	    if ((t & 0x1fff) === 0) {
	      r += 13;
	      t >>>= 13;
	    }
	    if ((t & 0x7f) === 0) {
	      r += 7;
	      t >>>= 7;
	    }
	    if ((t & 0xf) === 0) {
	      r += 4;
	      t >>>= 4;
	    }
	    if ((t & 0x3) === 0) {
	      r += 2;
	      t >>>= 2;
	    }
	    if ((t & 0x1) === 0) {
	      r++;
	    }
	    return r;
	  };

	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength () {
	    var w = this.words[this.length - 1];
	    var hi = this._countBits(w);
	    return (this.length - 1) * 26 + hi;
	  };

	  function toBitArray (num) {
	    var w = new Array(num.bitLength());

	    for (var bit = 0; bit < w.length; bit++) {
	      var off = (bit / 26) | 0;
	      var wbit = bit % 26;

	      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
	    }

	    return w;
	  }

	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits () {
	    if (this.isZero()) return 0;

	    var r = 0;
	    for (var i = 0; i < this.length; i++) {
	      var b = this._zeroBits(this.words[i]);
	      r += b;
	      if (b !== 26) break;
	    }
	    return r;
	  };

	  BN.prototype.byteLength = function byteLength () {
	    return Math.ceil(this.bitLength() / 8);
	  };

	  BN.prototype.toTwos = function toTwos (width) {
	    if (this.negative !== 0) {
	      return this.abs().inotn(width).iaddn(1);
	    }
	    return this.clone();
	  };

	  BN.prototype.fromTwos = function fromTwos (width) {
	    if (this.testn(width - 1)) {
	      return this.notn(width).iaddn(1).ineg();
	    }
	    return this.clone();
	  };

	  BN.prototype.isNeg = function isNeg () {
	    return this.negative !== 0;
	  };

	  // Return negative clone of `this`
	  BN.prototype.neg = function neg () {
	    return this.clone().ineg();
	  };

	  BN.prototype.ineg = function ineg () {
	    if (!this.isZero()) {
	      this.negative ^= 1;
	    }

	    return this;
	  };

	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor (num) {
	    while (this.length < num.length) {
	      this.words[this.length++] = 0;
	    }

	    for (var i = 0; i < num.length; i++) {
	      this.words[i] = this.words[i] | num.words[i];
	    }

	    return this.strip();
	  };

	  BN.prototype.ior = function ior (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuor(num);
	  };

	  // Or `num` with `this`
	  BN.prototype.or = function or (num) {
	    if (this.length > num.length) return this.clone().ior(num);
	    return num.clone().ior(this);
	  };

	  BN.prototype.uor = function uor (num) {
	    if (this.length > num.length) return this.clone().iuor(num);
	    return num.clone().iuor(this);
	  };

	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand (num) {
	    // b = min-length(num, this)
	    var b;
	    if (this.length > num.length) {
	      b = num;
	    } else {
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = this.words[i] & num.words[i];
	    }

	    this.length = b.length;

	    return this.strip();
	  };

	  BN.prototype.iand = function iand (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuand(num);
	  };

	  // And `num` with `this`
	  BN.prototype.and = function and (num) {
	    if (this.length > num.length) return this.clone().iand(num);
	    return num.clone().iand(this);
	  };

	  BN.prototype.uand = function uand (num) {
	    if (this.length > num.length) return this.clone().iuand(num);
	    return num.clone().iuand(this);
	  };

	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor (num) {
	    // a.length > b.length
	    var a;
	    var b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = a.words[i] ^ b.words[i];
	    }

	    if (this !== a) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = a.length;

	    return this.strip();
	  };

	  BN.prototype.ixor = function ixor (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuxor(num);
	  };

	  // Xor `num` with `this`
	  BN.prototype.xor = function xor (num) {
	    if (this.length > num.length) return this.clone().ixor(num);
	    return num.clone().ixor(this);
	  };

	  BN.prototype.uxor = function uxor (num) {
	    if (this.length > num.length) return this.clone().iuxor(num);
	    return num.clone().iuxor(this);
	  };

	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn (width) {
	    assert(typeof width === 'number' && width >= 0);

	    var bytesNeeded = Math.ceil(width / 26) | 0;
	    var bitsLeft = width % 26;

	    // Extend the buffer with leading zeroes
	    this._expand(bytesNeeded);

	    if (bitsLeft > 0) {
	      bytesNeeded--;
	    }

	    // Handle complete words
	    for (var i = 0; i < bytesNeeded; i++) {
	      this.words[i] = ~this.words[i] & 0x3ffffff;
	    }

	    // Handle the residue
	    if (bitsLeft > 0) {
	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
	    }

	    // And remove leading zeroes
	    return this.strip();
	  };

	  BN.prototype.notn = function notn (width) {
	    return this.clone().inotn(width);
	  };

	  // Set `bit` of `this`
	  BN.prototype.setn = function setn (bit, val) {
	    assert(typeof bit === 'number' && bit >= 0);

	    var off = (bit / 26) | 0;
	    var wbit = bit % 26;

	    this._expand(off + 1);

	    if (val) {
	      this.words[off] = this.words[off] | (1 << wbit);
	    } else {
	      this.words[off] = this.words[off] & ~(1 << wbit);
	    }

	    return this.strip();
	  };

	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd (num) {
	    var r;

	    // negative + positive
	    if (this.negative !== 0 && num.negative === 0) {
	      this.negative = 0;
	      r = this.isub(num);
	      this.negative ^= 1;
	      return this._normSign();

	    // positive + negative
	    } else if (this.negative === 0 && num.negative !== 0) {
	      num.negative = 0;
	      r = this.isub(num);
	      num.negative = 1;
	      return r._normSign();
	    }

	    // a.length > b.length
	    var a, b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }

	    this.length = a.length;
	    if (carry !== 0) {
	      this.words[this.length] = carry;
	      this.length++;
	    // Copy the rest of the words
	    } else if (a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    return this;
	  };

	  // Add `num` to `this`
	  BN.prototype.add = function add (num) {
	    var res;
	    if (num.negative !== 0 && this.negative === 0) {
	      num.negative = 0;
	      res = this.sub(num);
	      num.negative ^= 1;
	      return res;
	    } else if (num.negative === 0 && this.negative !== 0) {
	      this.negative = 0;
	      res = num.sub(this);
	      this.negative = 1;
	      return res;
	    }

	    if (this.length > num.length) return this.clone().iadd(num);

	    return num.clone().iadd(this);
	  };

	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub (num) {
	    // this - (-num) = this + num
	    if (num.negative !== 0) {
	      num.negative = 0;
	      var r = this.iadd(num);
	      num.negative = 1;
	      return r._normSign();

	    // -this - num = -(this + num)
	    } else if (this.negative !== 0) {
	      this.negative = 0;
	      this.iadd(num);
	      this.negative = 1;
	      return this._normSign();
	    }

	    // At this point both numbers are positive
	    var cmp = this.cmp(num);

	    // Optimization - zeroify
	    if (cmp === 0) {
	      this.negative = 0;
	      this.length = 1;
	      this.words[0] = 0;
	      return this;
	    }

	    // a > b
	    var a, b;
	    if (cmp > 0) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }

	    // Copy rest of the words
	    if (carry === 0 && i < a.length && a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = Math.max(this.length, i);

	    if (a !== this) {
	      this.negative = 1;
	    }

	    return this.strip();
	  };

	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub (num) {
	    return this.clone().isub(num);
	  };

	  function smallMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    var len = (self.length + num.length) | 0;
	    out.length = len;
	    len = (len - 1) | 0;

	    // Peel one iteration (compiler can't do it, because of code complexity)
	    var a = self.words[0] | 0;
	    var b = num.words[0] | 0;
	    var r = a * b;

	    var lo = r & 0x3ffffff;
	    var carry = (r / 0x4000000) | 0;
	    out.words[0] = lo;

	    for (var k = 1; k < len; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = carry >>> 26;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = (k - j) | 0;
	        a = self.words[i] | 0;
	        b = num.words[j] | 0;
	        r = a * b + rword;
	        ncarry += (r / 0x4000000) | 0;
	        rword = r & 0x3ffffff;
	      }
	      out.words[k] = rword | 0;
	      carry = ncarry | 0;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry | 0;
	    } else {
	      out.length--;
	    }

	    return out.strip();
	  }

	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo (self, num, out) {
	    var a = self.words;
	    var b = num.words;
	    var o = out.words;
	    var c = 0;
	    var lo;
	    var mid;
	    var hi;
	    var a0 = a[0] | 0;
	    var al0 = a0 & 0x1fff;
	    var ah0 = a0 >>> 13;
	    var a1 = a[1] | 0;
	    var al1 = a1 & 0x1fff;
	    var ah1 = a1 >>> 13;
	    var a2 = a[2] | 0;
	    var al2 = a2 & 0x1fff;
	    var ah2 = a2 >>> 13;
	    var a3 = a[3] | 0;
	    var al3 = a3 & 0x1fff;
	    var ah3 = a3 >>> 13;
	    var a4 = a[4] | 0;
	    var al4 = a4 & 0x1fff;
	    var ah4 = a4 >>> 13;
	    var a5 = a[5] | 0;
	    var al5 = a5 & 0x1fff;
	    var ah5 = a5 >>> 13;
	    var a6 = a[6] | 0;
	    var al6 = a6 & 0x1fff;
	    var ah6 = a6 >>> 13;
	    var a7 = a[7] | 0;
	    var al7 = a7 & 0x1fff;
	    var ah7 = a7 >>> 13;
	    var a8 = a[8] | 0;
	    var al8 = a8 & 0x1fff;
	    var ah8 = a8 >>> 13;
	    var a9 = a[9] | 0;
	    var al9 = a9 & 0x1fff;
	    var ah9 = a9 >>> 13;
	    var b0 = b[0] | 0;
	    var bl0 = b0 & 0x1fff;
	    var bh0 = b0 >>> 13;
	    var b1 = b[1] | 0;
	    var bl1 = b1 & 0x1fff;
	    var bh1 = b1 >>> 13;
	    var b2 = b[2] | 0;
	    var bl2 = b2 & 0x1fff;
	    var bh2 = b2 >>> 13;
	    var b3 = b[3] | 0;
	    var bl3 = b3 & 0x1fff;
	    var bh3 = b3 >>> 13;
	    var b4 = b[4] | 0;
	    var bl4 = b4 & 0x1fff;
	    var bh4 = b4 >>> 13;
	    var b5 = b[5] | 0;
	    var bl5 = b5 & 0x1fff;
	    var bh5 = b5 >>> 13;
	    var b6 = b[6] | 0;
	    var bl6 = b6 & 0x1fff;
	    var bh6 = b6 >>> 13;
	    var b7 = b[7] | 0;
	    var bl7 = b7 & 0x1fff;
	    var bh7 = b7 >>> 13;
	    var b8 = b[8] | 0;
	    var bl8 = b8 & 0x1fff;
	    var bh8 = b8 >>> 13;
	    var b9 = b[9] | 0;
	    var bl9 = b9 & 0x1fff;
	    var bh9 = b9 >>> 13;

	    out.negative = self.negative ^ num.negative;
	    out.length = 19;
	    /* k = 0 */
	    lo = Math.imul(al0, bl0);
	    mid = Math.imul(al0, bh0);
	    mid = (mid + Math.imul(ah0, bl0)) | 0;
	    hi = Math.imul(ah0, bh0);
	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
	    w0 &= 0x3ffffff;
	    /* k = 1 */
	    lo = Math.imul(al1, bl0);
	    mid = Math.imul(al1, bh0);
	    mid = (mid + Math.imul(ah1, bl0)) | 0;
	    hi = Math.imul(ah1, bh0);
	    lo = (lo + Math.imul(al0, bl1)) | 0;
	    mid = (mid + Math.imul(al0, bh1)) | 0;
	    mid = (mid + Math.imul(ah0, bl1)) | 0;
	    hi = (hi + Math.imul(ah0, bh1)) | 0;
	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
	    w1 &= 0x3ffffff;
	    /* k = 2 */
	    lo = Math.imul(al2, bl0);
	    mid = Math.imul(al2, bh0);
	    mid = (mid + Math.imul(ah2, bl0)) | 0;
	    hi = Math.imul(ah2, bh0);
	    lo = (lo + Math.imul(al1, bl1)) | 0;
	    mid = (mid + Math.imul(al1, bh1)) | 0;
	    mid = (mid + Math.imul(ah1, bl1)) | 0;
	    hi = (hi + Math.imul(ah1, bh1)) | 0;
	    lo = (lo + Math.imul(al0, bl2)) | 0;
	    mid = (mid + Math.imul(al0, bh2)) | 0;
	    mid = (mid + Math.imul(ah0, bl2)) | 0;
	    hi = (hi + Math.imul(ah0, bh2)) | 0;
	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
	    w2 &= 0x3ffffff;
	    /* k = 3 */
	    lo = Math.imul(al3, bl0);
	    mid = Math.imul(al3, bh0);
	    mid = (mid + Math.imul(ah3, bl0)) | 0;
	    hi = Math.imul(ah3, bh0);
	    lo = (lo + Math.imul(al2, bl1)) | 0;
	    mid = (mid + Math.imul(al2, bh1)) | 0;
	    mid = (mid + Math.imul(ah2, bl1)) | 0;
	    hi = (hi + Math.imul(ah2, bh1)) | 0;
	    lo = (lo + Math.imul(al1, bl2)) | 0;
	    mid = (mid + Math.imul(al1, bh2)) | 0;
	    mid = (mid + Math.imul(ah1, bl2)) | 0;
	    hi = (hi + Math.imul(ah1, bh2)) | 0;
	    lo = (lo + Math.imul(al0, bl3)) | 0;
	    mid = (mid + Math.imul(al0, bh3)) | 0;
	    mid = (mid + Math.imul(ah0, bl3)) | 0;
	    hi = (hi + Math.imul(ah0, bh3)) | 0;
	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
	    w3 &= 0x3ffffff;
	    /* k = 4 */
	    lo = Math.imul(al4, bl0);
	    mid = Math.imul(al4, bh0);
	    mid = (mid + Math.imul(ah4, bl0)) | 0;
	    hi = Math.imul(ah4, bh0);
	    lo = (lo + Math.imul(al3, bl1)) | 0;
	    mid = (mid + Math.imul(al3, bh1)) | 0;
	    mid = (mid + Math.imul(ah3, bl1)) | 0;
	    hi = (hi + Math.imul(ah3, bh1)) | 0;
	    lo = (lo + Math.imul(al2, bl2)) | 0;
	    mid = (mid + Math.imul(al2, bh2)) | 0;
	    mid = (mid + Math.imul(ah2, bl2)) | 0;
	    hi = (hi + Math.imul(ah2, bh2)) | 0;
	    lo = (lo + Math.imul(al1, bl3)) | 0;
	    mid = (mid + Math.imul(al1, bh3)) | 0;
	    mid = (mid + Math.imul(ah1, bl3)) | 0;
	    hi = (hi + Math.imul(ah1, bh3)) | 0;
	    lo = (lo + Math.imul(al0, bl4)) | 0;
	    mid = (mid + Math.imul(al0, bh4)) | 0;
	    mid = (mid + Math.imul(ah0, bl4)) | 0;
	    hi = (hi + Math.imul(ah0, bh4)) | 0;
	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
	    w4 &= 0x3ffffff;
	    /* k = 5 */
	    lo = Math.imul(al5, bl0);
	    mid = Math.imul(al5, bh0);
	    mid = (mid + Math.imul(ah5, bl0)) | 0;
	    hi = Math.imul(ah5, bh0);
	    lo = (lo + Math.imul(al4, bl1)) | 0;
	    mid = (mid + Math.imul(al4, bh1)) | 0;
	    mid = (mid + Math.imul(ah4, bl1)) | 0;
	    hi = (hi + Math.imul(ah4, bh1)) | 0;
	    lo = (lo + Math.imul(al3, bl2)) | 0;
	    mid = (mid + Math.imul(al3, bh2)) | 0;
	    mid = (mid + Math.imul(ah3, bl2)) | 0;
	    hi = (hi + Math.imul(ah3, bh2)) | 0;
	    lo = (lo + Math.imul(al2, bl3)) | 0;
	    mid = (mid + Math.imul(al2, bh3)) | 0;
	    mid = (mid + Math.imul(ah2, bl3)) | 0;
	    hi = (hi + Math.imul(ah2, bh3)) | 0;
	    lo = (lo + Math.imul(al1, bl4)) | 0;
	    mid = (mid + Math.imul(al1, bh4)) | 0;
	    mid = (mid + Math.imul(ah1, bl4)) | 0;
	    hi = (hi + Math.imul(ah1, bh4)) | 0;
	    lo = (lo + Math.imul(al0, bl5)) | 0;
	    mid = (mid + Math.imul(al0, bh5)) | 0;
	    mid = (mid + Math.imul(ah0, bl5)) | 0;
	    hi = (hi + Math.imul(ah0, bh5)) | 0;
	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
	    w5 &= 0x3ffffff;
	    /* k = 6 */
	    lo = Math.imul(al6, bl0);
	    mid = Math.imul(al6, bh0);
	    mid = (mid + Math.imul(ah6, bl0)) | 0;
	    hi = Math.imul(ah6, bh0);
	    lo = (lo + Math.imul(al5, bl1)) | 0;
	    mid = (mid + Math.imul(al5, bh1)) | 0;
	    mid = (mid + Math.imul(ah5, bl1)) | 0;
	    hi = (hi + Math.imul(ah5, bh1)) | 0;
	    lo = (lo + Math.imul(al4, bl2)) | 0;
	    mid = (mid + Math.imul(al4, bh2)) | 0;
	    mid = (mid + Math.imul(ah4, bl2)) | 0;
	    hi = (hi + Math.imul(ah4, bh2)) | 0;
	    lo = (lo + Math.imul(al3, bl3)) | 0;
	    mid = (mid + Math.imul(al3, bh3)) | 0;
	    mid = (mid + Math.imul(ah3, bl3)) | 0;
	    hi = (hi + Math.imul(ah3, bh3)) | 0;
	    lo = (lo + Math.imul(al2, bl4)) | 0;
	    mid = (mid + Math.imul(al2, bh4)) | 0;
	    mid = (mid + Math.imul(ah2, bl4)) | 0;
	    hi = (hi + Math.imul(ah2, bh4)) | 0;
	    lo = (lo + Math.imul(al1, bl5)) | 0;
	    mid = (mid + Math.imul(al1, bh5)) | 0;
	    mid = (mid + Math.imul(ah1, bl5)) | 0;
	    hi = (hi + Math.imul(ah1, bh5)) | 0;
	    lo = (lo + Math.imul(al0, bl6)) | 0;
	    mid = (mid + Math.imul(al0, bh6)) | 0;
	    mid = (mid + Math.imul(ah0, bl6)) | 0;
	    hi = (hi + Math.imul(ah0, bh6)) | 0;
	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
	    w6 &= 0x3ffffff;
	    /* k = 7 */
	    lo = Math.imul(al7, bl0);
	    mid = Math.imul(al7, bh0);
	    mid = (mid + Math.imul(ah7, bl0)) | 0;
	    hi = Math.imul(ah7, bh0);
	    lo = (lo + Math.imul(al6, bl1)) | 0;
	    mid = (mid + Math.imul(al6, bh1)) | 0;
	    mid = (mid + Math.imul(ah6, bl1)) | 0;
	    hi = (hi + Math.imul(ah6, bh1)) | 0;
	    lo = (lo + Math.imul(al5, bl2)) | 0;
	    mid = (mid + Math.imul(al5, bh2)) | 0;
	    mid = (mid + Math.imul(ah5, bl2)) | 0;
	    hi = (hi + Math.imul(ah5, bh2)) | 0;
	    lo = (lo + Math.imul(al4, bl3)) | 0;
	    mid = (mid + Math.imul(al4, bh3)) | 0;
	    mid = (mid + Math.imul(ah4, bl3)) | 0;
	    hi = (hi + Math.imul(ah4, bh3)) | 0;
	    lo = (lo + Math.imul(al3, bl4)) | 0;
	    mid = (mid + Math.imul(al3, bh4)) | 0;
	    mid = (mid + Math.imul(ah3, bl4)) | 0;
	    hi = (hi + Math.imul(ah3, bh4)) | 0;
	    lo = (lo + Math.imul(al2, bl5)) | 0;
	    mid = (mid + Math.imul(al2, bh5)) | 0;
	    mid = (mid + Math.imul(ah2, bl5)) | 0;
	    hi = (hi + Math.imul(ah2, bh5)) | 0;
	    lo = (lo + Math.imul(al1, bl6)) | 0;
	    mid = (mid + Math.imul(al1, bh6)) | 0;
	    mid = (mid + Math.imul(ah1, bl6)) | 0;
	    hi = (hi + Math.imul(ah1, bh6)) | 0;
	    lo = (lo + Math.imul(al0, bl7)) | 0;
	    mid = (mid + Math.imul(al0, bh7)) | 0;
	    mid = (mid + Math.imul(ah0, bl7)) | 0;
	    hi = (hi + Math.imul(ah0, bh7)) | 0;
	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
	    w7 &= 0x3ffffff;
	    /* k = 8 */
	    lo = Math.imul(al8, bl0);
	    mid = Math.imul(al8, bh0);
	    mid = (mid + Math.imul(ah8, bl0)) | 0;
	    hi = Math.imul(ah8, bh0);
	    lo = (lo + Math.imul(al7, bl1)) | 0;
	    mid = (mid + Math.imul(al7, bh1)) | 0;
	    mid = (mid + Math.imul(ah7, bl1)) | 0;
	    hi = (hi + Math.imul(ah7, bh1)) | 0;
	    lo = (lo + Math.imul(al6, bl2)) | 0;
	    mid = (mid + Math.imul(al6, bh2)) | 0;
	    mid = (mid + Math.imul(ah6, bl2)) | 0;
	    hi = (hi + Math.imul(ah6, bh2)) | 0;
	    lo = (lo + Math.imul(al5, bl3)) | 0;
	    mid = (mid + Math.imul(al5, bh3)) | 0;
	    mid = (mid + Math.imul(ah5, bl3)) | 0;
	    hi = (hi + Math.imul(ah5, bh3)) | 0;
	    lo = (lo + Math.imul(al4, bl4)) | 0;
	    mid = (mid + Math.imul(al4, bh4)) | 0;
	    mid = (mid + Math.imul(ah4, bl4)) | 0;
	    hi = (hi + Math.imul(ah4, bh4)) | 0;
	    lo = (lo + Math.imul(al3, bl5)) | 0;
	    mid = (mid + Math.imul(al3, bh5)) | 0;
	    mid = (mid + Math.imul(ah3, bl5)) | 0;
	    hi = (hi + Math.imul(ah3, bh5)) | 0;
	    lo = (lo + Math.imul(al2, bl6)) | 0;
	    mid = (mid + Math.imul(al2, bh6)) | 0;
	    mid = (mid + Math.imul(ah2, bl6)) | 0;
	    hi = (hi + Math.imul(ah2, bh6)) | 0;
	    lo = (lo + Math.imul(al1, bl7)) | 0;
	    mid = (mid + Math.imul(al1, bh7)) | 0;
	    mid = (mid + Math.imul(ah1, bl7)) | 0;
	    hi = (hi + Math.imul(ah1, bh7)) | 0;
	    lo = (lo + Math.imul(al0, bl8)) | 0;
	    mid = (mid + Math.imul(al0, bh8)) | 0;
	    mid = (mid + Math.imul(ah0, bl8)) | 0;
	    hi = (hi + Math.imul(ah0, bh8)) | 0;
	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
	    w8 &= 0x3ffffff;
	    /* k = 9 */
	    lo = Math.imul(al9, bl0);
	    mid = Math.imul(al9, bh0);
	    mid = (mid + Math.imul(ah9, bl0)) | 0;
	    hi = Math.imul(ah9, bh0);
	    lo = (lo + Math.imul(al8, bl1)) | 0;
	    mid = (mid + Math.imul(al8, bh1)) | 0;
	    mid = (mid + Math.imul(ah8, bl1)) | 0;
	    hi = (hi + Math.imul(ah8, bh1)) | 0;
	    lo = (lo + Math.imul(al7, bl2)) | 0;
	    mid = (mid + Math.imul(al7, bh2)) | 0;
	    mid = (mid + Math.imul(ah7, bl2)) | 0;
	    hi = (hi + Math.imul(ah7, bh2)) | 0;
	    lo = (lo + Math.imul(al6, bl3)) | 0;
	    mid = (mid + Math.imul(al6, bh3)) | 0;
	    mid = (mid + Math.imul(ah6, bl3)) | 0;
	    hi = (hi + Math.imul(ah6, bh3)) | 0;
	    lo = (lo + Math.imul(al5, bl4)) | 0;
	    mid = (mid + Math.imul(al5, bh4)) | 0;
	    mid = (mid + Math.imul(ah5, bl4)) | 0;
	    hi = (hi + Math.imul(ah5, bh4)) | 0;
	    lo = (lo + Math.imul(al4, bl5)) | 0;
	    mid = (mid + Math.imul(al4, bh5)) | 0;
	    mid = (mid + Math.imul(ah4, bl5)) | 0;
	    hi = (hi + Math.imul(ah4, bh5)) | 0;
	    lo = (lo + Math.imul(al3, bl6)) | 0;
	    mid = (mid + Math.imul(al3, bh6)) | 0;
	    mid = (mid + Math.imul(ah3, bl6)) | 0;
	    hi = (hi + Math.imul(ah3, bh6)) | 0;
	    lo = (lo + Math.imul(al2, bl7)) | 0;
	    mid = (mid + Math.imul(al2, bh7)) | 0;
	    mid = (mid + Math.imul(ah2, bl7)) | 0;
	    hi = (hi + Math.imul(ah2, bh7)) | 0;
	    lo = (lo + Math.imul(al1, bl8)) | 0;
	    mid = (mid + Math.imul(al1, bh8)) | 0;
	    mid = (mid + Math.imul(ah1, bl8)) | 0;
	    hi = (hi + Math.imul(ah1, bh8)) | 0;
	    lo = (lo + Math.imul(al0, bl9)) | 0;
	    mid = (mid + Math.imul(al0, bh9)) | 0;
	    mid = (mid + Math.imul(ah0, bl9)) | 0;
	    hi = (hi + Math.imul(ah0, bh9)) | 0;
	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
	    w9 &= 0x3ffffff;
	    /* k = 10 */
	    lo = Math.imul(al9, bl1);
	    mid = Math.imul(al9, bh1);
	    mid = (mid + Math.imul(ah9, bl1)) | 0;
	    hi = Math.imul(ah9, bh1);
	    lo = (lo + Math.imul(al8, bl2)) | 0;
	    mid = (mid + Math.imul(al8, bh2)) | 0;
	    mid = (mid + Math.imul(ah8, bl2)) | 0;
	    hi = (hi + Math.imul(ah8, bh2)) | 0;
	    lo = (lo + Math.imul(al7, bl3)) | 0;
	    mid = (mid + Math.imul(al7, bh3)) | 0;
	    mid = (mid + Math.imul(ah7, bl3)) | 0;
	    hi = (hi + Math.imul(ah7, bh3)) | 0;
	    lo = (lo + Math.imul(al6, bl4)) | 0;
	    mid = (mid + Math.imul(al6, bh4)) | 0;
	    mid = (mid + Math.imul(ah6, bl4)) | 0;
	    hi = (hi + Math.imul(ah6, bh4)) | 0;
	    lo = (lo + Math.imul(al5, bl5)) | 0;
	    mid = (mid + Math.imul(al5, bh5)) | 0;
	    mid = (mid + Math.imul(ah5, bl5)) | 0;
	    hi = (hi + Math.imul(ah5, bh5)) | 0;
	    lo = (lo + Math.imul(al4, bl6)) | 0;
	    mid = (mid + Math.imul(al4, bh6)) | 0;
	    mid = (mid + Math.imul(ah4, bl6)) | 0;
	    hi = (hi + Math.imul(ah4, bh6)) | 0;
	    lo = (lo + Math.imul(al3, bl7)) | 0;
	    mid = (mid + Math.imul(al3, bh7)) | 0;
	    mid = (mid + Math.imul(ah3, bl7)) | 0;
	    hi = (hi + Math.imul(ah3, bh7)) | 0;
	    lo = (lo + Math.imul(al2, bl8)) | 0;
	    mid = (mid + Math.imul(al2, bh8)) | 0;
	    mid = (mid + Math.imul(ah2, bl8)) | 0;
	    hi = (hi + Math.imul(ah2, bh8)) | 0;
	    lo = (lo + Math.imul(al1, bl9)) | 0;
	    mid = (mid + Math.imul(al1, bh9)) | 0;
	    mid = (mid + Math.imul(ah1, bl9)) | 0;
	    hi = (hi + Math.imul(ah1, bh9)) | 0;
	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
	    w10 &= 0x3ffffff;
	    /* k = 11 */
	    lo = Math.imul(al9, bl2);
	    mid = Math.imul(al9, bh2);
	    mid = (mid + Math.imul(ah9, bl2)) | 0;
	    hi = Math.imul(ah9, bh2);
	    lo = (lo + Math.imul(al8, bl3)) | 0;
	    mid = (mid + Math.imul(al8, bh3)) | 0;
	    mid = (mid + Math.imul(ah8, bl3)) | 0;
	    hi = (hi + Math.imul(ah8, bh3)) | 0;
	    lo = (lo + Math.imul(al7, bl4)) | 0;
	    mid = (mid + Math.imul(al7, bh4)) | 0;
	    mid = (mid + Math.imul(ah7, bl4)) | 0;
	    hi = (hi + Math.imul(ah7, bh4)) | 0;
	    lo = (lo + Math.imul(al6, bl5)) | 0;
	    mid = (mid + Math.imul(al6, bh5)) | 0;
	    mid = (mid + Math.imul(ah6, bl5)) | 0;
	    hi = (hi + Math.imul(ah6, bh5)) | 0;
	    lo = (lo + Math.imul(al5, bl6)) | 0;
	    mid = (mid + Math.imul(al5, bh6)) | 0;
	    mid = (mid + Math.imul(ah5, bl6)) | 0;
	    hi = (hi + Math.imul(ah5, bh6)) | 0;
	    lo = (lo + Math.imul(al4, bl7)) | 0;
	    mid = (mid + Math.imul(al4, bh7)) | 0;
	    mid = (mid + Math.imul(ah4, bl7)) | 0;
	    hi = (hi + Math.imul(ah4, bh7)) | 0;
	    lo = (lo + Math.imul(al3, bl8)) | 0;
	    mid = (mid + Math.imul(al3, bh8)) | 0;
	    mid = (mid + Math.imul(ah3, bl8)) | 0;
	    hi = (hi + Math.imul(ah3, bh8)) | 0;
	    lo = (lo + Math.imul(al2, bl9)) | 0;
	    mid = (mid + Math.imul(al2, bh9)) | 0;
	    mid = (mid + Math.imul(ah2, bl9)) | 0;
	    hi = (hi + Math.imul(ah2, bh9)) | 0;
	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
	    w11 &= 0x3ffffff;
	    /* k = 12 */
	    lo = Math.imul(al9, bl3);
	    mid = Math.imul(al9, bh3);
	    mid = (mid + Math.imul(ah9, bl3)) | 0;
	    hi = Math.imul(ah9, bh3);
	    lo = (lo + Math.imul(al8, bl4)) | 0;
	    mid = (mid + Math.imul(al8, bh4)) | 0;
	    mid = (mid + Math.imul(ah8, bl4)) | 0;
	    hi = (hi + Math.imul(ah8, bh4)) | 0;
	    lo = (lo + Math.imul(al7, bl5)) | 0;
	    mid = (mid + Math.imul(al7, bh5)) | 0;
	    mid = (mid + Math.imul(ah7, bl5)) | 0;
	    hi = (hi + Math.imul(ah7, bh5)) | 0;
	    lo = (lo + Math.imul(al6, bl6)) | 0;
	    mid = (mid + Math.imul(al6, bh6)) | 0;
	    mid = (mid + Math.imul(ah6, bl6)) | 0;
	    hi = (hi + Math.imul(ah6, bh6)) | 0;
	    lo = (lo + Math.imul(al5, bl7)) | 0;
	    mid = (mid + Math.imul(al5, bh7)) | 0;
	    mid = (mid + Math.imul(ah5, bl7)) | 0;
	    hi = (hi + Math.imul(ah5, bh7)) | 0;
	    lo = (lo + Math.imul(al4, bl8)) | 0;
	    mid = (mid + Math.imul(al4, bh8)) | 0;
	    mid = (mid + Math.imul(ah4, bl8)) | 0;
	    hi = (hi + Math.imul(ah4, bh8)) | 0;
	    lo = (lo + Math.imul(al3, bl9)) | 0;
	    mid = (mid + Math.imul(al3, bh9)) | 0;
	    mid = (mid + Math.imul(ah3, bl9)) | 0;
	    hi = (hi + Math.imul(ah3, bh9)) | 0;
	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
	    w12 &= 0x3ffffff;
	    /* k = 13 */
	    lo = Math.imul(al9, bl4);
	    mid = Math.imul(al9, bh4);
	    mid = (mid + Math.imul(ah9, bl4)) | 0;
	    hi = Math.imul(ah9, bh4);
	    lo = (lo + Math.imul(al8, bl5)) | 0;
	    mid = (mid + Math.imul(al8, bh5)) | 0;
	    mid = (mid + Math.imul(ah8, bl5)) | 0;
	    hi = (hi + Math.imul(ah8, bh5)) | 0;
	    lo = (lo + Math.imul(al7, bl6)) | 0;
	    mid = (mid + Math.imul(al7, bh6)) | 0;
	    mid = (mid + Math.imul(ah7, bl6)) | 0;
	    hi = (hi + Math.imul(ah7, bh6)) | 0;
	    lo = (lo + Math.imul(al6, bl7)) | 0;
	    mid = (mid + Math.imul(al6, bh7)) | 0;
	    mid = (mid + Math.imul(ah6, bl7)) | 0;
	    hi = (hi + Math.imul(ah6, bh7)) | 0;
	    lo = (lo + Math.imul(al5, bl8)) | 0;
	    mid = (mid + Math.imul(al5, bh8)) | 0;
	    mid = (mid + Math.imul(ah5, bl8)) | 0;
	    hi = (hi + Math.imul(ah5, bh8)) | 0;
	    lo = (lo + Math.imul(al4, bl9)) | 0;
	    mid = (mid + Math.imul(al4, bh9)) | 0;
	    mid = (mid + Math.imul(ah4, bl9)) | 0;
	    hi = (hi + Math.imul(ah4, bh9)) | 0;
	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
	    w13 &= 0x3ffffff;
	    /* k = 14 */
	    lo = Math.imul(al9, bl5);
	    mid = Math.imul(al9, bh5);
	    mid = (mid + Math.imul(ah9, bl5)) | 0;
	    hi = Math.imul(ah9, bh5);
	    lo = (lo + Math.imul(al8, bl6)) | 0;
	    mid = (mid + Math.imul(al8, bh6)) | 0;
	    mid = (mid + Math.imul(ah8, bl6)) | 0;
	    hi = (hi + Math.imul(ah8, bh6)) | 0;
	    lo = (lo + Math.imul(al7, bl7)) | 0;
	    mid = (mid + Math.imul(al7, bh7)) | 0;
	    mid = (mid + Math.imul(ah7, bl7)) | 0;
	    hi = (hi + Math.imul(ah7, bh7)) | 0;
	    lo = (lo + Math.imul(al6, bl8)) | 0;
	    mid = (mid + Math.imul(al6, bh8)) | 0;
	    mid = (mid + Math.imul(ah6, bl8)) | 0;
	    hi = (hi + Math.imul(ah6, bh8)) | 0;
	    lo = (lo + Math.imul(al5, bl9)) | 0;
	    mid = (mid + Math.imul(al5, bh9)) | 0;
	    mid = (mid + Math.imul(ah5, bl9)) | 0;
	    hi = (hi + Math.imul(ah5, bh9)) | 0;
	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
	    w14 &= 0x3ffffff;
	    /* k = 15 */
	    lo = Math.imul(al9, bl6);
	    mid = Math.imul(al9, bh6);
	    mid = (mid + Math.imul(ah9, bl6)) | 0;
	    hi = Math.imul(ah9, bh6);
	    lo = (lo + Math.imul(al8, bl7)) | 0;
	    mid = (mid + Math.imul(al8, bh7)) | 0;
	    mid = (mid + Math.imul(ah8, bl7)) | 0;
	    hi = (hi + Math.imul(ah8, bh7)) | 0;
	    lo = (lo + Math.imul(al7, bl8)) | 0;
	    mid = (mid + Math.imul(al7, bh8)) | 0;
	    mid = (mid + Math.imul(ah7, bl8)) | 0;
	    hi = (hi + Math.imul(ah7, bh8)) | 0;
	    lo = (lo + Math.imul(al6, bl9)) | 0;
	    mid = (mid + Math.imul(al6, bh9)) | 0;
	    mid = (mid + Math.imul(ah6, bl9)) | 0;
	    hi = (hi + Math.imul(ah6, bh9)) | 0;
	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
	    w15 &= 0x3ffffff;
	    /* k = 16 */
	    lo = Math.imul(al9, bl7);
	    mid = Math.imul(al9, bh7);
	    mid = (mid + Math.imul(ah9, bl7)) | 0;
	    hi = Math.imul(ah9, bh7);
	    lo = (lo + Math.imul(al8, bl8)) | 0;
	    mid = (mid + Math.imul(al8, bh8)) | 0;
	    mid = (mid + Math.imul(ah8, bl8)) | 0;
	    hi = (hi + Math.imul(ah8, bh8)) | 0;
	    lo = (lo + Math.imul(al7, bl9)) | 0;
	    mid = (mid + Math.imul(al7, bh9)) | 0;
	    mid = (mid + Math.imul(ah7, bl9)) | 0;
	    hi = (hi + Math.imul(ah7, bh9)) | 0;
	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
	    w16 &= 0x3ffffff;
	    /* k = 17 */
	    lo = Math.imul(al9, bl8);
	    mid = Math.imul(al9, bh8);
	    mid = (mid + Math.imul(ah9, bl8)) | 0;
	    hi = Math.imul(ah9, bh8);
	    lo = (lo + Math.imul(al8, bl9)) | 0;
	    mid = (mid + Math.imul(al8, bh9)) | 0;
	    mid = (mid + Math.imul(ah8, bl9)) | 0;
	    hi = (hi + Math.imul(ah8, bh9)) | 0;
	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
	    w17 &= 0x3ffffff;
	    /* k = 18 */
	    lo = Math.imul(al9, bl9);
	    mid = Math.imul(al9, bh9);
	    mid = (mid + Math.imul(ah9, bl9)) | 0;
	    hi = Math.imul(ah9, bh9);
	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
	    w18 &= 0x3ffffff;
	    o[0] = w0;
	    o[1] = w1;
	    o[2] = w2;
	    o[3] = w3;
	    o[4] = w4;
	    o[5] = w5;
	    o[6] = w6;
	    o[7] = w7;
	    o[8] = w8;
	    o[9] = w9;
	    o[10] = w10;
	    o[11] = w11;
	    o[12] = w12;
	    o[13] = w13;
	    o[14] = w14;
	    o[15] = w15;
	    o[16] = w16;
	    o[17] = w17;
	    o[18] = w18;
	    if (c !== 0) {
	      o[19] = c;
	      out.length++;
	    }
	    return out;
	  };

	  // Polyfill comb
	  if (!Math.imul) {
	    comb10MulTo = smallMulTo;
	  }

	  function bigMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    out.length = self.length + num.length;

	    var carry = 0;
	    var hncarry = 0;
	    for (var k = 0; k < out.length - 1; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = hncarry;
	      hncarry = 0;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j;
	        var a = self.words[i] | 0;
	        var b = num.words[j] | 0;
	        var r = a * b;

	        var lo = r & 0x3ffffff;
	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	        lo = (lo + rword) | 0;
	        rword = lo & 0x3ffffff;
	        ncarry = (ncarry + (lo >>> 26)) | 0;

	        hncarry += ncarry >>> 26;
	        ncarry &= 0x3ffffff;
	      }
	      out.words[k] = rword;
	      carry = ncarry;
	      ncarry = hncarry;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry;
	    } else {
	      out.length--;
	    }

	    return out.strip();
	  }

	  function jumboMulTo (self, num, out) {
	    var fftm = new FFTM();
	    return fftm.mulp(self, num, out);
	  }

	  BN.prototype.mulTo = function mulTo (num, out) {
	    var res;
	    var len = this.length + num.length;
	    if (this.length === 10 && num.length === 10) {
	      res = comb10MulTo(this, num, out);
	    } else if (len < 63) {
	      res = smallMulTo(this, num, out);
	    } else if (len < 1024) {
	      res = bigMulTo(this, num, out);
	    } else {
	      res = jumboMulTo(this, num, out);
	    }

	    return res;
	  };

	  // Cooley-Tukey algorithm for FFT
	  // slightly revisited to rely on looping instead of recursion

	  function FFTM (x, y) {
	    this.x = x;
	    this.y = y;
	  }

	  FFTM.prototype.makeRBT = function makeRBT (N) {
	    var t = new Array(N);
	    var l = BN.prototype._countBits(N) - 1;
	    for (var i = 0; i < N; i++) {
	      t[i] = this.revBin(i, l, N);
	    }

	    return t;
	  };

	  // Returns binary-reversed representation of `x`
	  FFTM.prototype.revBin = function revBin (x, l, N) {
	    if (x === 0 || x === N - 1) return x;

	    var rb = 0;
	    for (var i = 0; i < l; i++) {
	      rb |= (x & 1) << (l - i - 1);
	      x >>= 1;
	    }

	    return rb;
	  };

	  // Performs "tweedling" phase, therefore 'emulating'
	  // behaviour of the recursive algorithm
	  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
	    for (var i = 0; i < N; i++) {
	      rtws[i] = rws[rbt[i]];
	      itws[i] = iws[rbt[i]];
	    }
	  };

	  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
	    this.permute(rbt, rws, iws, rtws, itws, N);

	    for (var s = 1; s < N; s <<= 1) {
	      var l = s << 1;

	      var rtwdf = Math.cos(2 * Math.PI / l);
	      var itwdf = Math.sin(2 * Math.PI / l);

	      for (var p = 0; p < N; p += l) {
	        var rtwdf_ = rtwdf;
	        var itwdf_ = itwdf;

	        for (var j = 0; j < s; j++) {
	          var re = rtws[p + j];
	          var ie = itws[p + j];

	          var ro = rtws[p + j + s];
	          var io = itws[p + j + s];

	          var rx = rtwdf_ * ro - itwdf_ * io;

	          io = rtwdf_ * io + itwdf_ * ro;
	          ro = rx;

	          rtws[p + j] = re + ro;
	          itws[p + j] = ie + io;

	          rtws[p + j + s] = re - ro;
	          itws[p + j + s] = ie - io;

	          /* jshint maxdepth : false */
	          if (j !== l) {
	            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

	            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
	            rtwdf_ = rx;
	          }
	        }
	      }
	    }
	  };

	  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
	    var N = Math.max(m, n) | 1;
	    var odd = N & 1;
	    var i = 0;
	    for (N = N / 2 | 0; N; N = N >>> 1) {
	      i++;
	    }

	    return 1 << i + 1 + odd;
	  };

	  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
	    if (N <= 1) return;

	    for (var i = 0; i < N / 2; i++) {
	      var t = rws[i];

	      rws[i] = rws[N - i - 1];
	      rws[N - i - 1] = t;

	      t = iws[i];

	      iws[i] = -iws[N - i - 1];
	      iws[N - i - 1] = -t;
	    }
	  };

	  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
	    var carry = 0;
	    for (var i = 0; i < N / 2; i++) {
	      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
	        Math.round(ws[2 * i] / N) +
	        carry;

	      ws[i] = w & 0x3ffffff;

	      if (w < 0x4000000) {
	        carry = 0;
	      } else {
	        carry = w / 0x4000000 | 0;
	      }
	    }

	    return ws;
	  };

	  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
	    var carry = 0;
	    for (var i = 0; i < len; i++) {
	      carry = carry + (ws[i] | 0);

	      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
	      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
	    }

	    // Pad with zeroes
	    for (i = 2 * len; i < N; ++i) {
	      rws[i] = 0;
	    }

	    assert(carry === 0);
	    assert((carry & ~0x1fff) === 0);
	  };

	  FFTM.prototype.stub = function stub (N) {
	    var ph = new Array(N);
	    for (var i = 0; i < N; i++) {
	      ph[i] = 0;
	    }

	    return ph;
	  };

	  FFTM.prototype.mulp = function mulp (x, y, out) {
	    var N = 2 * this.guessLen13b(x.length, y.length);

	    var rbt = this.makeRBT(N);

	    var _ = this.stub(N);

	    var rws = new Array(N);
	    var rwst = new Array(N);
	    var iwst = new Array(N);

	    var nrws = new Array(N);
	    var nrwst = new Array(N);
	    var niwst = new Array(N);

	    var rmws = out.words;
	    rmws.length = N;

	    this.convert13b(x.words, x.length, rws, N);
	    this.convert13b(y.words, y.length, nrws, N);

	    this.transform(rws, _, rwst, iwst, N, rbt);
	    this.transform(nrws, _, nrwst, niwst, N, rbt);

	    for (var i = 0; i < N; i++) {
	      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
	      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
	      rwst[i] = rx;
	    }

	    this.conjugate(rwst, iwst, N);
	    this.transform(rwst, iwst, rmws, _, N, rbt);
	    this.conjugate(rmws, _, N);
	    this.normalize13b(rmws, N);

	    out.negative = x.negative ^ y.negative;
	    out.length = x.length + y.length;
	    return out.strip();
	  };

	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return this.mulTo(num, out);
	  };

	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return jumboMulTo(this, num, out);
	  };

	  // In-place Multiplication
	  BN.prototype.imul = function imul (num) {
	    return this.clone().mulTo(num, this);
	  };

	  BN.prototype.imuln = function imuln (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);

	    // Carry
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = (this.words[i] | 0) * num;
	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
	      carry >>= 26;
	      carry += (w / 0x4000000) | 0;
	      // NOTE: lo is 27bit maximum
	      carry += lo >>> 26;
	      this.words[i] = lo & 0x3ffffff;
	    }

	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }

	    return this;
	  };

	  BN.prototype.muln = function muln (num) {
	    return this.clone().imuln(num);
	  };

	  // `this` * `this`
	  BN.prototype.sqr = function sqr () {
	    return this.mul(this);
	  };

	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr () {
	    return this.imul(this.clone());
	  };

	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow (num) {
	    var w = toBitArray(num);
	    if (w.length === 0) return new BN(1);

	    // Skip leading zeroes
	    var res = this;
	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
	      if (w[i] !== 0) break;
	    }

	    if (++i < w.length) {
	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
	        if (w[i] === 0) continue;

	        res = res.mul(q);
	      }
	    }

	    return res;
	  };

	  // Shift-left in-place
	  BN.prototype.iushln = function iushln (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
	    var i;

	    if (r !== 0) {
	      var carry = 0;

	      for (i = 0; i < this.length; i++) {
	        var newCarry = this.words[i] & carryMask;
	        var c = ((this.words[i] | 0) - newCarry) << r;
	        this.words[i] = c | carry;
	        carry = newCarry >>> (26 - r);
	      }

	      if (carry) {
	        this.words[i] = carry;
	        this.length++;
	      }
	    }

	    if (s !== 0) {
	      for (i = this.length - 1; i >= 0; i--) {
	        this.words[i + s] = this.words[i];
	      }

	      for (i = 0; i < s; i++) {
	        this.words[i] = 0;
	      }

	      this.length += s;
	    }

	    return this.strip();
	  };

	  BN.prototype.ishln = function ishln (bits) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushln(bits);
	  };

	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var h;
	    if (hint) {
	      h = (hint - (hint % 26)) / 26;
	    } else {
	      h = 0;
	    }

	    var r = bits % 26;
	    var s = Math.min((bits - r) / 26, this.length);
	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	    var maskedWords = extended;

	    h -= s;
	    h = Math.max(0, h);

	    // Extended mode, copy masked part
	    if (maskedWords) {
	      for (var i = 0; i < s; i++) {
	        maskedWords.words[i] = this.words[i];
	      }
	      maskedWords.length = s;
	    }

	    if (s === 0) ; else if (this.length > s) {
	      this.length -= s;
	      for (i = 0; i < this.length; i++) {
	        this.words[i] = this.words[i + s];
	      }
	    } else {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    var carry = 0;
	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
	      var word = this.words[i] | 0;
	      this.words[i] = (carry << (26 - r)) | (word >>> r);
	      carry = word & mask;
	    }

	    // Push carried bits as a mask
	    if (maskedWords && carry !== 0) {
	      maskedWords.words[maskedWords.length++] = carry;
	    }

	    if (this.length === 0) {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    return this.strip();
	  };

	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushrn(bits, hint, extended);
	  };

	  // Shift-left
	  BN.prototype.shln = function shln (bits) {
	    return this.clone().ishln(bits);
	  };

	  BN.prototype.ushln = function ushln (bits) {
	    return this.clone().iushln(bits);
	  };

	  // Shift-right
	  BN.prototype.shrn = function shrn (bits) {
	    return this.clone().ishrn(bits);
	  };

	  BN.prototype.ushrn = function ushrn (bits) {
	    return this.clone().iushrn(bits);
	  };

	  // Test if n bit is set
	  BN.prototype.testn = function testn (bit) {
	    assert(typeof bit === 'number' && bit >= 0);
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) return false;

	    // Check bit and return
	    var w = this.words[s];

	    return !!(w & q);
	  };

	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;

	    assert(this.negative === 0, 'imaskn works only with positive numbers');

	    if (this.length <= s) {
	      return this;
	    }

	    if (r !== 0) {
	      s++;
	    }
	    this.length = Math.min(s, this.length);

	    if (r !== 0) {
	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	      this.words[this.length - 1] &= mask;
	    }

	    return this.strip();
	  };

	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn (bits) {
	    return this.clone().imaskn(bits);
	  };

	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.isubn(-num);

	    // Possible sign change
	    if (this.negative !== 0) {
	      if (this.length === 1 && (this.words[0] | 0) < num) {
	        this.words[0] = num - (this.words[0] | 0);
	        this.negative = 0;
	        return this;
	      }

	      this.negative = 0;
	      this.isubn(num);
	      this.negative = 1;
	      return this;
	    }

	    // Add without checks
	    return this._iaddn(num);
	  };

	  BN.prototype._iaddn = function _iaddn (num) {
	    this.words[0] += num;

	    // Carry
	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	      this.words[i] -= 0x4000000;
	      if (i === this.length - 1) {
	        this.words[i + 1] = 1;
	      } else {
	        this.words[i + 1]++;
	      }
	    }
	    this.length = Math.max(this.length, i + 1);

	    return this;
	  };

	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.iaddn(-num);

	    if (this.negative !== 0) {
	      this.negative = 0;
	      this.iaddn(num);
	      this.negative = 1;
	      return this;
	    }

	    this.words[0] -= num;

	    if (this.length === 1 && this.words[0] < 0) {
	      this.words[0] = -this.words[0];
	      this.negative = 1;
	    } else {
	      // Carry
	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	        this.words[i] += 0x4000000;
	        this.words[i + 1] -= 1;
	      }
	    }

	    return this.strip();
	  };

	  BN.prototype.addn = function addn (num) {
	    return this.clone().iaddn(num);
	  };

	  BN.prototype.subn = function subn (num) {
	    return this.clone().isubn(num);
	  };

	  BN.prototype.iabs = function iabs () {
	    this.negative = 0;

	    return this;
	  };

	  BN.prototype.abs = function abs () {
	    return this.clone().iabs();
	  };

	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
	    var len = num.length + shift;
	    var i;

	    this._expand(len);

	    var w;
	    var carry = 0;
	    for (i = 0; i < num.length; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      var right = (num.words[i] | 0) * mul;
	      w -= right & 0x3ffffff;
	      carry = (w >> 26) - ((right / 0x4000000) | 0);
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    for (; i < this.length - shift; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      carry = w >> 26;
	      this.words[i + shift] = w & 0x3ffffff;
	    }

	    if (carry === 0) return this.strip();

	    // Subtraction overflow
	    assert(carry === -1);
	    carry = 0;
	    for (i = 0; i < this.length; i++) {
	      w = -(this.words[i] | 0) + carry;
	      carry = w >> 26;
	      this.words[i] = w & 0x3ffffff;
	    }
	    this.negative = 1;

	    return this.strip();
	  };

	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
	    var shift = this.length - num.length;

	    var a = this.clone();
	    var b = num;

	    // Normalize
	    var bhi = b.words[b.length - 1] | 0;
	    var bhiBits = this._countBits(bhi);
	    shift = 26 - bhiBits;
	    if (shift !== 0) {
	      b = b.ushln(shift);
	      a.iushln(shift);
	      bhi = b.words[b.length - 1] | 0;
	    }

	    // Initialize quotient
	    var m = a.length - b.length;
	    var q;

	    if (mode !== 'mod') {
	      q = new BN(null);
	      q.length = m + 1;
	      q.words = new Array(q.length);
	      for (var i = 0; i < q.length; i++) {
	        q.words[i] = 0;
	      }
	    }

	    var diff = a.clone()._ishlnsubmul(b, 1, m);
	    if (diff.negative === 0) {
	      a = diff;
	      if (q) {
	        q.words[m] = 1;
	      }
	    }

	    for (var j = m - 1; j >= 0; j--) {
	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
	        (a.words[b.length + j - 1] | 0);

	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
	      // (0x7ffffff)
	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

	      a._ishlnsubmul(b, qj, j);
	      while (a.negative !== 0) {
	        qj--;
	        a.negative = 0;
	        a._ishlnsubmul(b, 1, j);
	        if (!a.isZero()) {
	          a.negative ^= 1;
	        }
	      }
	      if (q) {
	        q.words[j] = qj;
	      }
	    }
	    if (q) {
	      q.strip();
	    }
	    a.strip();

	    // Denormalize
	    if (mode !== 'div' && shift !== 0) {
	      a.iushrn(shift);
	    }

	    return {
	      div: q || null,
	      mod: a
	    };
	  };

	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod (num, mode, positive) {
	    assert(!num.isZero());

	    if (this.isZero()) {
	      return {
	        div: new BN(0),
	        mod: new BN(0)
	      };
	    }

	    var div, mod, res;
	    if (this.negative !== 0 && num.negative === 0) {
	      res = this.neg().divmod(num, mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.iadd(num);
	        }
	      }

	      return {
	        div: div,
	        mod: mod
	      };
	    }

	    if (this.negative === 0 && num.negative !== 0) {
	      res = this.divmod(num.neg(), mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      return {
	        div: div,
	        mod: res.mod
	      };
	    }

	    if ((this.negative & num.negative) !== 0) {
	      res = this.neg().divmod(num.neg(), mode);

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.isub(num);
	        }
	      }

	      return {
	        div: res.div,
	        mod: mod
	      };
	    }

	    // Both numbers are positive at this point

	    // Strip both numbers to approximate shift value
	    if (num.length > this.length || this.cmp(num) < 0) {
	      return {
	        div: new BN(0),
	        mod: this
	      };
	    }

	    // Very short reduction
	    if (num.length === 1) {
	      if (mode === 'div') {
	        return {
	          div: this.divn(num.words[0]),
	          mod: null
	        };
	      }

	      if (mode === 'mod') {
	        return {
	          div: null,
	          mod: new BN(this.modn(num.words[0]))
	        };
	      }

	      return {
	        div: this.divn(num.words[0]),
	        mod: new BN(this.modn(num.words[0]))
	      };
	    }

	    return this._wordDiv(num, mode);
	  };

	  // Find `this` / `num`
	  BN.prototype.div = function div (num) {
	    return this.divmod(num, 'div', false).div;
	  };

	  // Find `this` % `num`
	  BN.prototype.mod = function mod (num) {
	    return this.divmod(num, 'mod', false).mod;
	  };

	  BN.prototype.umod = function umod (num) {
	    return this.divmod(num, 'mod', true).mod;
	  };

	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound (num) {
	    var dm = this.divmod(num);

	    // Fast case - exact division
	    if (dm.mod.isZero()) return dm.div;

	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

	    var half = num.ushrn(1);
	    var r2 = num.andln(1);
	    var cmp = mod.cmp(half);

	    // Round down
	    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

	    // Round up
	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };

	  BN.prototype.modn = function modn (num) {
	    assert(num <= 0x3ffffff);
	    var p = (1 << 26) % num;

	    var acc = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      acc = (p * acc + (this.words[i] | 0)) % num;
	    }

	    return acc;
	  };

	  // In-place division by number
	  BN.prototype.idivn = function idivn (num) {
	    assert(num <= 0x3ffffff);

	    var carry = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var w = (this.words[i] | 0) + carry * 0x4000000;
	      this.words[i] = (w / num) | 0;
	      carry = w % num;
	    }

	    return this.strip();
	  };

	  BN.prototype.divn = function divn (num) {
	    return this.clone().idivn(num);
	  };

	  BN.prototype.egcd = function egcd (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var x = this;
	    var y = p.clone();

	    if (x.negative !== 0) {
	      x = x.umod(p);
	    } else {
	      x = x.clone();
	    }

	    // A * x + B * y = x
	    var A = new BN(1);
	    var B = new BN(0);

	    // C * x + D * y = y
	    var C = new BN(0);
	    var D = new BN(1);

	    var g = 0;

	    while (x.isEven() && y.isEven()) {
	      x.iushrn(1);
	      y.iushrn(1);
	      ++g;
	    }

	    var yp = y.clone();
	    var xp = x.clone();

	    while (!x.isZero()) {
	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        x.iushrn(i);
	        while (i-- > 0) {
	          if (A.isOdd() || B.isOdd()) {
	            A.iadd(yp);
	            B.isub(xp);
	          }

	          A.iushrn(1);
	          B.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        y.iushrn(j);
	        while (j-- > 0) {
	          if (C.isOdd() || D.isOdd()) {
	            C.iadd(yp);
	            D.isub(xp);
	          }

	          C.iushrn(1);
	          D.iushrn(1);
	        }
	      }

	      if (x.cmp(y) >= 0) {
	        x.isub(y);
	        A.isub(C);
	        B.isub(D);
	      } else {
	        y.isub(x);
	        C.isub(A);
	        D.isub(B);
	      }
	    }

	    return {
	      a: C,
	      b: D,
	      gcd: y.iushln(g)
	    };
	  };

	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var a = this;
	    var b = p.clone();

	    if (a.negative !== 0) {
	      a = a.umod(p);
	    } else {
	      a = a.clone();
	    }

	    var x1 = new BN(1);
	    var x2 = new BN(0);

	    var delta = b.clone();

	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        a.iushrn(i);
	        while (i-- > 0) {
	          if (x1.isOdd()) {
	            x1.iadd(delta);
	          }

	          x1.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        b.iushrn(j);
	        while (j-- > 0) {
	          if (x2.isOdd()) {
	            x2.iadd(delta);
	          }

	          x2.iushrn(1);
	        }
	      }

	      if (a.cmp(b) >= 0) {
	        a.isub(b);
	        x1.isub(x2);
	      } else {
	        b.isub(a);
	        x2.isub(x1);
	      }
	    }

	    var res;
	    if (a.cmpn(1) === 0) {
	      res = x1;
	    } else {
	      res = x2;
	    }

	    if (res.cmpn(0) < 0) {
	      res.iadd(p);
	    }

	    return res;
	  };

	  BN.prototype.gcd = function gcd (num) {
	    if (this.isZero()) return num.abs();
	    if (num.isZero()) return this.abs();

	    var a = this.clone();
	    var b = num.clone();
	    a.negative = 0;
	    b.negative = 0;

	    // Remove common factor of two
	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	      a.iushrn(1);
	      b.iushrn(1);
	    }

	    do {
	      while (a.isEven()) {
	        a.iushrn(1);
	      }
	      while (b.isEven()) {
	        b.iushrn(1);
	      }

	      var r = a.cmp(b);
	      if (r < 0) {
	        // Swap `a` and `b` to make `a` always bigger than `b`
	        var t = a;
	        a = b;
	        b = t;
	      } else if (r === 0 || b.cmpn(1) === 0) {
	        break;
	      }

	      a.isub(b);
	    } while (true);

	    return b.iushln(shift);
	  };

	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm (num) {
	    return this.egcd(num).a.umod(num);
	  };

	  BN.prototype.isEven = function isEven () {
	    return (this.words[0] & 1) === 0;
	  };

	  BN.prototype.isOdd = function isOdd () {
	    return (this.words[0] & 1) === 1;
	  };

	  // And first word and num
	  BN.prototype.andln = function andln (num) {
	    return this.words[0] & num;
	  };

	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn (bit) {
	    assert(typeof bit === 'number');
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) {
	      this._expand(s + 1);
	      this.words[s] |= q;
	      return this;
	    }

	    // Add bit and propagate, if needed
	    var carry = q;
	    for (var i = s; carry !== 0 && i < this.length; i++) {
	      var w = this.words[i] | 0;
	      w += carry;
	      carry = w >>> 26;
	      w &= 0x3ffffff;
	      this.words[i] = w;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return this;
	  };

	  BN.prototype.isZero = function isZero () {
	    return this.length === 1 && this.words[0] === 0;
	  };

	  BN.prototype.cmpn = function cmpn (num) {
	    var negative = num < 0;

	    if (this.negative !== 0 && !negative) return -1;
	    if (this.negative === 0 && negative) return 1;

	    this.strip();

	    var res;
	    if (this.length > 1) {
	      res = 1;
	    } else {
	      if (negative) {
	        num = -num;
	      }

	      assert(num <= 0x3ffffff, 'Number is too big');

	      var w = this.words[0] | 0;
	      res = w === num ? 0 : w < num ? -1 : 1;
	    }
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp (num) {
	    if (this.negative !== 0 && num.negative === 0) return -1;
	    if (this.negative === 0 && num.negative !== 0) return 1;

	    var res = this.ucmp(num);
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp (num) {
	    // At this point both numbers have the same sign
	    if (this.length > num.length) return 1;
	    if (this.length < num.length) return -1;

	    var res = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var a = this.words[i] | 0;
	      var b = num.words[i] | 0;

	      if (a === b) continue;
	      if (a < b) {
	        res = -1;
	      } else if (a > b) {
	        res = 1;
	      }
	      break;
	    }
	    return res;
	  };

	  BN.prototype.gtn = function gtn (num) {
	    return this.cmpn(num) === 1;
	  };

	  BN.prototype.gt = function gt (num) {
	    return this.cmp(num) === 1;
	  };

	  BN.prototype.gten = function gten (num) {
	    return this.cmpn(num) >= 0;
	  };

	  BN.prototype.gte = function gte (num) {
	    return this.cmp(num) >= 0;
	  };

	  BN.prototype.ltn = function ltn (num) {
	    return this.cmpn(num) === -1;
	  };

	  BN.prototype.lt = function lt (num) {
	    return this.cmp(num) === -1;
	  };

	  BN.prototype.lten = function lten (num) {
	    return this.cmpn(num) <= 0;
	  };

	  BN.prototype.lte = function lte (num) {
	    return this.cmp(num) <= 0;
	  };

	  BN.prototype.eqn = function eqn (num) {
	    return this.cmpn(num) === 0;
	  };

	  BN.prototype.eq = function eq (num) {
	    return this.cmp(num) === 0;
	  };

	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red (num) {
	    return new Red(num);
	  };

	  BN.prototype.toRed = function toRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    assert(this.negative === 0, 'red works only with positives');
	    return ctx.convertTo(this)._forceRed(ctx);
	  };

	  BN.prototype.fromRed = function fromRed () {
	    assert(this.red, 'fromRed works only with numbers in reduction context');
	    return this.red.convertFrom(this);
	  };

	  BN.prototype._forceRed = function _forceRed (ctx) {
	    this.red = ctx;
	    return this;
	  };

	  BN.prototype.forceRed = function forceRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    return this._forceRed(ctx);
	  };

	  BN.prototype.redAdd = function redAdd (num) {
	    assert(this.red, 'redAdd works only with red numbers');
	    return this.red.add(this, num);
	  };

	  BN.prototype.redIAdd = function redIAdd (num) {
	    assert(this.red, 'redIAdd works only with red numbers');
	    return this.red.iadd(this, num);
	  };

	  BN.prototype.redSub = function redSub (num) {
	    assert(this.red, 'redSub works only with red numbers');
	    return this.red.sub(this, num);
	  };

	  BN.prototype.redISub = function redISub (num) {
	    assert(this.red, 'redISub works only with red numbers');
	    return this.red.isub(this, num);
	  };

	  BN.prototype.redShl = function redShl (num) {
	    assert(this.red, 'redShl works only with red numbers');
	    return this.red.shl(this, num);
	  };

	  BN.prototype.redMul = function redMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.mul(this, num);
	  };

	  BN.prototype.redIMul = function redIMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.imul(this, num);
	  };

	  BN.prototype.redSqr = function redSqr () {
	    assert(this.red, 'redSqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqr(this);
	  };

	  BN.prototype.redISqr = function redISqr () {
	    assert(this.red, 'redISqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.isqr(this);
	  };

	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt () {
	    assert(this.red, 'redSqrt works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqrt(this);
	  };

	  BN.prototype.redInvm = function redInvm () {
	    assert(this.red, 'redInvm works only with red numbers');
	    this.red._verify1(this);
	    return this.red.invm(this);
	  };

	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg () {
	    assert(this.red, 'redNeg works only with red numbers');
	    this.red._verify1(this);
	    return this.red.neg(this);
	  };

	  BN.prototype.redPow = function redPow (num) {
	    assert(this.red && !num.red, 'redPow(normalNum)');
	    this.red._verify1(this);
	    return this.red.pow(this, num);
	  };

	  // Prime numbers with efficient reduction
	  var primes = {
	    k256: null,
	    p224: null,
	    p192: null,
	    p25519: null
	  };

	  // Pseudo-Mersenne prime
	  function MPrime (name, p) {
	    // P = 2 ^ N - K
	    this.name = name;
	    this.p = new BN(p, 16);
	    this.n = this.p.bitLength();
	    this.k = new BN(1).iushln(this.n).isub(this.p);

	    this.tmp = this._tmp();
	  }

	  MPrime.prototype._tmp = function _tmp () {
	    var tmp = new BN(null);
	    tmp.words = new Array(Math.ceil(this.n / 13));
	    return tmp;
	  };

	  MPrime.prototype.ireduce = function ireduce (num) {
	    // Assumes that `num` is less than `P^2`
	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	    var r = num;
	    var rlen;

	    do {
	      this.split(r, this.tmp);
	      r = this.imulK(r);
	      r = r.iadd(this.tmp);
	      rlen = r.bitLength();
	    } while (rlen > this.n);

	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
	    if (cmp === 0) {
	      r.words[0] = 0;
	      r.length = 1;
	    } else if (cmp > 0) {
	      r.isub(this.p);
	    } else {
	      r.strip();
	    }

	    return r;
	  };

	  MPrime.prototype.split = function split (input, out) {
	    input.iushrn(this.n, 0, out);
	  };

	  MPrime.prototype.imulK = function imulK (num) {
	    return num.imul(this.k);
	  };

	  function K256 () {
	    MPrime.call(
	      this,
	      'k256',
	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);

	  K256.prototype.split = function split (input, output) {
	    // 256 = 9 * 26 + 22
	    var mask = 0x3fffff;

	    var outLen = Math.min(input.length, 9);
	    for (var i = 0; i < outLen; i++) {
	      output.words[i] = input.words[i];
	    }
	    output.length = outLen;

	    if (input.length <= 9) {
	      input.words[0] = 0;
	      input.length = 1;
	      return;
	    }

	    // Shift by 9 limbs
	    var prev = input.words[9];
	    output.words[output.length++] = prev & mask;

	    for (i = 10; i < input.length; i++) {
	      var next = input.words[i] | 0;
	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
	      prev = next;
	    }
	    prev >>>= 22;
	    input.words[i - 10] = prev;
	    if (prev === 0 && input.length > 10) {
	      input.length -= 10;
	    } else {
	      input.length -= 9;
	    }
	  };

	  K256.prototype.imulK = function imulK (num) {
	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	    num.words[num.length] = 0;
	    num.words[num.length + 1] = 0;
	    num.length += 2;

	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
	    var lo = 0;
	    for (var i = 0; i < num.length; i++) {
	      var w = num.words[i] | 0;
	      lo += w * 0x3d1;
	      num.words[i] = lo & 0x3ffffff;
	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
	    }

	    // Fast length reduction
	    if (num.words[num.length - 1] === 0) {
	      num.length--;
	      if (num.words[num.length - 1] === 0) {
	        num.length--;
	      }
	    }
	    return num;
	  };

	  function P224 () {
	    MPrime.call(
	      this,
	      'p224',
	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);

	  function P192 () {
	    MPrime.call(
	      this,
	      'p192',
	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);

	  function P25519 () {
	    // 2 ^ 255 - 19
	    MPrime.call(
	      this,
	      '25519',
	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);

	  P25519.prototype.imulK = function imulK (num) {
	    // K = 0x13
	    var carry = 0;
	    for (var i = 0; i < num.length; i++) {
	      var hi = (num.words[i] | 0) * 0x13 + carry;
	      var lo = hi & 0x3ffffff;
	      hi >>>= 26;

	      num.words[i] = lo;
	      carry = hi;
	    }
	    if (carry !== 0) {
	      num.words[num.length++] = carry;
	    }
	    return num;
	  };

	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime (name) {
	    // Cached version of prime
	    if (primes[name]) return primes[name];

	    var prime;
	    if (name === 'k256') {
	      prime = new K256();
	    } else if (name === 'p224') {
	      prime = new P224();
	    } else if (name === 'p192') {
	      prime = new P192();
	    } else if (name === 'p25519') {
	      prime = new P25519();
	    } else {
	      throw new Error('Unknown prime ' + name);
	    }
	    primes[name] = prime;

	    return prime;
	  };

	  //
	  // Base reduction engine
	  //
	  function Red (m) {
	    if (typeof m === 'string') {
	      var prime = BN._prime(m);
	      this.m = prime.p;
	      this.prime = prime;
	    } else {
	      assert(m.gtn(1), 'modulus must be greater than 1');
	      this.m = m;
	      this.prime = null;
	    }
	  }

	  Red.prototype._verify1 = function _verify1 (a) {
	    assert(a.negative === 0, 'red works only with positives');
	    assert(a.red, 'red works only with red numbers');
	  };

	  Red.prototype._verify2 = function _verify2 (a, b) {
	    assert((a.negative | b.negative) === 0, 'red works only with positives');
	    assert(a.red && a.red === b.red,
	      'red works only with red numbers');
	  };

	  Red.prototype.imod = function imod (a) {
	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
	    return a.umod(this.m)._forceRed(this);
	  };

	  Red.prototype.neg = function neg (a) {
	    if (a.isZero()) {
	      return a.clone();
	    }

	    return this.m.sub(a)._forceRed(this);
	  };

	  Red.prototype.add = function add (a, b) {
	    this._verify2(a, b);

	    var res = a.add(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.iadd = function iadd (a, b) {
	    this._verify2(a, b);

	    var res = a.iadd(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res;
	  };

	  Red.prototype.sub = function sub (a, b) {
	    this._verify2(a, b);

	    var res = a.sub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.isub = function isub (a, b) {
	    this._verify2(a, b);

	    var res = a.isub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res;
	  };

	  Red.prototype.shl = function shl (a, num) {
	    this._verify1(a);
	    return this.imod(a.ushln(num));
	  };

	  Red.prototype.imul = function imul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.imul(b));
	  };

	  Red.prototype.mul = function mul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.mul(b));
	  };

	  Red.prototype.isqr = function isqr (a) {
	    return this.imul(a, a.clone());
	  };

	  Red.prototype.sqr = function sqr (a) {
	    return this.mul(a, a);
	  };

	  Red.prototype.sqrt = function sqrt (a) {
	    if (a.isZero()) return a.clone();

	    var mod3 = this.m.andln(3);
	    assert(mod3 % 2 === 1);

	    // Fast case
	    if (mod3 === 3) {
	      var pow = this.m.add(new BN(1)).iushrn(2);
	      return this.pow(a, pow);
	    }

	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	    //
	    // Find Q and S, that Q * 2 ^ S = (P - 1)
	    var q = this.m.subn(1);
	    var s = 0;
	    while (!q.isZero() && q.andln(1) === 0) {
	      s++;
	      q.iushrn(1);
	    }
	    assert(!q.isZero());

	    var one = new BN(1).toRed(this);
	    var nOne = one.redNeg();

	    // Find quadratic non-residue
	    // NOTE: Max is such because of generalized Riemann hypothesis.
	    var lpow = this.m.subn(1).iushrn(1);
	    var z = this.m.bitLength();
	    z = new BN(2 * z * z).toRed(this);

	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
	      z.redIAdd(nOne);
	    }

	    var c = this.pow(z, q);
	    var r = this.pow(a, q.addn(1).iushrn(1));
	    var t = this.pow(a, q);
	    var m = s;
	    while (t.cmp(one) !== 0) {
	      var tmp = t;
	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
	        tmp = tmp.redSqr();
	      }
	      assert(i < m);
	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

	      r = r.redMul(b);
	      c = b.redSqr();
	      t = t.redMul(c);
	      m = i;
	    }

	    return r;
	  };

	  Red.prototype.invm = function invm (a) {
	    var inv = a._invmp(this.m);
	    if (inv.negative !== 0) {
	      inv.negative = 0;
	      return this.imod(inv).redNeg();
	    } else {
	      return this.imod(inv);
	    }
	  };

	  Red.prototype.pow = function pow (a, num) {
	    if (num.isZero()) return new BN(1).toRed(this);
	    if (num.cmpn(1) === 0) return a.clone();

	    var windowSize = 4;
	    var wnd = new Array(1 << windowSize);
	    wnd[0] = new BN(1).toRed(this);
	    wnd[1] = a;
	    for (var i = 2; i < wnd.length; i++) {
	      wnd[i] = this.mul(wnd[i - 1], a);
	    }

	    var res = wnd[0];
	    var current = 0;
	    var currentLen = 0;
	    var start = num.bitLength() % 26;
	    if (start === 0) {
	      start = 26;
	    }

	    for (i = num.length - 1; i >= 0; i--) {
	      var word = num.words[i];
	      for (var j = start - 1; j >= 0; j--) {
	        var bit = (word >> j) & 1;
	        if (res !== wnd[0]) {
	          res = this.sqr(res);
	        }

	        if (bit === 0 && current === 0) {
	          currentLen = 0;
	          continue;
	        }

	        current <<= 1;
	        current |= bit;
	        currentLen++;
	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

	        res = this.mul(res, wnd[current]);
	        currentLen = 0;
	        current = 0;
	      }
	      start = 26;
	    }

	    return res;
	  };

	  Red.prototype.convertTo = function convertTo (num) {
	    var r = num.umod(this.m);

	    return r === num ? r.clone() : r;
	  };

	  Red.prototype.convertFrom = function convertFrom (num) {
	    var res = num.clone();
	    res.red = null;
	    return res;
	  };

	  //
	  // Montgomery method engine
	  //

	  BN.mont = function mont (num) {
	    return new Mont(num);
	  };

	  function Mont (m) {
	    Red.call(this, m);

	    this.shift = this.m.bitLength();
	    if (this.shift % 26 !== 0) {
	      this.shift += 26 - (this.shift % 26);
	    }

	    this.r = new BN(1).iushln(this.shift);
	    this.r2 = this.imod(this.r.sqr());
	    this.rinv = this.r._invmp(this.m);

	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
	    this.minv = this.minv.umod(this.r);
	    this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);

	  Mont.prototype.convertTo = function convertTo (num) {
	    return this.imod(num.ushln(this.shift));
	  };

	  Mont.prototype.convertFrom = function convertFrom (num) {
	    var r = this.imod(num.mul(this.rinv));
	    r.red = null;
	    return r;
	  };

	  Mont.prototype.imul = function imul (a, b) {
	    if (a.isZero() || b.isZero()) {
	      a.words[0] = 0;
	      a.length = 1;
	      return a;
	    }

	    var t = a.imul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;

	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.mul = function mul (a, b) {
	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

	    var t = a.mul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.invm = function invm (a) {
	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	    var res = this.imod(a._invmp(this.m).mul(this.r2));
	    return res._forceRed(this);
	  };
	})(module, commonjsGlobal);
	});

	// ++  muk
	//
	// See arvo/sys/hoon.hoon.



	const ux_FF = new bn(0xFF);
	const ux_FF00 = new bn(0xFF00);
	const u_256 = new bn(256);

	/**
	 * Standard murmur3.
	 *
	 * @param  {Number}  syd
	 * @param  {Number}  len
	 * @param  {BN}  key
	 * @return  {BN}
	 */
	const muk = (syd, len, key) => {
	  const lo = key.and(ux_FF).toNumber();
	  const hi = key.and(ux_FF00).div(u_256).toNumber();
	  const kee = String.fromCharCode(lo) + String.fromCharCode(hi);
	  return new bn(murmurhash3_32_gc(kee, syd))
	};

	// see: https://github.com/garycourt/murmurhash-js
	//
	// Copyright (c) 2011 Gary Court
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy of
	// this software and associated documentation files (the "Software"), to deal in
	// the Software without restriction, including without limitation the rights to
	// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
	// of the Software, and to permit persons to whom the Software is furnished to do
	// so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in all
	// copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	// SOFTWARE.

	/**
	 * JS Implementation of MurmurHash3 (r136) (as of May 20, 2011)
	 *
	 * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
	 * @see http://github.com/garycourt/murmurhash-js
	 * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
	 * @see http://sites.google.com/site/murmurhash/
	 *
	 * @param {string} key ASCII only
	 * @param {number} seed Positive integer only
	 * @return {number} 32-bit positive integer hash
	 **/
	const murmurhash3_32_gc = (key, seed) => {
	  let remainder, bytes, h1, h1b, c1, c2, k1, i;

	  remainder = key.length & 3; // key.length % 4
	  bytes = key.length - remainder;
	  h1 = seed;
	  c1 = 0xcc9e2d51;
	  c2 = 0x1b873593;
	  i = 0;

	  while (i < bytes) {
	      k1 =
	        ((key.charCodeAt(i) & 0xff)) |
	        ((key.charCodeAt(++i) & 0xff) << 8) |
	        ((key.charCodeAt(++i) & 0xff) << 16) |
	        ((key.charCodeAt(++i) & 0xff) << 24);
	    ++i;

	    k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;
	    k1 = (k1 << 15) | (k1 >>> 17);
	    k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;

	    h1 ^= k1;
	        h1 = (h1 << 13) | (h1 >>> 19);
	    h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;
	    h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));
	  }

	  k1 = 0;

	  switch (remainder) {
	    case 3: k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
	    case 2: k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
	    case 1: k1 ^= (key.charCodeAt(i) & 0xff);

	    k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
	    k1 = (k1 << 15) | (k1 >>> 17);
	    k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
	    h1 ^= k1;
	  }

	  h1 ^= key.length;

	  h1 ^= h1 >>> 16;
	  h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
	  h1 ^= h1 >>> 13;
	  h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;
	  h1 ^= h1 >>> 16;

	  return h1 >>> 0;
	};

	var muk_1 = {
	  muk
	};

	// ++  ob
	//
	// See arvo/sys/hoon.hoon.


	const { muk: muk$1 } = muk_1;

	const ux_1_0000 = new bn('10000', 'hex');
	const ux_ffff_ffff = new bn('ffffffff', 'hex');
	const ux_1_0000_0000 = new bn('100000000', 'hex');
	const ux_ffff_ffff_ffff_ffff = new bn('ffffffffffffffff', 'hex');
	const ux_ffff_ffff_0000_0000 = new bn('ffffffff00000000', 'hex');

	const u_65535 = new bn('65535');
	const u_65536 = new bn('65536');

	/**
	 * Conceal structure v2.
	 *
	 * @param  {String, Number, BN}  pyn
	 * @return  {BN}
	 */
	const feen = (arg) => {
	  const loop = (pyn) => {
	    const lo = pyn.and(ux_ffff_ffff);
	    const hi = pyn.and(ux_ffff_ffff_0000_0000);

	    return pyn.gte(ux_1_0000) && pyn.lte(ux_ffff_ffff)
	      ? ux_1_0000.add(fice(pyn.sub(ux_1_0000)))
	      : pyn.gte(ux_1_0000_0000) && pyn.lte(ux_ffff_ffff_ffff_ffff)
	      ? hi.or(loop(lo))
	      : pyn
	  };

	  return loop(new bn(arg))
	};

	/**
	 * Restore structure v2.
	 *
	 * @param  {String, Number, BN}  pyn
	 * @return  {BN}
	 */
	const fend = (arg) => {
	  const loop = (cry) => {
	    const lo = cry.and(ux_ffff_ffff);
	    const hi = cry.and(ux_ffff_ffff_0000_0000);

	    return cry.gte(ux_1_0000) && cry.lte(ux_ffff_ffff)
	      ? ux_1_0000.add(teil(cry.sub(ux_1_0000)))
	      : cry.gte(ux_1_0000_0000) && cry.lte(ux_ffff_ffff_ffff_ffff)
	      ? hi.or(loop(lo))
	      : cry
	  };

	  return loop(new bn(arg))
	};

	/**
	 * Adapted from Black and Rogaway "Ciphers with arbitrary finite domains",
	 * 2002.
	 *
	 * @param  {String, Number, BN}
	 * @return  {BN}
	 */
	const fice = (arg) => {
	  const nor = new bn(arg);

	  const sel =
	    rynd(3,
	    rynd(2,
	    rynd(1,
	    rynd(0, [ nor.mod(u_65535), nor.div(u_65535) ]))));

	  return (u_65535.mul(sel[0])).add(sel[1])
	};

	/**
	 * Reverse fice.
	 *
	 * @param  {String}  vip
	 * @return  {BN}
	 */
	const teil = (arg) => {
	  const vip = new bn(arg);

	  const sel =
	    rund(0,
	    rund(1,
	    rund(2,
	    rund(3, [ vip.mod(u_65535), vip.div(u_65535) ]))));

	  return (u_65535.mul(sel[0])).add(sel[1])
	};

	/**
	 * Feistel round.
	 *
	 * @param  {Number}  n
	 * @param  {Array<BN>}  [l, r]
	 * @return  {Array<BN>}
	 */
	const rynd = (n, arr) => {
	  const l = arr[0];
	  const r = arr[1];
	  const p = n % 2 === 0 ? u_65535 : u_65536;
	  return [ r, l.add(muk$1(raku[n], 2, r)).mod(p) ]
	};

	/**
	 * Reverse round.
	 *
	 * @param  {Number}  n
	 * @param  {Array<BN>}  [l, r]
	 * @return  {Array<BN>}
	 */
	const rund = (n, arr) => {
	  const l = arr[0];
	  const r = arr[1];
	  const p = n % 2 === 0 ? u_65535 : u_65536;
	  return [ r, l.add(p).sub(muk$1(raku[n], 2, r).mod(p)).mod(p) ]
	};

	const raku = [
	  0xb76d5eed,
	  0xee281300,
	  0x85bcae01,
	  0x4b387af7,
	];

	var ob$1 = {
	  feen,
	  fend,
	  fice,
	  teil,
	  rynd,
	  rund,
	  raku
	};

	// ++  co
	//
	// See arvo/sys/hoon.hoon.






	const zero = new bn(0);
	const one = new bn(1);
	const two = new bn(2);
	const three = new bn(3);
	const four = new bn(4);
	const five = new bn(5);

	const pre = `
dozmarbinwansamlitsighidfidlissogdirwacsabwissib\
rigsoldopmodfoglidhopdardorlorhodfolrintogsilmir\
holpaslacrovlivdalsatlibtabhanticpidtorbolfosdot\
losdilforpilramtirwintadbicdifrocwidbisdasmidlop\
rilnardapmolsanlocnovsitnidtipsicropwitnatpanmin\
ritpodmottamtolsavposnapnopsomfinfonbanmorworsip\
ronnorbotwicsocwatdolmagpicdavbidbaltimtasmallig\
sivtagpadsaldivdactansidfabtarmonranniswolmispal\
lasdismaprabtobrollatlonnodnavfignomnibpagsopral\
bilhaddocridmocpacravripfaltodtiltinhapmicfanpat\
taclabmogsimsonpinlomrictapfirhasbosbatpochactid\
havsaplindibhosdabbitbarracparloddosbortochilmac\
tomdigfilfasmithobharmighinradmashalraglagfadtop\
mophabnilnosmilfopfamdatnoldinhatnacrisfotribhoc\
nimlarfitwalrapsarnalmoslandondanladdovrivbacpol\
laptalpitnambonrostonfodponsovnocsorlavmatmipfip\
`;

	const suf = `
zodnecbudwessevpersutletfulpensytdurwepserwylsun\
rypsyxdyrnuphebpeglupdepdysputlughecryttyvsydnex\
lunmeplutseppesdelsulpedtemledtulmetwenbynhexfeb\
pyldulhetmevruttylwydtepbesdexsefwycburderneppur\
rysrebdennutsubpetrulsynregtydsupsemwynrecmegnet\
secmulnymtevwebsummutnyxrextebfushepbenmuswyxsym\
selrucdecwexsyrwetdylmynmesdetbetbeltuxtugmyrpel\
syptermebsetdutdegtexsurfeltudnuxruxrenwytnubmed\
lytdusnebrumtynseglyxpunresredfunrevrefmectedrus\
bexlebduxrynnumpyxrygryxfeptyrtustyclegnemfermer\
tenlusnussyltecmexpubrymtucfyllepdebbermughuttun\
bylsudpemdevlurdefbusbeprunmelpexdytbyttyplevmyl\
wedducfurfexnulluclennerlexrupnedlecrydlydfenwel\
nydhusrelrudneshesfetdesretdunlernyrsebhulryllud\
remlysfynwerrycsugnysnyllyndyndemluxfedsedbecmun\
lyrtesmudnytbyrsenwegfyrmurtelreptegpecnelnevfes\
`;

	const patp2syls = name =>
	  name.replace(/[\^~-]/g,'').match(/.{1,3}/g);

	const splitAt = (index, str) => [str.slice(0, index), str.slice(index)];

	const prefixes = pre.match(/.{1,3}/g);

	const suffixes = suf.match(/.{1,3}/g);

	const bex = (n) =>
	  two.pow(n);

	const rsh = (a, b, c) =>
	  c.div(bex(bex(a).mul(b)));

	const met = (a, b, c = zero) =>
	  b.eq(zero)
	  ? c
	  : met(a, rsh(a, one, b), c.add(one));

	const end = (a, b, c) =>
	  c.mod(bex(bex(a).mul(b)));

	/**
	 * Convert a number to a @p-encoded string.
	 *
	 * @param  {String, Number, BN}  arg
	 * @return  {String}
	 */
	const patp = (arg) => {
	  const n = new bn(arg);

	  const sxz = ob$1.feen(n);
	  const dyy = met(four, sxz);

	  const loop = (tsxz, timp, trep) => {
	    const log = end(four, one, tsxz);
	    const pre = prefixes[rsh(three, one, log)];
	    const suf = suffixes[end(three, one, log)];
	    const etc =
	      (timp.mod(four)).eq(zero)
	        ? timp.eq(zero)
	          ? ''
	          : '--'
	        : '-';

	    const res = pre + suf + etc + trep;

	    return timp.eq(dyy)
	      ? trep
	      : loop(rsh(four, one, tsxz), timp.add(one), res)
	  };

	  const dyx = met(three, sxz);

	  return '~' +
	    (dyx.lte(one)
	    ? suffixes[sxz]
	    : loop(sxz, zero, ''))
	};

	/**
	 * Convert a hex-encoded string to a @p-encoded string.
	 *
	 * @param  {String}  hex
	 * @return  {String}
	 */
	const hex2patp = (hex) =>
	  patp(new bn(hex, 'hex'));

	/**
	 * Convert a @p-encoded string to a hex-encoded string.
	 *
	 * @param  {String}  name @p
	 * @return  {String}
	 */
	const patp2hex = (name) => {
	  if (isValidPat(name) === false) {
	    throw new Error('patp2hex: not a valid @p')
	  }
	  const syls = patp2syls(name);

	  const syl2bin = idx =>
	    idx.toString(2).padStart(8, '0');

	  const addr = lodash.reduce(syls, (acc, syl, idx) =>
	    idx % 2 !== 0 || syls.length === 1
	      ? acc + syl2bin(suffixes.indexOf(syl))
	      : acc + syl2bin(prefixes.indexOf(syl)),
	  '');

	  const bn$1 = new bn(addr, 2);
	  const hex = ob$1.fend(bn$1).toString('hex');
	  return hex.length % 2 !== 0
	    ? hex.padStart(hex.length + 1, '0')
	    : hex
	};

	/**
	 * Convert a @p-encoded string to a bignum.
	 *
	 * @param  {String}  name @p
	 * @return  {BN}
	 */
	const patp2bn = name =>
	  new bn(patp2hex(name), 'hex');

	/**
	 * Convert a @p-encoded string to a decimal-encoded string.
	 *
	 * @param  {String}  name @p
	 * @return  {String}
	 */
	const patp2dec = name =>
	  patp2bn(name).toString();

	/**
	 * Convert a number to a @q-encoded string.
	 *
	 * @param  {String, Number, BN}  arg
	 * @return  {String}
	 */
	const patq = (arg) => {
	  const bn$1 = new bn(arg);
	  const buf = bn$1.toArrayLike(Buffer);
	  return buf2patq(buf)
	};

	/**
	 * Convert a Buffer into a @q-encoded string.
	 *
	 * @param  {Buffer}  buf
	 * @return  {String}
	 */
	const buf2patq = buf => {
	  const chunked =
	    buf.length % 2 !== 0 && buf.length > 1
	    ? lodash.concat([[buf[0]]], lodash.chunk(buf.slice(1), 2))
	    : lodash.chunk(buf, 2);

	  const prefixName = byts =>
	    lodash.isUndefined(byts[1])
	    ? prefixes[0] + suffixes[byts[0]]
	    : prefixes[byts[0]] + suffixes[byts[1]];

	  const name = byts =>
	    lodash.isUndefined(byts[1])
	    ? suffixes[byts[0]]
	    : prefixes[byts[0]] + suffixes[byts[1]];

	  const alg = pair =>
	    pair.length % 2 !== 0 && chunked.length > 1
	    ? prefixName(pair)
	    : name(pair);

	  return chunked.reduce((acc, elem) =>
	    acc + (acc === '~' ? '' : '-') + alg(elem), '~')
	};

	/**
	 * Convert a hex-encoded string to a @q-encoded string.
	 *
	 * Note that this preserves leading zero bytes.
	 *
	 * @param  {String}  hex
	 * @return  {String}
	 */
	const hex2patq = arg => {
	  const hex =
	    arg.length % 2 !== 0
	    ? arg.padStart(arg.length + 1, '0')
	    : arg;

	  const buf = Buffer.from(hex, 'hex');
	  return buf2patq(buf)
	};

	/**
	 * Convert a @q-encoded string to a hex-encoded string.
	 *
	 * Note that this preserves leading zero bytes.
	 *
	 * @param  {String}  name @q
	 * @return  {String}
	 */
	const patq2hex = name => {
	  if (isValidPat(name) === false) {
	    throw new Error('patq2hex: not a valid @q')
	  }
	  const chunks = lodash.split(name.slice(1), '-');
	  const dec2hex = dec =>
	    dec.toString(16).padStart(2, '0');

	  const splat = lodash.map(chunks, chunk => {
	    let syls = splitAt(3, chunk);
	    return syls[1] === ''
	      ? dec2hex(suffixes.indexOf(syls[0]))
	      : dec2hex(prefixes.indexOf(syls[0])) +
	        dec2hex(suffixes.indexOf(syls[1]))
	  });

	  return name.length === 0
	    ? '00'
	    : splat.join('')
	};

	/**
	 * Convert a @q-encoded string to a bignum.
	 *
	 * @param  {String}  name @q
	 * @return  {BN}
	 */
	const patq2bn = name =>
	  new bn(patq2hex(name), 'hex');

	/**
	 * Convert a @q-encoded string to a decimal-encoded string.
	 *
	 * @param  {String}  name @q
	 * @return  {String}
	 */
	const patq2dec = name =>
	  patq2bn(name).toString();

	/**
	 * Determine the ship class of a @p value.
	 *
	 * @param  {String}  @p
	 * @return  {String}
	 */
	const clan = who => {
	  const name = patp2bn(who);
	  const wid = met(three, name);
	  return wid.lte(one)
	    ? 'galaxy'
	    : wid.eq(two)
	    ? 'star'
	    : wid.lte(four)
	    ? 'planet'
	    : wid.lte(new bn(8))
	    ? 'moon'
	    : 'comet'
	};

	/**
	 * Determine the parent of a @p value.
	 *
	 * @param  {String}  @p
	 * @return  {String}
	 */
	const sein = (name) => {
	  const mir = clan(name);
	  const who = patp2bn(name);
	  const res =
	    mir === 'galaxy'
	    ? who
	    : mir === 'star'
	    ? end(three, one, who)
	    : mir === 'planet'
	    ? end(four, one, who)
	    : mir === 'moon'
	    ? end(five, one, who)
	    : zero;
	  return patp(res)
	};

	/**
	 * Weakly check if a string is a valid @p or @q value.
	 *
	 * This is, at present, a pretty weak sanity check.  It doesn't confirm the
	 * structure precisely (e.g. dashes), and for @q, it's required that q values
	 * of (greater than one) odd bytelength have been zero-padded.  So, for
	 * example, '~doznec-binwod' will be considered a valid @q, but '~nec-binwod'
	 * will not.
	 *
	 * @param  {String}  name a @p or @q value
	 * @return  {String}
	 */
	const isValidPat = name => {
	  const syls = patp2syls(name);

	  const leadingTilde = name.slice(0, 1) === '~';

	  if (leadingTilde === false) {
	    return false
	  } else {
	    const wrongLength = syls.length % 2 !== 0 && syls.length !== 1;
	    const sylsExist = lodash.reduce(syls, (acc, syl, index) =>
	      acc &&
	        (index % 2 !== 0 || syls.length === 1
	          ? suffixes.includes(syl)
	          : prefixes.includes(syl)),
	      true);

	    return !wrongLength && sylsExist
	  }
	};

	/**
	 * Remove all leading zero bytes from a sliceable value.
	 * @param  {String, Buffer, Array}
	 * @return  {String}
	 */
	const removeLeadingZeroBytes = str =>
	  str.slice(0, 2) === '00'
	  ? removeLeadingZeroBytes(str.slice(2))
	  : str;

	/**
	 * Equality comparison, modulo leading zero bytes.
	 * @param  {String, Buffer, Array}
	 * @param  {String, Buffer, Array}
	 * @return  {Bool}
	 */
	const eqModLeadingZeroBytes = (s, t) =>
	  lodash.isEqual(removeLeadingZeroBytes(s), removeLeadingZeroBytes(t));

	/**
	 * Equality comparison on @q values.
	 * @param  {String}  p a @q-encoded string
	 * @param  {String}  q a @q-encoded string
	 * @return  {Bool}
	 */
	const eqPatq = (p, q) => {
	  const phex = patq2hex(p);
	  const qhex = patq2hex(q);
	  return eqModLeadingZeroBytes(phex, qhex)
	};

	var co = {
	  patp,
	  patp2hex,
	  hex2patp,
	  patp2dec,
	  patq,
	  patq2hex,
	  hex2patq,
	  patq2dec,
	  clan,
	  sein,
	  eqPatq,
	  isValidPatq: isValidPat, // reserving for diff impls in future
	  isValidPatp: isValidPat
	};

	var src = Object.assign(
	  co,
	  ob$1
	);

	var classnames = createCommonjsModule(function (module) {
	/*!
	  Copyright (c) 2017 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg) && arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else {
			window.classNames = classNames;
		}
	}());
	});

	const INBOX_MESSAGE_COUNT = 30;

	const LANDSCAPE_ROOT = "/~~/landscape";

	const STATUS_LOADING = "status loading";
	const STATUS_READY = "status ready";

	const PAGE_STATUS_READY = "page status ready";
	const PAGE_STATUS_TRANSITIONING = "page status transitioning";
	const PAGE_STATUS_PROCESSING = "page status processing";
	const PAGE_STATUS_DISCONNECTED = "page status disconnected";
	const PAGE_STATUS_RECONNECTING$1 = "page status reconnecting";

	const REPORT_PAGE_STATUS$1 = "report page status update";
	const REPORT_NAVIGATE = "report navigate to subpage";

	const AGGREGATOR_COLL = "c";
	const AGGREGATOR_INBOX = "aggregator-inbox";
	const AGGREGATOR_NAMES = [AGGREGATOR_INBOX, AGGREGATOR_COLL];

	function capitalize(str) {
	  return `${str[0].toUpperCase()}${str.substr(1)}`;
	}

	// takes a galactic (urbit) time and converts to 8601
	function esoo(str) {

	  var dubb = function(num) {
	    return num < 10 ? '0' + parseInt(num) : parseInt(num);
	  };

	  const p = /\~(\d\d\d\d).(\d\d?).(\d\d?)..(\d\d?).(\d\d?).(\d\d?)/.exec(str);

	  if (p) {
	    return `${p[1]}-${dubb(p[2])}-${dubb(p[3])}T${dubb(p[4])}:${dubb(p[5])}:${dubb(p[6])}Z`
	  }
	  return false;

	}

	// check if hostname follows ship.*.urbit.org scheme
	function isProxyHosted(hostName) {
	  const r = /([a-z,-]+)\.(.+\.)?urbit\.org/.exec(hostName);
	  if (r && src.isValidPatp(r[1])) {
	    return true;
	  }
	  return false;
	}

	function getQueryParams() {
	  if (window.location.search !== "") {
	    return JSON.parse('{"' + decodeURI(window.location.search.substr(1).replace(/&/g, "\",\"").replace(/=/g,"\":\"")) + '"}');
	  } else {
	    return {};
	  }
	}

	function isAggregator(station) {
	  let cir = station.split("/")[1];
	  return AGGREGATOR_NAMES.includes(cir);
	}

	function getLoadingClass(storeTransition) {
	  return classnames({
	    'hide': storeTransition === PAGE_STATUS_READY,
	    'page-status': storeTransition !== PAGE_STATUS_READY,
	    'page-status-primary': storeTransition === PAGE_STATUS_TRANSITIONING,
	    'page-status-secondary': storeTransition === PAGE_STATUS_PROCESSING,
	    'page-status-tertiary': storeTransition === PAGE_STATUS_DISCONNECTED,
	    'page-status-quaternary': storeTransition === PAGE_STATUS_RECONNECTING$1,
	  })
	}

	/*
	  Goes from:
	    1531943107869               // "javascript unix time"
	  To:
	    "48711y 2w 5d 11m 9s"       // "stringified time increments"
	*/

	function secToString(secs) {
	  if (secs <= 0) {
	    return 'Completed';
	  }
	  secs = Math.floor(secs);
	  var min = 60;
	  var hour = 60 * min;
	  var day = 24 * hour;
	  var week = 7 * day;
	  var year = 52 * week;
	  var fy = function(s) {
	    if (s < year) {
	      return ['', s];
	    } else {
	      return [Math.floor(s / year) + 'y', s % year];
	    }
	  };
	  var fw = function(tup) {
	    var str = tup[0];
	    var sec = tup[1];
	    if (sec < week) {
	      return [str, sec];
	    } else {
	      return [str + ' ' + Math.floor(sec / week) + 'w', sec % week];
	    }
	  };
	  var fd = function(tup) {
	    var str = tup[0];
	    var sec = tup[1];
	    if (sec < day) {
	      return [str, sec];
	    } else {
	      return [str + ' ' + Math.floor(sec / day) + 'd', sec % day];
	    }
	  };
	  var fh = function(tup) {
	    var str = tup[0];
	    var sec = tup[1];
	    if (sec < hour) {
	      return [str, sec];
	    } else {
	      return [str + ' ' + Math.floor(sec / hour) + 'h', sec % hour];
	    }
	  };
	  var fm = function(tup) {
	    var str = tup[0];
	    var sec = tup[1];
	    if (sec < min) {
	      return [str, sec];
	    } else {
	      return [str + ' ' + Math.floor(sec / min) + 'm', sec % min];
	    }
	  };
	  var fs = function(tup) {
	    var str = tup[0];
	    var sec = tup[1];
	    return str + ' ' + sec + 's';
	  };
	  return fs(fm(fh(fd(fw(fy(secs)))))).trim();
	}

	function uuid() {
	  let str = "0v";
	  str += Math.ceil(Math.random()*8)+".";
	  for (var i = 0; i < 5; i++) {
	    let _str = Math.ceil(Math.random()*10000000).toString(32);
	    _str = ("00000"+_str).substr(-5,5);
	    str += _str+".";
	  }

	  return str.slice(0,-1);
	}

	function isPatTa(str) {
	  const r = /^[a-z,0-9,\-,\.,_,~]+$/.exec(str);
	  return !!r;
	}

	function isValidStation(st) {
	  let tokens = st.split("/");

	  if (tokens.length !== 2) return false;

	  return src.isValidPatp(tokens[0]) && isPatTa(tokens[1]);
	}


	/*
	  Goes from:
	    ~2018.7.17..23.15.09..5be5    // urbit @da
	  To:
	    (javascript Date object)
	*/
	function daToDate(st) {
	  var dub = function(n) {
	    return parseInt(n) < 10 ? "0" + parseInt(n) : n.toString();
	  };
	  var da = st.split('..');
	  var bigEnd = da[0].split('.');
	  var lilEnd = da[1].split('.');
	  var ds = `${bigEnd[0].slice(1)}-${dub(bigEnd[1])}-${dub(bigEnd[2])}T${dub(lilEnd[0])}:${dub(lilEnd[1])}:${dub(lilEnd[2])}Z`;
	  return new Date(ds);
	}

	/*
	  Goes from:
	    (javascript Date object)
	  To:
	    ~2018.7.17..23.15.09..5be5    // urbit @da
	*/

	function dateToDa(d, mil) {
	  var fil = function(n) {
	    return n >= 10 ? n : "0" + n;
	  };
	  return (
	    `~${d.getUTCFullYear()}.` +
	    `${(d.getUTCMonth() + 1)}.` +
	    `${fil(d.getUTCDate())}..` +
	    `${fil(d.getUTCHours())}.` +
	    `${fil(d.getUTCMinutes())}.` +
	    `${fil(d.getUTCSeconds())}` +
	    `${mil ? "..0000" : ""}`
	  );
	}

	  // ascending for clarity
	// export function sortSrc(circleArray, topic=false){
	//   let sc = circleArray.map((c) => util.parseCollCircle(c)).filter((pc) => typeof pc != 'undefined' && typeof pc.top == 'undefined');
	//   return sc.map((src) => src.coll).sort((a, b) => util.daToDate(a) - util.daToDate(b));
	// }

	function arrayEqual(a, b) {
	  if (a === b) return true;
	  if (a == null || b == null) return false;
	  if (a.length != b.length) return false;

	  // If you don't care about the order of the elements inside
	  // the array, you should sort both arrays here.

	  for (var i = 0; i < a.length; ++i) {
	    if (a[i] !== b[i]) return false;
	  }
	  return true;
	}

	function deSig(ship) {
	  return ship.replace('~', '');
	}

	// use urbit.org proxy if it's not on our ship
	function foreignUrl(shipName, own, urlFrag) {
	  if (deSig(shipName) != deSig(own)) {
	    return `http://${deSig(shipName)}.urbit.org${urlFrag}`
	  } else {
	    return urlFrag
	  }
	}

	// shorten comet names
	function prettyShip(ship) {
	  const sp = ship.split('-');
	  return [sp.length == 9 ? `${sp[0]}_${sp[8]}`: ship, ship[0] === '~' ? `/~~/${ship}/==/web/landscape/profile` : `/~~/~${ship}/==/web/landscape/profile`];
	}

	function profileUrl(ship) {
	  return `/~~/~${ship}/==/web/landscape/profile`;
	}

	function isDMStation(station) {
	  let host = station.split('/')[0].substr(1);
	  let circle = station.split('/')[1];

	  return (
	    station.indexOf('.') !== -1 &&
	    circle.indexOf(host) !== -1
	  );
	}

	function isRootCollection(station) {
	  return station.split("/")[1] === "c";
	}

	// maybe do fancier stuff later
	function isUrl(string) {
	  const r = /^http|^www|\.com$/.exec(string);
	  if (r) {
	    return true
	  }
	  else {
	    return false
	  }
	}

	function getMessageContent(msg) {
	  let ret;

	  const MESSAGE_TYPES = {
	    'sep.app.sep.fat.sep.lin.msg': 'app',
	    'sep.app.sep.lin.msg': 'app',
	    'sep.app.sep.inv': (msg) => {
	      let sta = msg.sep.app.sep.inv.cir;
	      let [hos, cir] = sta.split('/');

	      return {
	        type: 'inv',
	        msg: msg,
	        content: {
	          nom: msg.sep.app.app,
	          sta: sta,
	          hos: hos,
	          inv: msg.sep.app.sep.inv.inv
	        }
	      }
	    },
	    'sep.inv': (msg) => {
	      let sta = msg.sep.inv.cir;
	      let [hos, cir] = sta.split('/');

	      return {
	        type: 'inv',
	        msg: msg,
	        content: {
	          nom: cir,
	          inv: msg.sep.inv.inv,
	          hos,
	          sta,
	          cir
	        }
	      }
	    },
	    'sep.fat': (msg) => {
	      let type = msg.sep.fat.tac.text;
	      let station = msg.aud[0];
	      let jason = JSON.parse(msg.sep.fat.sep.lin.msg);
	      let content = (type.includes('collection')) ? null : jason.content;
	      let par = jason.path.slice(0, -1);

	      return {
	        type: msg.sep.fat.tac.text,
	        msg: msg,
	        contentType: jason.type,
	        content: content,
	        snip: jason.snip,
	        author: jason.author,
	        host: jason.host,
	        date: jason.date,
	        path: jason.path,
	        postTitle: jason.name,
	        postUrl: `/~~/${jason.host}/==/${jason.path.join('/')}`,
	      }
	    },
	    'sep.lin.msg': 'lin',
	    'sep.ire.sep.lin': (msg) => {
	      return {
	        type: "lin",
	        msg: msg,
	        content: msg.sep.ire.sep.lin.msg,
	        replyUid: msg.sep.ire.top
	      }
	    },
	    'sep.ire': 'ire',
	    'sep.url': 'url',
	    'sep.exp': (msg) => {
	      return {
	        type: "exp",
	        msg: msg,
	        content: msg.sep.exp.exp,
	        res: msg.sep.exp.res.join('\n')
	      }
	    },
	  };

	  Object.arrayify(MESSAGE_TYPES).some(({key, value}) => {
	    if (lodash.has(msg, key)) {
	      if (typeof value === "string") {
	        ret = {
	          type: value,
	          msg: msg,
	          content: lodash.get(msg, key)
	        };
	      } else if (typeof value === "function") {
	        ret = value(msg);
	      }
	      return true;
	    }
	  });

	  if (typeof ret === "undefined") {
	    ret = {type: "unknown"};
	    console.log("ASSERT: unknown message type on ", msg);
	  }

	  return ret;
	}

	window.getMessageContent = getMessageContent;

	var util = /*#__PURE__*/Object.freeze({
		capitalize: capitalize,
		esoo: esoo,
		isProxyHosted: isProxyHosted,
		getQueryParams: getQueryParams,
		isAggregator: isAggregator,
		getLoadingClass: getLoadingClass,
		secToString: secToString,
		uuid: uuid,
		isPatTa: isPatTa,
		isValidStation: isValidStation,
		daToDate: daToDate,
		dateToDa: dateToDa,
		arrayEqual: arrayEqual,
		foreignUrl: foreignUrl,
		prettyShip: prettyShip,
		profileUrl: profileUrl,
		isDMStation: isDMStation,
		isRootCollection: isRootCollection,
		isUrl: isUrl,
		getMessageContent: getMessageContent
	});

	class UrbitApi {
	  setAuthTokens(authTokens) {
	    this.authTokens = authTokens;
	    this.bindPaths = [];
	  }

	  // keep default bind to hall, since its bind procedure more complex for now AA
	  bind(path, method, ship = this.authTokens.ship, appl = "hall") {
	    console.log('binding to ...', appl, ", path: ", path, ", as ship: ", ship, ", by method: ", method);
	    this.bindPaths = lodash.uniq([...this.bindPaths, path]);

	    const params = {
	      appl,
	      mark: "json",
	      oryx: this.authTokens.oryx,
	      ship: ship,
	      path: path,
	      wire: path
	    };

	    return fetch(`/~/is/~${ship}/${appl}${path}.json?${method}`, {
	      credentials: "same-origin",
	      method: "POST",
	      body: JSON.stringify(params)
	    });
	  }

	  hall(data) {
	    this.action("hall", "hall-action", data);
	  }

	  coll(data) {
	    this.action("collections", "collections-action", data);
	  }

	  setOnboardingBit(value) {
	    this.action("collections", "json", { onboard: value });
	  }

	  action(appl, mark, data) {
	    const params = {
	      appl,
	      mark,
	      oryx: this.authTokens.oryx,
	      ship: this.authTokens.ship,
	      wire: "/",
	      xyro: data
	    };

	    fetch(`/~/to/${appl}/${mark}`, {
	      credentials: "same-origin",
	      method: "POST",
	      body: JSON.stringify(params)
	    });
	  }

	  /*
	    Special actions
	  */

	  permit(cir, aud, message) {
	    this.hall({
	      permit: {
	        nom: cir,
	        sis: aud,
	        inv: true
	      }
	    });

	    if (message) {
	      this.invite(cir, aud);
	    }
	  }

	  permitCol(cir, aud, message, nom) {
	    this.hall({
	      permit: {
	        nom: cir,
	        sis: aud,
	        inv: true
	      }
	    });

	    if (message) {
	      this.inviteCol(cir, aud, nom);
	    }
	  }

	  invite(cir, aud) {
	    let audInboxes = aud.map((aud) => `~${aud}/i`);
	    let inviteMessage = {
	      aud: audInboxes,
	      ses: [{
	        inv: {
	          inv: true,
	          cir: `~${this.authTokens.ship}/${cir}`
	        }
	      }]
	    };

	    this.hall({
	      phrase: inviteMessage
	    });
	  }

	  inviteCol(cir, aud, nom) {
	    let audInboxes = aud.map((aud) => `~${aud}/i`);
	    let inviteMessage = {
	      aud: audInboxes,
	      ses: [{
	        app: {
	          app: nom,
	          sep: {
	            inv: {
	              inv: true,
	              cir: `~${this.authTokens.ship}/${cir}`
	            }
	          }
	        }
	      }]
	    };

	    this.hall({
	      phrase: inviteMessage
	    });
	  }

	  message(aud, words) {
	    let msg = {
	      aud,
	      ses: [{
	        lin: {
	          msg: words,
	          pat: false
	        }
	      }]
	    };

	    this.hall({
	      phrase: msg
	    });
	  }

	  source(nom, sub) {
	    this.hall({
	      source: {
	        nom: "inbox",
	        sub: sub,
	        srs: [nom]
	      }
	    });
	  }

	  create(nom, priv) {
	    this.hall({
	      create: {
	        nom: nom,
	        des: "chatroom",
	        sec: priv ? "village" : "channel"
	      }
	    });
	  }

	  ire(aud, uid, msg) {
	    let message = {
	      aud: aud,
	      ses: [{
	        ire: {
	          top: uid,
	          sep: {
	            lin: {
	              msg: msg,
	              pat: false
	            }
	          }
	        }
	      }]
	    };

	    this.hall({
	      phrase: message
	    });
	  }
	}

	let api$1 = new UrbitApi();
	window.api = api$1;

	class MessagesReducer {
	  reduce(reports, store) {
	    reports.forEach((rep) => {
	      let fromCircle = rep.from && rep.from.path.split("/")[2];
	      let fromInbox = fromCircle === "inbox";

	      switch (rep.type) {
	        case "circle.nes":
	          this.processMessages(rep.data, store);
	          break;
	        case "circle.gram":
	          this.processMessages([rep.data], store);
	          break;
	        case "circle.config.dif.remove":
	          delete store.messages.stations[rep.data.cir];
	          break;
	        case "circle.cos.loc":
	          if (fromInbox) {
	            store.messages.inbox.config = rep.data;
	            store.messages.inbox.src = rep.data.src;
	            this.storeInboxMessages(store);
	          }
	          break;
	        case "circle.config.dif.source":
	          if (fromInbox) {
	            if (rep.data.add) {
	              store.messages.inbox.src = [...store.messages.inbox.src, rep.data.src];
	            } else {
	              store.messages.inbox.src = store.messages.inbox.src.filter(src => src !== rep.data.src);
	            }
	            this.storeInboxMessages(store);
	          }
	          break;

	        case "circle.config":
	          fromInbox = rep.data.cir.includes("inbox");
	          if (fromInbox && lodash.get(rep.data, 'dif.source', null)) {
	            if (rep.data.dif.source.add) {
	              store.messages.inbox.src = [...store.messages.inbox.src, rep.data.dif.source.src];
	            } else {
	              store.messages.inbox.src = store.messages.inbox.src.filter(src => src !== rep.data.dif.source.src);
	            }
	            this.storeInboxMessages(store);
	          }

	          break;

	        case "landscape.prize":
	          if (rep.data.inbox) {
	            store.messages.inbox.src = [...store.messages.inbox.src, ...rep.data.inbox.config.src];
	            store.messages.inbox.config = rep.data.inbox.config;
	            this.processMessages(rep.data.inbox.messages, store);
	            this.processMessages(rep.data.invites, store);
	            this.storeInboxMessages(store);
	          } else {
	            console.log("WEIRD: no inbox property in landscape.prize?");
	          }

	          // if (fromInbox) {
	          //   if (rep.data.add) {
	          //     store.messages.inbox.src = [...store.messages.inbox.src, rep.data.src];
	          //   } else {
	          //     store.messages.inbox.src = store.messages.inbox.src.filter(src => src !== rep.data.src);
	          //   }
	          //   this.storeInboxMessages(store);
	          // }
	          break;

	        case "dm.new": {
	          store.messages.notifications = [...store.messages.notifications, ...rep.data];
	          break;
	        }

	        case "dm.clear": {
	          store.messages.notifications = store.messages.notifications.filter(n => !rep.data.includes(n.uid));
	          break;
	        }
	      }
	    });
	  }

	  processMessages(messages, store) {
	    let msgs = messages.filter(m => {
	      return !m.gam.aud.some(st => isRootCollection(st));
	    });
	    this.storeStationMessages(msgs, store);
	    this.storeInboxMessages(store);
	  }

	  // TODO:  Make this more like storeInboxMessages
	  storeStationMessages(messages, store) {
	    messages.forEach((message) => {
	      let msg = message.gam;
	      msg.num = message.num;
	      msg.aud.forEach((aud) => {
	        let msgClone = { ...msg, aud: [aud] };
	        let station = store.messages.stations[aud];

	        if (!station) {
	          store.messages.stations[aud] = [msgClone];
	        } else if (station.findIndex(o => o.uid === msgClone.uid) === -1) {
	          let newest = true;

	          for (let i = 0; i < station.length; i++) {
	            if (msgClone.wen < station[i].wen) {
	              station.splice(i, 0, msgClone);
	              newest = false;
	              break;
	            }
	          }

	          if (newest) station.push(msgClone);

	          // Print messages by date, for debugging:
	          // for (let msgClone of station.messages) {
	          //   console.log(`msgClone ${msg.uid}: ${msg.wen}`);
	          // }
	        }
	      });
	    });
	  }

	  storeInboxMessages(store) {
	    let messages = store.messages.inbox.src.reduce((msgs, src) => {
	      let msgGroup = store.messages.stations[src];
	      if (!msgGroup) return msgs;
	      return msgs.concat(msgGroup.filter(this.filterInboxMessages));  // filter out app & accepted invite msgs
	    }, []);

	    let ret = lodash(messages)
	      .sort((a, b) => b.wen - a.wen)    // sort by date
	      // sort must come before uniqBy! if uniqBy detects a dupe, it takes
	      // earlier element in the array. since we want later timestamps to
	      // override, sort first
	      .uniqBy('uid')                    // dedupe
	      .slice(0, INBOX_MESSAGE_COUNT)    // grab the first 30 or so
	      .value();                         // unwrap lodash chain
	    // for (let msg of ret) {
	    //   console.log(`msg ${msg.uid}: ${msg.wen}`);
	    // }

	    // store.messages.inbox.messages = [
	    //   {
	    //     aud: ["~zod/marzod.zod"],
	    //     aut: "zod",
	    //     sep: { lin: {
	    //       msg: "Hey marzod!"
	    //     }},
	    //     uid: "0v4.85q7h.25nnt.5mhop.92c1u.3rhsa",
	    //     wen: 1538084786999,
	    //   }, {
	    //     aud: ["~zod/marzod.zod"],
	    //     aut: "marzod",
	    //     sep: { lin: {
	    //       msg: "oh hey zod"
	    //     }},
	    //     uid: "0v4.85q7h.25nnt.5mhop.92c1u.3rhfa",
	    //     wen: 1538084787000,
	    //   },
	    //   ...ret
	    // ];
	    store.messages.inbox.messages = ret;
	  }

	  // Filter out of inbox:
	  //   - app messages
	  //   - accepted invites
	  //   - all DM invites (should automatically accept)
	  filterInboxMessages(msg) {
	    let msgDetails = getMessageContent(msg);
	    let typeApp = msgDetails.type === "app";
	    let typeInv = msgDetails.type === "inv";
	    // let isDmInvite = typeInv && isDMStation(msgDetails.content);
	    let isInboxMsg = msg.aud[0].split("/")[1] === "inbox";
	    let isEditUpdate = msgDetails.type === "edited item";
	    // let hasResponded = typeInv && msgDetails.content === "~zod/null";

	    if (typeApp) return false;
	    if (typeInv) return false;
	    // if (hasResponded) return false;
	    if (isEditUpdate) return false;
	    if (isInboxMsg) return false;

	    return true;
	  }
	}

	class ConfigsReducer {
	  reduce(reports, store) {
	    reports.forEach(rep => {
	      let stationName;
	      let stations = {};

	      switch (rep.type) {
	        case "circle.gram":
	          this.processGramConfigs([rep.data], store.configs);
	          break;
	        case "circle.nes":
	          this.processGramConfigs(rep.data, store.configs);
	          break;
	        case "circle.cos.loc":
	          stationName = `~${rep.from.ship}/${rep.from.path.split("/")[2]}`;
	          stations[stationName] = rep.data;
	          this.addConfigs(stations, store.configs);
	          break;
	        case "circle.cos.rem":
	          this.addConfigs(rep.data, store.configs);
	          break;
	        case "circle.pes.loc":
	          stationName = `~${rep.from.ship}/${rep.from.path.split("/")[2]}`;
	          this.updateConfig({pes: rep.data}, store.configs[stationName]);
	          break;
	        case "circle.config.dif.source":
	          stationName = `~${rep.from.ship}/${rep.from.path.split("/")[2]}`;
	          this.updateConfig(rep.data, store.configs[stationName]);
	          break;
	        case "circle.config.dif.full":
	          stationName = rep.data.src[0];  // TODO:  API weirdness; we have to get name of new station from new station config's src property. Should maybe return a dict.
	          stations[stationName] = rep.data;
	          this.addConfigs(stations, store.configs);
	          break;
	        case "circle.config.dif.permit":  // TODO:  This is very wonky, should be fixed with API discussion
	          stationName = rep.data.cir;
	          this.updateConfig(rep.data.dif.permit, store.configs[stationName]);
	          break;
	        case "circle.config.dif.remove":
	          delete store.configs[rep.data.cir];
	          break;
	        case "config.ext":
	          store.configs[rep.data.station] = store.configs[rep.data.station] || {};
	          store.configs[rep.data.station].extConf = rep.data.extConf;
	          break;
	        case "circle.read":
	          store.configs[rep.data.station] = store.configs[rep.data.station] || {};
	          store.configs[rep.data.station].lastReadNum = rep.data.lastReadNum;
	          break;

	        case "circle.config":
	          let readChange = _.get(rep.data, 'dif.read', null);

	          if (readChange) {
	            store.configs[rep.data.cir] = {...store.configs[rep.data.cir], red: readChange};
	          }
	        
	          break;

	        case "landscape.prize":
	          rep.data.circles.forEach(c => {
	            store.configs[c.circle] = c.config || {};
	          });

	          break;
	      }
	    });
	  }

	  processGramConfigs(grams, storeConfigs) {
	    grams.forEach(gram => {
	      let tac = _.get(gram, 'gam.sep.fat.tac.text', null);
	      if (tac && ['new item', 'edited item'].includes(tac)) {
	        let conf = _.get(gram, 'gam.sep.fat.sep.lin.msg', null);
	        if (conf) {
	          let parsedConf = JSON.parse(conf);
	          if (parsedConf['parent-config']) {
	            storeConfigs[gram.gam.aud[0]] = {
	              ...storeConfigs[gram.gam.aud[0]],
	              ...{ extConf: parsedConf['parent-config'] }
	            };
	          }
	        }
	      }
	    });
	  }

	  addConfigs(configs, storeConfigs) {
	    Object.keys(configs)
	      .forEach((cos) => {
	        storeConfigs[cos] = storeConfigs[cos] || {};
	        Object.assign(storeConfigs[cos], configs[cos]);
	      });
	  }

	  updateConfig(data, station) {
	    if (!station) return;

	    if (data.src) {
	      if (data.add) {
	        station.src.push(data.src);
	      } else {
	        station.src = station.src.filter((val) => val !== data.src);
	      }
	    }

	    if (data.sis) {
	      if (data.add) {
	        station.con.sis = station.con.sis.concat(data.sis);
	      } else {
	        station.con.sis = station.con.sis.filter((val) => !data.sis.includes(val));
	      }
	    }

	    if (data.pes) {
	      station.pes = station.pes || {};

	      Object.assign(station.pes, data.pes);
	    }
	  }
	}

	class ViewsReducer {
	  reduce(reports, store) {
	    reports.forEach((rep) => {
	      switch (rep.type) {
	        case REPORT_PAGE_STATUS$1:
	          // Don't let any state other than "READY" or "RECONNECTNG" override the disconnected state
	          // let isDisconnected = store.views.transition === PAGE_STATUS_DISCONNECTED;
	          // let readyOrReconnecting = rep.data === PAGE_STATUS_READY || rep.data === PAGE_STATUS_RECONNECTING;
	          //
	          // if (!isDisconnected || readyOrReconnecting) {
	          //   store.views.transition = rep.data;
	          // }

	          store.views.transition = rep.data;
	          break;

	        case REPORT_NAVIGATE:
	          store.views[rep.data.page] = rep.data.view;
	          break;

	        case "views.streamActive":
	          store.views.streamActive = rep.data;
	          break;
	      }
	    });
	  }
	}

	function getStationDetails(station) {
	  let host = station.split("/")[0].substr(1);
	  let config = warehouse$1.store.configs[station];

	  let ret = {
	    type: "none",
	    station: station,
	    host: host,
	    cir: station.split("/")[1],
	    config: config,
	    hostProfileUrl: profileUrl(host)
	  };

	  let circleParts = ret.cir.split("-");

	  if (ret.cir === "inbox") {
	    ret.type = "aggregator-inbox";
	  } else if (ret.cir === "c") {
	    ret.type = "aggregator";
	  } else if (isDMStation(station)) {
	    ret.type = "stream-dm";
	  } else if (ret.cir.includes("c-") && circleParts.length > 2) {
	    ret.type = "collection-post";
	  } else if (ret.cir.includes("c-")) {
	    ret.type = "collection-index";
	  } else {
	    ret.type = "stream-chat";
	  }

	  switch (ret.type) {
	    case "aggregator-inbox":
	      ret.stationUrl = LANDSCAPE_ROOT;
	      ret.stationTitle = ret.cir;
	      break;
	    case "stream-chat":
	      ret.stationUrl = `/~~/landscape/stream?station=${station}`;
	      ret.stationDetailsUrl = `/~~/landscape/stream/details?station=${station}`;
	      ret.stationTitle = ret.cir;
	      break;
	    case "stream-dm":
	      ret.stationTitle = ret.cir
	        .split(".")
	        .filter((mem) => mem !== api$1.authTokens.ship)
	        .map((mem) => `~${mem}`)
	        .join(", ");      ret.stationUrl = `/~~/landscape/stream?station=${station}`;
	      break;
	    case "collection-index":
	      ret.collId = circleParts[1];

	      ret.stationUrl = `/~~/~${ret.host}/==/web/collections/${ret.collId}`;
	      ret.stationTitle = config && config.extConf ? config.extConf.name : ret.collId;

	      if (config && config.extConf) {
	        ret.stationTitle = config.extConf.name;
	      }

	      if (config) {
	        ret.stationTitle = config.cap;
	      }

	      break;
	    case "collection-post":
	      ret.collId = circleParts[1];
	      ret.postId = circleParts[2];

	      ret.parentCollectionUrl = `/~~/~${ret.host}/==/web/collections/${ret.collId}`;
	      ret.stationUrl = `/~~/~${ret.host}/==/web/collections/${ret.collId}/${ret.postId}`;
	      ret.stationTitle = config && config.extConf ? config.extConf.name : ret.collId;

	      let collCircle = `~${ret.host}/c-${ret.collId}`;
	      let collConfig = warehouse$1.store.configs[collCircle];
	      ret.collTitle = collConfig && collConfig.extConf ? collConfig.extConf.name : ret.collId;
	      break;
	  }

	  return ret;
	}

	function getSubscribedStations(ship, store) {
	  let inbox = store.messages.inbox;
	  let configs = store.configs;

	  // TODO: Maybe I need this?
	  // if (!inbox) return null;

	  let stationDetailList = inbox.src
	    .map((station) => {
	      if (!configs[station]) return null;
	      return getStationDetails(station)
	    })
	    .filter((station) => station !== null);

	  let ret = {
	    chatStations: stationDetailList.filter((d) => d.type === "stream-chat"),
	    collStations: stationDetailList.filter((d) => d.type === "collection-index"),
	    dmStations: stationDetailList.filter((d) => d.type === "stream-dm"),
	  };

	  let numSubs = ret.chatStations.length + ret.collStations.length;
	  let numDMs = ret.dmStations.length;

	  let numString = [];
	  if (numSubs > 0) numString.push(`${numSubs} subscriptions`);
	  if (numDMs > 0) numString.push(`${numDMs} DMs`);

	  ret.numString = numString.join(", ");

	  return ret;
	}

	/*
	  Does two things:
	    1) truncates partner "auds" in DM messages to just return one message for your own DM circle
	    2) split message's "aud" property into a separate message for each aud;
	*/
	function pruneMessages(msgs) {
	  let gams = msgs.map(m => m.gam);
	  let msgAuds = _.flatMap(msgs.map(m => m.gam), m => Object.cloneByProperty(m, "aud"));
	  return msgAuds.filter(m => {
	    m.stationDetails = getStationDetails(m.aud[0]);
	    return (m.stationDetails.type !== "stream-dm" || m.stationDetails.host === api$1.authTokens.ship)
	  });
	}

	window.getStationDetails = getStationDetails;

	class NamesReducer {
	  reduce(reports, store) {
	    reports.forEach((rep) => {
	      let ships = {};
	      let details;

	      switch (rep.type) {
	        case "circle.cos.loc":
	          ships[rep.from.ship] = [rep.from.path.split("/")[2]];
	          rep.data.con.sis.forEach((mem) => ships[mem] = []);

	          this.storeNames(ships, store.names);
	          break;

	        case "circle.cos.rem":
	          Object.arrayify(rep.data).forEach(({key: station, value: config}) => {
	            let details = getStationDetails(station);

	            if (ships[details.host]) {
	              ships[details.host] = lodash.uniq(ships[details.host].concat(details.cir));
	            } else {
	              ships[details.host] = [details.cir];
	            }

	            config.con.sis.forEach((mem) => {
	              if (!ships[mem]) ships[mem] = [];
	            });
	          });
	          this.storeNames(ships, store.names);
	          break;
	        case "circle.nes":
	          this.storeMessagesNames(rep.data, store.names);
	          break;
	        case "circle.gram":
	          this.storeMessagesNames([rep.data], store.names);
	          break;
	        // case "circle.pes.loc":
	        //   stationName = `~${rep.from.ship}/${rep.from.path.split("/")[2]}`;
	        //   this.updateConfig({pes: rep.data}, store.configs[stationName]);
	        //   break;
	        case "circle.config.dif.source":
	          details = getStationDetails(rep.data.src);
	          ships[details.host] = [details.cir];
	          this.storeNames(ships, store.names);
	          break;
	        case "circle.config.dif.full":
	          details = getStationDetails(rep.data.src[0]); // TODO:  API weirdness; we have to get name of new station from new station config's src property. Should maybe return a dict.
	          ships[details.host] = [details.cir];
	          this.storeNames(ships, store.names);
	          break;
	        case "circle.config.dif.permit":  // TODO:  This is very wonky, should be fixed with API discussion
	          details = getStationDetails(rep.data.cir); // TODO:  API weirdness; we have to get name of new station from new station config's src property. Should maybe return a dict.
	          ships[details.host] = [details.cir];
	          this.storeNames(ships, store.names);
	        // case "circle.config.dif.remove":
	        //   delete store.names[rep.data.cir];
	        //   break;
	      }
	    });
	  }

	  storeMessagesNames(messages, storeNames) {
	    let ships = {};

	    messages.forEach((message) => {
	      let msg = message.gam;
	      msg.aud.forEach((aud) => {
	        let details = getStationDetails(aud); // TODO:  API weirdness; we have to get name of new station from new station config's src property. Should maybe return a dict.
	        ships[details.host] = [details.cir];
	      });

	      ships[msg.aut] = ships[msg.aut] || [];
	    });

	    this.storeNames(ships, storeNames);
	  }

	  storeNames(ships, storeNames) {
	    Object.arrayify(ships).forEach(({key: ship, value: stations}) => {
	      let sttns = stations.filter(s => s !== "c");

	      if (!storeNames[ship]) {
	        storeNames[ship] = sttns;
	      } else {
	        storeNames[ship] = lodash.uniq(sttns.concat(storeNames[ship]));
	      }
	    });
	  }
	}

	class CirclesReducer {
	  reduce(reports, store) {
	    reports.forEach((rep) => {
	      switch (rep.type) {
	        case "circles":
	          if (rep.data.add) {
	            store.circles = [...store.circles, rep.data.cir];
	          } else {
	            store.circles = rep.data;
	          }
	          break;

	        case "landscape.prize":
	          store.circles = [...store.circles, rep.data["circles-our"]];
	          break;
	      }
	    });
	  }
	}

	const LONGPOLL_TIMEOUT = 15000;
	const LONGPOLL_TRYAGAIN = 30000;

	/**
	  Response format

	  {
	    data: {
	      json: {
	        circle: {   // *.loc for local, *.rem for remote
	          cos:      // config
	          pes:      // presence
	          nes:      // messages
	          gram:     // message (individual)
	        }
	        circles:    // circles you own
	        public:     // circles in your public membership list
	        client: {
	          gys:      // glyphs
	          nis:      // nicknames
	        }
	        peers:      // subscribers to your circles
	        status:     // rumor, presence -- TODO?
	      }
	    }
	    from: {
	      path:    // Subscription path that triggered response
	      ship:    // Subscription requestor
	    }
	  }
	**/

	class UrbitOperator {
	  constructor() {
	    this.seqn = 1;
	    this.disconnectTimer = null;
	  }

	  start() {
	    if (api$1.authTokens) {
	      this.initializeLandscape();
	      this.bindShortcuts();
	      this.setCleanupTasks();
	      this.refreshPoll();
	    } else {
	      console.error("~~~ ERROR: Must set api.authTokens before operation ~~~");
	    }
	  }

	  setCleanupTasks() {
	    window.addEventListener("beforeunload", e => {
	      api$1.bindPaths.forEach(p => {
	        this.wipeSubscription(p);
	      });
	    });
	  }

	  wipeSubscription(path) {
	    api$1.hall({
	      wipe: {
	        sub: [{
	          hos: api$1.authTokens.ship,
	          pax: path
	        }]
	      }
	    });
	  }

	  bindShortcuts() {
	    mousetrap.bind(["mod+k"], () => {
	      warehouse$1.storeReports([{
	        type: "menu.toggle"
	      }]);

	      return false;
	    });
	  }

	  initializeLocalStorage() {
	    warehouse$1.pushCallback('landscape.prize', rep => {
	      let uids = Object.values(rep.data.dms).flatMap(m => m.messages).map(m => m.gam.uid);

	      if (!warehouse$1.localGet('dms-seen')) {
	        warehouse$1.localSet('dms-seen', uids);
	      }
	    });
	  }

	  notifyDMs(msgs) {
	    let prunedMsgs = pruneMessages(msgs);
	    let seenDms = warehouse$1.localGet('dms-seen');

	    let newDms = prunedMsgs
	                  .filter(m => {
	                    let isDm = m.stationDetails.type === "stream-dm";
	                    let fromOther = m.aud !== api$1.authTokens.ship;
	                    let unseen = !seenDms.includes(m.uid);

	                    return isDm && fromOther && unseen;
	                  });

	    if (newDms.length > 0) {
	      warehouse$1.storeReports([{
	        type: 'dm.new',
	        data: newDms
	      }]);
	    }

	    return false;
	  }

	  initializeLandscape() {
	    this.initializeLocalStorage();

	    api$1.bind(`/primary`, "PUT", api$1.authTokens.ship, 'collections');

	    warehouse$1.pushCallback(['circle.gram', 'circle.nes', 'landscape.prize'], (rep) => {
	      let msgs = [];

	      switch (rep.type) {
	        case "circle.gram":
	          msgs = [rep.data];
	          break;
	        case "circle.nes":
	          msgs = rep.data;
	          break;
	        case "landscape.prize":
	          msgs = rep.data.inbox.messages;
	          break;
	      }

	      this.notifyDMs(msgs);

	      return false;
	    });

	    warehouse$1.pushCallback('landscape.prize', (rep) => {
	      warehouse$1.storeReports([{
	        type: REPORT_PAGE_STATUS$1,
	        data: PAGE_STATUS_READY
	      }]);
	    });


	    // warehouse.pushCallback(REPORT_PAGE_STATUS, (rep) => {
	    //   if (rep.data === PAGE_STATUS_PROCESSING) {
	    //     setTimeout(() => {
	    //       warehouse.storeReports([{
	    //         type: REPORT_PAGE_STATUS,
	    //         data: PAGE_STATUS_READY
	    //       }]);
	    //     }, 3000)
	    //   }
	    // });

	    // api.bind(`/circle/inbox/grams/-${INBOX_MESSAGE_COUNT}`, "PUT");

	    // warehouse.pushCallback(['dm.new'], (rep) => {
	    //
	    // });


	      // let circle = rep.from.path.split('/')[2];

	      // do nothing with gram binds to foreign ships
	      // if (urbitOb.isValidPatp(circle)) return;

	      // Any message comes in to the /i circle


	    // first step: bind to author's circles
	    // api.bind(`/circles/~${api.authTokens.ship}`, "PUT");
	    //
	    // warehouse.pushCallback('circles', rep => {
	    //   // inbox local + remote configs, remote presences
	    //   api.bind("/circle/inbox/config/group-r", "PUT");
	    //
	    //   // inbox messages
	    //   api.bind(`/circle/inbox/grams/-${INBOX_MESSAGE_COUNT}`, "PUT");
	    //
	    //   // bind to invite circle (shouldn't be subscribed to inbox)
	    //   api.bind("/circle/i/grams/-999", "PUT");
	    //
	    //   warehouse.pushCallback(['circle.gram', 'circle.nes'], (rep) => {
	    //     let circle = rep.from.path.split('/')[2];
	    //
	    //     // do nothing with gram binds to foreign ships
	    //     if (urbitOb.isValidPatp(circle)) return;
	    //
	    //     // Any message comes in to the /i circle
	    //     if (circle === "i") {
	    //       let msgs = rep.type === "circle.gram" ? [rep.data.gam] : rep.data.map(m => m.gam);
	    //       this.quietlyAcceptDmInvites(msgs);
	    //     }
	    //
	    //     let lastReadNum;
	    //     if (_.isArray(rep.data) && rep.data.length > 0) {
	    //       lastReadNum = _.nth(rep.data, -1).num;
	    //     } else {
	    //       lastReadNum = rep.data.num;
	    //     }
	    //
	    //     if (lastReadNum && warehouse.store.configs[`~${api.authTokens.ship}/${circle}`].lastReadNum < lastReadNum) {
	    //       api.hall({
	    //         read: {
	    //           nom: circle,
	    //           red: lastReadNum
	    //         }
	    //       });
	    //
	    //       warehouse.storeReports([{
	    //         type: "circle.read",
	    //         data: {
	    //           station: `~${api.authTokens.ship}/${circle}`,
	    //           lastReadNum
	    //         }
	    //       }])
	    //     }
	    //
	    //     return false;
	    //   })
	    //
	    //   warehouse.pushCallback('circle.nes', (rep) => {
	    //     // First batch of inbox messages has gotten in
	    //
	    //     if (rep.from.path.includes("inbox")) {
	    //       this.eagerFetchExtConfs();
	    //       warehouse.storeReports([{
	    //         type: REPORT_PAGE_STATUS,
	    //         data: PAGE_STATUS_READY
	    //       }]);
	    //       return false;
	    //     }
	    //   });
	    //
	    //   warehouse.pushCallback('circle.cos.loc', (rep) => {
	    //     let fromCircle = rep.from && rep.from.path.split("/")[2];
	    //     let fromInbox = fromCircle === "inbox";
	    //
	    //     // this.wipeSubscription('/circle/inbox/config/group-r/0');
	    //
	    //     if (fromInbox) {
	    //       warehouse.storeReports([{
	    //         type: "inbox.sources-loaded",
	    //       }]);
	    //     }
	    //
	    //     return false;
	    //   });
	    //
	    //   return true;
	    // });

	    // grab the config for the root collection circle
	    // api.bind("/circle/c/config/group-r/0", "PUT");

	    // parses client-specific info (ship nicknames, glyphs, etc)
	    // this.bind("/client", "PUT");

	    // public membership
	    // api.bind("/public", "PUT");

	    // bind to collections
	    // this.bind("/", "PUT", "collections");

	    // delete subscriptions when you're done with them, like...
	    // this.bind("/circle/inbox/grams/0", "DELETE");
	  }

	  refreshPoll() {
	    if (this.disconnectTimer) clearTimeout(this.disconnectTimer);

	    this.disconnectTimer = setTimeout(() => {
	      warehouse$1.storeReports([{
	        type: REPORT_PAGE_STATUS$1,
	        data: PAGE_STATUS_DISCONNECTED
	      }]);
	    }, LONGPOLL_TIMEOUT);

	    if (warehouse$1.store.views.transition === PAGE_STATUS_DISCONNECTED) {
	      warehouse$1.storeReports([{
	        type: REPORT_PAGE_STATUS$1,
	        data: PAGE_STATUS_READY
	      }]);
	    }

	    this.runPoll();
	  }

	  runPoll() {
	    console.log('fetching... ', this.seqn);

	    // const controller = new AbortController();
	    // const signal = controller.signal;

	    // const disconnectedTimeout = setTimeout(() => {
	    //   controller.abort();
	    //   warehouse.storeReports([{
	    //     type: REPORT_PAGE_STATUS,
	    //     data: PAGE_STATUS_DISCONNECTED
	    //   }]);
	    //   this.runPoll();
	    // }, LONGPOLL_TIMEOUT);

	    fetch(`/~/of/${api$1.authTokens.ixor}?poll=${this.seqn}`, {
	      credentials: "same-origin",
	      // signal: controller.signal
	    })
	      .then(res => {
	        return res.json();
	      })
	      .then(data => {
	        if (data.beat) {
	          console.log('beat');
	          this.refreshPoll();
	        } else {
	          console.log("new server data: ", data);

	          if (data.data) {
	            warehouse$1.storePollResponse(data);
	          }

	          this.seqn++;
	          this.refreshPoll();
	        }
	      })
	      .catch(error => {
	        console.error('error = ', error);
	        setTimeout(() => {
	          this.runPoll();
	        }, LONGPOLL_TRYAGAIN);
	      });
	  }
	}

	let operator = new UrbitOperator();
	window.operator = operator;

	const _jsxFileName = "/Users/logan/Dev/apps/inbox/src/js/components/lib/icons/icon-inbox.js";
	class IconInbox extends react_1 {
	  render() {
	    return (
	      react.createElement('svg', { width: "16", height: "16", viewBox: "0 0 16 16"   , fill: "none", xmlns: "http://www.w3.org/2000/svg", __self: this, __source: {fileName: _jsxFileName, lineNumber: 6}}
	        , react.createElement('path', { fillRule: "evenodd", clipRule: "evenodd", d: "M8 6C9.65686 6 11 4.65686 11 3H13C13.5523 3 14 3.44772 14 4V12C14 12.5523 13.5523 13 13 13H3C2.44771 13 2 12.5523 2 12V4C2 3.44772 2.44771 3 3 3H5C5 4.65686 6.34314 6 8 6Z"                               , fill: "black", __self: this, __source: {fileName: _jsxFileName, lineNumber: 7}})
	      )
	    )
	  }
	}

	const _jsxFileName$1 = "/Users/logan/Dev/apps/inbox/src/js/components/lib/icons/icon-comment.js";
	class IconComment extends react_1 {
	  render() {
	    return (
	      react.createElement('svg', { width: "16", height: "16", viewBox: "0 0 16 16"   , fill: "none", xmlns: "http://www.w3.org/2000/svg", __self: this, __source: {fileName: _jsxFileName$1, lineNumber: 6}}
	        , react.createElement('mask', { id: "mask0", 'mask-type': "alpha", maskUnits: "userSpaceOnUse", x: "2", y: "2", width: "12", height: "12", __self: this, __source: {fileName: _jsxFileName$1, lineNumber: 7}}
	          , react.createElement('path', { fillRule: "evenodd", clipRule: "evenodd", d: "M9.2 10.4L14 14V2H2V10.4H9.2ZM3.2 9.2H9.35486C9.48986 9.2 9.62096 9.24554 9.72686 9.32924L12.8 11.7578V3.2H3.2V9.2Z"         , fill: "black", __self: this, __source: {fileName: _jsxFileName$1, lineNumber: 8}})
	          , react.createElement('path', { d: "M3.2 9.2H9.35486C9.48986 9.2 9.62096 9.24554 9.72686 9.32924L12.8 11.7578V3.2H3.2V9.2Z"       , fill: "black", __self: this, __source: {fileName: _jsxFileName$1, lineNumber: 9}})
	        )
	        , react.createElement('g', { mask: "url(#mask0)", __self: this, __source: {fileName: _jsxFileName$1, lineNumber: 11}}
	          , react.createElement('rect', { width: "16", height: "16", fill: "black", __self: this, __source: {fileName: _jsxFileName$1, lineNumber: 12}})
	        )
	      )
	    )
	  }
	}

	const _jsxFileName$2 = "/Users/logan/Dev/apps/inbox/src/js/components/lib/icons/icon-sig.js";
	class IconSig extends react_1 {
	  render() {
	    return (
	      react.createElement('svg', { width: "16", height: "16", viewBox: "0 0 16 16"   , fill: "none", xmlns: "http://www.w3.org/2000/svg", __self: this, __source: {fileName: _jsxFileName$2, lineNumber: 6}}
	        , react.createElement('path', { d: "M15 6H12.6564C12.4097 7.51007 11.8238 8.48322 10.7445 8.48322C8.86344 8.48322 7.78414 6 5.03965 6C2.54185 6 1.2467 7.71141 1 11H3.34361C3.59031 9.48993 4.17621 8.51678 5.25551 8.51678C7.19824 8.51678 8.18502 11 10.9912 11C13.3965 11 14.7533 9.28859 15 6Z"                               , fill: "black", __self: this, __source: {fileName: _jsxFileName$2, lineNumber: 7}})
	      )
	    )
	  }
	}

	const _jsxFileName$3 = "/Users/logan/Dev/apps/inbox/src/js/components/lib/icons/icon-decline.js";
	class IconDecline extends react_1 {
	  render() {
	    return (
	      react.createElement('svg', { width: "16", height: "16", viewBox: "0 0 16 16"   , fill: "none", xmlns: "http://www.w3.org/2000/svg", __self: this, __source: {fileName: _jsxFileName$3, lineNumber: 6}}
	        , react.createElement('g', { id: "Icon/Decline", __self: this, __source: {fileName: _jsxFileName$3, lineNumber: 7}}
	          , react.createElement('path', { id: "Union", fillRule: "evenodd", clipRule: "evenodd", d: "M6.28577 7.99992L2 12.2857L3.71423 14L8 9.71422L12.2858 14L14 12.2857L9.71423 7.99997L14 3.71428L12.2856 1.99998L8 6.28568L3.71436 2L2.00012 3.71428L6.28577 7.99992Z"             , fill: "black", __self: this, __source: {fileName: _jsxFileName$3, lineNumber: 8}})
	        )
	      )
	    );
	  }
	}

	const _jsxFileName$4 = "/Users/logan/Dev/apps/inbox/src/js/components/lib/icons/icon-user.js";
	class IconUser extends react_1 {
	  render() {
	    return (
	      react.createElement('svg', { fill: "none", height: "16", width: "16", xmlns: "http://www.w3.org/2000/svg", __self: this, __source: {fileName: _jsxFileName$4, lineNumber: 6}}, react.createElement('path', { clipRule: "evenodd", d: "m8 2a3 3 0 1 0 0 6 3 3 0 0 0 0-6zm4.667 12h1.333c0-2.761-2.686-5-6-5s-6 2.239-6 5z"                , fill: "#000", fillRule: "evenodd", __self: this, __source: {fileName: _jsxFileName$4, lineNumber: 6}}))
	    )
	  }
	}

	const _jsxFileName$5 = "/Users/logan/Dev/apps/inbox/src/js/components/lib/icon.js";
	class Icon extends react_1 {
	  render() {
	    let iconElem = null;

	    switch(this.props.type) {
	      case "icon-stream-chat":
	        iconElem = react.createElement('span', { className: "icon-stream-chat", __self: this, __source: {fileName: _jsxFileName$5, lineNumber: 14}});
	        break;
	      case "icon-stream-dm":
	        iconElem = react.createElement('span', { className: "icon-stream-dm", __self: this, __source: {fileName: _jsxFileName$5, lineNumber: 17}});
	        break;
	      case "icon-collection-index":
	        iconElem = react.createElement('span', { className: "icon-collection", __self: this, __source: {fileName: _jsxFileName$5, lineNumber: 20}});
	        break;
	      case "icon-collection-post":
	        iconElem = react.createElement('span', { className: "icon-collection-post", __self: this, __source: {fileName: _jsxFileName$5, lineNumber: 23}});
	        break;
	      case "icon-collection-comment":
	        iconElem = react.createElement('span', { className: "icon-collection icon-collection-comment" , __self: this, __source: {fileName: _jsxFileName$5, lineNumber: 26}});
	        break;
	      case "icon-panini":
	        // TODO: Should icons be display: block, inline, or inline-blocks?
	        //   1) Should naturally flow inline
	        //   2) But can't make icon-panini naturally inline without hacks like &nbsp;
	        iconElem = react.createElement('div', { className: "icon-panini", __self: this, __source: {fileName: _jsxFileName$5, lineNumber: 32}});
	        break;
	      case "icon-x":
	        iconElem = react.createElement('span', { className: "icon-x", __self: this, __source: {fileName: _jsxFileName$5, lineNumber: 35}});
	        break;
	      case "icon-decline":
	        iconElem = react.createElement(IconDecline, {__self: this, __source: {fileName: _jsxFileName$5, lineNumber: 38}} );
	        break;
	      case "icon-lus":
	        iconElem = react.createElement('span', { className: "icon-lus", __self: this, __source: {fileName: _jsxFileName$5, lineNumber: 41}});
	        break;
	      case "icon-inbox":
	        iconElem = react.createElement(IconInbox, {__self: this, __source: {fileName: _jsxFileName$5, lineNumber: 44}} );
	        break;
	      case "icon-comment":
	        iconElem = react.createElement(IconComment, {__self: this, __source: {fileName: _jsxFileName$5, lineNumber: 47}} );
	        break;
	      case "icon-sig":
	        iconElem = react.createElement(IconSig, {__self: this, __source: {fileName: _jsxFileName$5, lineNumber: 50}} );
	        break;
	      case "icon-user":
	        iconElem = react.createElement(IconUser, {__self: this, __source: {fileName: _jsxFileName$5, lineNumber: 53}} );
	        break;
	      case "icon-ellipsis":
	        iconElem = (
	          react.createElement('div', { className: "icon-ellipsis-wrapper icon-label" , __self: this, __source: {fileName: _jsxFileName$5, lineNumber: 57}}
	            , react.createElement('div', { className: "icon-ellipsis-dot", __self: this, __source: {fileName: _jsxFileName$5, lineNumber: 58}})
	            , react.createElement('div', { className: "icon-ellipsis-dot", __self: this, __source: {fileName: _jsxFileName$5, lineNumber: 59}})
	            , react.createElement('div', { className: "icon-ellipsis-dot", __self: this, __source: {fileName: _jsxFileName$5, lineNumber: 60}})
	          )
	        );
	        break;
	    }

	    let className = this.props.label ? "icon-label" : "";

	    return (
	      react.createElement('span', { className: className, __self: this, __source: {fileName: _jsxFileName$5, lineNumber: 69}}
	        , iconElem
	      )
	    )
	  }
	}

	const _jsxFileName$6 = "/Users/logan/Dev/apps/inbox/src/js/components/lib/button.js";
	class Button extends react_1 {
	  constructor(props) {
	    super(props);

	    this.state = {
	      status: STATUS_READY
	    };

	    this.onSubmit = this.onSubmit.bind(this);
	    this.focusChange = this.focusChange.bind(this);
	  }

	  onSubmit(e) {
	    if (e.preventDefault) e.preventDefault();

	    this.setState({ status: STATUS_LOADING });

	    this.props.action(this.props.actionData);

	    if (this.props.responseKey) {
	      this.props.pushCallback(this.props.responseKey, (rep) => {
	        this.setState({ status: STATUS_READY });
	      });
	    }
	  }

	  focusChange(e) {
	    if (this.props.focusChange) this.props.focusChange(e);
	    return true;
	  }

	  render() {
	    let spinnerClass = (this.state.status !== STATUS_LOADING) ? "hide" : "btn-spinner";
	    let content = typeof(this.props.content) === "function"? react.createElement(this.props.content) : this.props.content;

	    return (
	      react.createElement('form', {
	        style: {display: 'inline-block'},
	        onSubmit: this.onSubmit, __self: this, __source: {fileName: _jsxFileName$6, lineNumber: 40}}

	        , react.createElement('button', { type: "submit",
	          className: this.props.classes,
	          disabled: this.props.disabled,
	          onFocus: this.focusChange, __self: this, __source: {fileName: _jsxFileName$6, lineNumber: 44}}

	          , react.createElement('span', {__self: this, __source: {fileName: _jsxFileName$6, lineNumber: 49}}, content)
	          , react.createElement('span', { className: spinnerClass, __self: this, __source: {fileName: _jsxFileName$6, lineNumber: 50}})
	        )
	      )
	    )
	  }
	}

	const _jsxFileName$7 = "/Users/logan/Dev/apps/inbox/src/js/components/lib/page-status.js";
	class PageStatus extends react_1 {
	  constructor(props) {
	    super(props);

	    this.pendingAction = this.pendingAction.bind(this);
	  }

	  reconnectPolling() {
	    this.props.storeReports([{
	      type: REPORT_PAGE_STATUS,
	      data: PAGE_STATUS_RECONNECTING
	    }]);
	    this.props.runPoll();
	  }

	  pendingAction() {
	    if (this.props.transition === PAGE_STATUS_DISCONNECTED) {
	      this.reconnectPolling();
	    }
	  }

	  render() {
	    let loadingClass = getLoadingClass(this.props.transition);

	    return (
	      react.createElement(react.Fragment, {__self: this, __source: {fileName: _jsxFileName$7, lineNumber: 30}}
	        , this.props.transition !== PAGE_STATUS_READY &&
	          react.createElement('div', { className: "header-pending-panel text-small row flex-offset-1"   , __self: this, __source: {fileName: _jsxFileName$7, lineNumber: 32}}
	            , react.createElement('div', { onClick: this.pendingAction, className: loadingClass, __self: this, __source: {fileName: _jsxFileName$7, lineNumber: 33}})
	            , this.props.transition === PAGE_STATUS_DISCONNECTED &&
	              react.createElement('span', {__self: this, __source: {fileName: _jsxFileName$7, lineNumber: 35}}, "Connection to "  , react.createElement('span', { className: "text-mono", __self: this, __source: {fileName: _jsxFileName$7, lineNumber: 35}}, "~", this.props.usership), " failed" )
	            
	            , this.props.transition === PAGE_STATUS_TRANSITIONING &&
	              react.createElement('span', {__self: this, __source: {fileName: _jsxFileName$7, lineNumber: 38}}, "Loading page..." )
	            
	            , this.props.transition === PAGE_STATUS_PROCESSING &&
	              react.createElement('span', {__self: this, __source: {fileName: _jsxFileName$7, lineNumber: 41}}, "Loading new data..."  )
	            
	          )
	        
	      )
	    );
	  }
	}

	const _jsxFileName$8 = "/Users/logan/Dev/apps/inbox/src/js/components/header.js";
	class Header extends react_1 {
	  constructor(props) {
	    super(props);

	    this.toggleSubscribe = this.toggleSubscribe.bind(this);
	    this.toggleMenu = this.toggleMenu.bind(this);
	    this.handleHeaderAction = this.handleHeaderAction.bind(this);
	  }

	  isSubscribed(station) {
	    let inboxSrc = this.props.store.messages.inbox.src;
	    if (!inboxSrc) return false;
	    return inboxSrc.includes(station);
	  }

	  toggleSubscribe() {
	    let subscribed = this.isSubscribed(this.props.data.station);
	    let stationDetails = getStationDetails(this.props.data.station);

	    this.props.api.hall({
	      source: {
	        nom: 'inbox',
	        sub: !subscribed,
	        srs: [this.props.data.station]
	      }
	    });
	  }

	  toggleMenu() {
	    this.props.storeReports([{
	      type: "menu.toggle",
	      data: {open: true}
	    }]);
	  }

	  getStationHeaderData(station) {
	    let stationDetails = getStationDetails(station);

	    return {
	      title: {
	        display: stationDetails.stationTitle,
	        href: stationDetails.stationUrl
	      },
	      breadcrumbs: [{
	        display: `~${stationDetails.host}`,
	        href: stationDetails.hostProfileUrl
	      }],
	      station,
	      stationDetails
	    }
	  }

	  getHeaderData(type) {
	    let headerData = {};
	    let defaultData;
	    let actions = {};

	    switch (type) {
	      case "stream-chat":
	        defaultData = this.getStationHeaderData(this.props.data.station);
	        headerData = {
	          ...defaultData,
	          icon: 'icon-stream-chat',
	          title: {
	            ...defaultData.title,
	            style: "mono"
	          },
	          actions: {
	            subscribe: null,
	            details: defaultData.stationDetails.stationDetailsUrl,
	          },
	        };
	        break;

	      case "collection-index-default":
	        defaultData = this.getStationHeaderData(this.props.data.station);

	        actions = {
	          write: `/~~/${this.props.data.author}/==/web/collections/${this.props.data.collId}?show=post`,
	          subscribe: null,
	          details: `/~~/${this.props.data.author}/==/web/collections/${this.props.data.collId}?show=details`,
	        };

	        headerData = {
	          ...defaultData,
	          icon: 'icon-collection-index',
	          title: {
	            ...defaultData.title,
	            display: (this.props.data.title) ? this.props.data.title : defaultData.title.display
	          },
	          actions: actions
	        };
	        break;

	      case "collection-index-post": // TODO: should probably be 'collection-post-write'
	      case "collection-post-edit":
	      case "collection-post-default":
	        defaultData = this.getStationHeaderData(this.props.data.station);

	        if (this.props.data.subtype === 'default') {
	          actions = {
	            edit: `/~~/${this.props.data.host}/==/web/collections/${this.props.data.collId}/${this.props.data.postId}?show=edit`
	          };
	        }

	        let icon = "icon-collection-post";
	        if (this.props.data.type === "collection-post-default") icon = "icon-collection-comment";

	        let title = {
	          display: this.props.data.title,
	          href: defaultData.title.href
	        };

	        if (this.props.data.type === "collection-index-post") {
	          title = {
	            display: "New post",
	            href: "javascript:void(0)"
	          };
	        }

	        headerData = {
	          ...defaultData,
	          icon,
	          title,
	          breadcrumbs: [
	            defaultData.breadcrumbs[0],
	            {
	              display: this.props.data.collTitle,
	              href: `/~~/${this.props.data.host}/==/web/collections/${this.props.data.collId}`
	            }
	          ],
	          actions
	        };
	        break;

	      case "header-profile":
	        headerData = {
	          icon: 'icon-sig',
	          title: {
	            display: this.props.data.author.substr(1),
	            href: profileUrl(this.props.data.author.substr(1)),
	            style: "mono"
	          }
	        };
	        break;

	      case "stream-dm":
	        headerData = {
	          icon: 'icon-stream-dm'
	        };
	        break;
	      case "collection-write":
	        headerData = {
	          icon: 'icon-collection-post'
	        };
	        break;
	      case "header-inbox":
	        headerData = {
	          title: {
	            display: "Inbox",
	            href: LANDSCAPE_ROOT
	          },
	          icon: 'icon-inbox',
	        };
	        break;
	      case "header-default":
	      default:
	        headerData = {
	          title: {
	            display: "Inbox",
	            href: LANDSCAPE_ROOT
	          },
	          icon: 'icon-inbox'
	        };
	        break;
	    }

	    headerData.type = type;

	    return headerData;
	  }

	  navigateSubpage(page, view) {
	    this.props.storeReports([{
	      type: REPORT_NAVIGATE,
	      data: {page, view}
	    }]);
	  }

	  buildHeaderCarpet(headerData) {
	    switch (headerData.type) {
	      case "header-inbox":
	        let recentClass = classnames({
	          'vanilla': true,
	          'mr-8': true,
	          'inbox-link': true,
	          'inbox-link-active': warehouse.store.views.inbox === "inbox-recent",
	        });

	        let listClass = classnames({
	          'vanilla': true,
	          'inbox-link': true,
	          'inbox-link-active': warehouse.store.views.inbox === "inbox-list",
	        });
	        return (
	          react.createElement(react.Fragment, {__self: this, __source: {fileName: _jsxFileName$8, lineNumber: 216}}
	            , react.createElement('div', { className: "flex-col-2", __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 217}})
	            , react.createElement('div', { className: "flex-col-x text-heading text-squat"  , __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 218}}
	              , react.createElement('a', { className: recentClass, onClick: () => { this.navigateSubpage('inbox', 'inbox-recent'); }, __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 219}}, "Recent")
	              , react.createElement('a', { className: listClass, onClick: () => { this.navigateSubpage('inbox', 'inbox-list'); }, __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 220}}, "All")
	            )
	          )
	        );

	        break;
	      case "collection-index-post":
	      case "collection-post-edit":
	      case "collection-post-default":
	        // <Elapsed timestring={parseInt(this.state.activatedMsg.date, 10)} classes="ml-5 mr-2 text-timestamp" />

	        let authorElem = null;

	        // TODO: I realize the redundancy in this conditional. God forgive me.
	        if (this.props.data.author && headerData.type !== "collection-index-post") {
	          authorElem = (
	            react.createElement('a', { href: profileUrl(this.props.data.author.substr(1)), className: "vanilla text-mono mr-3 text-700 text-small"    , __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 236}}, this.props.data.author)
	          );
	        }

	        return (
	          react.createElement(react.Fragment, {__self: this, __source: {fileName: _jsxFileName$8, lineNumber: 241}}
	            , react.createElement('div', { className: "flex-col-2", __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 242}})
	            , react.createElement('div', { className: "flex-col-x", __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 243}}
	              , authorElem
	              , react.createElement('span', { className: "text-mono text-300 text-small"  , __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 245}}, this.props.data.dateCreated.slice(0, -6))
	            )
	          )
	        );
	        break;
	      case "header-profile":
	        let onSettingsPage = window.location.href.includes("settings");
	        let indexClass = classnames({
	          'vanilla': true,
	          'mr-8': true,
	          'inbox-link': true,
	          'inbox-link-active': !onSettingsPage,
	        });
	        let settingsClass = classnames({
	          'vanilla': true,
	          'inbox-link': true,
	          'inbox-link-active': onSettingsPage,
	        });
	        return (
	          react.createElement(react.Fragment, {__self: this, __source: {fileName: _jsxFileName$8, lineNumber: 264}}
	            , react.createElement('div', { className: "flex-col-2", __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 265}})
	            , react.createElement('div', { className: "flex-col-x text-heading text-squat"  , __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 266}}
	              , react.createElement('a', { className: indexClass, href: `/~~/${this.props.data.author}/==/web/landscape/profile`, __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 267}}, "Profile")
	              , this.props.data.author.substr(1) === this.props.api.authTokens.ship &&
	                react.createElement('a', { className: settingsClass, href: `/~~/${this.props.data.author}/==/web/landscape/profile/settings`, __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 269}}, "Settings")
	              
	            )
	          )
	        );
	        break;
	    }
	  }

	  buildHeaderBreadcrumbs(headerData) {
	    if (headerData.breadcrumbs) {
	      return headerData.breadcrumbs.map(({display, href}, i) => {
	        return (
	          react.createElement(react.Fragment, {__self: this, __source: {fileName: _jsxFileName$8, lineNumber: 282}}
	            , react.createElement('a', { className: "text-host-breadcrumb", key: display, href: href, __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 283}}, display)
	            , react.createElement('span', { className: "text-host-breadcrumb text-600 ml-2 mr-2"   , __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 284}}, "/")
	          )
	        )
	      })
	    }

	    return null;
	  }

	  handleHeaderAction(e) {
	    if (e.currentTarget.dataset["key"] === "subscribe") {
	      e.preventDefault();

	      this.props.storeReports([{
	        type: REPORT_PAGE_STATUS$1,
	        data: PAGE_STATUS_PROCESSING
	      }]);

	      this.toggleSubscribe();

	      this.props.pushCallback("circle.config.dif.source", rep => {
	        this.props.storeReports([{
	          type: REPORT_PAGE_STATUS$1,
	          data: PAGE_STATUS_READY
	        }]);
	      });
	    }
	  }

	  buildHeaderActions(headerData) {
	    if (headerData.actions) {
	      return Object.arrayify(headerData.actions).map(({key, value}) => {
	        let lusElem = null;
	        let labelElem = key;

	        switch (key) {
	          case "details":
	            labelElem = (react.createElement(Icon, { type: "icon-ellipsis", __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 321}} ));
	            return null;  // Remove "details" page for now
	            break;
	          case "subscribe":
	            labelElem = this.isSubscribed(headerData.station) ? "Unsubscribe" : "Subscribe";
	            return null;  // Remove "subscribe" action for now
	            break;
	          case "write":
	            lusElem = key === "write" ? (react.createElement(Icon, { type: "icon-lus", label: true, __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 329}} )) : null;
	            break;
	        }

	        // TODO: No idea why .key and .href aren't showing up in the attributes
	        // in currentTarget when you click this. Bad javascript, bad!
	        return (
	          react.createElement('a', { key: key, href: value, onClick: this.handleHeaderAction, 'data-key': key, className: "header-link mr-6 flex align-center"   , __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 336}}
	            , lusElem
	            , react.createElement('span', {__self: this, __source: {fileName: _jsxFileName$8, lineNumber: 338}}, labelElem)
	          )
	        );
	      })
	    }

	    return null;
	  }

	  buildHeaderContent(headerData) {
	    let actions, breadcrumbsElem, headerClass,
	      headerCarpet;

	    actions = this.buildHeaderActions(headerData);
	    breadcrumbsElem = this.buildHeaderBreadcrumbs(headerData);
	    headerCarpet = this.buildHeaderCarpet(headerData);

	    headerClass = classnames({
	      'flex-col-x': true,
	      'header-title': true,
	      'text-mono': headerData.title && headerData.title.style === "mono"
	    });

	    return (
	      react.createElement('div', { className: "container header-container" , __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 362}}
	        , react.createElement('div', { className: "row", __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 363}}
	          , react.createElement('div', { className: "flex-col-2", __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 364}})
	          , react.createElement('div', { className: "flex-col-x header-breadcrumbs" , __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 365}}
	            , breadcrumbsElem
	          )
	        )
	        , react.createElement('div', { className: "row align-center header-mainrow"  , __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 369}}
	          , react.createElement('div', { className: "flex-col-1 flex justify-end"  , __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 370}}
	            , react.createElement(HeaderNotification, {
	              notifications: this.props.store.messages.notifications,
	              pushCallback: this.props.pushCallback, __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 371}}
	            )
	          )
	          , react.createElement('div', { className: "flex-col-1 flex space-between align-center"   , __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 376}}
	            , react.createElement('a', { onClick: this.toggleMenu, __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 377}}
	              , react.createElement(Icon, { type: "icon-panini", __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 378}} )
	            )
	            , react.createElement(Icon, { type: headerData.icon, label: true, __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 380}} )
	          )
	          , react.createElement('h1', { className: headerClass, __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 382}}
	            , react.createElement('a', { href: headerData.title.href, __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 383}}, headerData.title.display)
	          )
	          , actions
	        )
	        , react.createElement('div', { className: "row header-carpet" , __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 387}}
	          , headerCarpet
	        )
	        , react.createElement(PageStatus, {
	          transition: this.props.store.views.transition,
	          usership: this.props.api.authTokens.ship,
	          runPoll: this.props.runPoll,
	          storeReports: this.props.storeReports, __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 390}}
	        )
	      )
	    )
	  }

	  render() {
	    let type = (this.props.data.type) ? this.props.data.type : "header-default";

	    // TODO: This is an ugly hack until we fix queryParams
	    if (["stream-chat", "header-stream-dm", "collection-edit"].includes(type) && !getQueryParams().station) {
	      return null;
	    }

	    let headerData = this.getHeaderData(type);
	    let headerContent = this.buildHeaderContent(headerData);

	    return headerContent;
	  }
	}

	class HeaderNotification extends react_1 {
	  constructor(props) {
	    super(props);

	    this.state = {
	      notificationClass: null
	    };
	  }

	  componentDidMount() {
	    this.props.pushCallback('dm.new', rep => {
	      this.setState({
	        notificationClass: "header-notifications-flash"
	      });

	      setTimeout(() => {
	        this.setState({
	          notificationClass: null
	        });
	      }, 5000);

	      return false;
	    });
	  }

	  render() {
	    let notificationHref;

	    if (this.props.notifications.length > 0) {
	      notificationHref = this.props.notifications[0].stationDetails.stationUrl;
	    }

	    return (
	      react.createElement(react.Fragment, {__self: this, __source: {fileName: _jsxFileName$8, lineNumber: 448}}
	        , this.props.notifications.length > 0 &&
	          react.createElement('a', { className: "vanilla", href: notificationHref, __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 450}}
	            , react.createElement('div', { className: `header-notifications text-mono text-700 ${this.state.notificationClass}`, __self: this, __source: {fileName: _jsxFileName$8, lineNumber: 451}}, this.props.notifications.length)
	          )
	        
	      )
	    )
	  }
	}

	function _isPlaceholder(a) {
	       return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;
	}
	var _isPlaceholder_1 = _isPlaceholder;

	/**
	 * Optimized internal one-arity curry function.
	 *
	 * @private
	 * @category Function
	 * @param {Function} fn The function to curry.
	 * @return {Function} The curried function.
	 */


	function _curry1(fn) {
	  return function f1(a) {
	    if (arguments.length === 0 || _isPlaceholder_1(a)) {
	      return f1;
	    } else {
	      return fn.apply(this, arguments);
	    }
	  };
	}
	var _curry1_1 = _curry1;

	/**
	 * Optimized internal two-arity curry function.
	 *
	 * @private
	 * @category Function
	 * @param {Function} fn The function to curry.
	 * @return {Function} The curried function.
	 */


	function _curry2(fn) {
	  return function f2(a, b) {
	    switch (arguments.length) {
	      case 0:
	        return f2;
	      case 1:
	        return _isPlaceholder_1(a) ? f2 : _curry1_1(function (_b) {
	          return fn(a, _b);
	        });
	      default:
	        return _isPlaceholder_1(a) && _isPlaceholder_1(b) ? f2 : _isPlaceholder_1(a) ? _curry1_1(function (_a) {
	          return fn(_a, b);
	        }) : _isPlaceholder_1(b) ? _curry1_1(function (_b) {
	          return fn(a, _b);
	        }) : fn(a, b);
	    }
	  };
	}
	var _curry2_1 = _curry2;

	/**
	 * Tests whether or not an object is an array.
	 *
	 * @private
	 * @param {*} val The object to test.
	 * @return {Boolean} `true` if `val` is an array, `false` otherwise.
	 * @example
	 *
	 *      _isArray([]); //=> true
	 *      _isArray(null); //=> false
	 *      _isArray({}); //=> false
	 */
	var _isArray = Array.isArray || function _isArray(val) {
	  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';
	};

	function _isTransformer(obj) {
	  return typeof obj['@@transducer/step'] === 'function';
	}
	var _isTransformer_1 = _isTransformer;

	/**
	 * Returns a function that dispatches with different strategies based on the
	 * object in list position (last argument). If it is an array, executes [fn].
	 * Otherwise, if it has a function with one of the given method names, it will
	 * execute that function (functor case). Otherwise, if it is a transformer,
	 * uses transducer [xf] to return a new transformer (transducer case).
	 * Otherwise, it will default to executing [fn].
	 *
	 * @private
	 * @param {Array} methodNames properties to check for a custom implementation
	 * @param {Function} xf transducer to initialize if object is transformer
	 * @param {Function} fn default ramda implementation
	 * @return {Function} A function that dispatches on object in list position
	 */


	function _dispatchable(methodNames, xf, fn) {
	  return function () {
	    if (arguments.length === 0) {
	      return fn();
	    }
	    var args = Array.prototype.slice.call(arguments, 0);
	    var obj = args.pop();
	    if (!_isArray(obj)) {
	      var idx = 0;
	      while (idx < methodNames.length) {
	        if (typeof obj[methodNames[idx]] === 'function') {
	          return obj[methodNames[idx]].apply(obj, args);
	        }
	        idx += 1;
	      }
	      if (_isTransformer_1(obj)) {
	        var transducer = xf.apply(null, args);
	        return transducer(obj);
	      }
	    }
	    return fn.apply(this, arguments);
	  };
	}
	var _dispatchable_1 = _dispatchable;

	function _reduced(x) {
	  return x && x['@@transducer/reduced'] ? x : {
	    '@@transducer/value': x,
	    '@@transducer/reduced': true
	  };
	}
	var _reduced_1 = _reduced;

	var _xfBase = {
	  init: function () {
	    return this.xf['@@transducer/init']();
	  },
	  result: function (result) {
	    return this.xf['@@transducer/result'](result);
	  }
	};

	var XFind = /*#__PURE__*/function () {

	  function XFind(f, xf) {
	    this.xf = xf;
	    this.f = f;
	    this.found = false;
	  }
	  XFind.prototype['@@transducer/init'] = _xfBase.init;
	  XFind.prototype['@@transducer/result'] = function (result) {
	    if (!this.found) {
	      result = this.xf['@@transducer/step'](result, void 0);
	    }
	    return this.xf['@@transducer/result'](result);
	  };
	  XFind.prototype['@@transducer/step'] = function (result, input) {
	    if (this.f(input)) {
	      this.found = true;
	      result = _reduced_1(this.xf['@@transducer/step'](result, input));
	    }
	    return result;
	  };

	  return XFind;
	}();

	var _xfind = /*#__PURE__*/_curry2_1(function _xfind(f, xf) {
	  return new XFind(f, xf);
	});
	var _xfind_1 = _xfind;

	/**
	 * Returns the first element of the list which matches the predicate, or
	 * `undefined` if no element matches.
	 *
	 * Dispatches to the `find` method of the second argument, if present.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig (a -> Boolean) -> [a] -> a | undefined
	 * @param {Function} fn The predicate function used to determine if the element is the
	 *        desired one.
	 * @param {Array} list The array to consider.
	 * @return {Object} The element found, or `undefined`.
	 * @see R.transduce
	 * @example
	 *
	 *      var xs = [{a: 1}, {a: 2}, {a: 3}];
	 *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}
	 *      R.find(R.propEq('a', 4))(xs); //=> undefined
	 */


	var find = /*#__PURE__*/_curry2_1( /*#__PURE__*/_dispatchable_1(['find'], _xfind_1, function find(fn, list) {
	  var idx = 0;
	  var len = list.length;
	  while (idx < len) {
	    if (fn(list[idx])) {
	      return list[idx];
	    }
	    idx += 1;
	  }
	}));
	var find_1 = find;

	function _complement(f) {
	  return function () {
	    return !f.apply(this, arguments);
	  };
	}
	var _complement_1 = _complement;

	function _filter(fn, list) {
	  var idx = 0;
	  var len = list.length;
	  var result = [];

	  while (idx < len) {
	    if (fn(list[idx])) {
	      result[result.length] = list[idx];
	    }
	    idx += 1;
	  }
	  return result;
	}
	var _filter_1 = _filter;

	function _isObject(x) {
	  return Object.prototype.toString.call(x) === '[object Object]';
	}
	var _isObject_1 = _isObject;

	function _isString(x) {
	  return Object.prototype.toString.call(x) === '[object String]';
	}
	var _isString_1 = _isString;

	/**
	 * Tests whether or not an object is similar to an array.
	 *
	 * @private
	 * @category Type
	 * @category List
	 * @sig * -> Boolean
	 * @param {*} x The object to test.
	 * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
	 * @example
	 *
	 *      _isArrayLike([]); //=> true
	 *      _isArrayLike(true); //=> false
	 *      _isArrayLike({}); //=> false
	 *      _isArrayLike({length: 10}); //=> false
	 *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
	 */


	var _isArrayLike = /*#__PURE__*/_curry1_1(function isArrayLike(x) {
	  if (_isArray(x)) {
	    return true;
	  }
	  if (!x) {
	    return false;
	  }
	  if (typeof x !== 'object') {
	    return false;
	  }
	  if (_isString_1(x)) {
	    return false;
	  }
	  if (x.nodeType === 1) {
	    return !!x.length;
	  }
	  if (x.length === 0) {
	    return true;
	  }
	  if (x.length > 0) {
	    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
	  }
	  return false;
	});
	var _isArrayLike_1 = _isArrayLike;

	var XWrap = /*#__PURE__*/function () {
	  function XWrap(fn) {
	    this.f = fn;
	  }
	  XWrap.prototype['@@transducer/init'] = function () {
	    throw new Error('init not implemented on XWrap');
	  };
	  XWrap.prototype['@@transducer/result'] = function (acc) {
	    return acc;
	  };
	  XWrap.prototype['@@transducer/step'] = function (acc, x) {
	    return this.f(acc, x);
	  };

	  return XWrap;
	}();

	function _xwrap(fn) {
	  return new XWrap(fn);
	}
	var _xwrap_1 = _xwrap;

	function _arity(n, fn) {
	  /* eslint-disable no-unused-vars */
	  switch (n) {
	    case 0:
	      return function () {
	        return fn.apply(this, arguments);
	      };
	    case 1:
	      return function (a0) {
	        return fn.apply(this, arguments);
	      };
	    case 2:
	      return function (a0, a1) {
	        return fn.apply(this, arguments);
	      };
	    case 3:
	      return function (a0, a1, a2) {
	        return fn.apply(this, arguments);
	      };
	    case 4:
	      return function (a0, a1, a2, a3) {
	        return fn.apply(this, arguments);
	      };
	    case 5:
	      return function (a0, a1, a2, a3, a4) {
	        return fn.apply(this, arguments);
	      };
	    case 6:
	      return function (a0, a1, a2, a3, a4, a5) {
	        return fn.apply(this, arguments);
	      };
	    case 7:
	      return function (a0, a1, a2, a3, a4, a5, a6) {
	        return fn.apply(this, arguments);
	      };
	    case 8:
	      return function (a0, a1, a2, a3, a4, a5, a6, a7) {
	        return fn.apply(this, arguments);
	      };
	    case 9:
	      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
	        return fn.apply(this, arguments);
	      };
	    case 10:
	      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	        return fn.apply(this, arguments);
	      };
	    default:
	      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');
	  }
	}
	var _arity_1 = _arity;

	/**
	 * Creates a function that is bound to a context.
	 * Note: `R.bind` does not provide the additional argument-binding capabilities of
	 * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
	 *
	 * @func
	 * @memberOf R
	 * @since v0.6.0
	 * @category Function
	 * @category Object
	 * @sig (* -> *) -> {*} -> (* -> *)
	 * @param {Function} fn The function to bind to context
	 * @param {Object} thisObj The context to bind `fn` to
	 * @return {Function} A function that will execute in the context of `thisObj`.
	 * @see R.partial
	 * @example
	 *
	 *      var log = R.bind(console.log, console);
	 *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
	 *      // logs {a: 2}
	 * @symb R.bind(f, o)(a, b) = f.call(o, a, b)
	 */


	var bind = /*#__PURE__*/_curry2_1(function bind(fn, thisObj) {
	  return _arity_1(fn.length, function () {
	    return fn.apply(thisObj, arguments);
	  });
	});
	var bind_1 = bind;

	function _arrayReduce(xf, acc, list) {
	  var idx = 0;
	  var len = list.length;
	  while (idx < len) {
	    acc = xf['@@transducer/step'](acc, list[idx]);
	    if (acc && acc['@@transducer/reduced']) {
	      acc = acc['@@transducer/value'];
	      break;
	    }
	    idx += 1;
	  }
	  return xf['@@transducer/result'](acc);
	}

	function _iterableReduce(xf, acc, iter) {
	  var step = iter.next();
	  while (!step.done) {
	    acc = xf['@@transducer/step'](acc, step.value);
	    if (acc && acc['@@transducer/reduced']) {
	      acc = acc['@@transducer/value'];
	      break;
	    }
	    step = iter.next();
	  }
	  return xf['@@transducer/result'](acc);
	}

	function _methodReduce(xf, acc, obj, methodName) {
	  return xf['@@transducer/result'](obj[methodName](bind_1(xf['@@transducer/step'], xf), acc));
	}

	var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';

	function _reduce(fn, acc, list) {
	  if (typeof fn === 'function') {
	    fn = _xwrap_1(fn);
	  }
	  if (_isArrayLike_1(list)) {
	    return _arrayReduce(fn, acc, list);
	  }
	  if (typeof list['fantasy-land/reduce'] === 'function') {
	    return _methodReduce(fn, acc, list, 'fantasy-land/reduce');
	  }
	  if (list[symIterator] != null) {
	    return _iterableReduce(fn, acc, list[symIterator]());
	  }
	  if (typeof list.next === 'function') {
	    return _iterableReduce(fn, acc, list);
	  }
	  if (typeof list.reduce === 'function') {
	    return _methodReduce(fn, acc, list, 'reduce');
	  }

	  throw new TypeError('reduce: list must be array or iterable');
	}
	var _reduce_1 = _reduce;

	var XFilter = /*#__PURE__*/function () {

	  function XFilter(f, xf) {
	    this.xf = xf;
	    this.f = f;
	  }
	  XFilter.prototype['@@transducer/init'] = _xfBase.init;
	  XFilter.prototype['@@transducer/result'] = _xfBase.result;
	  XFilter.prototype['@@transducer/step'] = function (result, input) {
	    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;
	  };

	  return XFilter;
	}();

	var _xfilter = /*#__PURE__*/_curry2_1(function _xfilter(f, xf) {
	  return new XFilter(f, xf);
	});
	var _xfilter_1 = _xfilter;

	function _has(prop, obj) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	var _has_1 = _has;

	var toString$1 = Object.prototype.toString;
	var _isArguments = function () {
	  return toString$1.call(arguments) === '[object Arguments]' ? function _isArguments(x) {
	    return toString$1.call(x) === '[object Arguments]';
	  } : function _isArguments(x) {
	    return _has_1('callee', x);
	  };
	};

	var _isArguments_1 = _isArguments;

	// cover IE < 9 keys issues


	var hasEnumBug = ! /*#__PURE__*/{ toString: null }.propertyIsEnumerable('toString');
	var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
	// Safari bug
	var hasArgsEnumBug = /*#__PURE__*/function () {

	  return arguments.propertyIsEnumerable('length');
	}();

	var contains = function contains(list, item) {
	  var idx = 0;
	  while (idx < list.length) {
	    if (list[idx] === item) {
	      return true;
	    }
	    idx += 1;
	  }
	  return false;
	};

	/**
	 * Returns a list containing the names of all the enumerable own properties of
	 * the supplied object.
	 * Note that the order of the output array is not guaranteed to be consistent
	 * across different JS platforms.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @sig {k: v} -> [k]
	 * @param {Object} obj The object to extract properties from
	 * @return {Array} An array of the object's own properties.
	 * @see R.keysIn, R.values
	 * @example
	 *
	 *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
	 */
	var _keys = typeof Object.keys === 'function' && !hasArgsEnumBug ? function keys(obj) {
	  return Object(obj) !== obj ? [] : Object.keys(obj);
	} : function keys(obj) {
	  if (Object(obj) !== obj) {
	    return [];
	  }
	  var prop, nIdx;
	  var ks = [];
	  var checkArgsLength = hasArgsEnumBug && _isArguments_1(obj);
	  for (prop in obj) {
	    if (_has_1(prop, obj) && (!checkArgsLength || prop !== 'length')) {
	      ks[ks.length] = prop;
	    }
	  }
	  if (hasEnumBug) {
	    nIdx = nonEnumerableProps.length - 1;
	    while (nIdx >= 0) {
	      prop = nonEnumerableProps[nIdx];
	      if (_has_1(prop, obj) && !contains(ks, prop)) {
	        ks[ks.length] = prop;
	      }
	      nIdx -= 1;
	    }
	  }
	  return ks;
	};
	var keys = /*#__PURE__*/_curry1_1(_keys);
	var keys_1 = keys;

	/**
	 * Takes a predicate and a `Filterable`, and returns a new filterable of the
	 * same type containing the members of the given filterable which satisfy the
	 * given predicate. Filterable objects include plain objects or any object
	 * that has a filter method such as `Array`.
	 *
	 * Dispatches to the `filter` method of the second argument, if present.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig Filterable f => (a -> Boolean) -> f a -> f a
	 * @param {Function} pred
	 * @param {Array} filterable
	 * @return {Array} Filterable
	 * @see R.reject, R.transduce, R.addIndex
	 * @example
	 *
	 *      var isEven = n => n % 2 === 0;
	 *
	 *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
	 *
	 *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
	 */


	var filter = /*#__PURE__*/_curry2_1( /*#__PURE__*/_dispatchable_1(['filter'], _xfilter_1, function (pred, filterable) {
	  return _isObject_1(filterable) ? _reduce_1(function (acc, key) {
	    if (pred(filterable[key])) {
	      acc[key] = filterable[key];
	    }
	    return acc;
	  }, {}, keys_1(filterable)) :
	  // else
	  _filter_1(pred, filterable);
	}));
	var filter_1 = filter;

	/**
	 * The complement of [`filter`](#filter).
	 *
	 * Acts as a transducer if a transformer is given in list position. Filterable
	 * objects include plain objects or any object that has a filter method such
	 * as `Array`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig Filterable f => (a -> Boolean) -> f a -> f a
	 * @param {Function} pred
	 * @param {Array} filterable
	 * @return {Array}
	 * @see R.filter, R.transduce, R.addIndex
	 * @example
	 *
	 *      var isOdd = (n) => n % 2 === 1;
	 *
	 *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]
	 *
	 *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
	 */


	var reject = /*#__PURE__*/_curry2_1(function reject(pred, filterable) {
	  return filter_1(_complement_1(pred), filterable);
	});
	var reject_1 = reject;

	/**
	 * Private `concat` function to merge two array-like objects.
	 *
	 * @private
	 * @param {Array|Arguments} [set1=[]] An array-like object.
	 * @param {Array|Arguments} [set2=[]] An array-like object.
	 * @return {Array} A new, merged array.
	 * @example
	 *
	 *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
	 */
	function _concat(set1, set2) {
	  set1 = set1 || [];
	  set2 = set2 || [];
	  var idx;
	  var len1 = set1.length;
	  var len2 = set2.length;
	  var result = [];

	  idx = 0;
	  while (idx < len1) {
	    result[result.length] = set1[idx];
	    idx += 1;
	  }
	  idx = 0;
	  while (idx < len2) {
	    result[result.length] = set2[idx];
	    idx += 1;
	  }
	  return result;
	}
	var _concat_1 = _concat;

	/**
	 * Internal curryN function.
	 *
	 * @private
	 * @category Function
	 * @param {Number} length The arity of the curried function.
	 * @param {Array} received An array of arguments received thus far.
	 * @param {Function} fn The function to curry.
	 * @return {Function} The curried function.
	 */


	function _curryN(length, received, fn) {
	  return function () {
	    var combined = [];
	    var argsIdx = 0;
	    var left = length;
	    var combinedIdx = 0;
	    while (combinedIdx < received.length || argsIdx < arguments.length) {
	      var result;
	      if (combinedIdx < received.length && (!_isPlaceholder_1(received[combinedIdx]) || argsIdx >= arguments.length)) {
	        result = received[combinedIdx];
	      } else {
	        result = arguments[argsIdx];
	        argsIdx += 1;
	      }
	      combined[combinedIdx] = result;
	      if (!_isPlaceholder_1(result)) {
	        left -= 1;
	      }
	      combinedIdx += 1;
	    }
	    return left <= 0 ? fn.apply(this, combined) : _arity_1(left, _curryN(length, combined, fn));
	  };
	}
	var _curryN_1 = _curryN;

	/**
	 * Returns a curried equivalent of the provided function, with the specified
	 * arity. The curried function has two unusual capabilities. First, its
	 * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
	 * following are equivalent:
	 *
	 *   - `g(1)(2)(3)`
	 *   - `g(1)(2, 3)`
	 *   - `g(1, 2)(3)`
	 *   - `g(1, 2, 3)`
	 *
	 * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
	 * "gaps", allowing partial application of any combination of arguments,
	 * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
	 * the following are equivalent:
	 *
	 *   - `g(1, 2, 3)`
	 *   - `g(_, 2, 3)(1)`
	 *   - `g(_, _, 3)(1)(2)`
	 *   - `g(_, _, 3)(1, 2)`
	 *   - `g(_, 2)(1)(3)`
	 *   - `g(_, 2)(1, 3)`
	 *   - `g(_, 2)(_, 3)(1)`
	 *
	 * @func
	 * @memberOf R
	 * @since v0.5.0
	 * @category Function
	 * @sig Number -> (* -> a) -> (* -> a)
	 * @param {Number} length The arity for the returned function.
	 * @param {Function} fn The function to curry.
	 * @return {Function} A new, curried function.
	 * @see R.curry
	 * @example
	 *
	 *      var sumArgs = (...args) => R.sum(args);
	 *
	 *      var curriedAddFourNumbers = R.curryN(4, sumArgs);
	 *      var f = curriedAddFourNumbers(1, 2);
	 *      var g = f(3);
	 *      g(4); //=> 10
	 */


	var curryN = /*#__PURE__*/_curry2_1(function curryN(length, fn) {
	  if (length === 1) {
	    return _curry1_1(fn);
	  }
	  return _arity_1(length, _curryN_1(length, [], fn));
	});
	var curryN_1 = curryN;

	/**
	 * Creates a new list iteration function from an existing one by adding two new
	 * parameters to its callback function: the current index, and the entire list.
	 *
	 * This would turn, for instance, [`R.map`](#map) function into one that
	 * more closely resembles `Array.prototype.map`. Note that this will only work
	 * for functions in which the iteration callback function is the first
	 * parameter, and where the list is the last parameter. (This latter might be
	 * unimportant if the list parameter is not used.)
	 *
	 * @func
	 * @memberOf R
	 * @since v0.15.0
	 * @category Function
	 * @category List
	 * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)
	 * @param {Function} fn A list iteration function that does not pass index or list to its callback
	 * @return {Function} An altered list iteration function that passes (item, index, list) to its callback
	 * @example
	 *
	 *      var mapIndexed = R.addIndex(R.map);
	 *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);
	 *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']
	 */


	var addIndex = /*#__PURE__*/_curry1_1(function addIndex(fn) {
	  return curryN_1(fn.length, function () {
	    var idx = 0;
	    var origFn = arguments[0];
	    var list = arguments[arguments.length - 1];
	    var args = Array.prototype.slice.call(arguments, 0);
	    args[0] = function () {
	      var result = origFn.apply(this, _concat_1(arguments, [idx, list]));
	      idx += 1;
	      return result;
	    };
	    return fn.apply(this, args);
	  });
	});
	var addIndex_1 = addIndex;

	function _map(fn, functor) {
	  var idx = 0;
	  var len = functor.length;
	  var result = Array(len);
	  while (idx < len) {
	    result[idx] = fn(functor[idx]);
	    idx += 1;
	  }
	  return result;
	}
	var _map_1 = _map;

	var XMap = /*#__PURE__*/function () {

	  function XMap(f, xf) {
	    this.xf = xf;
	    this.f = f;
	  }
	  XMap.prototype['@@transducer/init'] = _xfBase.init;
	  XMap.prototype['@@transducer/result'] = _xfBase.result;
	  XMap.prototype['@@transducer/step'] = function (result, input) {
	    return this.xf['@@transducer/step'](result, this.f(input));
	  };

	  return XMap;
	}();

	var _xmap = /*#__PURE__*/_curry2_1(function _xmap(f, xf) {
	  return new XMap(f, xf);
	});
	var _xmap_1 = _xmap;

	/**
	 * Takes a function and
	 * a [functor](https://github.com/fantasyland/fantasy-land#functor),
	 * applies the function to each of the functor's values, and returns
	 * a functor of the same shape.
	 *
	 * Ramda provides suitable `map` implementations for `Array` and `Object`,
	 * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.
	 *
	 * Dispatches to the `map` method of the second argument, if present.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * Also treats functions as functors and will compose them together.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig Functor f => (a -> b) -> f a -> f b
	 * @param {Function} fn The function to be called on every element of the input `list`.
	 * @param {Array} list The list to be iterated over.
	 * @return {Array} The new list.
	 * @see R.transduce, R.addIndex
	 * @example
	 *
	 *      var double = x => x * 2;
	 *
	 *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
	 *
	 *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
	 * @symb R.map(f, [a, b]) = [f(a), f(b)]
	 * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }
	 * @symb R.map(f, functor_o) = functor_o.map(f)
	 */


	var map = /*#__PURE__*/_curry2_1( /*#__PURE__*/_dispatchable_1(['fantasy-land/map', 'map'], _xmap_1, function map(fn, functor) {
	  switch (Object.prototype.toString.call(functor)) {
	    case '[object Function]':
	      return curryN_1(functor.length, function () {
	        return fn.call(this, functor.apply(this, arguments));
	      });
	    case '[object Object]':
	      return _reduce_1(function (acc, key) {
	        acc[key] = fn(functor[key]);
	        return acc;
	      }, {}, keys_1(functor));
	    default:
	      return _map_1(fn, functor);
	  }
	}));
	var map_1 = map;

	var decode = {
		"0": 65533,
		"128": 8364,
		"130": 8218,
		"131": 402,
		"132": 8222,
		"133": 8230,
		"134": 8224,
		"135": 8225,
		"136": 710,
		"137": 8240,
		"138": 352,
		"139": 8249,
		"140": 338,
		"142": 381,
		"145": 8216,
		"146": 8217,
		"147": 8220,
		"148": 8221,
		"149": 8226,
		"150": 8211,
		"151": 8212,
		"152": 732,
		"153": 8482,
		"154": 353,
		"155": 8250,
		"156": 339,
		"158": 382,
		"159": 376
	};

	var decode$1 = /*#__PURE__*/Object.freeze({
		default: decode
	});

	var decodeMap = getCjsExportFromNamespace(decode$1);

	var decode_codepoint = decodeCodePoint;

	// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
	function decodeCodePoint(codePoint) {
	    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {
	        return "\uFFFD";
	    }

	    if (codePoint in decodeMap) {
	        codePoint = decodeMap[codePoint];
	    }

	    var output = "";

	    if (codePoint > 0xffff) {
	        codePoint -= 0x10000;
	        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);
	        codePoint = 0xdc00 | (codePoint & 0x3ff);
	    }

	    output += String.fromCharCode(codePoint);
	    return output;
	}

	var Aacute = "Á";
	var aacute = "á";
	var Abreve = "Ă";
	var abreve = "ă";
	var ac$1 = "∾";
	var acd = "∿";
	var acE = "∾̳";
	var Acirc = "Â";
	var acirc = "â";
	var acute = "´";
	var Acy = "А";
	var acy = "а";
	var AElig = "Æ";
	var aelig = "æ";
	var af$1 = "⁡";
	var Afr = "𝔄";
	var afr = "𝔞";
	var Agrave = "À";
	var agrave = "à";
	var alefsym = "ℵ";
	var aleph = "ℵ";
	var Alpha = "Α";
	var alpha = "α";
	var Amacr = "Ā";
	var amacr = "ā";
	var amalg = "⨿";
	var amp = "&";
	var AMP = "&";
	var andand = "⩕";
	var And = "⩓";
	var and = "∧";
	var andd = "⩜";
	var andslope = "⩘";
	var andv = "⩚";
	var ang = "∠";
	var ange = "⦤";
	var angle = "∠";
	var angmsdaa = "⦨";
	var angmsdab = "⦩";
	var angmsdac = "⦪";
	var angmsdad = "⦫";
	var angmsdae = "⦬";
	var angmsdaf = "⦭";
	var angmsdag = "⦮";
	var angmsdah = "⦯";
	var angmsd = "∡";
	var angrt = "∟";
	var angrtvb = "⊾";
	var angrtvbd = "⦝";
	var angsph = "∢";
	var angst = "Å";
	var angzarr = "⍼";
	var Aogon = "Ą";
	var aogon = "ą";
	var Aopf = "𝔸";
	var aopf = "𝕒";
	var apacir = "⩯";
	var ap = "≈";
	var apE = "⩰";
	var ape = "≊";
	var apid = "≋";
	var apos = "'";
	var ApplyFunction = "⁡";
	var approx = "≈";
	var approxeq = "≊";
	var Aring = "Å";
	var aring = "å";
	var Ascr = "𝒜";
	var ascr = "𝒶";
	var Assign = "≔";
	var ast = "*";
	var asymp = "≈";
	var asympeq = "≍";
	var Atilde = "Ã";
	var atilde = "ã";
	var Auml = "Ä";
	var auml = "ä";
	var awconint = "∳";
	var awint = "⨑";
	var backcong = "≌";
	var backepsilon = "϶";
	var backprime = "‵";
	var backsim = "∽";
	var backsimeq = "⋍";
	var Backslash = "∖";
	var Barv = "⫧";
	var barvee = "⊽";
	var barwed = "⌅";
	var Barwed = "⌆";
	var barwedge = "⌅";
	var bbrk = "⎵";
	var bbrktbrk = "⎶";
	var bcong = "≌";
	var Bcy = "Б";
	var bcy = "б";
	var bdquo = "„";
	var becaus = "∵";
	var because = "∵";
	var Because = "∵";
	var bemptyv = "⦰";
	var bepsi = "϶";
	var bernou = "ℬ";
	var Bernoullis = "ℬ";
	var Beta = "Β";
	var beta = "β";
	var beth = "ℶ";
	var between = "≬";
	var Bfr = "𝔅";
	var bfr = "𝔟";
	var bigcap = "⋂";
	var bigcirc = "◯";
	var bigcup = "⋃";
	var bigodot = "⨀";
	var bigoplus = "⨁";
	var bigotimes = "⨂";
	var bigsqcup = "⨆";
	var bigstar = "★";
	var bigtriangledown = "▽";
	var bigtriangleup = "△";
	var biguplus = "⨄";
	var bigvee = "⋁";
	var bigwedge = "⋀";
	var bkarow = "⤍";
	var blacklozenge = "⧫";
	var blacksquare = "▪";
	var blacktriangle = "▴";
	var blacktriangledown = "▾";
	var blacktriangleleft = "◂";
	var blacktriangleright = "▸";
	var blank = "␣";
	var blk12 = "▒";
	var blk14 = "░";
	var blk34 = "▓";
	var block = "█";
	var bne = "=⃥";
	var bnequiv = "≡⃥";
	var bNot = "⫭";
	var bnot = "⌐";
	var Bopf = "𝔹";
	var bopf = "𝕓";
	var bot = "⊥";
	var bottom = "⊥";
	var bowtie = "⋈";
	var boxbox = "⧉";
	var boxdl = "┐";
	var boxdL = "╕";
	var boxDl = "╖";
	var boxDL = "╗";
	var boxdr = "┌";
	var boxdR = "╒";
	var boxDr = "╓";
	var boxDR = "╔";
	var boxh = "─";
	var boxH = "═";
	var boxhd = "┬";
	var boxHd = "╤";
	var boxhD = "╥";
	var boxHD = "╦";
	var boxhu = "┴";
	var boxHu = "╧";
	var boxhU = "╨";
	var boxHU = "╩";
	var boxminus = "⊟";
	var boxplus = "⊞";
	var boxtimes = "⊠";
	var boxul = "┘";
	var boxuL = "╛";
	var boxUl = "╜";
	var boxUL = "╝";
	var boxur = "└";
	var boxuR = "╘";
	var boxUr = "╙";
	var boxUR = "╚";
	var boxv = "│";
	var boxV = "║";
	var boxvh = "┼";
	var boxvH = "╪";
	var boxVh = "╫";
	var boxVH = "╬";
	var boxvl = "┤";
	var boxvL = "╡";
	var boxVl = "╢";
	var boxVL = "╣";
	var boxvr = "├";
	var boxvR = "╞";
	var boxVr = "╟";
	var boxVR = "╠";
	var bprime = "‵";
	var breve = "˘";
	var Breve = "˘";
	var brvbar = "¦";
	var bscr = "𝒷";
	var Bscr = "ℬ";
	var bsemi = "⁏";
	var bsim = "∽";
	var bsime = "⋍";
	var bsolb = "⧅";
	var bsol = "\\";
	var bsolhsub = "⟈";
	var bull = "•";
	var bullet = "•";
	var bump = "≎";
	var bumpE = "⪮";
	var bumpe = "≏";
	var Bumpeq = "≎";
	var bumpeq = "≏";
	var Cacute = "Ć";
	var cacute = "ć";
	var capand = "⩄";
	var capbrcup = "⩉";
	var capcap = "⩋";
	var cap = "∩";
	var Cap = "⋒";
	var capcup = "⩇";
	var capdot = "⩀";
	var CapitalDifferentialD = "ⅅ";
	var caps = "∩︀";
	var caret = "⁁";
	var caron = "ˇ";
	var Cayleys = "ℭ";
	var ccaps = "⩍";
	var Ccaron = "Č";
	var ccaron = "č";
	var Ccedil = "Ç";
	var ccedil = "ç";
	var Ccirc = "Ĉ";
	var ccirc = "ĉ";
	var Cconint = "∰";
	var ccups = "⩌";
	var ccupssm = "⩐";
	var Cdot = "Ċ";
	var cdot = "ċ";
	var cedil = "¸";
	var Cedilla = "¸";
	var cemptyv = "⦲";
	var cent = "¢";
	var centerdot = "·";
	var CenterDot = "·";
	var cfr = "𝔠";
	var Cfr = "ℭ";
	var CHcy = "Ч";
	var chcy = "ч";
	var check = "✓";
	var checkmark = "✓";
	var Chi = "Χ";
	var chi = "χ";
	var circ = "ˆ";
	var circeq = "≗";
	var circlearrowleft = "↺";
	var circlearrowright = "↻";
	var circledast = "⊛";
	var circledcirc = "⊚";
	var circleddash = "⊝";
	var CircleDot = "⊙";
	var circledR = "®";
	var circledS = "Ⓢ";
	var CircleMinus = "⊖";
	var CirclePlus = "⊕";
	var CircleTimes = "⊗";
	var cir = "○";
	var cirE = "⧃";
	var cire = "≗";
	var cirfnint = "⨐";
	var cirmid = "⫯";
	var cirscir = "⧂";
	var ClockwiseContourIntegral = "∲";
	var CloseCurlyDoubleQuote = "”";
	var CloseCurlyQuote = "’";
	var clubs = "♣";
	var clubsuit = "♣";
	var colon = ":";
	var Colon = "∷";
	var Colone = "⩴";
	var colone = "≔";
	var coloneq = "≔";
	var comma = ",";
	var commat = "@";
	var comp = "∁";
	var compfn = "∘";
	var complement = "∁";
	var complexes = "ℂ";
	var cong = "≅";
	var congdot = "⩭";
	var Congruent = "≡";
	var conint = "∮";
	var Conint = "∯";
	var ContourIntegral = "∮";
	var copf = "𝕔";
	var Copf = "ℂ";
	var coprod = "∐";
	var Coproduct = "∐";
	var copy = "©";
	var COPY = "©";
	var copysr = "℗";
	var CounterClockwiseContourIntegral = "∳";
	var crarr = "↵";
	var cross = "✗";
	var Cross = "⨯";
	var Cscr = "𝒞";
	var cscr = "𝒸";
	var csub = "⫏";
	var csube = "⫑";
	var csup = "⫐";
	var csupe = "⫒";
	var ctdot = "⋯";
	var cudarrl = "⤸";
	var cudarrr = "⤵";
	var cuepr = "⋞";
	var cuesc = "⋟";
	var cularr = "↶";
	var cularrp = "⤽";
	var cupbrcap = "⩈";
	var cupcap = "⩆";
	var CupCap = "≍";
	var cup = "∪";
	var Cup = "⋓";
	var cupcup = "⩊";
	var cupdot = "⊍";
	var cupor = "⩅";
	var cups = "∪︀";
	var curarr = "↷";
	var curarrm = "⤼";
	var curlyeqprec = "⋞";
	var curlyeqsucc = "⋟";
	var curlyvee = "⋎";
	var curlywedge = "⋏";
	var curren = "¤";
	var curvearrowleft = "↶";
	var curvearrowright = "↷";
	var cuvee = "⋎";
	var cuwed = "⋏";
	var cwconint = "∲";
	var cwint = "∱";
	var cylcty = "⌭";
	var dagger = "†";
	var Dagger = "‡";
	var daleth = "ℸ";
	var darr = "↓";
	var Darr = "↡";
	var dArr = "⇓";
	var dash = "‐";
	var Dashv = "⫤";
	var dashv = "⊣";
	var dbkarow = "⤏";
	var dblac = "˝";
	var Dcaron = "Ď";
	var dcaron = "ď";
	var Dcy = "Д";
	var dcy = "д";
	var ddagger = "‡";
	var ddarr = "⇊";
	var DD = "ⅅ";
	var dd$1 = "ⅆ";
	var DDotrahd = "⤑";
	var ddotseq = "⩷";
	var deg = "°";
	var Del = "∇";
	var Delta = "Δ";
	var delta = "δ";
	var demptyv = "⦱";
	var dfisht = "⥿";
	var Dfr = "𝔇";
	var dfr = "𝔡";
	var dHar = "⥥";
	var dharl = "⇃";
	var dharr = "⇂";
	var DiacriticalAcute = "´";
	var DiacriticalDot = "˙";
	var DiacriticalDoubleAcute = "˝";
	var DiacriticalGrave = "`";
	var DiacriticalTilde = "˜";
	var diam = "⋄";
	var diamond = "⋄";
	var Diamond = "⋄";
	var diamondsuit = "♦";
	var diams = "♦";
	var die = "¨";
	var DifferentialD = "ⅆ";
	var digamma = "ϝ";
	var disin = "⋲";
	var div = "÷";
	var divide = "÷";
	var divideontimes = "⋇";
	var divonx = "⋇";
	var DJcy = "Ђ";
	var djcy = "ђ";
	var dlcorn = "⌞";
	var dlcrop = "⌍";
	var dollar = "$";
	var Dopf = "𝔻";
	var dopf = "𝕕";
	var Dot = "¨";
	var dot = "˙";
	var DotDot = "⃜";
	var doteq = "≐";
	var doteqdot = "≑";
	var DotEqual = "≐";
	var dotminus = "∸";
	var dotplus = "∔";
	var dotsquare = "⊡";
	var doublebarwedge = "⌆";
	var DoubleContourIntegral = "∯";
	var DoubleDot = "¨";
	var DoubleDownArrow = "⇓";
	var DoubleLeftArrow = "⇐";
	var DoubleLeftRightArrow = "⇔";
	var DoubleLeftTee = "⫤";
	var DoubleLongLeftArrow = "⟸";
	var DoubleLongLeftRightArrow = "⟺";
	var DoubleLongRightArrow = "⟹";
	var DoubleRightArrow = "⇒";
	var DoubleRightTee = "⊨";
	var DoubleUpArrow = "⇑";
	var DoubleUpDownArrow = "⇕";
	var DoubleVerticalBar = "∥";
	var DownArrowBar = "⤓";
	var downarrow = "↓";
	var DownArrow = "↓";
	var Downarrow = "⇓";
	var DownArrowUpArrow = "⇵";
	var DownBreve = "̑";
	var downdownarrows = "⇊";
	var downharpoonleft = "⇃";
	var downharpoonright = "⇂";
	var DownLeftRightVector = "⥐";
	var DownLeftTeeVector = "⥞";
	var DownLeftVectorBar = "⥖";
	var DownLeftVector = "↽";
	var DownRightTeeVector = "⥟";
	var DownRightVectorBar = "⥗";
	var DownRightVector = "⇁";
	var DownTeeArrow = "↧";
	var DownTee = "⊤";
	var drbkarow = "⤐";
	var drcorn = "⌟";
	var drcrop = "⌌";
	var Dscr = "𝒟";
	var dscr = "𝒹";
	var DScy = "Ѕ";
	var dscy = "ѕ";
	var dsol = "⧶";
	var Dstrok = "Đ";
	var dstrok = "đ";
	var dtdot = "⋱";
	var dtri = "▿";
	var dtrif = "▾";
	var duarr = "⇵";
	var duhar = "⥯";
	var dwangle = "⦦";
	var DZcy = "Џ";
	var dzcy = "џ";
	var dzigrarr = "⟿";
	var Eacute = "É";
	var eacute = "é";
	var easter = "⩮";
	var Ecaron = "Ě";
	var ecaron = "ě";
	var Ecirc = "Ê";
	var ecirc = "ê";
	var ecir = "≖";
	var ecolon = "≕";
	var Ecy = "Э";
	var ecy = "э";
	var eDDot = "⩷";
	var Edot = "Ė";
	var edot = "ė";
	var eDot = "≑";
	var ee$1 = "ⅇ";
	var efDot = "≒";
	var Efr = "𝔈";
	var efr = "𝔢";
	var eg$1 = "⪚";
	var Egrave = "È";
	var egrave = "è";
	var egs = "⪖";
	var egsdot = "⪘";
	var el = "⪙";
	var Element = "∈";
	var elinters = "⏧";
	var ell = "ℓ";
	var els = "⪕";
	var elsdot = "⪗";
	var Emacr = "Ē";
	var emacr = "ē";
	var empty = "∅";
	var emptyset = "∅";
	var EmptySmallSquare = "◻";
	var emptyv = "∅";
	var EmptyVerySmallSquare = "▫";
	var emsp13 = " ";
	var emsp14 = " ";
	var emsp = " ";
	var ENG = "Ŋ";
	var eng = "ŋ";
	var ensp = " ";
	var Eogon = "Ę";
	var eogon = "ę";
	var Eopf = "𝔼";
	var eopf = "𝕖";
	var epar = "⋕";
	var eparsl = "⧣";
	var eplus = "⩱";
	var epsi = "ε";
	var Epsilon = "Ε";
	var epsilon = "ε";
	var epsiv = "ϵ";
	var eqcirc = "≖";
	var eqcolon = "≕";
	var eqsim = "≂";
	var eqslantgtr = "⪖";
	var eqslantless = "⪕";
	var Equal = "⩵";
	var equals = "=";
	var EqualTilde = "≂";
	var equest = "≟";
	var Equilibrium = "⇌";
	var equiv = "≡";
	var equivDD = "⩸";
	var eqvparsl = "⧥";
	var erarr = "⥱";
	var erDot = "≓";
	var escr = "ℯ";
	var Escr = "ℰ";
	var esdot = "≐";
	var Esim = "⩳";
	var esim = "≂";
	var Eta = "Η";
	var eta = "η";
	var ETH = "Ð";
	var eth = "ð";
	var Euml = "Ë";
	var euml = "ë";
	var euro = "€";
	var excl = "!";
	var exist = "∃";
	var Exists = "∃";
	var expectation = "ℰ";
	var exponentiale = "ⅇ";
	var ExponentialE = "ⅇ";
	var fallingdotseq = "≒";
	var Fcy = "Ф";
	var fcy = "ф";
	var female = "♀";
	var ffilig = "ﬃ";
	var fflig = "ﬀ";
	var ffllig = "ﬄ";
	var Ffr = "𝔉";
	var ffr = "𝔣";
	var filig = "ﬁ";
	var FilledSmallSquare = "◼";
	var FilledVerySmallSquare = "▪";
	var fjlig = "fj";
	var flat = "♭";
	var fllig = "ﬂ";
	var fltns = "▱";
	var fnof = "ƒ";
	var Fopf = "𝔽";
	var fopf = "𝕗";
	var forall = "∀";
	var ForAll = "∀";
	var fork = "⋔";
	var forkv = "⫙";
	var Fouriertrf = "ℱ";
	var fpartint = "⨍";
	var frac12 = "½";
	var frac13 = "⅓";
	var frac14 = "¼";
	var frac15 = "⅕";
	var frac16 = "⅙";
	var frac18 = "⅛";
	var frac23 = "⅔";
	var frac25 = "⅖";
	var frac34 = "¾";
	var frac35 = "⅗";
	var frac38 = "⅜";
	var frac45 = "⅘";
	var frac56 = "⅚";
	var frac58 = "⅝";
	var frac78 = "⅞";
	var frasl = "⁄";
	var frown = "⌢";
	var fscr = "𝒻";
	var Fscr = "ℱ";
	var gacute = "ǵ";
	var Gamma = "Γ";
	var gamma = "γ";
	var Gammad = "Ϝ";
	var gammad = "ϝ";
	var gap = "⪆";
	var Gbreve = "Ğ";
	var gbreve = "ğ";
	var Gcedil = "Ģ";
	var Gcirc = "Ĝ";
	var gcirc = "ĝ";
	var Gcy = "Г";
	var gcy = "г";
	var Gdot = "Ġ";
	var gdot = "ġ";
	var ge$1 = "≥";
	var gE = "≧";
	var gEl = "⪌";
	var gel = "⋛";
	var geq = "≥";
	var geqq = "≧";
	var geqslant = "⩾";
	var gescc = "⪩";
	var ges = "⩾";
	var gesdot = "⪀";
	var gesdoto = "⪂";
	var gesdotol = "⪄";
	var gesl = "⋛︀";
	var gesles = "⪔";
	var Gfr = "𝔊";
	var gfr = "𝔤";
	var gg$1 = "≫";
	var Gg$1 = "⋙";
	var ggg = "⋙";
	var gimel = "ℷ";
	var GJcy = "Ѓ";
	var gjcy = "ѓ";
	var gla = "⪥";
	var gl = "≷";
	var glE = "⪒";
	var glj = "⪤";
	var gnap = "⪊";
	var gnapprox = "⪊";
	var gne = "⪈";
	var gnE = "≩";
	var gneq = "⪈";
	var gneqq = "≩";
	var gnsim = "⋧";
	var Gopf = "𝔾";
	var gopf = "𝕘";
	var grave = "`";
	var GreaterEqual = "≥";
	var GreaterEqualLess = "⋛";
	var GreaterFullEqual = "≧";
	var GreaterGreater = "⪢";
	var GreaterLess = "≷";
	var GreaterSlantEqual = "⩾";
	var GreaterTilde = "≳";
	var Gscr = "𝒢";
	var gscr = "ℊ";
	var gsim = "≳";
	var gsime = "⪎";
	var gsiml = "⪐";
	var gtcc = "⪧";
	var gtcir = "⩺";
	var gt = ">";
	var GT = ">";
	var Gt = "≫";
	var gtdot = "⋗";
	var gtlPar = "⦕";
	var gtquest = "⩼";
	var gtrapprox = "⪆";
	var gtrarr = "⥸";
	var gtrdot = "⋗";
	var gtreqless = "⋛";
	var gtreqqless = "⪌";
	var gtrless = "≷";
	var gtrsim = "≳";
	var gvertneqq = "≩︀";
	var gvnE = "≩︀";
	var Hacek = "ˇ";
	var hairsp = " ";
	var half = "½";
	var hamilt = "ℋ";
	var HARDcy = "Ъ";
	var hardcy = "ъ";
	var harrcir = "⥈";
	var harr = "↔";
	var hArr = "⇔";
	var harrw = "↭";
	var Hat = "^";
	var hbar = "ℏ";
	var Hcirc = "Ĥ";
	var hcirc = "ĥ";
	var hearts = "♥";
	var heartsuit = "♥";
	var hellip = "…";
	var hercon = "⊹";
	var hfr = "𝔥";
	var Hfr = "ℌ";
	var HilbertSpace = "ℋ";
	var hksearow = "⤥";
	var hkswarow = "⤦";
	var hoarr = "⇿";
	var homtht = "∻";
	var hookleftarrow = "↩";
	var hookrightarrow = "↪";
	var hopf = "𝕙";
	var Hopf = "ℍ";
	var horbar = "―";
	var HorizontalLine = "─";
	var hscr = "𝒽";
	var Hscr = "ℋ";
	var hslash = "ℏ";
	var Hstrok = "Ħ";
	var hstrok = "ħ";
	var HumpDownHump = "≎";
	var HumpEqual = "≏";
	var hybull = "⁃";
	var hyphen = "‐";
	var Iacute = "Í";
	var iacute = "í";
	var ic$1 = "⁣";
	var Icirc = "Î";
	var icirc = "î";
	var Icy = "И";
	var icy = "и";
	var Idot = "İ";
	var IEcy = "Е";
	var iecy = "е";
	var iexcl = "¡";
	var iff = "⇔";
	var ifr = "𝔦";
	var Ifr = "ℑ";
	var Igrave = "Ì";
	var igrave = "ì";
	var ii = "ⅈ";
	var iiiint = "⨌";
	var iiint = "∭";
	var iinfin = "⧜";
	var iiota = "℩";
	var IJlig = "Ĳ";
	var ijlig = "ĳ";
	var Imacr = "Ī";
	var imacr = "ī";
	var image = "ℑ";
	var ImaginaryI = "ⅈ";
	var imagline = "ℐ";
	var imagpart = "ℑ";
	var imath = "ı";
	var Im = "ℑ";
	var imof = "⊷";
	var imped = "Ƶ";
	var Implies = "⇒";
	var incare = "℅";
	var infin = "∞";
	var infintie = "⧝";
	var inodot = "ı";
	var intcal = "⊺";
	var int = "∫";
	var Int = "∬";
	var integers = "ℤ";
	var Integral = "∫";
	var intercal = "⊺";
	var Intersection = "⋂";
	var intlarhk = "⨗";
	var intprod = "⨼";
	var InvisibleComma = "⁣";
	var InvisibleTimes = "⁢";
	var IOcy = "Ё";
	var iocy = "ё";
	var Iogon = "Į";
	var iogon = "į";
	var Iopf = "𝕀";
	var iopf = "𝕚";
	var Iota = "Ι";
	var iota = "ι";
	var iprod = "⨼";
	var iquest = "¿";
	var iscr = "𝒾";
	var Iscr = "ℐ";
	var isin = "∈";
	var isindot = "⋵";
	var isinE = "⋹";
	var isins = "⋴";
	var isinsv = "⋳";
	var isinv = "∈";
	var it = "⁢";
	var Itilde = "Ĩ";
	var itilde = "ĩ";
	var Iukcy = "І";
	var iukcy = "і";
	var Iuml = "Ï";
	var iuml = "ï";
	var Jcirc = "Ĵ";
	var jcirc = "ĵ";
	var Jcy = "Й";
	var jcy = "й";
	var Jfr = "𝔍";
	var jfr = "𝔧";
	var jmath = "ȷ";
	var Jopf = "𝕁";
	var jopf = "𝕛";
	var Jscr = "𝒥";
	var jscr = "𝒿";
	var Jsercy = "Ј";
	var jsercy = "ј";
	var Jukcy = "Є";
	var jukcy = "є";
	var Kappa = "Κ";
	var kappa = "κ";
	var kappav = "ϰ";
	var Kcedil = "Ķ";
	var kcedil = "ķ";
	var Kcy = "К";
	var kcy = "к";
	var Kfr = "𝔎";
	var kfr = "𝔨";
	var kgreen = "ĸ";
	var KHcy = "Х";
	var khcy = "х";
	var KJcy = "Ќ";
	var kjcy = "ќ";
	var Kopf = "𝕂";
	var kopf = "𝕜";
	var Kscr = "𝒦";
	var kscr = "𝓀";
	var lAarr = "⇚";
	var Lacute = "Ĺ";
	var lacute = "ĺ";
	var laemptyv = "⦴";
	var lagran = "ℒ";
	var Lambda = "Λ";
	var lambda = "λ";
	var lang = "⟨";
	var Lang = "⟪";
	var langd = "⦑";
	var langle = "⟨";
	var lap = "⪅";
	var Laplacetrf = "ℒ";
	var laquo = "«";
	var larrb = "⇤";
	var larrbfs = "⤟";
	var larr = "←";
	var Larr = "↞";
	var lArr = "⇐";
	var larrfs = "⤝";
	var larrhk = "↩";
	var larrlp = "↫";
	var larrpl = "⤹";
	var larrsim = "⥳";
	var larrtl = "↢";
	var latail = "⤙";
	var lAtail = "⤛";
	var lat = "⪫";
	var late = "⪭";
	var lates = "⪭︀";
	var lbarr = "⤌";
	var lBarr = "⤎";
	var lbbrk = "❲";
	var lbrace = "{";
	var lbrack = "[";
	var lbrke = "⦋";
	var lbrksld = "⦏";
	var lbrkslu = "⦍";
	var Lcaron = "Ľ";
	var lcaron = "ľ";
	var Lcedil = "Ļ";
	var lcedil = "ļ";
	var lceil = "⌈";
	var lcub = "{";
	var Lcy = "Л";
	var lcy = "л";
	var ldca = "⤶";
	var ldquo = "“";
	var ldquor = "„";
	var ldrdhar = "⥧";
	var ldrushar = "⥋";
	var ldsh = "↲";
	var le$1 = "≤";
	var lE = "≦";
	var LeftAngleBracket = "⟨";
	var LeftArrowBar = "⇤";
	var leftarrow = "←";
	var LeftArrow = "←";
	var Leftarrow = "⇐";
	var LeftArrowRightArrow = "⇆";
	var leftarrowtail = "↢";
	var LeftCeiling = "⌈";
	var LeftDoubleBracket = "⟦";
	var LeftDownTeeVector = "⥡";
	var LeftDownVectorBar = "⥙";
	var LeftDownVector = "⇃";
	var LeftFloor = "⌊";
	var leftharpoondown = "↽";
	var leftharpoonup = "↼";
	var leftleftarrows = "⇇";
	var leftrightarrow = "↔";
	var LeftRightArrow = "↔";
	var Leftrightarrow = "⇔";
	var leftrightarrows = "⇆";
	var leftrightharpoons = "⇋";
	var leftrightsquigarrow = "↭";
	var LeftRightVector = "⥎";
	var LeftTeeArrow = "↤";
	var LeftTee = "⊣";
	var LeftTeeVector = "⥚";
	var leftthreetimes = "⋋";
	var LeftTriangleBar = "⧏";
	var LeftTriangle = "⊲";
	var LeftTriangleEqual = "⊴";
	var LeftUpDownVector = "⥑";
	var LeftUpTeeVector = "⥠";
	var LeftUpVectorBar = "⥘";
	var LeftUpVector = "↿";
	var LeftVectorBar = "⥒";
	var LeftVector = "↼";
	var lEg = "⪋";
	var leg = "⋚";
	var leq = "≤";
	var leqq = "≦";
	var leqslant = "⩽";
	var lescc = "⪨";
	var les = "⩽";
	var lesdot = "⩿";
	var lesdoto = "⪁";
	var lesdotor = "⪃";
	var lesg = "⋚︀";
	var lesges = "⪓";
	var lessapprox = "⪅";
	var lessdot = "⋖";
	var lesseqgtr = "⋚";
	var lesseqqgtr = "⪋";
	var LessEqualGreater = "⋚";
	var LessFullEqual = "≦";
	var LessGreater = "≶";
	var lessgtr = "≶";
	var LessLess = "⪡";
	var lesssim = "≲";
	var LessSlantEqual = "⩽";
	var LessTilde = "≲";
	var lfisht = "⥼";
	var lfloor = "⌊";
	var Lfr = "𝔏";
	var lfr = "𝔩";
	var lg$1 = "≶";
	var lgE = "⪑";
	var lHar = "⥢";
	var lhard = "↽";
	var lharu = "↼";
	var lharul = "⥪";
	var lhblk = "▄";
	var LJcy = "Љ";
	var ljcy = "љ";
	var llarr = "⇇";
	var ll = "≪";
	var Ll = "⋘";
	var llcorner = "⌞";
	var Lleftarrow = "⇚";
	var llhard = "⥫";
	var lltri = "◺";
	var Lmidot = "Ŀ";
	var lmidot = "ŀ";
	var lmoustache = "⎰";
	var lmoust = "⎰";
	var lnap = "⪉";
	var lnapprox = "⪉";
	var lne = "⪇";
	var lnE = "≨";
	var lneq = "⪇";
	var lneqq = "≨";
	var lnsim = "⋦";
	var loang = "⟬";
	var loarr = "⇽";
	var lobrk = "⟦";
	var longleftarrow = "⟵";
	var LongLeftArrow = "⟵";
	var Longleftarrow = "⟸";
	var longleftrightarrow = "⟷";
	var LongLeftRightArrow = "⟷";
	var Longleftrightarrow = "⟺";
	var longmapsto = "⟼";
	var longrightarrow = "⟶";
	var LongRightArrow = "⟶";
	var Longrightarrow = "⟹";
	var looparrowleft = "↫";
	var looparrowright = "↬";
	var lopar = "⦅";
	var Lopf = "𝕃";
	var lopf = "𝕝";
	var loplus = "⨭";
	var lotimes = "⨴";
	var lowast = "∗";
	var lowbar = "_";
	var LowerLeftArrow = "↙";
	var LowerRightArrow = "↘";
	var loz = "◊";
	var lozenge = "◊";
	var lozf = "⧫";
	var lpar = "(";
	var lparlt = "⦓";
	var lrarr = "⇆";
	var lrcorner = "⌟";
	var lrhar = "⇋";
	var lrhard = "⥭";
	var lrm = "‎";
	var lrtri = "⊿";
	var lsaquo = "‹";
	var lscr = "𝓁";
	var Lscr = "ℒ";
	var lsh = "↰";
	var Lsh = "↰";
	var lsim = "≲";
	var lsime = "⪍";
	var lsimg = "⪏";
	var lsqb = "[";
	var lsquo = "‘";
	var lsquor = "‚";
	var Lstrok = "Ł";
	var lstrok = "ł";
	var ltcc = "⪦";
	var ltcir = "⩹";
	var lt = "<";
	var LT = "<";
	var Lt = "≪";
	var ltdot = "⋖";
	var lthree = "⋋";
	var ltimes = "⋉";
	var ltlarr = "⥶";
	var ltquest = "⩻";
	var ltri = "◃";
	var ltrie = "⊴";
	var ltrif = "◂";
	var ltrPar = "⦖";
	var lurdshar = "⥊";
	var luruhar = "⥦";
	var lvertneqq = "≨︀";
	var lvnE = "≨︀";
	var macr = "¯";
	var male = "♂";
	var malt = "✠";
	var maltese = "✠";
	var map$1 = "↦";
	var mapsto = "↦";
	var mapstodown = "↧";
	var mapstoleft = "↤";
	var mapstoup = "↥";
	var marker = "▮";
	var mcomma = "⨩";
	var Mcy = "М";
	var mcy = "м";
	var mdash = "—";
	var mDDot = "∺";
	var measuredangle = "∡";
	var MediumSpace = " ";
	var Mellintrf = "ℳ";
	var Mfr = "𝔐";
	var mfr = "𝔪";
	var mho = "℧";
	var micro = "µ";
	var midast = "*";
	var midcir = "⫰";
	var mid = "∣";
	var middot = "·";
	var minusb = "⊟";
	var minus = "−";
	var minusd = "∸";
	var minusdu = "⨪";
	var MinusPlus = "∓";
	var mlcp = "⫛";
	var mldr = "…";
	var mnplus = "∓";
	var models = "⊧";
	var Mopf = "𝕄";
	var mopf = "𝕞";
	var mp = "∓";
	var mscr = "𝓂";
	var Mscr = "ℳ";
	var mstpos = "∾";
	var Mu = "Μ";
	var mu = "μ";
	var multimap = "⊸";
	var mumap = "⊸";
	var nabla = "∇";
	var Nacute = "Ń";
	var nacute = "ń";
	var nang = "∠⃒";
	var nap = "≉";
	var napE = "⩰̸";
	var napid = "≋̸";
	var napos = "ŉ";
	var napprox = "≉";
	var natural = "♮";
	var naturals = "ℕ";
	var natur = "♮";
	var nbsp = " ";
	var nbump = "≎̸";
	var nbumpe = "≏̸";
	var ncap = "⩃";
	var Ncaron = "Ň";
	var ncaron = "ň";
	var Ncedil = "Ņ";
	var ncedil = "ņ";
	var ncong = "≇";
	var ncongdot = "⩭̸";
	var ncup = "⩂";
	var Ncy = "Н";
	var ncy = "н";
	var ndash = "–";
	var nearhk = "⤤";
	var nearr = "↗";
	var neArr = "⇗";
	var nearrow = "↗";
	var ne$1 = "≠";
	var nedot = "≐̸";
	var NegativeMediumSpace = "​";
	var NegativeThickSpace = "​";
	var NegativeThinSpace = "​";
	var NegativeVeryThinSpace = "​";
	var nequiv = "≢";
	var nesear = "⤨";
	var nesim = "≂̸";
	var NestedGreaterGreater = "≫";
	var NestedLessLess = "≪";
	var NewLine = "\n";
	var nexist = "∄";
	var nexists = "∄";
	var Nfr = "𝔑";
	var nfr = "𝔫";
	var ngE = "≧̸";
	var nge = "≱";
	var ngeq = "≱";
	var ngeqq = "≧̸";
	var ngeqslant = "⩾̸";
	var nges = "⩾̸";
	var nGg = "⋙̸";
	var ngsim = "≵";
	var nGt = "≫⃒";
	var ngt = "≯";
	var ngtr = "≯";
	var nGtv = "≫̸";
	var nharr = "↮";
	var nhArr = "⇎";
	var nhpar = "⫲";
	var ni = "∋";
	var nis = "⋼";
	var nisd = "⋺";
	var niv = "∋";
	var NJcy = "Њ";
	var njcy = "њ";
	var nlarr = "↚";
	var nlArr = "⇍";
	var nldr = "‥";
	var nlE = "≦̸";
	var nle = "≰";
	var nleftarrow = "↚";
	var nLeftarrow = "⇍";
	var nleftrightarrow = "↮";
	var nLeftrightarrow = "⇎";
	var nleq = "≰";
	var nleqq = "≦̸";
	var nleqslant = "⩽̸";
	var nles = "⩽̸";
	var nless = "≮";
	var nLl = "⋘̸";
	var nlsim = "≴";
	var nLt = "≪⃒";
	var nlt = "≮";
	var nltri = "⋪";
	var nltrie = "⋬";
	var nLtv = "≪̸";
	var nmid = "∤";
	var NoBreak = "⁠";
	var NonBreakingSpace = " ";
	var nopf = "𝕟";
	var Nopf = "ℕ";
	var Not = "⫬";
	var not = "¬";
	var NotCongruent = "≢";
	var NotCupCap = "≭";
	var NotDoubleVerticalBar = "∦";
	var NotElement = "∉";
	var NotEqual = "≠";
	var NotEqualTilde = "≂̸";
	var NotExists = "∄";
	var NotGreater = "≯";
	var NotGreaterEqual = "≱";
	var NotGreaterFullEqual = "≧̸";
	var NotGreaterGreater = "≫̸";
	var NotGreaterLess = "≹";
	var NotGreaterSlantEqual = "⩾̸";
	var NotGreaterTilde = "≵";
	var NotHumpDownHump = "≎̸";
	var NotHumpEqual = "≏̸";
	var notin = "∉";
	var notindot = "⋵̸";
	var notinE = "⋹̸";
	var notinva = "∉";
	var notinvb = "⋷";
	var notinvc = "⋶";
	var NotLeftTriangleBar = "⧏̸";
	var NotLeftTriangle = "⋪";
	var NotLeftTriangleEqual = "⋬";
	var NotLess = "≮";
	var NotLessEqual = "≰";
	var NotLessGreater = "≸";
	var NotLessLess = "≪̸";
	var NotLessSlantEqual = "⩽̸";
	var NotLessTilde = "≴";
	var NotNestedGreaterGreater = "⪢̸";
	var NotNestedLessLess = "⪡̸";
	var notni = "∌";
	var notniva = "∌";
	var notnivb = "⋾";
	var notnivc = "⋽";
	var NotPrecedes = "⊀";
	var NotPrecedesEqual = "⪯̸";
	var NotPrecedesSlantEqual = "⋠";
	var NotReverseElement = "∌";
	var NotRightTriangleBar = "⧐̸";
	var NotRightTriangle = "⋫";
	var NotRightTriangleEqual = "⋭";
	var NotSquareSubset = "⊏̸";
	var NotSquareSubsetEqual = "⋢";
	var NotSquareSuperset = "⊐̸";
	var NotSquareSupersetEqual = "⋣";
	var NotSubset = "⊂⃒";
	var NotSubsetEqual = "⊈";
	var NotSucceeds = "⊁";
	var NotSucceedsEqual = "⪰̸";
	var NotSucceedsSlantEqual = "⋡";
	var NotSucceedsTilde = "≿̸";
	var NotSuperset = "⊃⃒";
	var NotSupersetEqual = "⊉";
	var NotTilde = "≁";
	var NotTildeEqual = "≄";
	var NotTildeFullEqual = "≇";
	var NotTildeTilde = "≉";
	var NotVerticalBar = "∤";
	var nparallel = "∦";
	var npar = "∦";
	var nparsl = "⫽⃥";
	var npart = "∂̸";
	var npolint = "⨔";
	var npr = "⊀";
	var nprcue = "⋠";
	var nprec = "⊀";
	var npreceq = "⪯̸";
	var npre = "⪯̸";
	var nrarrc = "⤳̸";
	var nrarr = "↛";
	var nrArr = "⇏";
	var nrarrw = "↝̸";
	var nrightarrow = "↛";
	var nRightarrow = "⇏";
	var nrtri = "⋫";
	var nrtrie = "⋭";
	var nsc = "⊁";
	var nsccue = "⋡";
	var nsce = "⪰̸";
	var Nscr = "𝒩";
	var nscr = "𝓃";
	var nshortmid = "∤";
	var nshortparallel = "∦";
	var nsim = "≁";
	var nsime = "≄";
	var nsimeq = "≄";
	var nsmid = "∤";
	var nspar = "∦";
	var nsqsube = "⋢";
	var nsqsupe = "⋣";
	var nsub = "⊄";
	var nsubE = "⫅̸";
	var nsube = "⊈";
	var nsubset = "⊂⃒";
	var nsubseteq = "⊈";
	var nsubseteqq = "⫅̸";
	var nsucc = "⊁";
	var nsucceq = "⪰̸";
	var nsup = "⊅";
	var nsupE = "⫆̸";
	var nsupe = "⊉";
	var nsupset = "⊃⃒";
	var nsupseteq = "⊉";
	var nsupseteqq = "⫆̸";
	var ntgl = "≹";
	var Ntilde = "Ñ";
	var ntilde = "ñ";
	var ntlg = "≸";
	var ntriangleleft = "⋪";
	var ntrianglelefteq = "⋬";
	var ntriangleright = "⋫";
	var ntrianglerighteq = "⋭";
	var Nu = "Ν";
	var nu = "ν";
	var num = "#";
	var numero = "№";
	var numsp = " ";
	var nvap = "≍⃒";
	var nvdash = "⊬";
	var nvDash = "⊭";
	var nVdash = "⊮";
	var nVDash = "⊯";
	var nvge = "≥⃒";
	var nvgt = ">⃒";
	var nvHarr = "⤄";
	var nvinfin = "⧞";
	var nvlArr = "⤂";
	var nvle = "≤⃒";
	var nvlt = "<⃒";
	var nvltrie = "⊴⃒";
	var nvrArr = "⤃";
	var nvrtrie = "⊵⃒";
	var nvsim = "∼⃒";
	var nwarhk = "⤣";
	var nwarr = "↖";
	var nwArr = "⇖";
	var nwarrow = "↖";
	var nwnear = "⤧";
	var Oacute = "Ó";
	var oacute = "ó";
	var oast = "⊛";
	var Ocirc = "Ô";
	var ocirc = "ô";
	var ocir = "⊚";
	var Ocy = "О";
	var ocy = "о";
	var odash = "⊝";
	var Odblac = "Ő";
	var odblac = "ő";
	var odiv = "⨸";
	var odot = "⊙";
	var odsold = "⦼";
	var OElig = "Œ";
	var oelig = "œ";
	var ofcir = "⦿";
	var Ofr = "𝔒";
	var ofr = "𝔬";
	var ogon = "˛";
	var Ograve = "Ò";
	var ograve = "ò";
	var ogt = "⧁";
	var ohbar = "⦵";
	var ohm = "Ω";
	var oint = "∮";
	var olarr = "↺";
	var olcir = "⦾";
	var olcross = "⦻";
	var oline = "‾";
	var olt = "⧀";
	var Omacr = "Ō";
	var omacr = "ō";
	var Omega = "Ω";
	var omega = "ω";
	var Omicron = "Ο";
	var omicron = "ο";
	var omid = "⦶";
	var ominus = "⊖";
	var Oopf = "𝕆";
	var oopf = "𝕠";
	var opar = "⦷";
	var OpenCurlyDoubleQuote = "“";
	var OpenCurlyQuote = "‘";
	var operp = "⦹";
	var oplus = "⊕";
	var orarr = "↻";
	var Or = "⩔";
	var or = "∨";
	var ord = "⩝";
	var order = "ℴ";
	var orderof = "ℴ";
	var ordf = "ª";
	var ordm = "º";
	var origof = "⊶";
	var oror = "⩖";
	var orslope = "⩗";
	var orv = "⩛";
	var oS = "Ⓢ";
	var Oscr = "𝒪";
	var oscr = "ℴ";
	var Oslash = "Ø";
	var oslash = "ø";
	var osol = "⊘";
	var Otilde = "Õ";
	var otilde = "õ";
	var otimesas = "⨶";
	var Otimes = "⨷";
	var otimes = "⊗";
	var Ouml = "Ö";
	var ouml = "ö";
	var ovbar = "⌽";
	var OverBar = "‾";
	var OverBrace = "⏞";
	var OverBracket = "⎴";
	var OverParenthesis = "⏜";
	var para = "¶";
	var parallel = "∥";
	var par = "∥";
	var parsim = "⫳";
	var parsl = "⫽";
	var part = "∂";
	var PartialD = "∂";
	var Pcy = "П";
	var pcy = "п";
	var percnt = "%";
	var period = ".";
	var permil = "‰";
	var perp = "⊥";
	var pertenk = "‱";
	var Pfr = "𝔓";
	var pfr = "𝔭";
	var Phi = "Φ";
	var phi = "φ";
	var phiv = "ϕ";
	var phmmat = "ℳ";
	var phone = "☎";
	var Pi = "Π";
	var pi = "π";
	var pitchfork = "⋔";
	var piv = "ϖ";
	var planck = "ℏ";
	var planckh = "ℎ";
	var plankv = "ℏ";
	var plusacir = "⨣";
	var plusb = "⊞";
	var pluscir = "⨢";
	var plus = "+";
	var plusdo = "∔";
	var plusdu = "⨥";
	var pluse = "⩲";
	var PlusMinus = "±";
	var plusmn = "±";
	var plussim = "⨦";
	var plustwo = "⨧";
	var pm = "±";
	var Poincareplane = "ℌ";
	var pointint = "⨕";
	var popf = "𝕡";
	var Popf = "ℙ";
	var pound = "£";
	var prap = "⪷";
	var Pr = "⪻";
	var pr = "≺";
	var prcue = "≼";
	var precapprox = "⪷";
	var prec = "≺";
	var preccurlyeq = "≼";
	var Precedes = "≺";
	var PrecedesEqual = "⪯";
	var PrecedesSlantEqual = "≼";
	var PrecedesTilde = "≾";
	var preceq = "⪯";
	var precnapprox = "⪹";
	var precneqq = "⪵";
	var precnsim = "⋨";
	var pre$1 = "⪯";
	var prE = "⪳";
	var precsim = "≾";
	var prime = "′";
	var Prime = "″";
	var primes = "ℙ";
	var prnap = "⪹";
	var prnE = "⪵";
	var prnsim = "⋨";
	var prod = "∏";
	var Product = "∏";
	var profalar = "⌮";
	var profline = "⌒";
	var profsurf = "⌓";
	var prop = "∝";
	var Proportional = "∝";
	var Proportion = "∷";
	var propto = "∝";
	var prsim = "≾";
	var prurel = "⊰";
	var Pscr = "𝒫";
	var pscr = "𝓅";
	var Psi = "Ψ";
	var psi = "ψ";
	var puncsp = " ";
	var Qfr = "𝔔";
	var qfr = "𝔮";
	var qint = "⨌";
	var qopf = "𝕢";
	var Qopf = "ℚ";
	var qprime = "⁗";
	var Qscr = "𝒬";
	var qscr = "𝓆";
	var quaternions = "ℍ";
	var quatint = "⨖";
	var quest = "?";
	var questeq = "≟";
	var quot = "\"";
	var QUOT = "\"";
	var rAarr = "⇛";
	var race = "∽̱";
	var Racute = "Ŕ";
	var racute = "ŕ";
	var radic = "√";
	var raemptyv = "⦳";
	var rang = "⟩";
	var Rang = "⟫";
	var rangd = "⦒";
	var range = "⦥";
	var rangle = "⟩";
	var raquo = "»";
	var rarrap = "⥵";
	var rarrb = "⇥";
	var rarrbfs = "⤠";
	var rarrc = "⤳";
	var rarr = "→";
	var Rarr = "↠";
	var rArr = "⇒";
	var rarrfs = "⤞";
	var rarrhk = "↪";
	var rarrlp = "↬";
	var rarrpl = "⥅";
	var rarrsim = "⥴";
	var Rarrtl = "⤖";
	var rarrtl = "↣";
	var rarrw = "↝";
	var ratail = "⤚";
	var rAtail = "⤜";
	var ratio = "∶";
	var rationals = "ℚ";
	var rbarr = "⤍";
	var rBarr = "⤏";
	var RBarr = "⤐";
	var rbbrk = "❳";
	var rbrace = "}";
	var rbrack = "]";
	var rbrke = "⦌";
	var rbrksld = "⦎";
	var rbrkslu = "⦐";
	var Rcaron = "Ř";
	var rcaron = "ř";
	var Rcedil = "Ŗ";
	var rcedil = "ŗ";
	var rceil = "⌉";
	var rcub = "}";
	var Rcy = "Р";
	var rcy = "р";
	var rdca = "⤷";
	var rdldhar = "⥩";
	var rdquo = "”";
	var rdquor = "”";
	var rdsh = "↳";
	var real = "ℜ";
	var realine = "ℛ";
	var realpart = "ℜ";
	var reals = "ℝ";
	var Re$1 = "ℜ";
	var rect = "▭";
	var reg = "®";
	var REG = "®";
	var ReverseElement = "∋";
	var ReverseEquilibrium = "⇋";
	var ReverseUpEquilibrium = "⥯";
	var rfisht = "⥽";
	var rfloor = "⌋";
	var rfr = "𝔯";
	var Rfr = "ℜ";
	var rHar = "⥤";
	var rhard = "⇁";
	var rharu = "⇀";
	var rharul = "⥬";
	var Rho = "Ρ";
	var rho = "ρ";
	var rhov = "ϱ";
	var RightAngleBracket = "⟩";
	var RightArrowBar = "⇥";
	var rightarrow = "→";
	var RightArrow = "→";
	var Rightarrow = "⇒";
	var RightArrowLeftArrow = "⇄";
	var rightarrowtail = "↣";
	var RightCeiling = "⌉";
	var RightDoubleBracket = "⟧";
	var RightDownTeeVector = "⥝";
	var RightDownVectorBar = "⥕";
	var RightDownVector = "⇂";
	var RightFloor = "⌋";
	var rightharpoondown = "⇁";
	var rightharpoonup = "⇀";
	var rightleftarrows = "⇄";
	var rightleftharpoons = "⇌";
	var rightrightarrows = "⇉";
	var rightsquigarrow = "↝";
	var RightTeeArrow = "↦";
	var RightTee = "⊢";
	var RightTeeVector = "⥛";
	var rightthreetimes = "⋌";
	var RightTriangleBar = "⧐";
	var RightTriangle = "⊳";
	var RightTriangleEqual = "⊵";
	var RightUpDownVector = "⥏";
	var RightUpTeeVector = "⥜";
	var RightUpVectorBar = "⥔";
	var RightUpVector = "↾";
	var RightVectorBar = "⥓";
	var RightVector = "⇀";
	var ring = "˚";
	var risingdotseq = "≓";
	var rlarr = "⇄";
	var rlhar = "⇌";
	var rlm = "‏";
	var rmoustache = "⎱";
	var rmoust = "⎱";
	var rnmid = "⫮";
	var roang = "⟭";
	var roarr = "⇾";
	var robrk = "⟧";
	var ropar = "⦆";
	var ropf = "𝕣";
	var Ropf = "ℝ";
	var roplus = "⨮";
	var rotimes = "⨵";
	var RoundImplies = "⥰";
	var rpar = ")";
	var rpargt = "⦔";
	var rppolint = "⨒";
	var rrarr = "⇉";
	var Rrightarrow = "⇛";
	var rsaquo = "›";
	var rscr = "𝓇";
	var Rscr = "ℛ";
	var rsh$1 = "↱";
	var Rsh = "↱";
	var rsqb = "]";
	var rsquo = "’";
	var rsquor = "’";
	var rthree = "⋌";
	var rtimes = "⋊";
	var rtri = "▹";
	var rtrie = "⊵";
	var rtrif = "▸";
	var rtriltri = "⧎";
	var RuleDelayed = "⧴";
	var ruluhar = "⥨";
	var rx = "℞";
	var Sacute = "Ś";
	var sacute = "ś";
	var sbquo = "‚";
	var scap = "⪸";
	var Scaron = "Š";
	var scaron = "š";
	var Sc$1 = "⪼";
	var sc$1 = "≻";
	var sccue = "≽";
	var sce = "⪰";
	var scE = "⪴";
	var Scedil = "Ş";
	var scedil = "ş";
	var Scirc = "Ŝ";
	var scirc = "ŝ";
	var scnap = "⪺";
	var scnE = "⪶";
	var scnsim = "⋩";
	var scpolint = "⨓";
	var scsim = "≿";
	var Scy = "С";
	var scy = "с";
	var sdotb = "⊡";
	var sdot = "⋅";
	var sdote = "⩦";
	var searhk = "⤥";
	var searr = "↘";
	var seArr = "⇘";
	var searrow = "↘";
	var sect = "§";
	var semi = ";";
	var seswar = "⤩";
	var setminus = "∖";
	var setmn = "∖";
	var sext = "✶";
	var Sfr = "𝔖";
	var sfr = "𝔰";
	var sfrown = "⌢";
	var sharp = "♯";
	var SHCHcy = "Щ";
	var shchcy = "щ";
	var SHcy = "Ш";
	var shcy = "ш";
	var ShortDownArrow = "↓";
	var ShortLeftArrow = "←";
	var shortmid = "∣";
	var shortparallel = "∥";
	var ShortRightArrow = "→";
	var ShortUpArrow = "↑";
	var shy = "­";
	var Sigma = "Σ";
	var sigma = "σ";
	var sigmaf = "ς";
	var sigmav = "ς";
	var sim = "∼";
	var simdot = "⩪";
	var sime = "≃";
	var simeq = "≃";
	var simg = "⪞";
	var simgE = "⪠";
	var siml = "⪝";
	var simlE = "⪟";
	var simne = "≆";
	var simplus = "⨤";
	var simrarr = "⥲";
	var slarr = "←";
	var SmallCircle = "∘";
	var smallsetminus = "∖";
	var smashp = "⨳";
	var smeparsl = "⧤";
	var smid = "∣";
	var smile = "⌣";
	var smt = "⪪";
	var smte = "⪬";
	var smtes = "⪬︀";
	var SOFTcy = "Ь";
	var softcy = "ь";
	var solbar = "⌿";
	var solb = "⧄";
	var sol = "/";
	var Sopf = "𝕊";
	var sopf = "𝕤";
	var spades = "♠";
	var spadesuit = "♠";
	var spar = "∥";
	var sqcap = "⊓";
	var sqcaps = "⊓︀";
	var sqcup = "⊔";
	var sqcups = "⊔︀";
	var Sqrt = "√";
	var sqsub = "⊏";
	var sqsube = "⊑";
	var sqsubset = "⊏";
	var sqsubseteq = "⊑";
	var sqsup = "⊐";
	var sqsupe = "⊒";
	var sqsupset = "⊐";
	var sqsupseteq = "⊒";
	var square = "□";
	var Square = "□";
	var SquareIntersection = "⊓";
	var SquareSubset = "⊏";
	var SquareSubsetEqual = "⊑";
	var SquareSuperset = "⊐";
	var SquareSupersetEqual = "⊒";
	var SquareUnion = "⊔";
	var squarf = "▪";
	var squ = "□";
	var squf = "▪";
	var srarr = "→";
	var Sscr = "𝒮";
	var sscr = "𝓈";
	var ssetmn = "∖";
	var ssmile = "⌣";
	var sstarf = "⋆";
	var Star = "⋆";
	var star = "☆";
	var starf = "★";
	var straightepsilon = "ϵ";
	var straightphi = "ϕ";
	var strns = "¯";
	var sub = "⊂";
	var Sub = "⋐";
	var subdot = "⪽";
	var subE = "⫅";
	var sube = "⊆";
	var subedot = "⫃";
	var submult = "⫁";
	var subnE = "⫋";
	var subne = "⊊";
	var subplus = "⪿";
	var subrarr = "⥹";
	var subset = "⊂";
	var Subset = "⋐";
	var subseteq = "⊆";
	var subseteqq = "⫅";
	var SubsetEqual = "⊆";
	var subsetneq = "⊊";
	var subsetneqq = "⫋";
	var subsim = "⫇";
	var subsub = "⫕";
	var subsup = "⫓";
	var succapprox = "⪸";
	var succ = "≻";
	var succcurlyeq = "≽";
	var Succeeds = "≻";
	var SucceedsEqual = "⪰";
	var SucceedsSlantEqual = "≽";
	var SucceedsTilde = "≿";
	var succeq = "⪰";
	var succnapprox = "⪺";
	var succneqq = "⪶";
	var succnsim = "⋩";
	var succsim = "≿";
	var SuchThat = "∋";
	var sum = "∑";
	var Sum = "∑";
	var sung = "♪";
	var sup1 = "¹";
	var sup2 = "²";
	var sup3 = "³";
	var sup = "⊃";
	var Sup = "⋑";
	var supdot = "⪾";
	var supdsub = "⫘";
	var supE = "⫆";
	var supe = "⊇";
	var supedot = "⫄";
	var Superset = "⊃";
	var SupersetEqual = "⊇";
	var suphsol = "⟉";
	var suphsub = "⫗";
	var suplarr = "⥻";
	var supmult = "⫂";
	var supnE = "⫌";
	var supne = "⊋";
	var supplus = "⫀";
	var supset = "⊃";
	var Supset = "⋑";
	var supseteq = "⊇";
	var supseteqq = "⫆";
	var supsetneq = "⊋";
	var supsetneqq = "⫌";
	var supsim = "⫈";
	var supsub = "⫔";
	var supsup = "⫖";
	var swarhk = "⤦";
	var swarr = "↙";
	var swArr = "⇙";
	var swarrow = "↙";
	var swnwar = "⤪";
	var szlig = "ß";
	var Tab = "\t";
	var target = "⌖";
	var Tau = "Τ";
	var tau = "τ";
	var tbrk = "⎴";
	var Tcaron = "Ť";
	var tcaron = "ť";
	var Tcedil = "Ţ";
	var tcedil = "ţ";
	var Tcy = "Т";
	var tcy = "т";
	var tdot = "⃛";
	var telrec = "⌕";
	var Tfr = "𝔗";
	var tfr = "𝔱";
	var there4 = "∴";
	var therefore = "∴";
	var Therefore = "∴";
	var Theta = "Θ";
	var theta = "θ";
	var thetasym = "ϑ";
	var thetav = "ϑ";
	var thickapprox = "≈";
	var thicksim = "∼";
	var ThickSpace = "  ";
	var ThinSpace = " ";
	var thinsp = " ";
	var thkap = "≈";
	var thksim = "∼";
	var THORN = "Þ";
	var thorn = "þ";
	var tilde = "˜";
	var Tilde = "∼";
	var TildeEqual = "≃";
	var TildeFullEqual = "≅";
	var TildeTilde = "≈";
	var timesbar = "⨱";
	var timesb = "⊠";
	var times = "×";
	var timesd = "⨰";
	var tint = "∭";
	var toea = "⤨";
	var topbot = "⌶";
	var topcir = "⫱";
	var top$1 = "⊤";
	var Topf = "𝕋";
	var topf = "𝕥";
	var topfork = "⫚";
	var tosa = "⤩";
	var tprime = "‴";
	var trade = "™";
	var TRADE = "™";
	var triangle = "▵";
	var triangledown = "▿";
	var triangleleft = "◃";
	var trianglelefteq = "⊴";
	var triangleq = "≜";
	var triangleright = "▹";
	var trianglerighteq = "⊵";
	var tridot = "◬";
	var trie = "≜";
	var triminus = "⨺";
	var TripleDot = "⃛";
	var triplus = "⨹";
	var trisb = "⧍";
	var tritime = "⨻";
	var trpezium = "⏢";
	var Tscr = "𝒯";
	var tscr = "𝓉";
	var TScy = "Ц";
	var tscy = "ц";
	var TSHcy = "Ћ";
	var tshcy = "ћ";
	var Tstrok = "Ŧ";
	var tstrok = "ŧ";
	var twixt = "≬";
	var twoheadleftarrow = "↞";
	var twoheadrightarrow = "↠";
	var Uacute = "Ú";
	var uacute = "ú";
	var uarr = "↑";
	var Uarr = "↟";
	var uArr = "⇑";
	var Uarrocir = "⥉";
	var Ubrcy = "Ў";
	var ubrcy = "ў";
	var Ubreve = "Ŭ";
	var ubreve = "ŭ";
	var Ucirc = "Û";
	var ucirc = "û";
	var Ucy = "У";
	var ucy = "у";
	var udarr = "⇅";
	var Udblac = "Ű";
	var udblac = "ű";
	var udhar = "⥮";
	var ufisht = "⥾";
	var Ufr = "𝔘";
	var ufr = "𝔲";
	var Ugrave = "Ù";
	var ugrave = "ù";
	var uHar = "⥣";
	var uharl = "↿";
	var uharr = "↾";
	var uhblk = "▀";
	var ulcorn = "⌜";
	var ulcorner = "⌜";
	var ulcrop = "⌏";
	var ultri = "◸";
	var Umacr = "Ū";
	var umacr = "ū";
	var uml = "¨";
	var UnderBar = "_";
	var UnderBrace = "⏟";
	var UnderBracket = "⎵";
	var UnderParenthesis = "⏝";
	var Union = "⋃";
	var UnionPlus = "⊎";
	var Uogon = "Ų";
	var uogon = "ų";
	var Uopf = "𝕌";
	var uopf = "𝕦";
	var UpArrowBar = "⤒";
	var uparrow = "↑";
	var UpArrow = "↑";
	var Uparrow = "⇑";
	var UpArrowDownArrow = "⇅";
	var updownarrow = "↕";
	var UpDownArrow = "↕";
	var Updownarrow = "⇕";
	var UpEquilibrium = "⥮";
	var upharpoonleft = "↿";
	var upharpoonright = "↾";
	var uplus = "⊎";
	var UpperLeftArrow = "↖";
	var UpperRightArrow = "↗";
	var upsi = "υ";
	var Upsi = "ϒ";
	var upsih = "ϒ";
	var Upsilon = "Υ";
	var upsilon = "υ";
	var UpTeeArrow = "↥";
	var UpTee = "⊥";
	var upuparrows = "⇈";
	var urcorn = "⌝";
	var urcorner = "⌝";
	var urcrop = "⌎";
	var Uring = "Ů";
	var uring = "ů";
	var urtri = "◹";
	var Uscr = "𝒰";
	var uscr = "𝓊";
	var utdot = "⋰";
	var Utilde = "Ũ";
	var utilde = "ũ";
	var utri = "▵";
	var utrif = "▴";
	var uuarr = "⇈";
	var Uuml = "Ü";
	var uuml = "ü";
	var uwangle = "⦧";
	var vangrt = "⦜";
	var varepsilon = "ϵ";
	var varkappa = "ϰ";
	var varnothing = "∅";
	var varphi = "ϕ";
	var varpi = "ϖ";
	var varpropto = "∝";
	var varr = "↕";
	var vArr = "⇕";
	var varrho = "ϱ";
	var varsigma = "ς";
	var varsubsetneq = "⊊︀";
	var varsubsetneqq = "⫋︀";
	var varsupsetneq = "⊋︀";
	var varsupsetneqq = "⫌︀";
	var vartheta = "ϑ";
	var vartriangleleft = "⊲";
	var vartriangleright = "⊳";
	var vBar = "⫨";
	var Vbar = "⫫";
	var vBarv = "⫩";
	var Vcy = "В";
	var vcy = "в";
	var vdash = "⊢";
	var vDash = "⊨";
	var Vdash = "⊩";
	var VDash = "⊫";
	var Vdashl = "⫦";
	var veebar = "⊻";
	var vee = "∨";
	var Vee = "⋁";
	var veeeq = "≚";
	var vellip = "⋮";
	var verbar = "|";
	var Verbar = "‖";
	var vert = "|";
	var Vert = "‖";
	var VerticalBar = "∣";
	var VerticalLine = "|";
	var VerticalSeparator = "❘";
	var VerticalTilde = "≀";
	var VeryThinSpace = " ";
	var Vfr = "𝔙";
	var vfr = "𝔳";
	var vltri = "⊲";
	var vnsub = "⊂⃒";
	var vnsup = "⊃⃒";
	var Vopf = "𝕍";
	var vopf = "𝕧";
	var vprop = "∝";
	var vrtri = "⊳";
	var Vscr = "𝒱";
	var vscr = "𝓋";
	var vsubnE = "⫋︀";
	var vsubne = "⊊︀";
	var vsupnE = "⫌︀";
	var vsupne = "⊋︀";
	var Vvdash = "⊪";
	var vzigzag = "⦚";
	var Wcirc = "Ŵ";
	var wcirc = "ŵ";
	var wedbar = "⩟";
	var wedge = "∧";
	var Wedge = "⋀";
	var wedgeq = "≙";
	var weierp = "℘";
	var Wfr = "𝔚";
	var wfr = "𝔴";
	var Wopf = "𝕎";
	var wopf = "𝕨";
	var wp = "℘";
	var wr = "≀";
	var wreath = "≀";
	var Wscr = "𝒲";
	var wscr = "𝓌";
	var xcap = "⋂";
	var xcirc = "◯";
	var xcup = "⋃";
	var xdtri = "▽";
	var Xfr = "𝔛";
	var xfr = "𝔵";
	var xharr = "⟷";
	var xhArr = "⟺";
	var Xi = "Ξ";
	var xi = "ξ";
	var xlarr = "⟵";
	var xlArr = "⟸";
	var xmap = "⟼";
	var xnis = "⋻";
	var xodot = "⨀";
	var Xopf = "𝕏";
	var xopf = "𝕩";
	var xoplus = "⨁";
	var xotime = "⨂";
	var xrarr = "⟶";
	var xrArr = "⟹";
	var Xscr = "𝒳";
	var xscr = "𝓍";
	var xsqcup = "⨆";
	var xuplus = "⨄";
	var xutri = "△";
	var xvee = "⋁";
	var xwedge = "⋀";
	var Yacute = "Ý";
	var yacute = "ý";
	var YAcy = "Я";
	var yacy = "я";
	var Ycirc = "Ŷ";
	var ycirc = "ŷ";
	var Ycy = "Ы";
	var ycy = "ы";
	var yen = "¥";
	var Yfr = "𝔜";
	var yfr = "𝔶";
	var YIcy = "Ї";
	var yicy = "ї";
	var Yopf = "𝕐";
	var yopf = "𝕪";
	var Yscr = "𝒴";
	var yscr = "𝓎";
	var YUcy = "Ю";
	var yucy = "ю";
	var yuml = "ÿ";
	var Yuml = "Ÿ";
	var Zacute = "Ź";
	var zacute = "ź";
	var Zcaron = "Ž";
	var zcaron = "ž";
	var Zcy = "З";
	var zcy = "з";
	var Zdot = "Ż";
	var zdot = "ż";
	var zeetrf = "ℨ";
	var ZeroWidthSpace = "​";
	var Zeta = "Ζ";
	var zeta = "ζ";
	var zfr = "𝔷";
	var Zfr = "ℨ";
	var ZHcy = "Ж";
	var zhcy = "ж";
	var zigrarr = "⇝";
	var zopf = "𝕫";
	var Zopf = "ℤ";
	var Zscr = "𝒵";
	var zscr = "𝓏";
	var zwj = "‍";
	var zwnj = "‌";
	var entities = {
		Aacute: Aacute,
		aacute: aacute,
		Abreve: Abreve,
		abreve: abreve,
		ac: ac$1,
		acd: acd,
		acE: acE,
		Acirc: Acirc,
		acirc: acirc,
		acute: acute,
		Acy: Acy,
		acy: acy,
		AElig: AElig,
		aelig: aelig,
		af: af$1,
		Afr: Afr,
		afr: afr,
		Agrave: Agrave,
		agrave: agrave,
		alefsym: alefsym,
		aleph: aleph,
		Alpha: Alpha,
		alpha: alpha,
		Amacr: Amacr,
		amacr: amacr,
		amalg: amalg,
		amp: amp,
		AMP: AMP,
		andand: andand,
		And: And,
		and: and,
		andd: andd,
		andslope: andslope,
		andv: andv,
		ang: ang,
		ange: ange,
		angle: angle,
		angmsdaa: angmsdaa,
		angmsdab: angmsdab,
		angmsdac: angmsdac,
		angmsdad: angmsdad,
		angmsdae: angmsdae,
		angmsdaf: angmsdaf,
		angmsdag: angmsdag,
		angmsdah: angmsdah,
		angmsd: angmsd,
		angrt: angrt,
		angrtvb: angrtvb,
		angrtvbd: angrtvbd,
		angsph: angsph,
		angst: angst,
		angzarr: angzarr,
		Aogon: Aogon,
		aogon: aogon,
		Aopf: Aopf,
		aopf: aopf,
		apacir: apacir,
		ap: ap,
		apE: apE,
		ape: ape,
		apid: apid,
		apos: apos,
		ApplyFunction: ApplyFunction,
		approx: approx,
		approxeq: approxeq,
		Aring: Aring,
		aring: aring,
		Ascr: Ascr,
		ascr: ascr,
		Assign: Assign,
		ast: ast,
		asymp: asymp,
		asympeq: asympeq,
		Atilde: Atilde,
		atilde: atilde,
		Auml: Auml,
		auml: auml,
		awconint: awconint,
		awint: awint,
		backcong: backcong,
		backepsilon: backepsilon,
		backprime: backprime,
		backsim: backsim,
		backsimeq: backsimeq,
		Backslash: Backslash,
		Barv: Barv,
		barvee: barvee,
		barwed: barwed,
		Barwed: Barwed,
		barwedge: barwedge,
		bbrk: bbrk,
		bbrktbrk: bbrktbrk,
		bcong: bcong,
		Bcy: Bcy,
		bcy: bcy,
		bdquo: bdquo,
		becaus: becaus,
		because: because,
		Because: Because,
		bemptyv: bemptyv,
		bepsi: bepsi,
		bernou: bernou,
		Bernoullis: Bernoullis,
		Beta: Beta,
		beta: beta,
		beth: beth,
		between: between,
		Bfr: Bfr,
		bfr: bfr,
		bigcap: bigcap,
		bigcirc: bigcirc,
		bigcup: bigcup,
		bigodot: bigodot,
		bigoplus: bigoplus,
		bigotimes: bigotimes,
		bigsqcup: bigsqcup,
		bigstar: bigstar,
		bigtriangledown: bigtriangledown,
		bigtriangleup: bigtriangleup,
		biguplus: biguplus,
		bigvee: bigvee,
		bigwedge: bigwedge,
		bkarow: bkarow,
		blacklozenge: blacklozenge,
		blacksquare: blacksquare,
		blacktriangle: blacktriangle,
		blacktriangledown: blacktriangledown,
		blacktriangleleft: blacktriangleleft,
		blacktriangleright: blacktriangleright,
		blank: blank,
		blk12: blk12,
		blk14: blk14,
		blk34: blk34,
		block: block,
		bne: bne,
		bnequiv: bnequiv,
		bNot: bNot,
		bnot: bnot,
		Bopf: Bopf,
		bopf: bopf,
		bot: bot,
		bottom: bottom,
		bowtie: bowtie,
		boxbox: boxbox,
		boxdl: boxdl,
		boxdL: boxdL,
		boxDl: boxDl,
		boxDL: boxDL,
		boxdr: boxdr,
		boxdR: boxdR,
		boxDr: boxDr,
		boxDR: boxDR,
		boxh: boxh,
		boxH: boxH,
		boxhd: boxhd,
		boxHd: boxHd,
		boxhD: boxhD,
		boxHD: boxHD,
		boxhu: boxhu,
		boxHu: boxHu,
		boxhU: boxhU,
		boxHU: boxHU,
		boxminus: boxminus,
		boxplus: boxplus,
		boxtimes: boxtimes,
		boxul: boxul,
		boxuL: boxuL,
		boxUl: boxUl,
		boxUL: boxUL,
		boxur: boxur,
		boxuR: boxuR,
		boxUr: boxUr,
		boxUR: boxUR,
		boxv: boxv,
		boxV: boxV,
		boxvh: boxvh,
		boxvH: boxvH,
		boxVh: boxVh,
		boxVH: boxVH,
		boxvl: boxvl,
		boxvL: boxvL,
		boxVl: boxVl,
		boxVL: boxVL,
		boxvr: boxvr,
		boxvR: boxvR,
		boxVr: boxVr,
		boxVR: boxVR,
		bprime: bprime,
		breve: breve,
		Breve: Breve,
		brvbar: brvbar,
		bscr: bscr,
		Bscr: Bscr,
		bsemi: bsemi,
		bsim: bsim,
		bsime: bsime,
		bsolb: bsolb,
		bsol: bsol,
		bsolhsub: bsolhsub,
		bull: bull,
		bullet: bullet,
		bump: bump,
		bumpE: bumpE,
		bumpe: bumpe,
		Bumpeq: Bumpeq,
		bumpeq: bumpeq,
		Cacute: Cacute,
		cacute: cacute,
		capand: capand,
		capbrcup: capbrcup,
		capcap: capcap,
		cap: cap,
		Cap: Cap,
		capcup: capcup,
		capdot: capdot,
		CapitalDifferentialD: CapitalDifferentialD,
		caps: caps,
		caret: caret,
		caron: caron,
		Cayleys: Cayleys,
		ccaps: ccaps,
		Ccaron: Ccaron,
		ccaron: ccaron,
		Ccedil: Ccedil,
		ccedil: ccedil,
		Ccirc: Ccirc,
		ccirc: ccirc,
		Cconint: Cconint,
		ccups: ccups,
		ccupssm: ccupssm,
		Cdot: Cdot,
		cdot: cdot,
		cedil: cedil,
		Cedilla: Cedilla,
		cemptyv: cemptyv,
		cent: cent,
		centerdot: centerdot,
		CenterDot: CenterDot,
		cfr: cfr,
		Cfr: Cfr,
		CHcy: CHcy,
		chcy: chcy,
		check: check,
		checkmark: checkmark,
		Chi: Chi,
		chi: chi,
		circ: circ,
		circeq: circeq,
		circlearrowleft: circlearrowleft,
		circlearrowright: circlearrowright,
		circledast: circledast,
		circledcirc: circledcirc,
		circleddash: circleddash,
		CircleDot: CircleDot,
		circledR: circledR,
		circledS: circledS,
		CircleMinus: CircleMinus,
		CirclePlus: CirclePlus,
		CircleTimes: CircleTimes,
		cir: cir,
		cirE: cirE,
		cire: cire,
		cirfnint: cirfnint,
		cirmid: cirmid,
		cirscir: cirscir,
		ClockwiseContourIntegral: ClockwiseContourIntegral,
		CloseCurlyDoubleQuote: CloseCurlyDoubleQuote,
		CloseCurlyQuote: CloseCurlyQuote,
		clubs: clubs,
		clubsuit: clubsuit,
		colon: colon,
		Colon: Colon,
		Colone: Colone,
		colone: colone,
		coloneq: coloneq,
		comma: comma,
		commat: commat,
		comp: comp,
		compfn: compfn,
		complement: complement,
		complexes: complexes,
		cong: cong,
		congdot: congdot,
		Congruent: Congruent,
		conint: conint,
		Conint: Conint,
		ContourIntegral: ContourIntegral,
		copf: copf,
		Copf: Copf,
		coprod: coprod,
		Coproduct: Coproduct,
		copy: copy,
		COPY: COPY,
		copysr: copysr,
		CounterClockwiseContourIntegral: CounterClockwiseContourIntegral,
		crarr: crarr,
		cross: cross,
		Cross: Cross,
		Cscr: Cscr,
		cscr: cscr,
		csub: csub,
		csube: csube,
		csup: csup,
		csupe: csupe,
		ctdot: ctdot,
		cudarrl: cudarrl,
		cudarrr: cudarrr,
		cuepr: cuepr,
		cuesc: cuesc,
		cularr: cularr,
		cularrp: cularrp,
		cupbrcap: cupbrcap,
		cupcap: cupcap,
		CupCap: CupCap,
		cup: cup,
		Cup: Cup,
		cupcup: cupcup,
		cupdot: cupdot,
		cupor: cupor,
		cups: cups,
		curarr: curarr,
		curarrm: curarrm,
		curlyeqprec: curlyeqprec,
		curlyeqsucc: curlyeqsucc,
		curlyvee: curlyvee,
		curlywedge: curlywedge,
		curren: curren,
		curvearrowleft: curvearrowleft,
		curvearrowright: curvearrowright,
		cuvee: cuvee,
		cuwed: cuwed,
		cwconint: cwconint,
		cwint: cwint,
		cylcty: cylcty,
		dagger: dagger,
		Dagger: Dagger,
		daleth: daleth,
		darr: darr,
		Darr: Darr,
		dArr: dArr,
		dash: dash,
		Dashv: Dashv,
		dashv: dashv,
		dbkarow: dbkarow,
		dblac: dblac,
		Dcaron: Dcaron,
		dcaron: dcaron,
		Dcy: Dcy,
		dcy: dcy,
		ddagger: ddagger,
		ddarr: ddarr,
		DD: DD,
		dd: dd$1,
		DDotrahd: DDotrahd,
		ddotseq: ddotseq,
		deg: deg,
		Del: Del,
		Delta: Delta,
		delta: delta,
		demptyv: demptyv,
		dfisht: dfisht,
		Dfr: Dfr,
		dfr: dfr,
		dHar: dHar,
		dharl: dharl,
		dharr: dharr,
		DiacriticalAcute: DiacriticalAcute,
		DiacriticalDot: DiacriticalDot,
		DiacriticalDoubleAcute: DiacriticalDoubleAcute,
		DiacriticalGrave: DiacriticalGrave,
		DiacriticalTilde: DiacriticalTilde,
		diam: diam,
		diamond: diamond,
		Diamond: Diamond,
		diamondsuit: diamondsuit,
		diams: diams,
		die: die,
		DifferentialD: DifferentialD,
		digamma: digamma,
		disin: disin,
		div: div,
		divide: divide,
		divideontimes: divideontimes,
		divonx: divonx,
		DJcy: DJcy,
		djcy: djcy,
		dlcorn: dlcorn,
		dlcrop: dlcrop,
		dollar: dollar,
		Dopf: Dopf,
		dopf: dopf,
		Dot: Dot,
		dot: dot,
		DotDot: DotDot,
		doteq: doteq,
		doteqdot: doteqdot,
		DotEqual: DotEqual,
		dotminus: dotminus,
		dotplus: dotplus,
		dotsquare: dotsquare,
		doublebarwedge: doublebarwedge,
		DoubleContourIntegral: DoubleContourIntegral,
		DoubleDot: DoubleDot,
		DoubleDownArrow: DoubleDownArrow,
		DoubleLeftArrow: DoubleLeftArrow,
		DoubleLeftRightArrow: DoubleLeftRightArrow,
		DoubleLeftTee: DoubleLeftTee,
		DoubleLongLeftArrow: DoubleLongLeftArrow,
		DoubleLongLeftRightArrow: DoubleLongLeftRightArrow,
		DoubleLongRightArrow: DoubleLongRightArrow,
		DoubleRightArrow: DoubleRightArrow,
		DoubleRightTee: DoubleRightTee,
		DoubleUpArrow: DoubleUpArrow,
		DoubleUpDownArrow: DoubleUpDownArrow,
		DoubleVerticalBar: DoubleVerticalBar,
		DownArrowBar: DownArrowBar,
		downarrow: downarrow,
		DownArrow: DownArrow,
		Downarrow: Downarrow,
		DownArrowUpArrow: DownArrowUpArrow,
		DownBreve: DownBreve,
		downdownarrows: downdownarrows,
		downharpoonleft: downharpoonleft,
		downharpoonright: downharpoonright,
		DownLeftRightVector: DownLeftRightVector,
		DownLeftTeeVector: DownLeftTeeVector,
		DownLeftVectorBar: DownLeftVectorBar,
		DownLeftVector: DownLeftVector,
		DownRightTeeVector: DownRightTeeVector,
		DownRightVectorBar: DownRightVectorBar,
		DownRightVector: DownRightVector,
		DownTeeArrow: DownTeeArrow,
		DownTee: DownTee,
		drbkarow: drbkarow,
		drcorn: drcorn,
		drcrop: drcrop,
		Dscr: Dscr,
		dscr: dscr,
		DScy: DScy,
		dscy: dscy,
		dsol: dsol,
		Dstrok: Dstrok,
		dstrok: dstrok,
		dtdot: dtdot,
		dtri: dtri,
		dtrif: dtrif,
		duarr: duarr,
		duhar: duhar,
		dwangle: dwangle,
		DZcy: DZcy,
		dzcy: dzcy,
		dzigrarr: dzigrarr,
		Eacute: Eacute,
		eacute: eacute,
		easter: easter,
		Ecaron: Ecaron,
		ecaron: ecaron,
		Ecirc: Ecirc,
		ecirc: ecirc,
		ecir: ecir,
		ecolon: ecolon,
		Ecy: Ecy,
		ecy: ecy,
		eDDot: eDDot,
		Edot: Edot,
		edot: edot,
		eDot: eDot,
		ee: ee$1,
		efDot: efDot,
		Efr: Efr,
		efr: efr,
		eg: eg$1,
		Egrave: Egrave,
		egrave: egrave,
		egs: egs,
		egsdot: egsdot,
		el: el,
		Element: Element,
		elinters: elinters,
		ell: ell,
		els: els,
		elsdot: elsdot,
		Emacr: Emacr,
		emacr: emacr,
		empty: empty,
		emptyset: emptyset,
		EmptySmallSquare: EmptySmallSquare,
		emptyv: emptyv,
		EmptyVerySmallSquare: EmptyVerySmallSquare,
		emsp13: emsp13,
		emsp14: emsp14,
		emsp: emsp,
		ENG: ENG,
		eng: eng,
		ensp: ensp,
		Eogon: Eogon,
		eogon: eogon,
		Eopf: Eopf,
		eopf: eopf,
		epar: epar,
		eparsl: eparsl,
		eplus: eplus,
		epsi: epsi,
		Epsilon: Epsilon,
		epsilon: epsilon,
		epsiv: epsiv,
		eqcirc: eqcirc,
		eqcolon: eqcolon,
		eqsim: eqsim,
		eqslantgtr: eqslantgtr,
		eqslantless: eqslantless,
		Equal: Equal,
		equals: equals,
		EqualTilde: EqualTilde,
		equest: equest,
		Equilibrium: Equilibrium,
		equiv: equiv,
		equivDD: equivDD,
		eqvparsl: eqvparsl,
		erarr: erarr,
		erDot: erDot,
		escr: escr,
		Escr: Escr,
		esdot: esdot,
		Esim: Esim,
		esim: esim,
		Eta: Eta,
		eta: eta,
		ETH: ETH,
		eth: eth,
		Euml: Euml,
		euml: euml,
		euro: euro,
		excl: excl,
		exist: exist,
		Exists: Exists,
		expectation: expectation,
		exponentiale: exponentiale,
		ExponentialE: ExponentialE,
		fallingdotseq: fallingdotseq,
		Fcy: Fcy,
		fcy: fcy,
		female: female,
		ffilig: ffilig,
		fflig: fflig,
		ffllig: ffllig,
		Ffr: Ffr,
		ffr: ffr,
		filig: filig,
		FilledSmallSquare: FilledSmallSquare,
		FilledVerySmallSquare: FilledVerySmallSquare,
		fjlig: fjlig,
		flat: flat,
		fllig: fllig,
		fltns: fltns,
		fnof: fnof,
		Fopf: Fopf,
		fopf: fopf,
		forall: forall,
		ForAll: ForAll,
		fork: fork,
		forkv: forkv,
		Fouriertrf: Fouriertrf,
		fpartint: fpartint,
		frac12: frac12,
		frac13: frac13,
		frac14: frac14,
		frac15: frac15,
		frac16: frac16,
		frac18: frac18,
		frac23: frac23,
		frac25: frac25,
		frac34: frac34,
		frac35: frac35,
		frac38: frac38,
		frac45: frac45,
		frac56: frac56,
		frac58: frac58,
		frac78: frac78,
		frasl: frasl,
		frown: frown,
		fscr: fscr,
		Fscr: Fscr,
		gacute: gacute,
		Gamma: Gamma,
		gamma: gamma,
		Gammad: Gammad,
		gammad: gammad,
		gap: gap,
		Gbreve: Gbreve,
		gbreve: gbreve,
		Gcedil: Gcedil,
		Gcirc: Gcirc,
		gcirc: gcirc,
		Gcy: Gcy,
		gcy: gcy,
		Gdot: Gdot,
		gdot: gdot,
		ge: ge$1,
		gE: gE,
		gEl: gEl,
		gel: gel,
		geq: geq,
		geqq: geqq,
		geqslant: geqslant,
		gescc: gescc,
		ges: ges,
		gesdot: gesdot,
		gesdoto: gesdoto,
		gesdotol: gesdotol,
		gesl: gesl,
		gesles: gesles,
		Gfr: Gfr,
		gfr: gfr,
		gg: gg$1,
		Gg: Gg$1,
		ggg: ggg,
		gimel: gimel,
		GJcy: GJcy,
		gjcy: gjcy,
		gla: gla,
		gl: gl,
		glE: glE,
		glj: glj,
		gnap: gnap,
		gnapprox: gnapprox,
		gne: gne,
		gnE: gnE,
		gneq: gneq,
		gneqq: gneqq,
		gnsim: gnsim,
		Gopf: Gopf,
		gopf: gopf,
		grave: grave,
		GreaterEqual: GreaterEqual,
		GreaterEqualLess: GreaterEqualLess,
		GreaterFullEqual: GreaterFullEqual,
		GreaterGreater: GreaterGreater,
		GreaterLess: GreaterLess,
		GreaterSlantEqual: GreaterSlantEqual,
		GreaterTilde: GreaterTilde,
		Gscr: Gscr,
		gscr: gscr,
		gsim: gsim,
		gsime: gsime,
		gsiml: gsiml,
		gtcc: gtcc,
		gtcir: gtcir,
		gt: gt,
		GT: GT,
		Gt: Gt,
		gtdot: gtdot,
		gtlPar: gtlPar,
		gtquest: gtquest,
		gtrapprox: gtrapprox,
		gtrarr: gtrarr,
		gtrdot: gtrdot,
		gtreqless: gtreqless,
		gtreqqless: gtreqqless,
		gtrless: gtrless,
		gtrsim: gtrsim,
		gvertneqq: gvertneqq,
		gvnE: gvnE,
		Hacek: Hacek,
		hairsp: hairsp,
		half: half,
		hamilt: hamilt,
		HARDcy: HARDcy,
		hardcy: hardcy,
		harrcir: harrcir,
		harr: harr,
		hArr: hArr,
		harrw: harrw,
		Hat: Hat,
		hbar: hbar,
		Hcirc: Hcirc,
		hcirc: hcirc,
		hearts: hearts,
		heartsuit: heartsuit,
		hellip: hellip,
		hercon: hercon,
		hfr: hfr,
		Hfr: Hfr,
		HilbertSpace: HilbertSpace,
		hksearow: hksearow,
		hkswarow: hkswarow,
		hoarr: hoarr,
		homtht: homtht,
		hookleftarrow: hookleftarrow,
		hookrightarrow: hookrightarrow,
		hopf: hopf,
		Hopf: Hopf,
		horbar: horbar,
		HorizontalLine: HorizontalLine,
		hscr: hscr,
		Hscr: Hscr,
		hslash: hslash,
		Hstrok: Hstrok,
		hstrok: hstrok,
		HumpDownHump: HumpDownHump,
		HumpEqual: HumpEqual,
		hybull: hybull,
		hyphen: hyphen,
		Iacute: Iacute,
		iacute: iacute,
		ic: ic$1,
		Icirc: Icirc,
		icirc: icirc,
		Icy: Icy,
		icy: icy,
		Idot: Idot,
		IEcy: IEcy,
		iecy: iecy,
		iexcl: iexcl,
		iff: iff,
		ifr: ifr,
		Ifr: Ifr,
		Igrave: Igrave,
		igrave: igrave,
		ii: ii,
		iiiint: iiiint,
		iiint: iiint,
		iinfin: iinfin,
		iiota: iiota,
		IJlig: IJlig,
		ijlig: ijlig,
		Imacr: Imacr,
		imacr: imacr,
		image: image,
		ImaginaryI: ImaginaryI,
		imagline: imagline,
		imagpart: imagpart,
		imath: imath,
		Im: Im,
		imof: imof,
		imped: imped,
		Implies: Implies,
		incare: incare,
		infin: infin,
		infintie: infintie,
		inodot: inodot,
		intcal: intcal,
		int: int,
		Int: Int,
		integers: integers,
		Integral: Integral,
		intercal: intercal,
		Intersection: Intersection,
		intlarhk: intlarhk,
		intprod: intprod,
		InvisibleComma: InvisibleComma,
		InvisibleTimes: InvisibleTimes,
		IOcy: IOcy,
		iocy: iocy,
		Iogon: Iogon,
		iogon: iogon,
		Iopf: Iopf,
		iopf: iopf,
		Iota: Iota,
		iota: iota,
		iprod: iprod,
		iquest: iquest,
		iscr: iscr,
		Iscr: Iscr,
		isin: isin,
		isindot: isindot,
		isinE: isinE,
		isins: isins,
		isinsv: isinsv,
		isinv: isinv,
		it: it,
		Itilde: Itilde,
		itilde: itilde,
		Iukcy: Iukcy,
		iukcy: iukcy,
		Iuml: Iuml,
		iuml: iuml,
		Jcirc: Jcirc,
		jcirc: jcirc,
		Jcy: Jcy,
		jcy: jcy,
		Jfr: Jfr,
		jfr: jfr,
		jmath: jmath,
		Jopf: Jopf,
		jopf: jopf,
		Jscr: Jscr,
		jscr: jscr,
		Jsercy: Jsercy,
		jsercy: jsercy,
		Jukcy: Jukcy,
		jukcy: jukcy,
		Kappa: Kappa,
		kappa: kappa,
		kappav: kappav,
		Kcedil: Kcedil,
		kcedil: kcedil,
		Kcy: Kcy,
		kcy: kcy,
		Kfr: Kfr,
		kfr: kfr,
		kgreen: kgreen,
		KHcy: KHcy,
		khcy: khcy,
		KJcy: KJcy,
		kjcy: kjcy,
		Kopf: Kopf,
		kopf: kopf,
		Kscr: Kscr,
		kscr: kscr,
		lAarr: lAarr,
		Lacute: Lacute,
		lacute: lacute,
		laemptyv: laemptyv,
		lagran: lagran,
		Lambda: Lambda,
		lambda: lambda,
		lang: lang,
		Lang: Lang,
		langd: langd,
		langle: langle,
		lap: lap,
		Laplacetrf: Laplacetrf,
		laquo: laquo,
		larrb: larrb,
		larrbfs: larrbfs,
		larr: larr,
		Larr: Larr,
		lArr: lArr,
		larrfs: larrfs,
		larrhk: larrhk,
		larrlp: larrlp,
		larrpl: larrpl,
		larrsim: larrsim,
		larrtl: larrtl,
		latail: latail,
		lAtail: lAtail,
		lat: lat,
		late: late,
		lates: lates,
		lbarr: lbarr,
		lBarr: lBarr,
		lbbrk: lbbrk,
		lbrace: lbrace,
		lbrack: lbrack,
		lbrke: lbrke,
		lbrksld: lbrksld,
		lbrkslu: lbrkslu,
		Lcaron: Lcaron,
		lcaron: lcaron,
		Lcedil: Lcedil,
		lcedil: lcedil,
		lceil: lceil,
		lcub: lcub,
		Lcy: Lcy,
		lcy: lcy,
		ldca: ldca,
		ldquo: ldquo,
		ldquor: ldquor,
		ldrdhar: ldrdhar,
		ldrushar: ldrushar,
		ldsh: ldsh,
		le: le$1,
		lE: lE,
		LeftAngleBracket: LeftAngleBracket,
		LeftArrowBar: LeftArrowBar,
		leftarrow: leftarrow,
		LeftArrow: LeftArrow,
		Leftarrow: Leftarrow,
		LeftArrowRightArrow: LeftArrowRightArrow,
		leftarrowtail: leftarrowtail,
		LeftCeiling: LeftCeiling,
		LeftDoubleBracket: LeftDoubleBracket,
		LeftDownTeeVector: LeftDownTeeVector,
		LeftDownVectorBar: LeftDownVectorBar,
		LeftDownVector: LeftDownVector,
		LeftFloor: LeftFloor,
		leftharpoondown: leftharpoondown,
		leftharpoonup: leftharpoonup,
		leftleftarrows: leftleftarrows,
		leftrightarrow: leftrightarrow,
		LeftRightArrow: LeftRightArrow,
		Leftrightarrow: Leftrightarrow,
		leftrightarrows: leftrightarrows,
		leftrightharpoons: leftrightharpoons,
		leftrightsquigarrow: leftrightsquigarrow,
		LeftRightVector: LeftRightVector,
		LeftTeeArrow: LeftTeeArrow,
		LeftTee: LeftTee,
		LeftTeeVector: LeftTeeVector,
		leftthreetimes: leftthreetimes,
		LeftTriangleBar: LeftTriangleBar,
		LeftTriangle: LeftTriangle,
		LeftTriangleEqual: LeftTriangleEqual,
		LeftUpDownVector: LeftUpDownVector,
		LeftUpTeeVector: LeftUpTeeVector,
		LeftUpVectorBar: LeftUpVectorBar,
		LeftUpVector: LeftUpVector,
		LeftVectorBar: LeftVectorBar,
		LeftVector: LeftVector,
		lEg: lEg,
		leg: leg,
		leq: leq,
		leqq: leqq,
		leqslant: leqslant,
		lescc: lescc,
		les: les,
		lesdot: lesdot,
		lesdoto: lesdoto,
		lesdotor: lesdotor,
		lesg: lesg,
		lesges: lesges,
		lessapprox: lessapprox,
		lessdot: lessdot,
		lesseqgtr: lesseqgtr,
		lesseqqgtr: lesseqqgtr,
		LessEqualGreater: LessEqualGreater,
		LessFullEqual: LessFullEqual,
		LessGreater: LessGreater,
		lessgtr: lessgtr,
		LessLess: LessLess,
		lesssim: lesssim,
		LessSlantEqual: LessSlantEqual,
		LessTilde: LessTilde,
		lfisht: lfisht,
		lfloor: lfloor,
		Lfr: Lfr,
		lfr: lfr,
		lg: lg$1,
		lgE: lgE,
		lHar: lHar,
		lhard: lhard,
		lharu: lharu,
		lharul: lharul,
		lhblk: lhblk,
		LJcy: LJcy,
		ljcy: ljcy,
		llarr: llarr,
		ll: ll,
		Ll: Ll,
		llcorner: llcorner,
		Lleftarrow: Lleftarrow,
		llhard: llhard,
		lltri: lltri,
		Lmidot: Lmidot,
		lmidot: lmidot,
		lmoustache: lmoustache,
		lmoust: lmoust,
		lnap: lnap,
		lnapprox: lnapprox,
		lne: lne,
		lnE: lnE,
		lneq: lneq,
		lneqq: lneqq,
		lnsim: lnsim,
		loang: loang,
		loarr: loarr,
		lobrk: lobrk,
		longleftarrow: longleftarrow,
		LongLeftArrow: LongLeftArrow,
		Longleftarrow: Longleftarrow,
		longleftrightarrow: longleftrightarrow,
		LongLeftRightArrow: LongLeftRightArrow,
		Longleftrightarrow: Longleftrightarrow,
		longmapsto: longmapsto,
		longrightarrow: longrightarrow,
		LongRightArrow: LongRightArrow,
		Longrightarrow: Longrightarrow,
		looparrowleft: looparrowleft,
		looparrowright: looparrowright,
		lopar: lopar,
		Lopf: Lopf,
		lopf: lopf,
		loplus: loplus,
		lotimes: lotimes,
		lowast: lowast,
		lowbar: lowbar,
		LowerLeftArrow: LowerLeftArrow,
		LowerRightArrow: LowerRightArrow,
		loz: loz,
		lozenge: lozenge,
		lozf: lozf,
		lpar: lpar,
		lparlt: lparlt,
		lrarr: lrarr,
		lrcorner: lrcorner,
		lrhar: lrhar,
		lrhard: lrhard,
		lrm: lrm,
		lrtri: lrtri,
		lsaquo: lsaquo,
		lscr: lscr,
		Lscr: Lscr,
		lsh: lsh,
		Lsh: Lsh,
		lsim: lsim,
		lsime: lsime,
		lsimg: lsimg,
		lsqb: lsqb,
		lsquo: lsquo,
		lsquor: lsquor,
		Lstrok: Lstrok,
		lstrok: lstrok,
		ltcc: ltcc,
		ltcir: ltcir,
		lt: lt,
		LT: LT,
		Lt: Lt,
		ltdot: ltdot,
		lthree: lthree,
		ltimes: ltimes,
		ltlarr: ltlarr,
		ltquest: ltquest,
		ltri: ltri,
		ltrie: ltrie,
		ltrif: ltrif,
		ltrPar: ltrPar,
		lurdshar: lurdshar,
		luruhar: luruhar,
		lvertneqq: lvertneqq,
		lvnE: lvnE,
		macr: macr,
		male: male,
		malt: malt,
		maltese: maltese,
		map: map$1,
		mapsto: mapsto,
		mapstodown: mapstodown,
		mapstoleft: mapstoleft,
		mapstoup: mapstoup,
		marker: marker,
		mcomma: mcomma,
		Mcy: Mcy,
		mcy: mcy,
		mdash: mdash,
		mDDot: mDDot,
		measuredangle: measuredangle,
		MediumSpace: MediumSpace,
		Mellintrf: Mellintrf,
		Mfr: Mfr,
		mfr: mfr,
		mho: mho,
		micro: micro,
		midast: midast,
		midcir: midcir,
		mid: mid,
		middot: middot,
		minusb: minusb,
		minus: minus,
		minusd: minusd,
		minusdu: minusdu,
		MinusPlus: MinusPlus,
		mlcp: mlcp,
		mldr: mldr,
		mnplus: mnplus,
		models: models,
		Mopf: Mopf,
		mopf: mopf,
		mp: mp,
		mscr: mscr,
		Mscr: Mscr,
		mstpos: mstpos,
		Mu: Mu,
		mu: mu,
		multimap: multimap,
		mumap: mumap,
		nabla: nabla,
		Nacute: Nacute,
		nacute: nacute,
		nang: nang,
		nap: nap,
		napE: napE,
		napid: napid,
		napos: napos,
		napprox: napprox,
		natural: natural,
		naturals: naturals,
		natur: natur,
		nbsp: nbsp,
		nbump: nbump,
		nbumpe: nbumpe,
		ncap: ncap,
		Ncaron: Ncaron,
		ncaron: ncaron,
		Ncedil: Ncedil,
		ncedil: ncedil,
		ncong: ncong,
		ncongdot: ncongdot,
		ncup: ncup,
		Ncy: Ncy,
		ncy: ncy,
		ndash: ndash,
		nearhk: nearhk,
		nearr: nearr,
		neArr: neArr,
		nearrow: nearrow,
		ne: ne$1,
		nedot: nedot,
		NegativeMediumSpace: NegativeMediumSpace,
		NegativeThickSpace: NegativeThickSpace,
		NegativeThinSpace: NegativeThinSpace,
		NegativeVeryThinSpace: NegativeVeryThinSpace,
		nequiv: nequiv,
		nesear: nesear,
		nesim: nesim,
		NestedGreaterGreater: NestedGreaterGreater,
		NestedLessLess: NestedLessLess,
		NewLine: NewLine,
		nexist: nexist,
		nexists: nexists,
		Nfr: Nfr,
		nfr: nfr,
		ngE: ngE,
		nge: nge,
		ngeq: ngeq,
		ngeqq: ngeqq,
		ngeqslant: ngeqslant,
		nges: nges,
		nGg: nGg,
		ngsim: ngsim,
		nGt: nGt,
		ngt: ngt,
		ngtr: ngtr,
		nGtv: nGtv,
		nharr: nharr,
		nhArr: nhArr,
		nhpar: nhpar,
		ni: ni,
		nis: nis,
		nisd: nisd,
		niv: niv,
		NJcy: NJcy,
		njcy: njcy,
		nlarr: nlarr,
		nlArr: nlArr,
		nldr: nldr,
		nlE: nlE,
		nle: nle,
		nleftarrow: nleftarrow,
		nLeftarrow: nLeftarrow,
		nleftrightarrow: nleftrightarrow,
		nLeftrightarrow: nLeftrightarrow,
		nleq: nleq,
		nleqq: nleqq,
		nleqslant: nleqslant,
		nles: nles,
		nless: nless,
		nLl: nLl,
		nlsim: nlsim,
		nLt: nLt,
		nlt: nlt,
		nltri: nltri,
		nltrie: nltrie,
		nLtv: nLtv,
		nmid: nmid,
		NoBreak: NoBreak,
		NonBreakingSpace: NonBreakingSpace,
		nopf: nopf,
		Nopf: Nopf,
		Not: Not,
		not: not,
		NotCongruent: NotCongruent,
		NotCupCap: NotCupCap,
		NotDoubleVerticalBar: NotDoubleVerticalBar,
		NotElement: NotElement,
		NotEqual: NotEqual,
		NotEqualTilde: NotEqualTilde,
		NotExists: NotExists,
		NotGreater: NotGreater,
		NotGreaterEqual: NotGreaterEqual,
		NotGreaterFullEqual: NotGreaterFullEqual,
		NotGreaterGreater: NotGreaterGreater,
		NotGreaterLess: NotGreaterLess,
		NotGreaterSlantEqual: NotGreaterSlantEqual,
		NotGreaterTilde: NotGreaterTilde,
		NotHumpDownHump: NotHumpDownHump,
		NotHumpEqual: NotHumpEqual,
		notin: notin,
		notindot: notindot,
		notinE: notinE,
		notinva: notinva,
		notinvb: notinvb,
		notinvc: notinvc,
		NotLeftTriangleBar: NotLeftTriangleBar,
		NotLeftTriangle: NotLeftTriangle,
		NotLeftTriangleEqual: NotLeftTriangleEqual,
		NotLess: NotLess,
		NotLessEqual: NotLessEqual,
		NotLessGreater: NotLessGreater,
		NotLessLess: NotLessLess,
		NotLessSlantEqual: NotLessSlantEqual,
		NotLessTilde: NotLessTilde,
		NotNestedGreaterGreater: NotNestedGreaterGreater,
		NotNestedLessLess: NotNestedLessLess,
		notni: notni,
		notniva: notniva,
		notnivb: notnivb,
		notnivc: notnivc,
		NotPrecedes: NotPrecedes,
		NotPrecedesEqual: NotPrecedesEqual,
		NotPrecedesSlantEqual: NotPrecedesSlantEqual,
		NotReverseElement: NotReverseElement,
		NotRightTriangleBar: NotRightTriangleBar,
		NotRightTriangle: NotRightTriangle,
		NotRightTriangleEqual: NotRightTriangleEqual,
		NotSquareSubset: NotSquareSubset,
		NotSquareSubsetEqual: NotSquareSubsetEqual,
		NotSquareSuperset: NotSquareSuperset,
		NotSquareSupersetEqual: NotSquareSupersetEqual,
		NotSubset: NotSubset,
		NotSubsetEqual: NotSubsetEqual,
		NotSucceeds: NotSucceeds,
		NotSucceedsEqual: NotSucceedsEqual,
		NotSucceedsSlantEqual: NotSucceedsSlantEqual,
		NotSucceedsTilde: NotSucceedsTilde,
		NotSuperset: NotSuperset,
		NotSupersetEqual: NotSupersetEqual,
		NotTilde: NotTilde,
		NotTildeEqual: NotTildeEqual,
		NotTildeFullEqual: NotTildeFullEqual,
		NotTildeTilde: NotTildeTilde,
		NotVerticalBar: NotVerticalBar,
		nparallel: nparallel,
		npar: npar,
		nparsl: nparsl,
		npart: npart,
		npolint: npolint,
		npr: npr,
		nprcue: nprcue,
		nprec: nprec,
		npreceq: npreceq,
		npre: npre,
		nrarrc: nrarrc,
		nrarr: nrarr,
		nrArr: nrArr,
		nrarrw: nrarrw,
		nrightarrow: nrightarrow,
		nRightarrow: nRightarrow,
		nrtri: nrtri,
		nrtrie: nrtrie,
		nsc: nsc,
		nsccue: nsccue,
		nsce: nsce,
		Nscr: Nscr,
		nscr: nscr,
		nshortmid: nshortmid,
		nshortparallel: nshortparallel,
		nsim: nsim,
		nsime: nsime,
		nsimeq: nsimeq,
		nsmid: nsmid,
		nspar: nspar,
		nsqsube: nsqsube,
		nsqsupe: nsqsupe,
		nsub: nsub,
		nsubE: nsubE,
		nsube: nsube,
		nsubset: nsubset,
		nsubseteq: nsubseteq,
		nsubseteqq: nsubseteqq,
		nsucc: nsucc,
		nsucceq: nsucceq,
		nsup: nsup,
		nsupE: nsupE,
		nsupe: nsupe,
		nsupset: nsupset,
		nsupseteq: nsupseteq,
		nsupseteqq: nsupseteqq,
		ntgl: ntgl,
		Ntilde: Ntilde,
		ntilde: ntilde,
		ntlg: ntlg,
		ntriangleleft: ntriangleleft,
		ntrianglelefteq: ntrianglelefteq,
		ntriangleright: ntriangleright,
		ntrianglerighteq: ntrianglerighteq,
		Nu: Nu,
		nu: nu,
		num: num,
		numero: numero,
		numsp: numsp,
		nvap: nvap,
		nvdash: nvdash,
		nvDash: nvDash,
		nVdash: nVdash,
		nVDash: nVDash,
		nvge: nvge,
		nvgt: nvgt,
		nvHarr: nvHarr,
		nvinfin: nvinfin,
		nvlArr: nvlArr,
		nvle: nvle,
		nvlt: nvlt,
		nvltrie: nvltrie,
		nvrArr: nvrArr,
		nvrtrie: nvrtrie,
		nvsim: nvsim,
		nwarhk: nwarhk,
		nwarr: nwarr,
		nwArr: nwArr,
		nwarrow: nwarrow,
		nwnear: nwnear,
		Oacute: Oacute,
		oacute: oacute,
		oast: oast,
		Ocirc: Ocirc,
		ocirc: ocirc,
		ocir: ocir,
		Ocy: Ocy,
		ocy: ocy,
		odash: odash,
		Odblac: Odblac,
		odblac: odblac,
		odiv: odiv,
		odot: odot,
		odsold: odsold,
		OElig: OElig,
		oelig: oelig,
		ofcir: ofcir,
		Ofr: Ofr,
		ofr: ofr,
		ogon: ogon,
		Ograve: Ograve,
		ograve: ograve,
		ogt: ogt,
		ohbar: ohbar,
		ohm: ohm,
		oint: oint,
		olarr: olarr,
		olcir: olcir,
		olcross: olcross,
		oline: oline,
		olt: olt,
		Omacr: Omacr,
		omacr: omacr,
		Omega: Omega,
		omega: omega,
		Omicron: Omicron,
		omicron: omicron,
		omid: omid,
		ominus: ominus,
		Oopf: Oopf,
		oopf: oopf,
		opar: opar,
		OpenCurlyDoubleQuote: OpenCurlyDoubleQuote,
		OpenCurlyQuote: OpenCurlyQuote,
		operp: operp,
		oplus: oplus,
		orarr: orarr,
		Or: Or,
		or: or,
		ord: ord,
		order: order,
		orderof: orderof,
		ordf: ordf,
		ordm: ordm,
		origof: origof,
		oror: oror,
		orslope: orslope,
		orv: orv,
		oS: oS,
		Oscr: Oscr,
		oscr: oscr,
		Oslash: Oslash,
		oslash: oslash,
		osol: osol,
		Otilde: Otilde,
		otilde: otilde,
		otimesas: otimesas,
		Otimes: Otimes,
		otimes: otimes,
		Ouml: Ouml,
		ouml: ouml,
		ovbar: ovbar,
		OverBar: OverBar,
		OverBrace: OverBrace,
		OverBracket: OverBracket,
		OverParenthesis: OverParenthesis,
		para: para,
		parallel: parallel,
		par: par,
		parsim: parsim,
		parsl: parsl,
		part: part,
		PartialD: PartialD,
		Pcy: Pcy,
		pcy: pcy,
		percnt: percnt,
		period: period,
		permil: permil,
		perp: perp,
		pertenk: pertenk,
		Pfr: Pfr,
		pfr: pfr,
		Phi: Phi,
		phi: phi,
		phiv: phiv,
		phmmat: phmmat,
		phone: phone,
		Pi: Pi,
		pi: pi,
		pitchfork: pitchfork,
		piv: piv,
		planck: planck,
		planckh: planckh,
		plankv: plankv,
		plusacir: plusacir,
		plusb: plusb,
		pluscir: pluscir,
		plus: plus,
		plusdo: plusdo,
		plusdu: plusdu,
		pluse: pluse,
		PlusMinus: PlusMinus,
		plusmn: plusmn,
		plussim: plussim,
		plustwo: plustwo,
		pm: pm,
		Poincareplane: Poincareplane,
		pointint: pointint,
		popf: popf,
		Popf: Popf,
		pound: pound,
		prap: prap,
		Pr: Pr,
		pr: pr,
		prcue: prcue,
		precapprox: precapprox,
		prec: prec,
		preccurlyeq: preccurlyeq,
		Precedes: Precedes,
		PrecedesEqual: PrecedesEqual,
		PrecedesSlantEqual: PrecedesSlantEqual,
		PrecedesTilde: PrecedesTilde,
		preceq: preceq,
		precnapprox: precnapprox,
		precneqq: precneqq,
		precnsim: precnsim,
		pre: pre$1,
		prE: prE,
		precsim: precsim,
		prime: prime,
		Prime: Prime,
		primes: primes,
		prnap: prnap,
		prnE: prnE,
		prnsim: prnsim,
		prod: prod,
		Product: Product,
		profalar: profalar,
		profline: profline,
		profsurf: profsurf,
		prop: prop,
		Proportional: Proportional,
		Proportion: Proportion,
		propto: propto,
		prsim: prsim,
		prurel: prurel,
		Pscr: Pscr,
		pscr: pscr,
		Psi: Psi,
		psi: psi,
		puncsp: puncsp,
		Qfr: Qfr,
		qfr: qfr,
		qint: qint,
		qopf: qopf,
		Qopf: Qopf,
		qprime: qprime,
		Qscr: Qscr,
		qscr: qscr,
		quaternions: quaternions,
		quatint: quatint,
		quest: quest,
		questeq: questeq,
		quot: quot,
		QUOT: QUOT,
		rAarr: rAarr,
		race: race,
		Racute: Racute,
		racute: racute,
		radic: radic,
		raemptyv: raemptyv,
		rang: rang,
		Rang: Rang,
		rangd: rangd,
		range: range,
		rangle: rangle,
		raquo: raquo,
		rarrap: rarrap,
		rarrb: rarrb,
		rarrbfs: rarrbfs,
		rarrc: rarrc,
		rarr: rarr,
		Rarr: Rarr,
		rArr: rArr,
		rarrfs: rarrfs,
		rarrhk: rarrhk,
		rarrlp: rarrlp,
		rarrpl: rarrpl,
		rarrsim: rarrsim,
		Rarrtl: Rarrtl,
		rarrtl: rarrtl,
		rarrw: rarrw,
		ratail: ratail,
		rAtail: rAtail,
		ratio: ratio,
		rationals: rationals,
		rbarr: rbarr,
		rBarr: rBarr,
		RBarr: RBarr,
		rbbrk: rbbrk,
		rbrace: rbrace,
		rbrack: rbrack,
		rbrke: rbrke,
		rbrksld: rbrksld,
		rbrkslu: rbrkslu,
		Rcaron: Rcaron,
		rcaron: rcaron,
		Rcedil: Rcedil,
		rcedil: rcedil,
		rceil: rceil,
		rcub: rcub,
		Rcy: Rcy,
		rcy: rcy,
		rdca: rdca,
		rdldhar: rdldhar,
		rdquo: rdquo,
		rdquor: rdquor,
		rdsh: rdsh,
		real: real,
		realine: realine,
		realpart: realpart,
		reals: reals,
		Re: Re$1,
		rect: rect,
		reg: reg,
		REG: REG,
		ReverseElement: ReverseElement,
		ReverseEquilibrium: ReverseEquilibrium,
		ReverseUpEquilibrium: ReverseUpEquilibrium,
		rfisht: rfisht,
		rfloor: rfloor,
		rfr: rfr,
		Rfr: Rfr,
		rHar: rHar,
		rhard: rhard,
		rharu: rharu,
		rharul: rharul,
		Rho: Rho,
		rho: rho,
		rhov: rhov,
		RightAngleBracket: RightAngleBracket,
		RightArrowBar: RightArrowBar,
		rightarrow: rightarrow,
		RightArrow: RightArrow,
		Rightarrow: Rightarrow,
		RightArrowLeftArrow: RightArrowLeftArrow,
		rightarrowtail: rightarrowtail,
		RightCeiling: RightCeiling,
		RightDoubleBracket: RightDoubleBracket,
		RightDownTeeVector: RightDownTeeVector,
		RightDownVectorBar: RightDownVectorBar,
		RightDownVector: RightDownVector,
		RightFloor: RightFloor,
		rightharpoondown: rightharpoondown,
		rightharpoonup: rightharpoonup,
		rightleftarrows: rightleftarrows,
		rightleftharpoons: rightleftharpoons,
		rightrightarrows: rightrightarrows,
		rightsquigarrow: rightsquigarrow,
		RightTeeArrow: RightTeeArrow,
		RightTee: RightTee,
		RightTeeVector: RightTeeVector,
		rightthreetimes: rightthreetimes,
		RightTriangleBar: RightTriangleBar,
		RightTriangle: RightTriangle,
		RightTriangleEqual: RightTriangleEqual,
		RightUpDownVector: RightUpDownVector,
		RightUpTeeVector: RightUpTeeVector,
		RightUpVectorBar: RightUpVectorBar,
		RightUpVector: RightUpVector,
		RightVectorBar: RightVectorBar,
		RightVector: RightVector,
		ring: ring,
		risingdotseq: risingdotseq,
		rlarr: rlarr,
		rlhar: rlhar,
		rlm: rlm,
		rmoustache: rmoustache,
		rmoust: rmoust,
		rnmid: rnmid,
		roang: roang,
		roarr: roarr,
		robrk: robrk,
		ropar: ropar,
		ropf: ropf,
		Ropf: Ropf,
		roplus: roplus,
		rotimes: rotimes,
		RoundImplies: RoundImplies,
		rpar: rpar,
		rpargt: rpargt,
		rppolint: rppolint,
		rrarr: rrarr,
		Rrightarrow: Rrightarrow,
		rsaquo: rsaquo,
		rscr: rscr,
		Rscr: Rscr,
		rsh: rsh$1,
		Rsh: Rsh,
		rsqb: rsqb,
		rsquo: rsquo,
		rsquor: rsquor,
		rthree: rthree,
		rtimes: rtimes,
		rtri: rtri,
		rtrie: rtrie,
		rtrif: rtrif,
		rtriltri: rtriltri,
		RuleDelayed: RuleDelayed,
		ruluhar: ruluhar,
		rx: rx,
		Sacute: Sacute,
		sacute: sacute,
		sbquo: sbquo,
		scap: scap,
		Scaron: Scaron,
		scaron: scaron,
		Sc: Sc$1,
		sc: sc$1,
		sccue: sccue,
		sce: sce,
		scE: scE,
		Scedil: Scedil,
		scedil: scedil,
		Scirc: Scirc,
		scirc: scirc,
		scnap: scnap,
		scnE: scnE,
		scnsim: scnsim,
		scpolint: scpolint,
		scsim: scsim,
		Scy: Scy,
		scy: scy,
		sdotb: sdotb,
		sdot: sdot,
		sdote: sdote,
		searhk: searhk,
		searr: searr,
		seArr: seArr,
		searrow: searrow,
		sect: sect,
		semi: semi,
		seswar: seswar,
		setminus: setminus,
		setmn: setmn,
		sext: sext,
		Sfr: Sfr,
		sfr: sfr,
		sfrown: sfrown,
		sharp: sharp,
		SHCHcy: SHCHcy,
		shchcy: shchcy,
		SHcy: SHcy,
		shcy: shcy,
		ShortDownArrow: ShortDownArrow,
		ShortLeftArrow: ShortLeftArrow,
		shortmid: shortmid,
		shortparallel: shortparallel,
		ShortRightArrow: ShortRightArrow,
		ShortUpArrow: ShortUpArrow,
		shy: shy,
		Sigma: Sigma,
		sigma: sigma,
		sigmaf: sigmaf,
		sigmav: sigmav,
		sim: sim,
		simdot: simdot,
		sime: sime,
		simeq: simeq,
		simg: simg,
		simgE: simgE,
		siml: siml,
		simlE: simlE,
		simne: simne,
		simplus: simplus,
		simrarr: simrarr,
		slarr: slarr,
		SmallCircle: SmallCircle,
		smallsetminus: smallsetminus,
		smashp: smashp,
		smeparsl: smeparsl,
		smid: smid,
		smile: smile,
		smt: smt,
		smte: smte,
		smtes: smtes,
		SOFTcy: SOFTcy,
		softcy: softcy,
		solbar: solbar,
		solb: solb,
		sol: sol,
		Sopf: Sopf,
		sopf: sopf,
		spades: spades,
		spadesuit: spadesuit,
		spar: spar,
		sqcap: sqcap,
		sqcaps: sqcaps,
		sqcup: sqcup,
		sqcups: sqcups,
		Sqrt: Sqrt,
		sqsub: sqsub,
		sqsube: sqsube,
		sqsubset: sqsubset,
		sqsubseteq: sqsubseteq,
		sqsup: sqsup,
		sqsupe: sqsupe,
		sqsupset: sqsupset,
		sqsupseteq: sqsupseteq,
		square: square,
		Square: Square,
		SquareIntersection: SquareIntersection,
		SquareSubset: SquareSubset,
		SquareSubsetEqual: SquareSubsetEqual,
		SquareSuperset: SquareSuperset,
		SquareSupersetEqual: SquareSupersetEqual,
		SquareUnion: SquareUnion,
		squarf: squarf,
		squ: squ,
		squf: squf,
		srarr: srarr,
		Sscr: Sscr,
		sscr: sscr,
		ssetmn: ssetmn,
		ssmile: ssmile,
		sstarf: sstarf,
		Star: Star,
		star: star,
		starf: starf,
		straightepsilon: straightepsilon,
		straightphi: straightphi,
		strns: strns,
		sub: sub,
		Sub: Sub,
		subdot: subdot,
		subE: subE,
		sube: sube,
		subedot: subedot,
		submult: submult,
		subnE: subnE,
		subne: subne,
		subplus: subplus,
		subrarr: subrarr,
		subset: subset,
		Subset: Subset,
		subseteq: subseteq,
		subseteqq: subseteqq,
		SubsetEqual: SubsetEqual,
		subsetneq: subsetneq,
		subsetneqq: subsetneqq,
		subsim: subsim,
		subsub: subsub,
		subsup: subsup,
		succapprox: succapprox,
		succ: succ,
		succcurlyeq: succcurlyeq,
		Succeeds: Succeeds,
		SucceedsEqual: SucceedsEqual,
		SucceedsSlantEqual: SucceedsSlantEqual,
		SucceedsTilde: SucceedsTilde,
		succeq: succeq,
		succnapprox: succnapprox,
		succneqq: succneqq,
		succnsim: succnsim,
		succsim: succsim,
		SuchThat: SuchThat,
		sum: sum,
		Sum: Sum,
		sung: sung,
		sup1: sup1,
		sup2: sup2,
		sup3: sup3,
		sup: sup,
		Sup: Sup,
		supdot: supdot,
		supdsub: supdsub,
		supE: supE,
		supe: supe,
		supedot: supedot,
		Superset: Superset,
		SupersetEqual: SupersetEqual,
		suphsol: suphsol,
		suphsub: suphsub,
		suplarr: suplarr,
		supmult: supmult,
		supnE: supnE,
		supne: supne,
		supplus: supplus,
		supset: supset,
		Supset: Supset,
		supseteq: supseteq,
		supseteqq: supseteqq,
		supsetneq: supsetneq,
		supsetneqq: supsetneqq,
		supsim: supsim,
		supsub: supsub,
		supsup: supsup,
		swarhk: swarhk,
		swarr: swarr,
		swArr: swArr,
		swarrow: swarrow,
		swnwar: swnwar,
		szlig: szlig,
		Tab: Tab,
		target: target,
		Tau: Tau,
		tau: tau,
		tbrk: tbrk,
		Tcaron: Tcaron,
		tcaron: tcaron,
		Tcedil: Tcedil,
		tcedil: tcedil,
		Tcy: Tcy,
		tcy: tcy,
		tdot: tdot,
		telrec: telrec,
		Tfr: Tfr,
		tfr: tfr,
		there4: there4,
		therefore: therefore,
		Therefore: Therefore,
		Theta: Theta,
		theta: theta,
		thetasym: thetasym,
		thetav: thetav,
		thickapprox: thickapprox,
		thicksim: thicksim,
		ThickSpace: ThickSpace,
		ThinSpace: ThinSpace,
		thinsp: thinsp,
		thkap: thkap,
		thksim: thksim,
		THORN: THORN,
		thorn: thorn,
		tilde: tilde,
		Tilde: Tilde,
		TildeEqual: TildeEqual,
		TildeFullEqual: TildeFullEqual,
		TildeTilde: TildeTilde,
		timesbar: timesbar,
		timesb: timesb,
		times: times,
		timesd: timesd,
		tint: tint,
		toea: toea,
		topbot: topbot,
		topcir: topcir,
		top: top$1,
		Topf: Topf,
		topf: topf,
		topfork: topfork,
		tosa: tosa,
		tprime: tprime,
		trade: trade,
		TRADE: TRADE,
		triangle: triangle,
		triangledown: triangledown,
		triangleleft: triangleleft,
		trianglelefteq: trianglelefteq,
		triangleq: triangleq,
		triangleright: triangleright,
		trianglerighteq: trianglerighteq,
		tridot: tridot,
		trie: trie,
		triminus: triminus,
		TripleDot: TripleDot,
		triplus: triplus,
		trisb: trisb,
		tritime: tritime,
		trpezium: trpezium,
		Tscr: Tscr,
		tscr: tscr,
		TScy: TScy,
		tscy: tscy,
		TSHcy: TSHcy,
		tshcy: tshcy,
		Tstrok: Tstrok,
		tstrok: tstrok,
		twixt: twixt,
		twoheadleftarrow: twoheadleftarrow,
		twoheadrightarrow: twoheadrightarrow,
		Uacute: Uacute,
		uacute: uacute,
		uarr: uarr,
		Uarr: Uarr,
		uArr: uArr,
		Uarrocir: Uarrocir,
		Ubrcy: Ubrcy,
		ubrcy: ubrcy,
		Ubreve: Ubreve,
		ubreve: ubreve,
		Ucirc: Ucirc,
		ucirc: ucirc,
		Ucy: Ucy,
		ucy: ucy,
		udarr: udarr,
		Udblac: Udblac,
		udblac: udblac,
		udhar: udhar,
		ufisht: ufisht,
		Ufr: Ufr,
		ufr: ufr,
		Ugrave: Ugrave,
		ugrave: ugrave,
		uHar: uHar,
		uharl: uharl,
		uharr: uharr,
		uhblk: uhblk,
		ulcorn: ulcorn,
		ulcorner: ulcorner,
		ulcrop: ulcrop,
		ultri: ultri,
		Umacr: Umacr,
		umacr: umacr,
		uml: uml,
		UnderBar: UnderBar,
		UnderBrace: UnderBrace,
		UnderBracket: UnderBracket,
		UnderParenthesis: UnderParenthesis,
		Union: Union,
		UnionPlus: UnionPlus,
		Uogon: Uogon,
		uogon: uogon,
		Uopf: Uopf,
		uopf: uopf,
		UpArrowBar: UpArrowBar,
		uparrow: uparrow,
		UpArrow: UpArrow,
		Uparrow: Uparrow,
		UpArrowDownArrow: UpArrowDownArrow,
		updownarrow: updownarrow,
		UpDownArrow: UpDownArrow,
		Updownarrow: Updownarrow,
		UpEquilibrium: UpEquilibrium,
		upharpoonleft: upharpoonleft,
		upharpoonright: upharpoonright,
		uplus: uplus,
		UpperLeftArrow: UpperLeftArrow,
		UpperRightArrow: UpperRightArrow,
		upsi: upsi,
		Upsi: Upsi,
		upsih: upsih,
		Upsilon: Upsilon,
		upsilon: upsilon,
		UpTeeArrow: UpTeeArrow,
		UpTee: UpTee,
		upuparrows: upuparrows,
		urcorn: urcorn,
		urcorner: urcorner,
		urcrop: urcrop,
		Uring: Uring,
		uring: uring,
		urtri: urtri,
		Uscr: Uscr,
		uscr: uscr,
		utdot: utdot,
		Utilde: Utilde,
		utilde: utilde,
		utri: utri,
		utrif: utrif,
		uuarr: uuarr,
		Uuml: Uuml,
		uuml: uuml,
		uwangle: uwangle,
		vangrt: vangrt,
		varepsilon: varepsilon,
		varkappa: varkappa,
		varnothing: varnothing,
		varphi: varphi,
		varpi: varpi,
		varpropto: varpropto,
		varr: varr,
		vArr: vArr,
		varrho: varrho,
		varsigma: varsigma,
		varsubsetneq: varsubsetneq,
		varsubsetneqq: varsubsetneqq,
		varsupsetneq: varsupsetneq,
		varsupsetneqq: varsupsetneqq,
		vartheta: vartheta,
		vartriangleleft: vartriangleleft,
		vartriangleright: vartriangleright,
		vBar: vBar,
		Vbar: Vbar,
		vBarv: vBarv,
		Vcy: Vcy,
		vcy: vcy,
		vdash: vdash,
		vDash: vDash,
		Vdash: Vdash,
		VDash: VDash,
		Vdashl: Vdashl,
		veebar: veebar,
		vee: vee,
		Vee: Vee,
		veeeq: veeeq,
		vellip: vellip,
		verbar: verbar,
		Verbar: Verbar,
		vert: vert,
		Vert: Vert,
		VerticalBar: VerticalBar,
		VerticalLine: VerticalLine,
		VerticalSeparator: VerticalSeparator,
		VerticalTilde: VerticalTilde,
		VeryThinSpace: VeryThinSpace,
		Vfr: Vfr,
		vfr: vfr,
		vltri: vltri,
		vnsub: vnsub,
		vnsup: vnsup,
		Vopf: Vopf,
		vopf: vopf,
		vprop: vprop,
		vrtri: vrtri,
		Vscr: Vscr,
		vscr: vscr,
		vsubnE: vsubnE,
		vsubne: vsubne,
		vsupnE: vsupnE,
		vsupne: vsupne,
		Vvdash: Vvdash,
		vzigzag: vzigzag,
		Wcirc: Wcirc,
		wcirc: wcirc,
		wedbar: wedbar,
		wedge: wedge,
		Wedge: Wedge,
		wedgeq: wedgeq,
		weierp: weierp,
		Wfr: Wfr,
		wfr: wfr,
		Wopf: Wopf,
		wopf: wopf,
		wp: wp,
		wr: wr,
		wreath: wreath,
		Wscr: Wscr,
		wscr: wscr,
		xcap: xcap,
		xcirc: xcirc,
		xcup: xcup,
		xdtri: xdtri,
		Xfr: Xfr,
		xfr: xfr,
		xharr: xharr,
		xhArr: xhArr,
		Xi: Xi,
		xi: xi,
		xlarr: xlarr,
		xlArr: xlArr,
		xmap: xmap,
		xnis: xnis,
		xodot: xodot,
		Xopf: Xopf,
		xopf: xopf,
		xoplus: xoplus,
		xotime: xotime,
		xrarr: xrarr,
		xrArr: xrArr,
		Xscr: Xscr,
		xscr: xscr,
		xsqcup: xsqcup,
		xuplus: xuplus,
		xutri: xutri,
		xvee: xvee,
		xwedge: xwedge,
		Yacute: Yacute,
		yacute: yacute,
		YAcy: YAcy,
		yacy: yacy,
		Ycirc: Ycirc,
		ycirc: ycirc,
		Ycy: Ycy,
		ycy: ycy,
		yen: yen,
		Yfr: Yfr,
		yfr: yfr,
		YIcy: YIcy,
		yicy: yicy,
		Yopf: Yopf,
		yopf: yopf,
		Yscr: Yscr,
		yscr: yscr,
		YUcy: YUcy,
		yucy: yucy,
		yuml: yuml,
		Yuml: Yuml,
		Zacute: Zacute,
		zacute: zacute,
		Zcaron: Zcaron,
		zcaron: zcaron,
		Zcy: Zcy,
		zcy: zcy,
		Zdot: Zdot,
		zdot: zdot,
		zeetrf: zeetrf,
		ZeroWidthSpace: ZeroWidthSpace,
		Zeta: Zeta,
		zeta: zeta,
		zfr: zfr,
		Zfr: Zfr,
		ZHcy: ZHcy,
		zhcy: zhcy,
		zigrarr: zigrarr,
		zopf: zopf,
		Zopf: Zopf,
		Zscr: Zscr,
		zscr: zscr,
		zwj: zwj,
		zwnj: zwnj,
		"in": "∈",
		"Map": "⤅"
	};

	var entities$1 = /*#__PURE__*/Object.freeze({
		Aacute: Aacute,
		aacute: aacute,
		Abreve: Abreve,
		abreve: abreve,
		ac: ac$1,
		acd: acd,
		acE: acE,
		Acirc: Acirc,
		acirc: acirc,
		acute: acute,
		Acy: Acy,
		acy: acy,
		AElig: AElig,
		aelig: aelig,
		af: af$1,
		Afr: Afr,
		afr: afr,
		Agrave: Agrave,
		agrave: agrave,
		alefsym: alefsym,
		aleph: aleph,
		Alpha: Alpha,
		alpha: alpha,
		Amacr: Amacr,
		amacr: amacr,
		amalg: amalg,
		amp: amp,
		AMP: AMP,
		andand: andand,
		And: And,
		and: and,
		andd: andd,
		andslope: andslope,
		andv: andv,
		ang: ang,
		ange: ange,
		angle: angle,
		angmsdaa: angmsdaa,
		angmsdab: angmsdab,
		angmsdac: angmsdac,
		angmsdad: angmsdad,
		angmsdae: angmsdae,
		angmsdaf: angmsdaf,
		angmsdag: angmsdag,
		angmsdah: angmsdah,
		angmsd: angmsd,
		angrt: angrt,
		angrtvb: angrtvb,
		angrtvbd: angrtvbd,
		angsph: angsph,
		angst: angst,
		angzarr: angzarr,
		Aogon: Aogon,
		aogon: aogon,
		Aopf: Aopf,
		aopf: aopf,
		apacir: apacir,
		ap: ap,
		apE: apE,
		ape: ape,
		apid: apid,
		apos: apos,
		ApplyFunction: ApplyFunction,
		approx: approx,
		approxeq: approxeq,
		Aring: Aring,
		aring: aring,
		Ascr: Ascr,
		ascr: ascr,
		Assign: Assign,
		ast: ast,
		asymp: asymp,
		asympeq: asympeq,
		Atilde: Atilde,
		atilde: atilde,
		Auml: Auml,
		auml: auml,
		awconint: awconint,
		awint: awint,
		backcong: backcong,
		backepsilon: backepsilon,
		backprime: backprime,
		backsim: backsim,
		backsimeq: backsimeq,
		Backslash: Backslash,
		Barv: Barv,
		barvee: barvee,
		barwed: barwed,
		Barwed: Barwed,
		barwedge: barwedge,
		bbrk: bbrk,
		bbrktbrk: bbrktbrk,
		bcong: bcong,
		Bcy: Bcy,
		bcy: bcy,
		bdquo: bdquo,
		becaus: becaus,
		because: because,
		Because: Because,
		bemptyv: bemptyv,
		bepsi: bepsi,
		bernou: bernou,
		Bernoullis: Bernoullis,
		Beta: Beta,
		beta: beta,
		beth: beth,
		between: between,
		Bfr: Bfr,
		bfr: bfr,
		bigcap: bigcap,
		bigcirc: bigcirc,
		bigcup: bigcup,
		bigodot: bigodot,
		bigoplus: bigoplus,
		bigotimes: bigotimes,
		bigsqcup: bigsqcup,
		bigstar: bigstar,
		bigtriangledown: bigtriangledown,
		bigtriangleup: bigtriangleup,
		biguplus: biguplus,
		bigvee: bigvee,
		bigwedge: bigwedge,
		bkarow: bkarow,
		blacklozenge: blacklozenge,
		blacksquare: blacksquare,
		blacktriangle: blacktriangle,
		blacktriangledown: blacktriangledown,
		blacktriangleleft: blacktriangleleft,
		blacktriangleright: blacktriangleright,
		blank: blank,
		blk12: blk12,
		blk14: blk14,
		blk34: blk34,
		block: block,
		bne: bne,
		bnequiv: bnequiv,
		bNot: bNot,
		bnot: bnot,
		Bopf: Bopf,
		bopf: bopf,
		bot: bot,
		bottom: bottom,
		bowtie: bowtie,
		boxbox: boxbox,
		boxdl: boxdl,
		boxdL: boxdL,
		boxDl: boxDl,
		boxDL: boxDL,
		boxdr: boxdr,
		boxdR: boxdR,
		boxDr: boxDr,
		boxDR: boxDR,
		boxh: boxh,
		boxH: boxH,
		boxhd: boxhd,
		boxHd: boxHd,
		boxhD: boxhD,
		boxHD: boxHD,
		boxhu: boxhu,
		boxHu: boxHu,
		boxhU: boxhU,
		boxHU: boxHU,
		boxminus: boxminus,
		boxplus: boxplus,
		boxtimes: boxtimes,
		boxul: boxul,
		boxuL: boxuL,
		boxUl: boxUl,
		boxUL: boxUL,
		boxur: boxur,
		boxuR: boxuR,
		boxUr: boxUr,
		boxUR: boxUR,
		boxv: boxv,
		boxV: boxV,
		boxvh: boxvh,
		boxvH: boxvH,
		boxVh: boxVh,
		boxVH: boxVH,
		boxvl: boxvl,
		boxvL: boxvL,
		boxVl: boxVl,
		boxVL: boxVL,
		boxvr: boxvr,
		boxvR: boxvR,
		boxVr: boxVr,
		boxVR: boxVR,
		bprime: bprime,
		breve: breve,
		Breve: Breve,
		brvbar: brvbar,
		bscr: bscr,
		Bscr: Bscr,
		bsemi: bsemi,
		bsim: bsim,
		bsime: bsime,
		bsolb: bsolb,
		bsol: bsol,
		bsolhsub: bsolhsub,
		bull: bull,
		bullet: bullet,
		bump: bump,
		bumpE: bumpE,
		bumpe: bumpe,
		Bumpeq: Bumpeq,
		bumpeq: bumpeq,
		Cacute: Cacute,
		cacute: cacute,
		capand: capand,
		capbrcup: capbrcup,
		capcap: capcap,
		cap: cap,
		Cap: Cap,
		capcup: capcup,
		capdot: capdot,
		CapitalDifferentialD: CapitalDifferentialD,
		caps: caps,
		caret: caret,
		caron: caron,
		Cayleys: Cayleys,
		ccaps: ccaps,
		Ccaron: Ccaron,
		ccaron: ccaron,
		Ccedil: Ccedil,
		ccedil: ccedil,
		Ccirc: Ccirc,
		ccirc: ccirc,
		Cconint: Cconint,
		ccups: ccups,
		ccupssm: ccupssm,
		Cdot: Cdot,
		cdot: cdot,
		cedil: cedil,
		Cedilla: Cedilla,
		cemptyv: cemptyv,
		cent: cent,
		centerdot: centerdot,
		CenterDot: CenterDot,
		cfr: cfr,
		Cfr: Cfr,
		CHcy: CHcy,
		chcy: chcy,
		check: check,
		checkmark: checkmark,
		Chi: Chi,
		chi: chi,
		circ: circ,
		circeq: circeq,
		circlearrowleft: circlearrowleft,
		circlearrowright: circlearrowright,
		circledast: circledast,
		circledcirc: circledcirc,
		circleddash: circleddash,
		CircleDot: CircleDot,
		circledR: circledR,
		circledS: circledS,
		CircleMinus: CircleMinus,
		CirclePlus: CirclePlus,
		CircleTimes: CircleTimes,
		cir: cir,
		cirE: cirE,
		cire: cire,
		cirfnint: cirfnint,
		cirmid: cirmid,
		cirscir: cirscir,
		ClockwiseContourIntegral: ClockwiseContourIntegral,
		CloseCurlyDoubleQuote: CloseCurlyDoubleQuote,
		CloseCurlyQuote: CloseCurlyQuote,
		clubs: clubs,
		clubsuit: clubsuit,
		colon: colon,
		Colon: Colon,
		Colone: Colone,
		colone: colone,
		coloneq: coloneq,
		comma: comma,
		commat: commat,
		comp: comp,
		compfn: compfn,
		complement: complement,
		complexes: complexes,
		cong: cong,
		congdot: congdot,
		Congruent: Congruent,
		conint: conint,
		Conint: Conint,
		ContourIntegral: ContourIntegral,
		copf: copf,
		Copf: Copf,
		coprod: coprod,
		Coproduct: Coproduct,
		copy: copy,
		COPY: COPY,
		copysr: copysr,
		CounterClockwiseContourIntegral: CounterClockwiseContourIntegral,
		crarr: crarr,
		cross: cross,
		Cross: Cross,
		Cscr: Cscr,
		cscr: cscr,
		csub: csub,
		csube: csube,
		csup: csup,
		csupe: csupe,
		ctdot: ctdot,
		cudarrl: cudarrl,
		cudarrr: cudarrr,
		cuepr: cuepr,
		cuesc: cuesc,
		cularr: cularr,
		cularrp: cularrp,
		cupbrcap: cupbrcap,
		cupcap: cupcap,
		CupCap: CupCap,
		cup: cup,
		Cup: Cup,
		cupcup: cupcup,
		cupdot: cupdot,
		cupor: cupor,
		cups: cups,
		curarr: curarr,
		curarrm: curarrm,
		curlyeqprec: curlyeqprec,
		curlyeqsucc: curlyeqsucc,
		curlyvee: curlyvee,
		curlywedge: curlywedge,
		curren: curren,
		curvearrowleft: curvearrowleft,
		curvearrowright: curvearrowright,
		cuvee: cuvee,
		cuwed: cuwed,
		cwconint: cwconint,
		cwint: cwint,
		cylcty: cylcty,
		dagger: dagger,
		Dagger: Dagger,
		daleth: daleth,
		darr: darr,
		Darr: Darr,
		dArr: dArr,
		dash: dash,
		Dashv: Dashv,
		dashv: dashv,
		dbkarow: dbkarow,
		dblac: dblac,
		Dcaron: Dcaron,
		dcaron: dcaron,
		Dcy: Dcy,
		dcy: dcy,
		ddagger: ddagger,
		ddarr: ddarr,
		DD: DD,
		dd: dd$1,
		DDotrahd: DDotrahd,
		ddotseq: ddotseq,
		deg: deg,
		Del: Del,
		Delta: Delta,
		delta: delta,
		demptyv: demptyv,
		dfisht: dfisht,
		Dfr: Dfr,
		dfr: dfr,
		dHar: dHar,
		dharl: dharl,
		dharr: dharr,
		DiacriticalAcute: DiacriticalAcute,
		DiacriticalDot: DiacriticalDot,
		DiacriticalDoubleAcute: DiacriticalDoubleAcute,
		DiacriticalGrave: DiacriticalGrave,
		DiacriticalTilde: DiacriticalTilde,
		diam: diam,
		diamond: diamond,
		Diamond: Diamond,
		diamondsuit: diamondsuit,
		diams: diams,
		die: die,
		DifferentialD: DifferentialD,
		digamma: digamma,
		disin: disin,
		div: div,
		divide: divide,
		divideontimes: divideontimes,
		divonx: divonx,
		DJcy: DJcy,
		djcy: djcy,
		dlcorn: dlcorn,
		dlcrop: dlcrop,
		dollar: dollar,
		Dopf: Dopf,
		dopf: dopf,
		Dot: Dot,
		dot: dot,
		DotDot: DotDot,
		doteq: doteq,
		doteqdot: doteqdot,
		DotEqual: DotEqual,
		dotminus: dotminus,
		dotplus: dotplus,
		dotsquare: dotsquare,
		doublebarwedge: doublebarwedge,
		DoubleContourIntegral: DoubleContourIntegral,
		DoubleDot: DoubleDot,
		DoubleDownArrow: DoubleDownArrow,
		DoubleLeftArrow: DoubleLeftArrow,
		DoubleLeftRightArrow: DoubleLeftRightArrow,
		DoubleLeftTee: DoubleLeftTee,
		DoubleLongLeftArrow: DoubleLongLeftArrow,
		DoubleLongLeftRightArrow: DoubleLongLeftRightArrow,
		DoubleLongRightArrow: DoubleLongRightArrow,
		DoubleRightArrow: DoubleRightArrow,
		DoubleRightTee: DoubleRightTee,
		DoubleUpArrow: DoubleUpArrow,
		DoubleUpDownArrow: DoubleUpDownArrow,
		DoubleVerticalBar: DoubleVerticalBar,
		DownArrowBar: DownArrowBar,
		downarrow: downarrow,
		DownArrow: DownArrow,
		Downarrow: Downarrow,
		DownArrowUpArrow: DownArrowUpArrow,
		DownBreve: DownBreve,
		downdownarrows: downdownarrows,
		downharpoonleft: downharpoonleft,
		downharpoonright: downharpoonright,
		DownLeftRightVector: DownLeftRightVector,
		DownLeftTeeVector: DownLeftTeeVector,
		DownLeftVectorBar: DownLeftVectorBar,
		DownLeftVector: DownLeftVector,
		DownRightTeeVector: DownRightTeeVector,
		DownRightVectorBar: DownRightVectorBar,
		DownRightVector: DownRightVector,
		DownTeeArrow: DownTeeArrow,
		DownTee: DownTee,
		drbkarow: drbkarow,
		drcorn: drcorn,
		drcrop: drcrop,
		Dscr: Dscr,
		dscr: dscr,
		DScy: DScy,
		dscy: dscy,
		dsol: dsol,
		Dstrok: Dstrok,
		dstrok: dstrok,
		dtdot: dtdot,
		dtri: dtri,
		dtrif: dtrif,
		duarr: duarr,
		duhar: duhar,
		dwangle: dwangle,
		DZcy: DZcy,
		dzcy: dzcy,
		dzigrarr: dzigrarr,
		Eacute: Eacute,
		eacute: eacute,
		easter: easter,
		Ecaron: Ecaron,
		ecaron: ecaron,
		Ecirc: Ecirc,
		ecirc: ecirc,
		ecir: ecir,
		ecolon: ecolon,
		Ecy: Ecy,
		ecy: ecy,
		eDDot: eDDot,
		Edot: Edot,
		edot: edot,
		eDot: eDot,
		ee: ee$1,
		efDot: efDot,
		Efr: Efr,
		efr: efr,
		eg: eg$1,
		Egrave: Egrave,
		egrave: egrave,
		egs: egs,
		egsdot: egsdot,
		el: el,
		Element: Element,
		elinters: elinters,
		ell: ell,
		els: els,
		elsdot: elsdot,
		Emacr: Emacr,
		emacr: emacr,
		empty: empty,
		emptyset: emptyset,
		EmptySmallSquare: EmptySmallSquare,
		emptyv: emptyv,
		EmptyVerySmallSquare: EmptyVerySmallSquare,
		emsp13: emsp13,
		emsp14: emsp14,
		emsp: emsp,
		ENG: ENG,
		eng: eng,
		ensp: ensp,
		Eogon: Eogon,
		eogon: eogon,
		Eopf: Eopf,
		eopf: eopf,
		epar: epar,
		eparsl: eparsl,
		eplus: eplus,
		epsi: epsi,
		Epsilon: Epsilon,
		epsilon: epsilon,
		epsiv: epsiv,
		eqcirc: eqcirc,
		eqcolon: eqcolon,
		eqsim: eqsim,
		eqslantgtr: eqslantgtr,
		eqslantless: eqslantless,
		Equal: Equal,
		equals: equals,
		EqualTilde: EqualTilde,
		equest: equest,
		Equilibrium: Equilibrium,
		equiv: equiv,
		equivDD: equivDD,
		eqvparsl: eqvparsl,
		erarr: erarr,
		erDot: erDot,
		escr: escr,
		Escr: Escr,
		esdot: esdot,
		Esim: Esim,
		esim: esim,
		Eta: Eta,
		eta: eta,
		ETH: ETH,
		eth: eth,
		Euml: Euml,
		euml: euml,
		euro: euro,
		excl: excl,
		exist: exist,
		Exists: Exists,
		expectation: expectation,
		exponentiale: exponentiale,
		ExponentialE: ExponentialE,
		fallingdotseq: fallingdotseq,
		Fcy: Fcy,
		fcy: fcy,
		female: female,
		ffilig: ffilig,
		fflig: fflig,
		ffllig: ffllig,
		Ffr: Ffr,
		ffr: ffr,
		filig: filig,
		FilledSmallSquare: FilledSmallSquare,
		FilledVerySmallSquare: FilledVerySmallSquare,
		fjlig: fjlig,
		flat: flat,
		fllig: fllig,
		fltns: fltns,
		fnof: fnof,
		Fopf: Fopf,
		fopf: fopf,
		forall: forall,
		ForAll: ForAll,
		fork: fork,
		forkv: forkv,
		Fouriertrf: Fouriertrf,
		fpartint: fpartint,
		frac12: frac12,
		frac13: frac13,
		frac14: frac14,
		frac15: frac15,
		frac16: frac16,
		frac18: frac18,
		frac23: frac23,
		frac25: frac25,
		frac34: frac34,
		frac35: frac35,
		frac38: frac38,
		frac45: frac45,
		frac56: frac56,
		frac58: frac58,
		frac78: frac78,
		frasl: frasl,
		frown: frown,
		fscr: fscr,
		Fscr: Fscr,
		gacute: gacute,
		Gamma: Gamma,
		gamma: gamma,
		Gammad: Gammad,
		gammad: gammad,
		gap: gap,
		Gbreve: Gbreve,
		gbreve: gbreve,
		Gcedil: Gcedil,
		Gcirc: Gcirc,
		gcirc: gcirc,
		Gcy: Gcy,
		gcy: gcy,
		Gdot: Gdot,
		gdot: gdot,
		ge: ge$1,
		gE: gE,
		gEl: gEl,
		gel: gel,
		geq: geq,
		geqq: geqq,
		geqslant: geqslant,
		gescc: gescc,
		ges: ges,
		gesdot: gesdot,
		gesdoto: gesdoto,
		gesdotol: gesdotol,
		gesl: gesl,
		gesles: gesles,
		Gfr: Gfr,
		gfr: gfr,
		gg: gg$1,
		Gg: Gg$1,
		ggg: ggg,
		gimel: gimel,
		GJcy: GJcy,
		gjcy: gjcy,
		gla: gla,
		gl: gl,
		glE: glE,
		glj: glj,
		gnap: gnap,
		gnapprox: gnapprox,
		gne: gne,
		gnE: gnE,
		gneq: gneq,
		gneqq: gneqq,
		gnsim: gnsim,
		Gopf: Gopf,
		gopf: gopf,
		grave: grave,
		GreaterEqual: GreaterEqual,
		GreaterEqualLess: GreaterEqualLess,
		GreaterFullEqual: GreaterFullEqual,
		GreaterGreater: GreaterGreater,
		GreaterLess: GreaterLess,
		GreaterSlantEqual: GreaterSlantEqual,
		GreaterTilde: GreaterTilde,
		Gscr: Gscr,
		gscr: gscr,
		gsim: gsim,
		gsime: gsime,
		gsiml: gsiml,
		gtcc: gtcc,
		gtcir: gtcir,
		gt: gt,
		GT: GT,
		Gt: Gt,
		gtdot: gtdot,
		gtlPar: gtlPar,
		gtquest: gtquest,
		gtrapprox: gtrapprox,
		gtrarr: gtrarr,
		gtrdot: gtrdot,
		gtreqless: gtreqless,
		gtreqqless: gtreqqless,
		gtrless: gtrless,
		gtrsim: gtrsim,
		gvertneqq: gvertneqq,
		gvnE: gvnE,
		Hacek: Hacek,
		hairsp: hairsp,
		half: half,
		hamilt: hamilt,
		HARDcy: HARDcy,
		hardcy: hardcy,
		harrcir: harrcir,
		harr: harr,
		hArr: hArr,
		harrw: harrw,
		Hat: Hat,
		hbar: hbar,
		Hcirc: Hcirc,
		hcirc: hcirc,
		hearts: hearts,
		heartsuit: heartsuit,
		hellip: hellip,
		hercon: hercon,
		hfr: hfr,
		Hfr: Hfr,
		HilbertSpace: HilbertSpace,
		hksearow: hksearow,
		hkswarow: hkswarow,
		hoarr: hoarr,
		homtht: homtht,
		hookleftarrow: hookleftarrow,
		hookrightarrow: hookrightarrow,
		hopf: hopf,
		Hopf: Hopf,
		horbar: horbar,
		HorizontalLine: HorizontalLine,
		hscr: hscr,
		Hscr: Hscr,
		hslash: hslash,
		Hstrok: Hstrok,
		hstrok: hstrok,
		HumpDownHump: HumpDownHump,
		HumpEqual: HumpEqual,
		hybull: hybull,
		hyphen: hyphen,
		Iacute: Iacute,
		iacute: iacute,
		ic: ic$1,
		Icirc: Icirc,
		icirc: icirc,
		Icy: Icy,
		icy: icy,
		Idot: Idot,
		IEcy: IEcy,
		iecy: iecy,
		iexcl: iexcl,
		iff: iff,
		ifr: ifr,
		Ifr: Ifr,
		Igrave: Igrave,
		igrave: igrave,
		ii: ii,
		iiiint: iiiint,
		iiint: iiint,
		iinfin: iinfin,
		iiota: iiota,
		IJlig: IJlig,
		ijlig: ijlig,
		Imacr: Imacr,
		imacr: imacr,
		image: image,
		ImaginaryI: ImaginaryI,
		imagline: imagline,
		imagpart: imagpart,
		imath: imath,
		Im: Im,
		imof: imof,
		imped: imped,
		Implies: Implies,
		incare: incare,
		infin: infin,
		infintie: infintie,
		inodot: inodot,
		intcal: intcal,
		int: int,
		Int: Int,
		integers: integers,
		Integral: Integral,
		intercal: intercal,
		Intersection: Intersection,
		intlarhk: intlarhk,
		intprod: intprod,
		InvisibleComma: InvisibleComma,
		InvisibleTimes: InvisibleTimes,
		IOcy: IOcy,
		iocy: iocy,
		Iogon: Iogon,
		iogon: iogon,
		Iopf: Iopf,
		iopf: iopf,
		Iota: Iota,
		iota: iota,
		iprod: iprod,
		iquest: iquest,
		iscr: iscr,
		Iscr: Iscr,
		isin: isin,
		isindot: isindot,
		isinE: isinE,
		isins: isins,
		isinsv: isinsv,
		isinv: isinv,
		it: it,
		Itilde: Itilde,
		itilde: itilde,
		Iukcy: Iukcy,
		iukcy: iukcy,
		Iuml: Iuml,
		iuml: iuml,
		Jcirc: Jcirc,
		jcirc: jcirc,
		Jcy: Jcy,
		jcy: jcy,
		Jfr: Jfr,
		jfr: jfr,
		jmath: jmath,
		Jopf: Jopf,
		jopf: jopf,
		Jscr: Jscr,
		jscr: jscr,
		Jsercy: Jsercy,
		jsercy: jsercy,
		Jukcy: Jukcy,
		jukcy: jukcy,
		Kappa: Kappa,
		kappa: kappa,
		kappav: kappav,
		Kcedil: Kcedil,
		kcedil: kcedil,
		Kcy: Kcy,
		kcy: kcy,
		Kfr: Kfr,
		kfr: kfr,
		kgreen: kgreen,
		KHcy: KHcy,
		khcy: khcy,
		KJcy: KJcy,
		kjcy: kjcy,
		Kopf: Kopf,
		kopf: kopf,
		Kscr: Kscr,
		kscr: kscr,
		lAarr: lAarr,
		Lacute: Lacute,
		lacute: lacute,
		laemptyv: laemptyv,
		lagran: lagran,
		Lambda: Lambda,
		lambda: lambda,
		lang: lang,
		Lang: Lang,
		langd: langd,
		langle: langle,
		lap: lap,
		Laplacetrf: Laplacetrf,
		laquo: laquo,
		larrb: larrb,
		larrbfs: larrbfs,
		larr: larr,
		Larr: Larr,
		lArr: lArr,
		larrfs: larrfs,
		larrhk: larrhk,
		larrlp: larrlp,
		larrpl: larrpl,
		larrsim: larrsim,
		larrtl: larrtl,
		latail: latail,
		lAtail: lAtail,
		lat: lat,
		late: late,
		lates: lates,
		lbarr: lbarr,
		lBarr: lBarr,
		lbbrk: lbbrk,
		lbrace: lbrace,
		lbrack: lbrack,
		lbrke: lbrke,
		lbrksld: lbrksld,
		lbrkslu: lbrkslu,
		Lcaron: Lcaron,
		lcaron: lcaron,
		Lcedil: Lcedil,
		lcedil: lcedil,
		lceil: lceil,
		lcub: lcub,
		Lcy: Lcy,
		lcy: lcy,
		ldca: ldca,
		ldquo: ldquo,
		ldquor: ldquor,
		ldrdhar: ldrdhar,
		ldrushar: ldrushar,
		ldsh: ldsh,
		le: le$1,
		lE: lE,
		LeftAngleBracket: LeftAngleBracket,
		LeftArrowBar: LeftArrowBar,
		leftarrow: leftarrow,
		LeftArrow: LeftArrow,
		Leftarrow: Leftarrow,
		LeftArrowRightArrow: LeftArrowRightArrow,
		leftarrowtail: leftarrowtail,
		LeftCeiling: LeftCeiling,
		LeftDoubleBracket: LeftDoubleBracket,
		LeftDownTeeVector: LeftDownTeeVector,
		LeftDownVectorBar: LeftDownVectorBar,
		LeftDownVector: LeftDownVector,
		LeftFloor: LeftFloor,
		leftharpoondown: leftharpoondown,
		leftharpoonup: leftharpoonup,
		leftleftarrows: leftleftarrows,
		leftrightarrow: leftrightarrow,
		LeftRightArrow: LeftRightArrow,
		Leftrightarrow: Leftrightarrow,
		leftrightarrows: leftrightarrows,
		leftrightharpoons: leftrightharpoons,
		leftrightsquigarrow: leftrightsquigarrow,
		LeftRightVector: LeftRightVector,
		LeftTeeArrow: LeftTeeArrow,
		LeftTee: LeftTee,
		LeftTeeVector: LeftTeeVector,
		leftthreetimes: leftthreetimes,
		LeftTriangleBar: LeftTriangleBar,
		LeftTriangle: LeftTriangle,
		LeftTriangleEqual: LeftTriangleEqual,
		LeftUpDownVector: LeftUpDownVector,
		LeftUpTeeVector: LeftUpTeeVector,
		LeftUpVectorBar: LeftUpVectorBar,
		LeftUpVector: LeftUpVector,
		LeftVectorBar: LeftVectorBar,
		LeftVector: LeftVector,
		lEg: lEg,
		leg: leg,
		leq: leq,
		leqq: leqq,
		leqslant: leqslant,
		lescc: lescc,
		les: les,
		lesdot: lesdot,
		lesdoto: lesdoto,
		lesdotor: lesdotor,
		lesg: lesg,
		lesges: lesges,
		lessapprox: lessapprox,
		lessdot: lessdot,
		lesseqgtr: lesseqgtr,
		lesseqqgtr: lesseqqgtr,
		LessEqualGreater: LessEqualGreater,
		LessFullEqual: LessFullEqual,
		LessGreater: LessGreater,
		lessgtr: lessgtr,
		LessLess: LessLess,
		lesssim: lesssim,
		LessSlantEqual: LessSlantEqual,
		LessTilde: LessTilde,
		lfisht: lfisht,
		lfloor: lfloor,
		Lfr: Lfr,
		lfr: lfr,
		lg: lg$1,
		lgE: lgE,
		lHar: lHar,
		lhard: lhard,
		lharu: lharu,
		lharul: lharul,
		lhblk: lhblk,
		LJcy: LJcy,
		ljcy: ljcy,
		llarr: llarr,
		ll: ll,
		Ll: Ll,
		llcorner: llcorner,
		Lleftarrow: Lleftarrow,
		llhard: llhard,
		lltri: lltri,
		Lmidot: Lmidot,
		lmidot: lmidot,
		lmoustache: lmoustache,
		lmoust: lmoust,
		lnap: lnap,
		lnapprox: lnapprox,
		lne: lne,
		lnE: lnE,
		lneq: lneq,
		lneqq: lneqq,
		lnsim: lnsim,
		loang: loang,
		loarr: loarr,
		lobrk: lobrk,
		longleftarrow: longleftarrow,
		LongLeftArrow: LongLeftArrow,
		Longleftarrow: Longleftarrow,
		longleftrightarrow: longleftrightarrow,
		LongLeftRightArrow: LongLeftRightArrow,
		Longleftrightarrow: Longleftrightarrow,
		longmapsto: longmapsto,
		longrightarrow: longrightarrow,
		LongRightArrow: LongRightArrow,
		Longrightarrow: Longrightarrow,
		looparrowleft: looparrowleft,
		looparrowright: looparrowright,
		lopar: lopar,
		Lopf: Lopf,
		lopf: lopf,
		loplus: loplus,
		lotimes: lotimes,
		lowast: lowast,
		lowbar: lowbar,
		LowerLeftArrow: LowerLeftArrow,
		LowerRightArrow: LowerRightArrow,
		loz: loz,
		lozenge: lozenge,
		lozf: lozf,
		lpar: lpar,
		lparlt: lparlt,
		lrarr: lrarr,
		lrcorner: lrcorner,
		lrhar: lrhar,
		lrhard: lrhard,
		lrm: lrm,
		lrtri: lrtri,
		lsaquo: lsaquo,
		lscr: lscr,
		Lscr: Lscr,
		lsh: lsh,
		Lsh: Lsh,
		lsim: lsim,
		lsime: lsime,
		lsimg: lsimg,
		lsqb: lsqb,
		lsquo: lsquo,
		lsquor: lsquor,
		Lstrok: Lstrok,
		lstrok: lstrok,
		ltcc: ltcc,
		ltcir: ltcir,
		lt: lt,
		LT: LT,
		Lt: Lt,
		ltdot: ltdot,
		lthree: lthree,
		ltimes: ltimes,
		ltlarr: ltlarr,
		ltquest: ltquest,
		ltri: ltri,
		ltrie: ltrie,
		ltrif: ltrif,
		ltrPar: ltrPar,
		lurdshar: lurdshar,
		luruhar: luruhar,
		lvertneqq: lvertneqq,
		lvnE: lvnE,
		macr: macr,
		male: male,
		malt: malt,
		maltese: maltese,
		map: map$1,
		mapsto: mapsto,
		mapstodown: mapstodown,
		mapstoleft: mapstoleft,
		mapstoup: mapstoup,
		marker: marker,
		mcomma: mcomma,
		Mcy: Mcy,
		mcy: mcy,
		mdash: mdash,
		mDDot: mDDot,
		measuredangle: measuredangle,
		MediumSpace: MediumSpace,
		Mellintrf: Mellintrf,
		Mfr: Mfr,
		mfr: mfr,
		mho: mho,
		micro: micro,
		midast: midast,
		midcir: midcir,
		mid: mid,
		middot: middot,
		minusb: minusb,
		minus: minus,
		minusd: minusd,
		minusdu: minusdu,
		MinusPlus: MinusPlus,
		mlcp: mlcp,
		mldr: mldr,
		mnplus: mnplus,
		models: models,
		Mopf: Mopf,
		mopf: mopf,
		mp: mp,
		mscr: mscr,
		Mscr: Mscr,
		mstpos: mstpos,
		Mu: Mu,
		mu: mu,
		multimap: multimap,
		mumap: mumap,
		nabla: nabla,
		Nacute: Nacute,
		nacute: nacute,
		nang: nang,
		nap: nap,
		napE: napE,
		napid: napid,
		napos: napos,
		napprox: napprox,
		natural: natural,
		naturals: naturals,
		natur: natur,
		nbsp: nbsp,
		nbump: nbump,
		nbumpe: nbumpe,
		ncap: ncap,
		Ncaron: Ncaron,
		ncaron: ncaron,
		Ncedil: Ncedil,
		ncedil: ncedil,
		ncong: ncong,
		ncongdot: ncongdot,
		ncup: ncup,
		Ncy: Ncy,
		ncy: ncy,
		ndash: ndash,
		nearhk: nearhk,
		nearr: nearr,
		neArr: neArr,
		nearrow: nearrow,
		ne: ne$1,
		nedot: nedot,
		NegativeMediumSpace: NegativeMediumSpace,
		NegativeThickSpace: NegativeThickSpace,
		NegativeThinSpace: NegativeThinSpace,
		NegativeVeryThinSpace: NegativeVeryThinSpace,
		nequiv: nequiv,
		nesear: nesear,
		nesim: nesim,
		NestedGreaterGreater: NestedGreaterGreater,
		NestedLessLess: NestedLessLess,
		NewLine: NewLine,
		nexist: nexist,
		nexists: nexists,
		Nfr: Nfr,
		nfr: nfr,
		ngE: ngE,
		nge: nge,
		ngeq: ngeq,
		ngeqq: ngeqq,
		ngeqslant: ngeqslant,
		nges: nges,
		nGg: nGg,
		ngsim: ngsim,
		nGt: nGt,
		ngt: ngt,
		ngtr: ngtr,
		nGtv: nGtv,
		nharr: nharr,
		nhArr: nhArr,
		nhpar: nhpar,
		ni: ni,
		nis: nis,
		nisd: nisd,
		niv: niv,
		NJcy: NJcy,
		njcy: njcy,
		nlarr: nlarr,
		nlArr: nlArr,
		nldr: nldr,
		nlE: nlE,
		nle: nle,
		nleftarrow: nleftarrow,
		nLeftarrow: nLeftarrow,
		nleftrightarrow: nleftrightarrow,
		nLeftrightarrow: nLeftrightarrow,
		nleq: nleq,
		nleqq: nleqq,
		nleqslant: nleqslant,
		nles: nles,
		nless: nless,
		nLl: nLl,
		nlsim: nlsim,
		nLt: nLt,
		nlt: nlt,
		nltri: nltri,
		nltrie: nltrie,
		nLtv: nLtv,
		nmid: nmid,
		NoBreak: NoBreak,
		NonBreakingSpace: NonBreakingSpace,
		nopf: nopf,
		Nopf: Nopf,
		Not: Not,
		not: not,
		NotCongruent: NotCongruent,
		NotCupCap: NotCupCap,
		NotDoubleVerticalBar: NotDoubleVerticalBar,
		NotElement: NotElement,
		NotEqual: NotEqual,
		NotEqualTilde: NotEqualTilde,
		NotExists: NotExists,
		NotGreater: NotGreater,
		NotGreaterEqual: NotGreaterEqual,
		NotGreaterFullEqual: NotGreaterFullEqual,
		NotGreaterGreater: NotGreaterGreater,
		NotGreaterLess: NotGreaterLess,
		NotGreaterSlantEqual: NotGreaterSlantEqual,
		NotGreaterTilde: NotGreaterTilde,
		NotHumpDownHump: NotHumpDownHump,
		NotHumpEqual: NotHumpEqual,
		notin: notin,
		notindot: notindot,
		notinE: notinE,
		notinva: notinva,
		notinvb: notinvb,
		notinvc: notinvc,
		NotLeftTriangleBar: NotLeftTriangleBar,
		NotLeftTriangle: NotLeftTriangle,
		NotLeftTriangleEqual: NotLeftTriangleEqual,
		NotLess: NotLess,
		NotLessEqual: NotLessEqual,
		NotLessGreater: NotLessGreater,
		NotLessLess: NotLessLess,
		NotLessSlantEqual: NotLessSlantEqual,
		NotLessTilde: NotLessTilde,
		NotNestedGreaterGreater: NotNestedGreaterGreater,
		NotNestedLessLess: NotNestedLessLess,
		notni: notni,
		notniva: notniva,
		notnivb: notnivb,
		notnivc: notnivc,
		NotPrecedes: NotPrecedes,
		NotPrecedesEqual: NotPrecedesEqual,
		NotPrecedesSlantEqual: NotPrecedesSlantEqual,
		NotReverseElement: NotReverseElement,
		NotRightTriangleBar: NotRightTriangleBar,
		NotRightTriangle: NotRightTriangle,
		NotRightTriangleEqual: NotRightTriangleEqual,
		NotSquareSubset: NotSquareSubset,
		NotSquareSubsetEqual: NotSquareSubsetEqual,
		NotSquareSuperset: NotSquareSuperset,
		NotSquareSupersetEqual: NotSquareSupersetEqual,
		NotSubset: NotSubset,
		NotSubsetEqual: NotSubsetEqual,
		NotSucceeds: NotSucceeds,
		NotSucceedsEqual: NotSucceedsEqual,
		NotSucceedsSlantEqual: NotSucceedsSlantEqual,
		NotSucceedsTilde: NotSucceedsTilde,
		NotSuperset: NotSuperset,
		NotSupersetEqual: NotSupersetEqual,
		NotTilde: NotTilde,
		NotTildeEqual: NotTildeEqual,
		NotTildeFullEqual: NotTildeFullEqual,
		NotTildeTilde: NotTildeTilde,
		NotVerticalBar: NotVerticalBar,
		nparallel: nparallel,
		npar: npar,
		nparsl: nparsl,
		npart: npart,
		npolint: npolint,
		npr: npr,
		nprcue: nprcue,
		nprec: nprec,
		npreceq: npreceq,
		npre: npre,
		nrarrc: nrarrc,
		nrarr: nrarr,
		nrArr: nrArr,
		nrarrw: nrarrw,
		nrightarrow: nrightarrow,
		nRightarrow: nRightarrow,
		nrtri: nrtri,
		nrtrie: nrtrie,
		nsc: nsc,
		nsccue: nsccue,
		nsce: nsce,
		Nscr: Nscr,
		nscr: nscr,
		nshortmid: nshortmid,
		nshortparallel: nshortparallel,
		nsim: nsim,
		nsime: nsime,
		nsimeq: nsimeq,
		nsmid: nsmid,
		nspar: nspar,
		nsqsube: nsqsube,
		nsqsupe: nsqsupe,
		nsub: nsub,
		nsubE: nsubE,
		nsube: nsube,
		nsubset: nsubset,
		nsubseteq: nsubseteq,
		nsubseteqq: nsubseteqq,
		nsucc: nsucc,
		nsucceq: nsucceq,
		nsup: nsup,
		nsupE: nsupE,
		nsupe: nsupe,
		nsupset: nsupset,
		nsupseteq: nsupseteq,
		nsupseteqq: nsupseteqq,
		ntgl: ntgl,
		Ntilde: Ntilde,
		ntilde: ntilde,
		ntlg: ntlg,
		ntriangleleft: ntriangleleft,
		ntrianglelefteq: ntrianglelefteq,
		ntriangleright: ntriangleright,
		ntrianglerighteq: ntrianglerighteq,
		Nu: Nu,
		nu: nu,
		num: num,
		numero: numero,
		numsp: numsp,
		nvap: nvap,
		nvdash: nvdash,
		nvDash: nvDash,
		nVdash: nVdash,
		nVDash: nVDash,
		nvge: nvge,
		nvgt: nvgt,
		nvHarr: nvHarr,
		nvinfin: nvinfin,
		nvlArr: nvlArr,
		nvle: nvle,
		nvlt: nvlt,
		nvltrie: nvltrie,
		nvrArr: nvrArr,
		nvrtrie: nvrtrie,
		nvsim: nvsim,
		nwarhk: nwarhk,
		nwarr: nwarr,
		nwArr: nwArr,
		nwarrow: nwarrow,
		nwnear: nwnear,
		Oacute: Oacute,
		oacute: oacute,
		oast: oast,
		Ocirc: Ocirc,
		ocirc: ocirc,
		ocir: ocir,
		Ocy: Ocy,
		ocy: ocy,
		odash: odash,
		Odblac: Odblac,
		odblac: odblac,
		odiv: odiv,
		odot: odot,
		odsold: odsold,
		OElig: OElig,
		oelig: oelig,
		ofcir: ofcir,
		Ofr: Ofr,
		ofr: ofr,
		ogon: ogon,
		Ograve: Ograve,
		ograve: ograve,
		ogt: ogt,
		ohbar: ohbar,
		ohm: ohm,
		oint: oint,
		olarr: olarr,
		olcir: olcir,
		olcross: olcross,
		oline: oline,
		olt: olt,
		Omacr: Omacr,
		omacr: omacr,
		Omega: Omega,
		omega: omega,
		Omicron: Omicron,
		omicron: omicron,
		omid: omid,
		ominus: ominus,
		Oopf: Oopf,
		oopf: oopf,
		opar: opar,
		OpenCurlyDoubleQuote: OpenCurlyDoubleQuote,
		OpenCurlyQuote: OpenCurlyQuote,
		operp: operp,
		oplus: oplus,
		orarr: orarr,
		Or: Or,
		or: or,
		ord: ord,
		order: order,
		orderof: orderof,
		ordf: ordf,
		ordm: ordm,
		origof: origof,
		oror: oror,
		orslope: orslope,
		orv: orv,
		oS: oS,
		Oscr: Oscr,
		oscr: oscr,
		Oslash: Oslash,
		oslash: oslash,
		osol: osol,
		Otilde: Otilde,
		otilde: otilde,
		otimesas: otimesas,
		Otimes: Otimes,
		otimes: otimes,
		Ouml: Ouml,
		ouml: ouml,
		ovbar: ovbar,
		OverBar: OverBar,
		OverBrace: OverBrace,
		OverBracket: OverBracket,
		OverParenthesis: OverParenthesis,
		para: para,
		parallel: parallel,
		par: par,
		parsim: parsim,
		parsl: parsl,
		part: part,
		PartialD: PartialD,
		Pcy: Pcy,
		pcy: pcy,
		percnt: percnt,
		period: period,
		permil: permil,
		perp: perp,
		pertenk: pertenk,
		Pfr: Pfr,
		pfr: pfr,
		Phi: Phi,
		phi: phi,
		phiv: phiv,
		phmmat: phmmat,
		phone: phone,
		Pi: Pi,
		pi: pi,
		pitchfork: pitchfork,
		piv: piv,
		planck: planck,
		planckh: planckh,
		plankv: plankv,
		plusacir: plusacir,
		plusb: plusb,
		pluscir: pluscir,
		plus: plus,
		plusdo: plusdo,
		plusdu: plusdu,
		pluse: pluse,
		PlusMinus: PlusMinus,
		plusmn: plusmn,
		plussim: plussim,
		plustwo: plustwo,
		pm: pm,
		Poincareplane: Poincareplane,
		pointint: pointint,
		popf: popf,
		Popf: Popf,
		pound: pound,
		prap: prap,
		Pr: Pr,
		pr: pr,
		prcue: prcue,
		precapprox: precapprox,
		prec: prec,
		preccurlyeq: preccurlyeq,
		Precedes: Precedes,
		PrecedesEqual: PrecedesEqual,
		PrecedesSlantEqual: PrecedesSlantEqual,
		PrecedesTilde: PrecedesTilde,
		preceq: preceq,
		precnapprox: precnapprox,
		precneqq: precneqq,
		precnsim: precnsim,
		pre: pre$1,
		prE: prE,
		precsim: precsim,
		prime: prime,
		Prime: Prime,
		primes: primes,
		prnap: prnap,
		prnE: prnE,
		prnsim: prnsim,
		prod: prod,
		Product: Product,
		profalar: profalar,
		profline: profline,
		profsurf: profsurf,
		prop: prop,
		Proportional: Proportional,
		Proportion: Proportion,
		propto: propto,
		prsim: prsim,
		prurel: prurel,
		Pscr: Pscr,
		pscr: pscr,
		Psi: Psi,
		psi: psi,
		puncsp: puncsp,
		Qfr: Qfr,
		qfr: qfr,
		qint: qint,
		qopf: qopf,
		Qopf: Qopf,
		qprime: qprime,
		Qscr: Qscr,
		qscr: qscr,
		quaternions: quaternions,
		quatint: quatint,
		quest: quest,
		questeq: questeq,
		quot: quot,
		QUOT: QUOT,
		rAarr: rAarr,
		race: race,
		Racute: Racute,
		racute: racute,
		radic: radic,
		raemptyv: raemptyv,
		rang: rang,
		Rang: Rang,
		rangd: rangd,
		range: range,
		rangle: rangle,
		raquo: raquo,
		rarrap: rarrap,
		rarrb: rarrb,
		rarrbfs: rarrbfs,
		rarrc: rarrc,
		rarr: rarr,
		Rarr: Rarr,
		rArr: rArr,
		rarrfs: rarrfs,
		rarrhk: rarrhk,
		rarrlp: rarrlp,
		rarrpl: rarrpl,
		rarrsim: rarrsim,
		Rarrtl: Rarrtl,
		rarrtl: rarrtl,
		rarrw: rarrw,
		ratail: ratail,
		rAtail: rAtail,
		ratio: ratio,
		rationals: rationals,
		rbarr: rbarr,
		rBarr: rBarr,
		RBarr: RBarr,
		rbbrk: rbbrk,
		rbrace: rbrace,
		rbrack: rbrack,
		rbrke: rbrke,
		rbrksld: rbrksld,
		rbrkslu: rbrkslu,
		Rcaron: Rcaron,
		rcaron: rcaron,
		Rcedil: Rcedil,
		rcedil: rcedil,
		rceil: rceil,
		rcub: rcub,
		Rcy: Rcy,
		rcy: rcy,
		rdca: rdca,
		rdldhar: rdldhar,
		rdquo: rdquo,
		rdquor: rdquor,
		rdsh: rdsh,
		real: real,
		realine: realine,
		realpart: realpart,
		reals: reals,
		Re: Re$1,
		rect: rect,
		reg: reg,
		REG: REG,
		ReverseElement: ReverseElement,
		ReverseEquilibrium: ReverseEquilibrium,
		ReverseUpEquilibrium: ReverseUpEquilibrium,
		rfisht: rfisht,
		rfloor: rfloor,
		rfr: rfr,
		Rfr: Rfr,
		rHar: rHar,
		rhard: rhard,
		rharu: rharu,
		rharul: rharul,
		Rho: Rho,
		rho: rho,
		rhov: rhov,
		RightAngleBracket: RightAngleBracket,
		RightArrowBar: RightArrowBar,
		rightarrow: rightarrow,
		RightArrow: RightArrow,
		Rightarrow: Rightarrow,
		RightArrowLeftArrow: RightArrowLeftArrow,
		rightarrowtail: rightarrowtail,
		RightCeiling: RightCeiling,
		RightDoubleBracket: RightDoubleBracket,
		RightDownTeeVector: RightDownTeeVector,
		RightDownVectorBar: RightDownVectorBar,
		RightDownVector: RightDownVector,
		RightFloor: RightFloor,
		rightharpoondown: rightharpoondown,
		rightharpoonup: rightharpoonup,
		rightleftarrows: rightleftarrows,
		rightleftharpoons: rightleftharpoons,
		rightrightarrows: rightrightarrows,
		rightsquigarrow: rightsquigarrow,
		RightTeeArrow: RightTeeArrow,
		RightTee: RightTee,
		RightTeeVector: RightTeeVector,
		rightthreetimes: rightthreetimes,
		RightTriangleBar: RightTriangleBar,
		RightTriangle: RightTriangle,
		RightTriangleEqual: RightTriangleEqual,
		RightUpDownVector: RightUpDownVector,
		RightUpTeeVector: RightUpTeeVector,
		RightUpVectorBar: RightUpVectorBar,
		RightUpVector: RightUpVector,
		RightVectorBar: RightVectorBar,
		RightVector: RightVector,
		ring: ring,
		risingdotseq: risingdotseq,
		rlarr: rlarr,
		rlhar: rlhar,
		rlm: rlm,
		rmoustache: rmoustache,
		rmoust: rmoust,
		rnmid: rnmid,
		roang: roang,
		roarr: roarr,
		robrk: robrk,
		ropar: ropar,
		ropf: ropf,
		Ropf: Ropf,
		roplus: roplus,
		rotimes: rotimes,
		RoundImplies: RoundImplies,
		rpar: rpar,
		rpargt: rpargt,
		rppolint: rppolint,
		rrarr: rrarr,
		Rrightarrow: Rrightarrow,
		rsaquo: rsaquo,
		rscr: rscr,
		Rscr: Rscr,
		rsh: rsh$1,
		Rsh: Rsh,
		rsqb: rsqb,
		rsquo: rsquo,
		rsquor: rsquor,
		rthree: rthree,
		rtimes: rtimes,
		rtri: rtri,
		rtrie: rtrie,
		rtrif: rtrif,
		rtriltri: rtriltri,
		RuleDelayed: RuleDelayed,
		ruluhar: ruluhar,
		rx: rx,
		Sacute: Sacute,
		sacute: sacute,
		sbquo: sbquo,
		scap: scap,
		Scaron: Scaron,
		scaron: scaron,
		Sc: Sc$1,
		sc: sc$1,
		sccue: sccue,
		sce: sce,
		scE: scE,
		Scedil: Scedil,
		scedil: scedil,
		Scirc: Scirc,
		scirc: scirc,
		scnap: scnap,
		scnE: scnE,
		scnsim: scnsim,
		scpolint: scpolint,
		scsim: scsim,
		Scy: Scy,
		scy: scy,
		sdotb: sdotb,
		sdot: sdot,
		sdote: sdote,
		searhk: searhk,
		searr: searr,
		seArr: seArr,
		searrow: searrow,
		sect: sect,
		semi: semi,
		seswar: seswar,
		setminus: setminus,
		setmn: setmn,
		sext: sext,
		Sfr: Sfr,
		sfr: sfr,
		sfrown: sfrown,
		sharp: sharp,
		SHCHcy: SHCHcy,
		shchcy: shchcy,
		SHcy: SHcy,
		shcy: shcy,
		ShortDownArrow: ShortDownArrow,
		ShortLeftArrow: ShortLeftArrow,
		shortmid: shortmid,
		shortparallel: shortparallel,
		ShortRightArrow: ShortRightArrow,
		ShortUpArrow: ShortUpArrow,
		shy: shy,
		Sigma: Sigma,
		sigma: sigma,
		sigmaf: sigmaf,
		sigmav: sigmav,
		sim: sim,
		simdot: simdot,
		sime: sime,
		simeq: simeq,
		simg: simg,
		simgE: simgE,
		siml: siml,
		simlE: simlE,
		simne: simne,
		simplus: simplus,
		simrarr: simrarr,
		slarr: slarr,
		SmallCircle: SmallCircle,
		smallsetminus: smallsetminus,
		smashp: smashp,
		smeparsl: smeparsl,
		smid: smid,
		smile: smile,
		smt: smt,
		smte: smte,
		smtes: smtes,
		SOFTcy: SOFTcy,
		softcy: softcy,
		solbar: solbar,
		solb: solb,
		sol: sol,
		Sopf: Sopf,
		sopf: sopf,
		spades: spades,
		spadesuit: spadesuit,
		spar: spar,
		sqcap: sqcap,
		sqcaps: sqcaps,
		sqcup: sqcup,
		sqcups: sqcups,
		Sqrt: Sqrt,
		sqsub: sqsub,
		sqsube: sqsube,
		sqsubset: sqsubset,
		sqsubseteq: sqsubseteq,
		sqsup: sqsup,
		sqsupe: sqsupe,
		sqsupset: sqsupset,
		sqsupseteq: sqsupseteq,
		square: square,
		Square: Square,
		SquareIntersection: SquareIntersection,
		SquareSubset: SquareSubset,
		SquareSubsetEqual: SquareSubsetEqual,
		SquareSuperset: SquareSuperset,
		SquareSupersetEqual: SquareSupersetEqual,
		SquareUnion: SquareUnion,
		squarf: squarf,
		squ: squ,
		squf: squf,
		srarr: srarr,
		Sscr: Sscr,
		sscr: sscr,
		ssetmn: ssetmn,
		ssmile: ssmile,
		sstarf: sstarf,
		Star: Star,
		star: star,
		starf: starf,
		straightepsilon: straightepsilon,
		straightphi: straightphi,
		strns: strns,
		sub: sub,
		Sub: Sub,
		subdot: subdot,
		subE: subE,
		sube: sube,
		subedot: subedot,
		submult: submult,
		subnE: subnE,
		subne: subne,
		subplus: subplus,
		subrarr: subrarr,
		subset: subset,
		Subset: Subset,
		subseteq: subseteq,
		subseteqq: subseteqq,
		SubsetEqual: SubsetEqual,
		subsetneq: subsetneq,
		subsetneqq: subsetneqq,
		subsim: subsim,
		subsub: subsub,
		subsup: subsup,
		succapprox: succapprox,
		succ: succ,
		succcurlyeq: succcurlyeq,
		Succeeds: Succeeds,
		SucceedsEqual: SucceedsEqual,
		SucceedsSlantEqual: SucceedsSlantEqual,
		SucceedsTilde: SucceedsTilde,
		succeq: succeq,
		succnapprox: succnapprox,
		succneqq: succneqq,
		succnsim: succnsim,
		succsim: succsim,
		SuchThat: SuchThat,
		sum: sum,
		Sum: Sum,
		sung: sung,
		sup1: sup1,
		sup2: sup2,
		sup3: sup3,
		sup: sup,
		Sup: Sup,
		supdot: supdot,
		supdsub: supdsub,
		supE: supE,
		supe: supe,
		supedot: supedot,
		Superset: Superset,
		SupersetEqual: SupersetEqual,
		suphsol: suphsol,
		suphsub: suphsub,
		suplarr: suplarr,
		supmult: supmult,
		supnE: supnE,
		supne: supne,
		supplus: supplus,
		supset: supset,
		Supset: Supset,
		supseteq: supseteq,
		supseteqq: supseteqq,
		supsetneq: supsetneq,
		supsetneqq: supsetneqq,
		supsim: supsim,
		supsub: supsub,
		supsup: supsup,
		swarhk: swarhk,
		swarr: swarr,
		swArr: swArr,
		swarrow: swarrow,
		swnwar: swnwar,
		szlig: szlig,
		Tab: Tab,
		target: target,
		Tau: Tau,
		tau: tau,
		tbrk: tbrk,
		Tcaron: Tcaron,
		tcaron: tcaron,
		Tcedil: Tcedil,
		tcedil: tcedil,
		Tcy: Tcy,
		tcy: tcy,
		tdot: tdot,
		telrec: telrec,
		Tfr: Tfr,
		tfr: tfr,
		there4: there4,
		therefore: therefore,
		Therefore: Therefore,
		Theta: Theta,
		theta: theta,
		thetasym: thetasym,
		thetav: thetav,
		thickapprox: thickapprox,
		thicksim: thicksim,
		ThickSpace: ThickSpace,
		ThinSpace: ThinSpace,
		thinsp: thinsp,
		thkap: thkap,
		thksim: thksim,
		THORN: THORN,
		thorn: thorn,
		tilde: tilde,
		Tilde: Tilde,
		TildeEqual: TildeEqual,
		TildeFullEqual: TildeFullEqual,
		TildeTilde: TildeTilde,
		timesbar: timesbar,
		timesb: timesb,
		times: times,
		timesd: timesd,
		tint: tint,
		toea: toea,
		topbot: topbot,
		topcir: topcir,
		top: top$1,
		Topf: Topf,
		topf: topf,
		topfork: topfork,
		tosa: tosa,
		tprime: tprime,
		trade: trade,
		TRADE: TRADE,
		triangle: triangle,
		triangledown: triangledown,
		triangleleft: triangleleft,
		trianglelefteq: trianglelefteq,
		triangleq: triangleq,
		triangleright: triangleright,
		trianglerighteq: trianglerighteq,
		tridot: tridot,
		trie: trie,
		triminus: triminus,
		TripleDot: TripleDot,
		triplus: triplus,
		trisb: trisb,
		tritime: tritime,
		trpezium: trpezium,
		Tscr: Tscr,
		tscr: tscr,
		TScy: TScy,
		tscy: tscy,
		TSHcy: TSHcy,
		tshcy: tshcy,
		Tstrok: Tstrok,
		tstrok: tstrok,
		twixt: twixt,
		twoheadleftarrow: twoheadleftarrow,
		twoheadrightarrow: twoheadrightarrow,
		Uacute: Uacute,
		uacute: uacute,
		uarr: uarr,
		Uarr: Uarr,
		uArr: uArr,
		Uarrocir: Uarrocir,
		Ubrcy: Ubrcy,
		ubrcy: ubrcy,
		Ubreve: Ubreve,
		ubreve: ubreve,
		Ucirc: Ucirc,
		ucirc: ucirc,
		Ucy: Ucy,
		ucy: ucy,
		udarr: udarr,
		Udblac: Udblac,
		udblac: udblac,
		udhar: udhar,
		ufisht: ufisht,
		Ufr: Ufr,
		ufr: ufr,
		Ugrave: Ugrave,
		ugrave: ugrave,
		uHar: uHar,
		uharl: uharl,
		uharr: uharr,
		uhblk: uhblk,
		ulcorn: ulcorn,
		ulcorner: ulcorner,
		ulcrop: ulcrop,
		ultri: ultri,
		Umacr: Umacr,
		umacr: umacr,
		uml: uml,
		UnderBar: UnderBar,
		UnderBrace: UnderBrace,
		UnderBracket: UnderBracket,
		UnderParenthesis: UnderParenthesis,
		Union: Union,
		UnionPlus: UnionPlus,
		Uogon: Uogon,
		uogon: uogon,
		Uopf: Uopf,
		uopf: uopf,
		UpArrowBar: UpArrowBar,
		uparrow: uparrow,
		UpArrow: UpArrow,
		Uparrow: Uparrow,
		UpArrowDownArrow: UpArrowDownArrow,
		updownarrow: updownarrow,
		UpDownArrow: UpDownArrow,
		Updownarrow: Updownarrow,
		UpEquilibrium: UpEquilibrium,
		upharpoonleft: upharpoonleft,
		upharpoonright: upharpoonright,
		uplus: uplus,
		UpperLeftArrow: UpperLeftArrow,
		UpperRightArrow: UpperRightArrow,
		upsi: upsi,
		Upsi: Upsi,
		upsih: upsih,
		Upsilon: Upsilon,
		upsilon: upsilon,
		UpTeeArrow: UpTeeArrow,
		UpTee: UpTee,
		upuparrows: upuparrows,
		urcorn: urcorn,
		urcorner: urcorner,
		urcrop: urcrop,
		Uring: Uring,
		uring: uring,
		urtri: urtri,
		Uscr: Uscr,
		uscr: uscr,
		utdot: utdot,
		Utilde: Utilde,
		utilde: utilde,
		utri: utri,
		utrif: utrif,
		uuarr: uuarr,
		Uuml: Uuml,
		uuml: uuml,
		uwangle: uwangle,
		vangrt: vangrt,
		varepsilon: varepsilon,
		varkappa: varkappa,
		varnothing: varnothing,
		varphi: varphi,
		varpi: varpi,
		varpropto: varpropto,
		varr: varr,
		vArr: vArr,
		varrho: varrho,
		varsigma: varsigma,
		varsubsetneq: varsubsetneq,
		varsubsetneqq: varsubsetneqq,
		varsupsetneq: varsupsetneq,
		varsupsetneqq: varsupsetneqq,
		vartheta: vartheta,
		vartriangleleft: vartriangleleft,
		vartriangleright: vartriangleright,
		vBar: vBar,
		Vbar: Vbar,
		vBarv: vBarv,
		Vcy: Vcy,
		vcy: vcy,
		vdash: vdash,
		vDash: vDash,
		Vdash: Vdash,
		VDash: VDash,
		Vdashl: Vdashl,
		veebar: veebar,
		vee: vee,
		Vee: Vee,
		veeeq: veeeq,
		vellip: vellip,
		verbar: verbar,
		Verbar: Verbar,
		vert: vert,
		Vert: Vert,
		VerticalBar: VerticalBar,
		VerticalLine: VerticalLine,
		VerticalSeparator: VerticalSeparator,
		VerticalTilde: VerticalTilde,
		VeryThinSpace: VeryThinSpace,
		Vfr: Vfr,
		vfr: vfr,
		vltri: vltri,
		vnsub: vnsub,
		vnsup: vnsup,
		Vopf: Vopf,
		vopf: vopf,
		vprop: vprop,
		vrtri: vrtri,
		Vscr: Vscr,
		vscr: vscr,
		vsubnE: vsubnE,
		vsubne: vsubne,
		vsupnE: vsupnE,
		vsupne: vsupne,
		Vvdash: Vvdash,
		vzigzag: vzigzag,
		Wcirc: Wcirc,
		wcirc: wcirc,
		wedbar: wedbar,
		wedge: wedge,
		Wedge: Wedge,
		wedgeq: wedgeq,
		weierp: weierp,
		Wfr: Wfr,
		wfr: wfr,
		Wopf: Wopf,
		wopf: wopf,
		wp: wp,
		wr: wr,
		wreath: wreath,
		Wscr: Wscr,
		wscr: wscr,
		xcap: xcap,
		xcirc: xcirc,
		xcup: xcup,
		xdtri: xdtri,
		Xfr: Xfr,
		xfr: xfr,
		xharr: xharr,
		xhArr: xhArr,
		Xi: Xi,
		xi: xi,
		xlarr: xlarr,
		xlArr: xlArr,
		xmap: xmap,
		xnis: xnis,
		xodot: xodot,
		Xopf: Xopf,
		xopf: xopf,
		xoplus: xoplus,
		xotime: xotime,
		xrarr: xrarr,
		xrArr: xrArr,
		Xscr: Xscr,
		xscr: xscr,
		xsqcup: xsqcup,
		xuplus: xuplus,
		xutri: xutri,
		xvee: xvee,
		xwedge: xwedge,
		Yacute: Yacute,
		yacute: yacute,
		YAcy: YAcy,
		yacy: yacy,
		Ycirc: Ycirc,
		ycirc: ycirc,
		Ycy: Ycy,
		ycy: ycy,
		yen: yen,
		Yfr: Yfr,
		yfr: yfr,
		YIcy: YIcy,
		yicy: yicy,
		Yopf: Yopf,
		yopf: yopf,
		Yscr: Yscr,
		yscr: yscr,
		YUcy: YUcy,
		yucy: yucy,
		yuml: yuml,
		Yuml: Yuml,
		Zacute: Zacute,
		zacute: zacute,
		Zcaron: Zcaron,
		zcaron: zcaron,
		Zcy: Zcy,
		zcy: zcy,
		Zdot: Zdot,
		zdot: zdot,
		zeetrf: zeetrf,
		ZeroWidthSpace: ZeroWidthSpace,
		Zeta: Zeta,
		zeta: zeta,
		zfr: zfr,
		Zfr: Zfr,
		ZHcy: ZHcy,
		zhcy: zhcy,
		zigrarr: zigrarr,
		zopf: zopf,
		Zopf: Zopf,
		Zscr: Zscr,
		zscr: zscr,
		zwj: zwj,
		zwnj: zwnj,
		default: entities
	});

	var Aacute$1 = "Á";
	var aacute$1 = "á";
	var Acirc$1 = "Â";
	var acirc$1 = "â";
	var acute$1 = "´";
	var AElig$1 = "Æ";
	var aelig$1 = "æ";
	var Agrave$1 = "À";
	var agrave$1 = "à";
	var amp$1 = "&";
	var AMP$1 = "&";
	var Aring$1 = "Å";
	var aring$1 = "å";
	var Atilde$1 = "Ã";
	var atilde$1 = "ã";
	var Auml$1 = "Ä";
	var auml$1 = "ä";
	var brvbar$1 = "¦";
	var Ccedil$1 = "Ç";
	var ccedil$1 = "ç";
	var cedil$1 = "¸";
	var cent$1 = "¢";
	var copy$1 = "©";
	var COPY$1 = "©";
	var curren$1 = "¤";
	var deg$1 = "°";
	var divide$1 = "÷";
	var Eacute$1 = "É";
	var eacute$1 = "é";
	var Ecirc$1 = "Ê";
	var ecirc$1 = "ê";
	var Egrave$1 = "È";
	var egrave$1 = "è";
	var ETH$1 = "Ð";
	var eth$1 = "ð";
	var Euml$1 = "Ë";
	var euml$1 = "ë";
	var frac12$1 = "½";
	var frac14$1 = "¼";
	var frac34$1 = "¾";
	var gt$1 = ">";
	var GT$1 = ">";
	var Iacute$1 = "Í";
	var iacute$1 = "í";
	var Icirc$1 = "Î";
	var icirc$1 = "î";
	var iexcl$1 = "¡";
	var Igrave$1 = "Ì";
	var igrave$1 = "ì";
	var iquest$1 = "¿";
	var Iuml$1 = "Ï";
	var iuml$1 = "ï";
	var laquo$1 = "«";
	var lt$1 = "<";
	var LT$1 = "<";
	var macr$1 = "¯";
	var micro$1 = "µ";
	var middot$1 = "·";
	var nbsp$1 = " ";
	var not$1 = "¬";
	var Ntilde$1 = "Ñ";
	var ntilde$1 = "ñ";
	var Oacute$1 = "Ó";
	var oacute$1 = "ó";
	var Ocirc$1 = "Ô";
	var ocirc$1 = "ô";
	var Ograve$1 = "Ò";
	var ograve$1 = "ò";
	var ordf$1 = "ª";
	var ordm$1 = "º";
	var Oslash$1 = "Ø";
	var oslash$1 = "ø";
	var Otilde$1 = "Õ";
	var otilde$1 = "õ";
	var Ouml$1 = "Ö";
	var ouml$1 = "ö";
	var para$1 = "¶";
	var plusmn$1 = "±";
	var pound$1 = "£";
	var quot$1 = "\"";
	var QUOT$1 = "\"";
	var raquo$1 = "»";
	var reg$1 = "®";
	var REG$1 = "®";
	var sect$1 = "§";
	var shy$1 = "­";
	var sup1$1 = "¹";
	var sup2$1 = "²";
	var sup3$1 = "³";
	var szlig$1 = "ß";
	var THORN$1 = "Þ";
	var thorn$1 = "þ";
	var times$1 = "×";
	var Uacute$1 = "Ú";
	var uacute$1 = "ú";
	var Ucirc$1 = "Û";
	var ucirc$1 = "û";
	var Ugrave$1 = "Ù";
	var ugrave$1 = "ù";
	var uml$1 = "¨";
	var Uuml$1 = "Ü";
	var uuml$1 = "ü";
	var Yacute$1 = "Ý";
	var yacute$1 = "ý";
	var yen$1 = "¥";
	var yuml$1 = "ÿ";
	var legacy = {
		Aacute: Aacute$1,
		aacute: aacute$1,
		Acirc: Acirc$1,
		acirc: acirc$1,
		acute: acute$1,
		AElig: AElig$1,
		aelig: aelig$1,
		Agrave: Agrave$1,
		agrave: agrave$1,
		amp: amp$1,
		AMP: AMP$1,
		Aring: Aring$1,
		aring: aring$1,
		Atilde: Atilde$1,
		atilde: atilde$1,
		Auml: Auml$1,
		auml: auml$1,
		brvbar: brvbar$1,
		Ccedil: Ccedil$1,
		ccedil: ccedil$1,
		cedil: cedil$1,
		cent: cent$1,
		copy: copy$1,
		COPY: COPY$1,
		curren: curren$1,
		deg: deg$1,
		divide: divide$1,
		Eacute: Eacute$1,
		eacute: eacute$1,
		Ecirc: Ecirc$1,
		ecirc: ecirc$1,
		Egrave: Egrave$1,
		egrave: egrave$1,
		ETH: ETH$1,
		eth: eth$1,
		Euml: Euml$1,
		euml: euml$1,
		frac12: frac12$1,
		frac14: frac14$1,
		frac34: frac34$1,
		gt: gt$1,
		GT: GT$1,
		Iacute: Iacute$1,
		iacute: iacute$1,
		Icirc: Icirc$1,
		icirc: icirc$1,
		iexcl: iexcl$1,
		Igrave: Igrave$1,
		igrave: igrave$1,
		iquest: iquest$1,
		Iuml: Iuml$1,
		iuml: iuml$1,
		laquo: laquo$1,
		lt: lt$1,
		LT: LT$1,
		macr: macr$1,
		micro: micro$1,
		middot: middot$1,
		nbsp: nbsp$1,
		not: not$1,
		Ntilde: Ntilde$1,
		ntilde: ntilde$1,
		Oacute: Oacute$1,
		oacute: oacute$1,
		Ocirc: Ocirc$1,
		ocirc: ocirc$1,
		Ograve: Ograve$1,
		ograve: ograve$1,
		ordf: ordf$1,
		ordm: ordm$1,
		Oslash: Oslash$1,
		oslash: oslash$1,
		Otilde: Otilde$1,
		otilde: otilde$1,
		Ouml: Ouml$1,
		ouml: ouml$1,
		para: para$1,
		plusmn: plusmn$1,
		pound: pound$1,
		quot: quot$1,
		QUOT: QUOT$1,
		raquo: raquo$1,
		reg: reg$1,
		REG: REG$1,
		sect: sect$1,
		shy: shy$1,
		sup1: sup1$1,
		sup2: sup2$1,
		sup3: sup3$1,
		szlig: szlig$1,
		THORN: THORN$1,
		thorn: thorn$1,
		times: times$1,
		Uacute: Uacute$1,
		uacute: uacute$1,
		Ucirc: Ucirc$1,
		ucirc: ucirc$1,
		Ugrave: Ugrave$1,
		ugrave: ugrave$1,
		uml: uml$1,
		Uuml: Uuml$1,
		uuml: uuml$1,
		Yacute: Yacute$1,
		yacute: yacute$1,
		yen: yen$1,
		yuml: yuml$1
	};

	var legacy$1 = /*#__PURE__*/Object.freeze({
		Aacute: Aacute$1,
		aacute: aacute$1,
		Acirc: Acirc$1,
		acirc: acirc$1,
		acute: acute$1,
		AElig: AElig$1,
		aelig: aelig$1,
		Agrave: Agrave$1,
		agrave: agrave$1,
		amp: amp$1,
		AMP: AMP$1,
		Aring: Aring$1,
		aring: aring$1,
		Atilde: Atilde$1,
		atilde: atilde$1,
		Auml: Auml$1,
		auml: auml$1,
		brvbar: brvbar$1,
		Ccedil: Ccedil$1,
		ccedil: ccedil$1,
		cedil: cedil$1,
		cent: cent$1,
		copy: copy$1,
		COPY: COPY$1,
		curren: curren$1,
		deg: deg$1,
		divide: divide$1,
		Eacute: Eacute$1,
		eacute: eacute$1,
		Ecirc: Ecirc$1,
		ecirc: ecirc$1,
		Egrave: Egrave$1,
		egrave: egrave$1,
		ETH: ETH$1,
		eth: eth$1,
		Euml: Euml$1,
		euml: euml$1,
		frac12: frac12$1,
		frac14: frac14$1,
		frac34: frac34$1,
		gt: gt$1,
		GT: GT$1,
		Iacute: Iacute$1,
		iacute: iacute$1,
		Icirc: Icirc$1,
		icirc: icirc$1,
		iexcl: iexcl$1,
		Igrave: Igrave$1,
		igrave: igrave$1,
		iquest: iquest$1,
		Iuml: Iuml$1,
		iuml: iuml$1,
		laquo: laquo$1,
		lt: lt$1,
		LT: LT$1,
		macr: macr$1,
		micro: micro$1,
		middot: middot$1,
		nbsp: nbsp$1,
		not: not$1,
		Ntilde: Ntilde$1,
		ntilde: ntilde$1,
		Oacute: Oacute$1,
		oacute: oacute$1,
		Ocirc: Ocirc$1,
		ocirc: ocirc$1,
		Ograve: Ograve$1,
		ograve: ograve$1,
		ordf: ordf$1,
		ordm: ordm$1,
		Oslash: Oslash$1,
		oslash: oslash$1,
		Otilde: Otilde$1,
		otilde: otilde$1,
		Ouml: Ouml$1,
		ouml: ouml$1,
		para: para$1,
		plusmn: plusmn$1,
		pound: pound$1,
		quot: quot$1,
		QUOT: QUOT$1,
		raquo: raquo$1,
		reg: reg$1,
		REG: REG$1,
		sect: sect$1,
		shy: shy$1,
		sup1: sup1$1,
		sup2: sup2$1,
		sup3: sup3$1,
		szlig: szlig$1,
		THORN: THORN$1,
		thorn: thorn$1,
		times: times$1,
		Uacute: Uacute$1,
		uacute: uacute$1,
		Ucirc: Ucirc$1,
		ucirc: ucirc$1,
		Ugrave: Ugrave$1,
		ugrave: ugrave$1,
		uml: uml$1,
		Uuml: Uuml$1,
		uuml: uuml$1,
		Yacute: Yacute$1,
		yacute: yacute$1,
		yen: yen$1,
		yuml: yuml$1,
		default: legacy
	});

	var amp$2 = "&";
	var apos$1 = "'";
	var gt$2 = ">";
	var lt$2 = "<";
	var quot$2 = "\"";
	var xml = {
		amp: amp$2,
		apos: apos$1,
		gt: gt$2,
		lt: lt$2,
		quot: quot$2
	};

	var xml$1 = /*#__PURE__*/Object.freeze({
		amp: amp$2,
		apos: apos$1,
		gt: gt$2,
		lt: lt$2,
		quot: quot$2,
		default: xml
	});

	var entityMap = getCjsExportFromNamespace(entities$1);

	var legacyMap = getCjsExportFromNamespace(legacy$1);

	var xmlMap = getCjsExportFromNamespace(xml$1);

	var Tokenizer_1 = Tokenizer;






	var i = 0;

	var TEXT                      = i++;
	var BEFORE_TAG_NAME           = i++; //after <
	var IN_TAG_NAME               = i++;
	var IN_SELF_CLOSING_TAG       = i++;
	var BEFORE_CLOSING_TAG_NAME   = i++;
	var IN_CLOSING_TAG_NAME       = i++;
	var AFTER_CLOSING_TAG_NAME    = i++;

	//attributes
	var BEFORE_ATTRIBUTE_NAME     = i++;
	var IN_ATTRIBUTE_NAME         = i++;
	var AFTER_ATTRIBUTE_NAME      = i++;
	var BEFORE_ATTRIBUTE_VALUE    = i++;
	var IN_ATTRIBUTE_VALUE_DQ     = i++; // "
	var IN_ATTRIBUTE_VALUE_SQ     = i++; // '
	var IN_ATTRIBUTE_VALUE_NQ     = i++;

	//declarations
	var BEFORE_DECLARATION        = i++; // !
	var IN_DECLARATION            = i++;

	//processing instructions
	var IN_PROCESSING_INSTRUCTION = i++; // ?

	//comments
	var BEFORE_COMMENT            = i++;
	var IN_COMMENT                = i++;
	var AFTER_COMMENT_1           = i++;
	var AFTER_COMMENT_2           = i++;

	//cdata
	var BEFORE_CDATA_1            = i++; // [
	var BEFORE_CDATA_2            = i++; // C
	var BEFORE_CDATA_3            = i++; // D
	var BEFORE_CDATA_4            = i++; // A
	var BEFORE_CDATA_5            = i++; // T
	var BEFORE_CDATA_6            = i++; // A
	var IN_CDATA                  = i++; // [
	var AFTER_CDATA_1             = i++; // ]
	var AFTER_CDATA_2             = i++; // ]

	//special tags
	var BEFORE_SPECIAL            = i++; //S
	var BEFORE_SPECIAL_END        = i++;   //S

	var BEFORE_SCRIPT_1           = i++; //C
	var BEFORE_SCRIPT_2           = i++; //R
	var BEFORE_SCRIPT_3           = i++; //I
	var BEFORE_SCRIPT_4           = i++; //P
	var BEFORE_SCRIPT_5           = i++; //T
	var AFTER_SCRIPT_1            = i++; //C
	var AFTER_SCRIPT_2            = i++; //R
	var AFTER_SCRIPT_3            = i++; //I
	var AFTER_SCRIPT_4            = i++; //P
	var AFTER_SCRIPT_5            = i++; //T

	var BEFORE_STYLE_1            = i++; //T
	var BEFORE_STYLE_2            = i++; //Y
	var BEFORE_STYLE_3            = i++; //L
	var BEFORE_STYLE_4            = i++; //E
	var AFTER_STYLE_1             = i++; //T
	var AFTER_STYLE_2             = i++; //Y
	var AFTER_STYLE_3             = i++; //L
	var AFTER_STYLE_4             = i++; //E

	var BEFORE_ENTITY             = i++; //&
	var BEFORE_NUMERIC_ENTITY     = i++; //#
	var IN_NAMED_ENTITY           = i++;
	var IN_NUMERIC_ENTITY         = i++;
	var IN_HEX_ENTITY             = i++; //X

	var j = 0;

	var SPECIAL_NONE              = j++;
	var SPECIAL_SCRIPT            = j++;
	var SPECIAL_STYLE             = j++;

	function whitespace(c){
		return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
	}

	function ifElseState(upper, SUCCESS, FAILURE){
		var lower = upper.toLowerCase();

		if(upper === lower){
			return function(c){
				if(c === lower){
					this._state = SUCCESS;
				} else {
					this._state = FAILURE;
					this._index--;
				}
			};
		} else {
			return function(c){
				if(c === lower || c === upper){
					this._state = SUCCESS;
				} else {
					this._state = FAILURE;
					this._index--;
				}
			};
		}
	}

	function consumeSpecialNameChar(upper, NEXT_STATE){
		var lower = upper.toLowerCase();

		return function(c){
			if(c === lower || c === upper){
				this._state = NEXT_STATE;
			} else {
				this._state = IN_TAG_NAME;
				this._index--; //consume the token again
			}
		};
	}

	function Tokenizer(options, cbs){
		this._state = TEXT;
		this._buffer = "";
		this._sectionStart = 0;
		this._index = 0;
		this._bufferOffset = 0; //chars removed from _buffer
		this._baseState = TEXT;
		this._special = SPECIAL_NONE;
		this._cbs = cbs;
		this._running = true;
		this._ended = false;
		this._xmlMode = !!(options && options.xmlMode);
		this._decodeEntities = !!(options && options.decodeEntities);
	}

	Tokenizer.prototype._stateText = function(c){
		if(c === "<"){
			if(this._index > this._sectionStart){
				this._cbs.ontext(this._getSection());
			}
			this._state = BEFORE_TAG_NAME;
			this._sectionStart = this._index;
		} else if(this._decodeEntities && this._special === SPECIAL_NONE && c === "&"){
			if(this._index > this._sectionStart){
				this._cbs.ontext(this._getSection());
			}
			this._baseState = TEXT;
			this._state = BEFORE_ENTITY;
			this._sectionStart = this._index;
		}
	};

	Tokenizer.prototype._stateBeforeTagName = function(c){
		if(c === "/"){
			this._state = BEFORE_CLOSING_TAG_NAME;
		} else if(c === "<"){
			this._cbs.ontext(this._getSection());
			this._sectionStart = this._index;
		} else if(c === ">" || this._special !== SPECIAL_NONE || whitespace(c)) {
			this._state = TEXT;
		} else if(c === "!"){
			this._state = BEFORE_DECLARATION;
			this._sectionStart = this._index + 1;
		} else if(c === "?"){
			this._state = IN_PROCESSING_INSTRUCTION;
			this._sectionStart = this._index + 1;
		} else {
			this._state = (!this._xmlMode && (c === "s" || c === "S")) ?
				BEFORE_SPECIAL : IN_TAG_NAME;
			this._sectionStart = this._index;
		}
	};

	Tokenizer.prototype._stateInTagName = function(c){
		if(c === "/" || c === ">" || whitespace(c)){
			this._emitToken("onopentagname");
			this._state = BEFORE_ATTRIBUTE_NAME;
			this._index--;
		}
	};

	Tokenizer.prototype._stateBeforeCloseingTagName = function(c){
		if(whitespace(c));
		else if(c === ">"){
			this._state = TEXT;
		} else if(this._special !== SPECIAL_NONE){
			if(c === "s" || c === "S"){
				this._state = BEFORE_SPECIAL_END;
			} else {
				this._state = TEXT;
				this._index--;
			}
		} else {
			this._state = IN_CLOSING_TAG_NAME;
			this._sectionStart = this._index;
		}
	};

	Tokenizer.prototype._stateInCloseingTagName = function(c){
		if(c === ">" || whitespace(c)){
			this._emitToken("onclosetag");
			this._state = AFTER_CLOSING_TAG_NAME;
			this._index--;
		}
	};

	Tokenizer.prototype._stateAfterCloseingTagName = function(c){
		//skip everything until ">"
		if(c === ">"){
			this._state = TEXT;
			this._sectionStart = this._index + 1;
		}
	};

	Tokenizer.prototype._stateBeforeAttributeName = function(c){
		if(c === ">"){
			this._cbs.onopentagend();
			this._state = TEXT;
			this._sectionStart = this._index + 1;
		} else if(c === "/"){
			this._state = IN_SELF_CLOSING_TAG;
		} else if(!whitespace(c)){
			this._state = IN_ATTRIBUTE_NAME;
			this._sectionStart = this._index;
		}
	};

	Tokenizer.prototype._stateInSelfClosingTag = function(c){
		if(c === ">"){
			this._cbs.onselfclosingtag();
			this._state = TEXT;
			this._sectionStart = this._index + 1;
		} else if(!whitespace(c)){
			this._state = BEFORE_ATTRIBUTE_NAME;
			this._index--;
		}
	};

	Tokenizer.prototype._stateInAttributeName = function(c){
		if(c === "=" || c === "/" || c === ">" || whitespace(c)){
			this._cbs.onattribname(this._getSection());
			this._sectionStart = -1;
			this._state = AFTER_ATTRIBUTE_NAME;
			this._index--;
		}
	};

	Tokenizer.prototype._stateAfterAttributeName = function(c){
		if(c === "="){
			this._state = BEFORE_ATTRIBUTE_VALUE;
		} else if(c === "/" || c === ">"){
			this._cbs.onattribend();
			this._state = BEFORE_ATTRIBUTE_NAME;
			this._index--;
		} else if(!whitespace(c)){
			this._cbs.onattribend();
			this._state = IN_ATTRIBUTE_NAME;
			this._sectionStart = this._index;
		}
	};

	Tokenizer.prototype._stateBeforeAttributeValue = function(c){
		if(c === "\""){
			this._state = IN_ATTRIBUTE_VALUE_DQ;
			this._sectionStart = this._index + 1;
		} else if(c === "'"){
			this._state = IN_ATTRIBUTE_VALUE_SQ;
			this._sectionStart = this._index + 1;
		} else if(!whitespace(c)){
			this._state = IN_ATTRIBUTE_VALUE_NQ;
			this._sectionStart = this._index;
			this._index--; //reconsume token
		}
	};

	Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function(c){
		if(c === "\""){
			this._emitToken("onattribdata");
			this._cbs.onattribend();
			this._state = BEFORE_ATTRIBUTE_NAME;
		} else if(this._decodeEntities && c === "&"){
			this._emitToken("onattribdata");
			this._baseState = this._state;
			this._state = BEFORE_ENTITY;
			this._sectionStart = this._index;
		}
	};

	Tokenizer.prototype._stateInAttributeValueSingleQuotes = function(c){
		if(c === "'"){
			this._emitToken("onattribdata");
			this._cbs.onattribend();
			this._state = BEFORE_ATTRIBUTE_NAME;
		} else if(this._decodeEntities && c === "&"){
			this._emitToken("onattribdata");
			this._baseState = this._state;
			this._state = BEFORE_ENTITY;
			this._sectionStart = this._index;
		}
	};

	Tokenizer.prototype._stateInAttributeValueNoQuotes = function(c){
		if(whitespace(c) || c === ">"){
			this._emitToken("onattribdata");
			this._cbs.onattribend();
			this._state = BEFORE_ATTRIBUTE_NAME;
			this._index--;
		} else if(this._decodeEntities && c === "&"){
			this._emitToken("onattribdata");
			this._baseState = this._state;
			this._state = BEFORE_ENTITY;
			this._sectionStart = this._index;
		}
	};

	Tokenizer.prototype._stateBeforeDeclaration = function(c){
		this._state = c === "[" ? BEFORE_CDATA_1 :
			c === "-" ? BEFORE_COMMENT :
				IN_DECLARATION;
	};

	Tokenizer.prototype._stateInDeclaration = function(c){
		if(c === ">"){
			this._cbs.ondeclaration(this._getSection());
			this._state = TEXT;
			this._sectionStart = this._index + 1;
		}
	};

	Tokenizer.prototype._stateInProcessingInstruction = function(c){
		if(c === ">"){
			this._cbs.onprocessinginstruction(this._getSection());
			this._state = TEXT;
			this._sectionStart = this._index + 1;
		}
	};

	Tokenizer.prototype._stateBeforeComment = function(c){
		if(c === "-"){
			this._state = IN_COMMENT;
			this._sectionStart = this._index + 1;
		} else {
			this._state = IN_DECLARATION;
		}
	};

	Tokenizer.prototype._stateInComment = function(c){
		if(c === "-") this._state = AFTER_COMMENT_1;
	};

	Tokenizer.prototype._stateAfterComment1 = function(c){
		if(c === "-"){
			this._state = AFTER_COMMENT_2;
		} else {
			this._state = IN_COMMENT;
		}
	};

	Tokenizer.prototype._stateAfterComment2 = function(c){
		if(c === ">"){
			//remove 2 trailing chars
			this._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));
			this._state = TEXT;
			this._sectionStart = this._index + 1;
		} else if(c !== "-"){
			this._state = IN_COMMENT;
		}
		// else: stay in AFTER_COMMENT_2 (`--->`)
	};

	Tokenizer.prototype._stateBeforeCdata1 = ifElseState("C", BEFORE_CDATA_2, IN_DECLARATION);
	Tokenizer.prototype._stateBeforeCdata2 = ifElseState("D", BEFORE_CDATA_3, IN_DECLARATION);
	Tokenizer.prototype._stateBeforeCdata3 = ifElseState("A", BEFORE_CDATA_4, IN_DECLARATION);
	Tokenizer.prototype._stateBeforeCdata4 = ifElseState("T", BEFORE_CDATA_5, IN_DECLARATION);
	Tokenizer.prototype._stateBeforeCdata5 = ifElseState("A", BEFORE_CDATA_6, IN_DECLARATION);

	Tokenizer.prototype._stateBeforeCdata6 = function(c){
		if(c === "["){
			this._state = IN_CDATA;
			this._sectionStart = this._index + 1;
		} else {
			this._state = IN_DECLARATION;
			this._index--;
		}
	};

	Tokenizer.prototype._stateInCdata = function(c){
		if(c === "]") this._state = AFTER_CDATA_1;
	};

	Tokenizer.prototype._stateAfterCdata1 = function(c){
		if(c === "]") this._state = AFTER_CDATA_2;
		else this._state = IN_CDATA;
	};

	Tokenizer.prototype._stateAfterCdata2 = function(c){
		if(c === ">"){
			//remove 2 trailing chars
			this._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));
			this._state = TEXT;
			this._sectionStart = this._index + 1;
		} else if(c !== "]") {
			this._state = IN_CDATA;
		}
		//else: stay in AFTER_CDATA_2 (`]]]>`)
	};

	Tokenizer.prototype._stateBeforeSpecial = function(c){
		if(c === "c" || c === "C"){
			this._state = BEFORE_SCRIPT_1;
		} else if(c === "t" || c === "T"){
			this._state = BEFORE_STYLE_1;
		} else {
			this._state = IN_TAG_NAME;
			this._index--; //consume the token again
		}
	};

	Tokenizer.prototype._stateBeforeSpecialEnd = function(c){
		if(this._special === SPECIAL_SCRIPT && (c === "c" || c === "C")){
			this._state = AFTER_SCRIPT_1;
		} else if(this._special === SPECIAL_STYLE && (c === "t" || c === "T")){
			this._state = AFTER_STYLE_1;
		}
		else this._state = TEXT;
	};

	Tokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar("R", BEFORE_SCRIPT_2);
	Tokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar("I", BEFORE_SCRIPT_3);
	Tokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar("P", BEFORE_SCRIPT_4);
	Tokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar("T", BEFORE_SCRIPT_5);

	Tokenizer.prototype._stateBeforeScript5 = function(c){
		if(c === "/" || c === ">" || whitespace(c)){
			this._special = SPECIAL_SCRIPT;
		}
		this._state = IN_TAG_NAME;
		this._index--; //consume the token again
	};

	Tokenizer.prototype._stateAfterScript1 = ifElseState("R", AFTER_SCRIPT_2, TEXT);
	Tokenizer.prototype._stateAfterScript2 = ifElseState("I", AFTER_SCRIPT_3, TEXT);
	Tokenizer.prototype._stateAfterScript3 = ifElseState("P", AFTER_SCRIPT_4, TEXT);
	Tokenizer.prototype._stateAfterScript4 = ifElseState("T", AFTER_SCRIPT_5, TEXT);

	Tokenizer.prototype._stateAfterScript5 = function(c){
		if(c === ">" || whitespace(c)){
			this._special = SPECIAL_NONE;
			this._state = IN_CLOSING_TAG_NAME;
			this._sectionStart = this._index - 6;
			this._index--; //reconsume the token
		}
		else this._state = TEXT;
	};

	Tokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar("Y", BEFORE_STYLE_2);
	Tokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar("L", BEFORE_STYLE_3);
	Tokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar("E", BEFORE_STYLE_4);

	Tokenizer.prototype._stateBeforeStyle4 = function(c){
		if(c === "/" || c === ">" || whitespace(c)){
			this._special = SPECIAL_STYLE;
		}
		this._state = IN_TAG_NAME;
		this._index--; //consume the token again
	};

	Tokenizer.prototype._stateAfterStyle1 = ifElseState("Y", AFTER_STYLE_2, TEXT);
	Tokenizer.prototype._stateAfterStyle2 = ifElseState("L", AFTER_STYLE_3, TEXT);
	Tokenizer.prototype._stateAfterStyle3 = ifElseState("E", AFTER_STYLE_4, TEXT);

	Tokenizer.prototype._stateAfterStyle4 = function(c){
		if(c === ">" || whitespace(c)){
			this._special = SPECIAL_NONE;
			this._state = IN_CLOSING_TAG_NAME;
			this._sectionStart = this._index - 5;
			this._index--; //reconsume the token
		}
		else this._state = TEXT;
	};

	Tokenizer.prototype._stateBeforeEntity = ifElseState("#", BEFORE_NUMERIC_ENTITY, IN_NAMED_ENTITY);
	Tokenizer.prototype._stateBeforeNumericEntity = ifElseState("X", IN_HEX_ENTITY, IN_NUMERIC_ENTITY);

	//for entities terminated with a semicolon
	Tokenizer.prototype._parseNamedEntityStrict = function(){
		//offset = 1
		if(this._sectionStart + 1 < this._index){
			var entity = this._buffer.substring(this._sectionStart + 1, this._index),
			    map = this._xmlMode ? xmlMap : entityMap;

			if(map.hasOwnProperty(entity)){
				this._emitPartial(map[entity]);
				this._sectionStart = this._index + 1;
			}
		}
	};


	//parses legacy entities (without trailing semicolon)
	Tokenizer.prototype._parseLegacyEntity = function(){
		var start = this._sectionStart + 1,
		    limit = this._index - start;

		if(limit > 6) limit = 6; //the max length of legacy entities is 6

		while(limit >= 2){ //the min length of legacy entities is 2
			var entity = this._buffer.substr(start, limit);

			if(legacyMap.hasOwnProperty(entity)){
				this._emitPartial(legacyMap[entity]);
				this._sectionStart += limit + 1;
				return;
			} else {
				limit--;
			}
		}
	};

	Tokenizer.prototype._stateInNamedEntity = function(c){
		if(c === ";"){
			this._parseNamedEntityStrict();
			if(this._sectionStart + 1 < this._index && !this._xmlMode){
				this._parseLegacyEntity();
			}
			this._state = this._baseState;
		} else if((c < "a" || c > "z") && (c < "A" || c > "Z") && (c < "0" || c > "9")){
			if(this._xmlMode);
			else if(this._sectionStart + 1 === this._index);
			else if(this._baseState !== TEXT){
				if(c !== "="){
					this._parseNamedEntityStrict();
				}
			} else {
				this._parseLegacyEntity();
			}

			this._state = this._baseState;
			this._index--;
		}
	};

	Tokenizer.prototype._decodeNumericEntity = function(offset, base){
		var sectionStart = this._sectionStart + offset;

		if(sectionStart !== this._index){
			//parse entity
			var entity = this._buffer.substring(sectionStart, this._index);
			var parsed = parseInt(entity, base);

			this._emitPartial(decode_codepoint(parsed));
			this._sectionStart = this._index;
		} else {
			this._sectionStart--;
		}

		this._state = this._baseState;
	};

	Tokenizer.prototype._stateInNumericEntity = function(c){
		if(c === ";"){
			this._decodeNumericEntity(2, 10);
			this._sectionStart++;
		} else if(c < "0" || c > "9"){
			if(!this._xmlMode){
				this._decodeNumericEntity(2, 10);
			} else {
				this._state = this._baseState;
			}
			this._index--;
		}
	};

	Tokenizer.prototype._stateInHexEntity = function(c){
		if(c === ";"){
			this._decodeNumericEntity(3, 16);
			this._sectionStart++;
		} else if((c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9")){
			if(!this._xmlMode){
				this._decodeNumericEntity(3, 16);
			} else {
				this._state = this._baseState;
			}
			this._index--;
		}
	};

	Tokenizer.prototype._cleanup = function (){
		if(this._sectionStart < 0){
			this._buffer = "";
			this._bufferOffset += this._index;
			this._index = 0;
		} else if(this._running){
			if(this._state === TEXT){
				if(this._sectionStart !== this._index){
					this._cbs.ontext(this._buffer.substr(this._sectionStart));
				}
				this._buffer = "";
				this._bufferOffset += this._index;
				this._index = 0;
			} else if(this._sectionStart === this._index){
				//the section just started
				this._buffer = "";
				this._bufferOffset += this._index;
				this._index = 0;
			} else {
				//remove everything unnecessary
				this._buffer = this._buffer.substr(this._sectionStart);
				this._index -= this._sectionStart;
				this._bufferOffset += this._sectionStart;
			}

			this._sectionStart = 0;
		}
	};

	//TODO make events conditional
	Tokenizer.prototype.write = function(chunk){
		if(this._ended) this._cbs.onerror(Error(".write() after done!"));

		this._buffer += chunk;
		this._parse();
	};

	Tokenizer.prototype._parse = function(){
		while(this._index < this._buffer.length && this._running){
			var c = this._buffer.charAt(this._index);
			if(this._state === TEXT) {
				this._stateText(c);
			} else if(this._state === BEFORE_TAG_NAME){
				this._stateBeforeTagName(c);
			} else if(this._state === IN_TAG_NAME) {
				this._stateInTagName(c);
			} else if(this._state === BEFORE_CLOSING_TAG_NAME){
				this._stateBeforeCloseingTagName(c);
			} else if(this._state === IN_CLOSING_TAG_NAME){
				this._stateInCloseingTagName(c);
			} else if(this._state === AFTER_CLOSING_TAG_NAME){
				this._stateAfterCloseingTagName(c);
			} else if(this._state === IN_SELF_CLOSING_TAG){
				this._stateInSelfClosingTag(c);
			}

			/*
			*	attributes
			*/
			else if(this._state === BEFORE_ATTRIBUTE_NAME){
				this._stateBeforeAttributeName(c);
			} else if(this._state === IN_ATTRIBUTE_NAME){
				this._stateInAttributeName(c);
			} else if(this._state === AFTER_ATTRIBUTE_NAME){
				this._stateAfterAttributeName(c);
			} else if(this._state === BEFORE_ATTRIBUTE_VALUE){
				this._stateBeforeAttributeValue(c);
			} else if(this._state === IN_ATTRIBUTE_VALUE_DQ){
				this._stateInAttributeValueDoubleQuotes(c);
			} else if(this._state === IN_ATTRIBUTE_VALUE_SQ){
				this._stateInAttributeValueSingleQuotes(c);
			} else if(this._state === IN_ATTRIBUTE_VALUE_NQ){
				this._stateInAttributeValueNoQuotes(c);
			}

			/*
			*	declarations
			*/
			else if(this._state === BEFORE_DECLARATION){
				this._stateBeforeDeclaration(c);
			} else if(this._state === IN_DECLARATION){
				this._stateInDeclaration(c);
			}

			/*
			*	processing instructions
			*/
			else if(this._state === IN_PROCESSING_INSTRUCTION){
				this._stateInProcessingInstruction(c);
			}

			/*
			*	comments
			*/
			else if(this._state === BEFORE_COMMENT){
				this._stateBeforeComment(c);
			} else if(this._state === IN_COMMENT){
				this._stateInComment(c);
			} else if(this._state === AFTER_COMMENT_1){
				this._stateAfterComment1(c);
			} else if(this._state === AFTER_COMMENT_2){
				this._stateAfterComment2(c);
			}

			/*
			*	cdata
			*/
			else if(this._state === BEFORE_CDATA_1){
				this._stateBeforeCdata1(c);
			} else if(this._state === BEFORE_CDATA_2){
				this._stateBeforeCdata2(c);
			} else if(this._state === BEFORE_CDATA_3){
				this._stateBeforeCdata3(c);
			} else if(this._state === BEFORE_CDATA_4){
				this._stateBeforeCdata4(c);
			} else if(this._state === BEFORE_CDATA_5){
				this._stateBeforeCdata5(c);
			} else if(this._state === BEFORE_CDATA_6){
				this._stateBeforeCdata6(c);
			} else if(this._state === IN_CDATA){
				this._stateInCdata(c);
			} else if(this._state === AFTER_CDATA_1){
				this._stateAfterCdata1(c);
			} else if(this._state === AFTER_CDATA_2){
				this._stateAfterCdata2(c);
			}

			/*
			* special tags
			*/
			else if(this._state === BEFORE_SPECIAL){
				this._stateBeforeSpecial(c);
			} else if(this._state === BEFORE_SPECIAL_END){
				this._stateBeforeSpecialEnd(c);
			}

			/*
			* script
			*/
			else if(this._state === BEFORE_SCRIPT_1){
				this._stateBeforeScript1(c);
			} else if(this._state === BEFORE_SCRIPT_2){
				this._stateBeforeScript2(c);
			} else if(this._state === BEFORE_SCRIPT_3){
				this._stateBeforeScript3(c);
			} else if(this._state === BEFORE_SCRIPT_4){
				this._stateBeforeScript4(c);
			} else if(this._state === BEFORE_SCRIPT_5){
				this._stateBeforeScript5(c);
			}

			else if(this._state === AFTER_SCRIPT_1){
				this._stateAfterScript1(c);
			} else if(this._state === AFTER_SCRIPT_2){
				this._stateAfterScript2(c);
			} else if(this._state === AFTER_SCRIPT_3){
				this._stateAfterScript3(c);
			} else if(this._state === AFTER_SCRIPT_4){
				this._stateAfterScript4(c);
			} else if(this._state === AFTER_SCRIPT_5){
				this._stateAfterScript5(c);
			}

			/*
			* style
			*/
			else if(this._state === BEFORE_STYLE_1){
				this._stateBeforeStyle1(c);
			} else if(this._state === BEFORE_STYLE_2){
				this._stateBeforeStyle2(c);
			} else if(this._state === BEFORE_STYLE_3){
				this._stateBeforeStyle3(c);
			} else if(this._state === BEFORE_STYLE_4){
				this._stateBeforeStyle4(c);
			}

			else if(this._state === AFTER_STYLE_1){
				this._stateAfterStyle1(c);
			} else if(this._state === AFTER_STYLE_2){
				this._stateAfterStyle2(c);
			} else if(this._state === AFTER_STYLE_3){
				this._stateAfterStyle3(c);
			} else if(this._state === AFTER_STYLE_4){
				this._stateAfterStyle4(c);
			}

			/*
			* entities
			*/
			else if(this._state === BEFORE_ENTITY){
				this._stateBeforeEntity(c);
			} else if(this._state === BEFORE_NUMERIC_ENTITY){
				this._stateBeforeNumericEntity(c);
			} else if(this._state === IN_NAMED_ENTITY){
				this._stateInNamedEntity(c);
			} else if(this._state === IN_NUMERIC_ENTITY){
				this._stateInNumericEntity(c);
			} else if(this._state === IN_HEX_ENTITY){
				this._stateInHexEntity(c);
			}

			else {
				this._cbs.onerror(Error("unknown _state"), this._state);
			}

			this._index++;
		}

		this._cleanup();
	};

	Tokenizer.prototype.pause = function(){
		this._running = false;
	};
	Tokenizer.prototype.resume = function(){
		this._running = true;

		if(this._index < this._buffer.length){
			this._parse();
		}
		if(this._ended){
			this._finish();
		}
	};

	Tokenizer.prototype.end = function(chunk){
		if(this._ended) this._cbs.onerror(Error(".end() after done!"));
		if(chunk) this.write(chunk);

		this._ended = true;

		if(this._running) this._finish();
	};

	Tokenizer.prototype._finish = function(){
		//if there is remaining data, emit it in a reasonable way
		if(this._sectionStart < this._index){
			this._handleTrailingData();
		}

		this._cbs.onend();
	};

	Tokenizer.prototype._handleTrailingData = function(){
		var data = this._buffer.substr(this._sectionStart);

		if(this._state === IN_CDATA || this._state === AFTER_CDATA_1 || this._state === AFTER_CDATA_2){
			this._cbs.oncdata(data);
		} else if(this._state === IN_COMMENT || this._state === AFTER_COMMENT_1 || this._state === AFTER_COMMENT_2){
			this._cbs.oncomment(data);
		} else if(this._state === IN_NAMED_ENTITY && !this._xmlMode){
			this._parseLegacyEntity();
			if(this._sectionStart < this._index){
				this._state = this._baseState;
				this._handleTrailingData();
			}
		} else if(this._state === IN_NUMERIC_ENTITY && !this._xmlMode){
			this._decodeNumericEntity(2, 10);
			if(this._sectionStart < this._index){
				this._state = this._baseState;
				this._handleTrailingData();
			}
		} else if(this._state === IN_HEX_ENTITY && !this._xmlMode){
			this._decodeNumericEntity(3, 16);
			if(this._sectionStart < this._index){
				this._state = this._baseState;
				this._handleTrailingData();
			}
		} else if(
			this._state !== IN_TAG_NAME &&
			this._state !== BEFORE_ATTRIBUTE_NAME &&
			this._state !== BEFORE_ATTRIBUTE_VALUE &&
			this._state !== AFTER_ATTRIBUTE_NAME &&
			this._state !== IN_ATTRIBUTE_NAME &&
			this._state !== IN_ATTRIBUTE_VALUE_SQ &&
			this._state !== IN_ATTRIBUTE_VALUE_DQ &&
			this._state !== IN_ATTRIBUTE_VALUE_NQ &&
			this._state !== IN_CLOSING_TAG_NAME
		){
			this._cbs.ontext(data);
		}
		//else, ignore remaining data
		//TODO add a way to remove current tag
	};

	Tokenizer.prototype.reset = function(){
		Tokenizer.call(this, {xmlMode: this._xmlMode, decodeEntities: this._decodeEntities}, this._cbs);
	};

	Tokenizer.prototype.getAbsoluteIndex = function(){
		return this._bufferOffset + this._index;
	};

	Tokenizer.prototype._getSection = function(){
		return this._buffer.substring(this._sectionStart, this._index);
	};

	Tokenizer.prototype._emitToken = function(name){
		this._cbs[name](this._getSection());
		this._sectionStart = -1;
	};

	Tokenizer.prototype._emitPartial = function(value){
		if(this._baseState !== TEXT){
			this._cbs.onattribdata(value); //TODO implement the new event
		} else {
			this._cbs.ontext(value);
		}
	};

	// shim for using process in browser
	// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	var cachedSetTimeout = defaultSetTimout;
	var cachedClearTimeout = defaultClearTimeout;
	if (typeof global$1.setTimeout === 'function') {
	    cachedSetTimeout = setTimeout;
	}
	if (typeof global$1.clearTimeout === 'function') {
	    cachedClearTimeout = clearTimeout;
	}

	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	function nextTick(fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	}
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	var title = 'browser';
	var platform = 'browser';
	var browser = true;
	var env = {};
	var argv = [];
	var version = ''; // empty string to avoid regexp issues
	var versions = {};
	var release = {};
	var config = {};

	function noop() {}

	var on = noop;
	var addListener = noop;
	var once = noop;
	var off = noop;
	var removeListener = noop;
	var removeAllListeners = noop;
	var emit = noop;

	function binding(name) {
	    throw new Error('process.binding is not supported');
	}

	function cwd () { return '/' }
	function chdir (dir) {
	    throw new Error('process.chdir is not supported');
	}function umask() { return 0; }

	// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
	var performance$1 = global$1.performance || {};
	var performanceNow =
	  performance$1.now        ||
	  performance$1.mozNow     ||
	  performance$1.msNow      ||
	  performance$1.oNow       ||
	  performance$1.webkitNow  ||
	  function(){ return (new Date()).getTime() };

	// generate timestamp or delta
	// see http://nodejs.org/api/process.html#process_process_hrtime
	function hrtime(previousTimestamp){
	  var clocktime = performanceNow.call(performance$1)*1e-3;
	  var seconds = Math.floor(clocktime);
	  var nanoseconds = Math.floor((clocktime%1)*1e9);
	  if (previousTimestamp) {
	    seconds = seconds - previousTimestamp[0];
	    nanoseconds = nanoseconds - previousTimestamp[1];
	    if (nanoseconds<0) {
	      seconds--;
	      nanoseconds += 1e9;
	    }
	  }
	  return [seconds,nanoseconds]
	}

	var startTime = new Date();
	function uptime() {
	  var currentTime = new Date();
	  var dif = currentTime - startTime;
	  return dif / 1000;
	}

	var process = {
	  nextTick: nextTick,
	  title: title,
	  browser: browser,
	  env: env,
	  argv: argv,
	  version: version,
	  versions: versions,
	  on: on,
	  addListener: addListener,
	  once: once,
	  off: off,
	  removeListener: removeListener,
	  removeAllListeners: removeAllListeners,
	  emit: emit,
	  binding: binding,
	  cwd: cwd,
	  chdir: chdir,
	  umask: umask,
	  hrtime: hrtime,
	  platform: platform,
	  release: release,
	  config: config,
	  uptime: uptime
	};

	var inherits;
	if (typeof Object.create === 'function'){
	  inherits = function inherits(ctor, superCtor) {
	    // implementation from standard node.js 'util' module
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  inherits = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}
	var inherits$1 = inherits;

	var formatRegExp = /%[sdj%]/g;
	function format(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	}

	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	function deprecate(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global$1.process)) {
	    return function() {
	      return deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	var debugs = {};
	var debugEnviron;
	function debuglog(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = 0;
	      debugs[set] = function() {
	        var msg = format.apply(null, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	}

	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    _extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}

	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray$1(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty$1(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty$1(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var length = output.reduce(function(prev, cur) {
	    if (cur.indexOf('\n') >= 0) ;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray$1(ar) {
	  return Array.isArray(ar);
	}

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}

	function isNull(arg) {
	  return arg === null;
	}

	function isNullOrUndefined(arg) {
	  return arg == null;
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isString(arg) {
	  return typeof arg === 'string';
	}

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}

	function isBuffer$1(maybeBuf) {
	  return isBuffer(maybeBuf);
	}

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	function log() {
	  console.log('%s - %s', timestamp(), format.apply(null, arguments));
	}

	function _extend(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	}
	function hasOwnProperty$1(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	var require$$0 = {
	  inherits: inherits$1,
	  _extend: _extend,
	  log: log,
	  isBuffer: isBuffer$1,
	  isPrimitive: isPrimitive,
	  isFunction: isFunction,
	  isError: isError,
	  isDate: isDate,
	  isObject: isObject,
	  isRegExp: isRegExp,
	  isUndefined: isUndefined,
	  isSymbol: isSymbol,
	  isString: isString,
	  isNumber: isNumber,
	  isNullOrUndefined: isNullOrUndefined,
	  isNull: isNull,
	  isBoolean: isBoolean,
	  isArray: isArray$1,
	  inspect: inspect,
	  deprecate: deprecate,
	  format: format,
	  debuglog: debuglog
	};

	var inherits_browser = createCommonjsModule(function (module) {
	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}
	});

	var inherits$2 = createCommonjsModule(function (module) {
	try {
	  var util = require$$0;
	  if (typeof util.inherits !== 'function') throw '';
	  module.exports = util.inherits;
	} catch (e) {
	  module.exports = inherits_browser;
	}
	});

	var domain;

	// This constructor is used to store event handlers. Instantiating this is
	// faster than explicitly calling `Object.create(null)` to get a "clean" empty
	// object (tested with v8 v4.9).
	function EventHandlers() {}
	EventHandlers.prototype = Object.create(null);

	function EventEmitter() {
	  EventEmitter.init.call(this);
	}

	// nodejs oddity
	// require('events') === require('events').EventEmitter
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.usingDomains = false;

	EventEmitter.prototype.domain = undefined;
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	EventEmitter.init = function() {
	  this.domain = null;
	  if (EventEmitter.usingDomains) {
	    // if there is an active domain, then attach to it.
	    if (domain.active && !(this instanceof domain.Domain)) ;
	  }

	  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
	    this._events = new EventHandlers();
	    this._eventsCount = 0;
	  }

	  this._maxListeners = this._maxListeners || undefined;
	};

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
	  if (typeof n !== 'number' || n < 0 || isNaN(n))
	    throw new TypeError('"n" argument must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	function $getMaxListeners(that) {
	  if (that._maxListeners === undefined)
	    return EventEmitter.defaultMaxListeners;
	  return that._maxListeners;
	}

	EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
	  return $getMaxListeners(this);
	};

	// These standalone emit* functions are used to optimize calling of event
	// handlers for fast cases because emit() itself often has a variable number of
	// arguments and can be deoptimized because of that. These functions always have
	// the same number of arguments and thus do not get deoptimized, so the code
	// inside them can execute faster.
	function emitNone(handler, isFn, self) {
	  if (isFn)
	    handler.call(self);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self);
	  }
	}
	function emitOne(handler, isFn, self, arg1) {
	  if (isFn)
	    handler.call(self, arg1);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1);
	  }
	}
	function emitTwo(handler, isFn, self, arg1, arg2) {
	  if (isFn)
	    handler.call(self, arg1, arg2);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2);
	  }
	}
	function emitThree(handler, isFn, self, arg1, arg2, arg3) {
	  if (isFn)
	    handler.call(self, arg1, arg2, arg3);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2, arg3);
	  }
	}

	function emitMany(handler, isFn, self, args) {
	  if (isFn)
	    handler.apply(self, args);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].apply(self, args);
	  }
	}

	EventEmitter.prototype.emit = function emit(type) {
	  var er, handler, len, args, i, events, domain;
	  var doError = (type === 'error');

	  events = this._events;
	  if (events)
	    doError = (doError && events.error == null);
	  else if (!doError)
	    return false;

	  domain = this.domain;

	  // If there is no 'error' event listener then throw.
	  if (doError) {
	    er = arguments[1];
	    if (domain) {
	      if (!er)
	        er = new Error('Uncaught, unspecified "error" event');
	      er.domainEmitter = this;
	      er.domain = domain;
	      er.domainThrown = false;
	      domain.emit('error', er);
	    } else if (er instanceof Error) {
	      throw er; // Unhandled 'error' event
	    } else {
	      // At least give some kind of context to the user
	      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	      err.context = er;
	      throw err;
	    }
	    return false;
	  }

	  handler = events[type];

	  if (!handler)
	    return false;

	  var isFn = typeof handler === 'function';
	  len = arguments.length;
	  switch (len) {
	    // fast cases
	    case 1:
	      emitNone(handler, isFn, this);
	      break;
	    case 2:
	      emitOne(handler, isFn, this, arguments[1]);
	      break;
	    case 3:
	      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
	      break;
	    case 4:
	      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
	      break;
	    // slower
	    default:
	      args = new Array(len - 1);
	      for (i = 1; i < len; i++)
	        args[i - 1] = arguments[i];
	      emitMany(handler, isFn, this, args);
	  }

	  return true;
	};

	function _addListener(target, type, listener, prepend) {
	  var m;
	  var events;
	  var existing;

	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');

	  events = target._events;
	  if (!events) {
	    events = target._events = new EventHandlers();
	    target._eventsCount = 0;
	  } else {
	    // To avoid recursion in the case that type === "newListener"! Before
	    // adding it to the listeners, first emit "newListener".
	    if (events.newListener) {
	      target.emit('newListener', type,
	                  listener.listener ? listener.listener : listener);

	      // Re-assign `events` because a newListener handler could have caused the
	      // this._events to be assigned to a new object
	      events = target._events;
	    }
	    existing = events[type];
	  }

	  if (!existing) {
	    // Optimize the case of one listener. Don't need the extra array object.
	    existing = events[type] = listener;
	    ++target._eventsCount;
	  } else {
	    if (typeof existing === 'function') {
	      // Adding the second element, need to change to array.
	      existing = events[type] = prepend ? [listener, existing] :
	                                          [existing, listener];
	    } else {
	      // If we've already got an array, just append.
	      if (prepend) {
	        existing.unshift(listener);
	      } else {
	        existing.push(listener);
	      }
	    }

	    // Check for listener leak
	    if (!existing.warned) {
	      m = $getMaxListeners(target);
	      if (m && m > 0 && existing.length > m) {
	        existing.warned = true;
	        var w = new Error('Possible EventEmitter memory leak detected. ' +
	                            existing.length + ' ' + type + ' listeners added. ' +
	                            'Use emitter.setMaxListeners() to increase limit');
	        w.name = 'MaxListenersExceededWarning';
	        w.emitter = target;
	        w.type = type;
	        w.count = existing.length;
	        emitWarning(w);
	      }
	    }
	  }

	  return target;
	}
	function emitWarning(e) {
	  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
	}
	EventEmitter.prototype.addListener = function addListener(type, listener) {
	  return _addListener(this, type, listener, false);
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.prependListener =
	    function prependListener(type, listener) {
	      return _addListener(this, type, listener, true);
	    };

	function _onceWrap(target, type, listener) {
	  var fired = false;
	  function g() {
	    target.removeListener(type, g);
	    if (!fired) {
	      fired = true;
	      listener.apply(target, arguments);
	    }
	  }
	  g.listener = listener;
	  return g;
	}

	EventEmitter.prototype.once = function once(type, listener) {
	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');
	  this.on(type, _onceWrap(this, type, listener));
	  return this;
	};

	EventEmitter.prototype.prependOnceListener =
	    function prependOnceListener(type, listener) {
	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');
	      this.prependListener(type, _onceWrap(this, type, listener));
	      return this;
	    };

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener =
	    function removeListener(type, listener) {
	      var list, events, position, i, originalListener;

	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');

	      events = this._events;
	      if (!events)
	        return this;

	      list = events[type];
	      if (!list)
	        return this;

	      if (list === listener || (list.listener && list.listener === listener)) {
	        if (--this._eventsCount === 0)
	          this._events = new EventHandlers();
	        else {
	          delete events[type];
	          if (events.removeListener)
	            this.emit('removeListener', type, list.listener || listener);
	        }
	      } else if (typeof list !== 'function') {
	        position = -1;

	        for (i = list.length; i-- > 0;) {
	          if (list[i] === listener ||
	              (list[i].listener && list[i].listener === listener)) {
	            originalListener = list[i].listener;
	            position = i;
	            break;
	          }
	        }

	        if (position < 0)
	          return this;

	        if (list.length === 1) {
	          list[0] = undefined;
	          if (--this._eventsCount === 0) {
	            this._events = new EventHandlers();
	            return this;
	          } else {
	            delete events[type];
	          }
	        } else {
	          spliceOne(list, position);
	        }

	        if (events.removeListener)
	          this.emit('removeListener', type, originalListener || listener);
	      }

	      return this;
	    };

	EventEmitter.prototype.removeAllListeners =
	    function removeAllListeners(type) {
	      var listeners, events;

	      events = this._events;
	      if (!events)
	        return this;

	      // not listening for removeListener, no need to emit
	      if (!events.removeListener) {
	        if (arguments.length === 0) {
	          this._events = new EventHandlers();
	          this._eventsCount = 0;
	        } else if (events[type]) {
	          if (--this._eventsCount === 0)
	            this._events = new EventHandlers();
	          else
	            delete events[type];
	        }
	        return this;
	      }

	      // emit removeListener for all listeners on all events
	      if (arguments.length === 0) {
	        var keys = Object.keys(events);
	        for (var i = 0, key; i < keys.length; ++i) {
	          key = keys[i];
	          if (key === 'removeListener') continue;
	          this.removeAllListeners(key);
	        }
	        this.removeAllListeners('removeListener');
	        this._events = new EventHandlers();
	        this._eventsCount = 0;
	        return this;
	      }

	      listeners = events[type];

	      if (typeof listeners === 'function') {
	        this.removeListener(type, listeners);
	      } else if (listeners) {
	        // LIFO order
	        do {
	          this.removeListener(type, listeners[listeners.length - 1]);
	        } while (listeners[0]);
	      }

	      return this;
	    };

	EventEmitter.prototype.listeners = function listeners(type) {
	  var evlistener;
	  var ret;
	  var events = this._events;

	  if (!events)
	    ret = [];
	  else {
	    evlistener = events[type];
	    if (!evlistener)
	      ret = [];
	    else if (typeof evlistener === 'function')
	      ret = [evlistener.listener || evlistener];
	    else
	      ret = unwrapListeners(evlistener);
	  }

	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  if (typeof emitter.listenerCount === 'function') {
	    return emitter.listenerCount(type);
	  } else {
	    return listenerCount.call(emitter, type);
	  }
	};

	EventEmitter.prototype.listenerCount = listenerCount;
	function listenerCount(type) {
	  var events = this._events;

	  if (events) {
	    var evlistener = events[type];

	    if (typeof evlistener === 'function') {
	      return 1;
	    } else if (evlistener) {
	      return evlistener.length;
	    }
	  }

	  return 0;
	}

	EventEmitter.prototype.eventNames = function eventNames() {
	  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
	};

	// About 1.5x faster than the two-arg version of Array#splice().
	function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
	    list[i] = list[k];
	  list.pop();
	}

	function arrayClone(arr, i) {
	  var copy = new Array(i);
	  while (i--)
	    copy[i] = arr[i];
	  return copy;
	}

	function unwrapListeners(arr) {
	  var ret = new Array(arr.length);
	  for (var i = 0; i < ret.length; ++i) {
	    ret[i] = arr[i].listener || arr[i];
	  }
	  return ret;
	}

	var Tokenizer$1 = Tokenizer_1;

	/*
		Options:

		xmlMode: Disables the special behavior for script/style tags (false by default)
		lowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)
		lowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)
	*/

	/*
		Callbacks:

		oncdataend,
		oncdatastart,
		onclosetag,
		oncomment,
		oncommentend,
		onerror,
		onopentag,
		onprocessinginstruction,
		onreset,
		ontext
	*/

	var formTags = {
		input: true,
		option: true,
		optgroup: true,
		select: true,
		button: true,
		datalist: true,
		textarea: true
	};

	var openImpliesClose = {
		tr      : { tr:true, th:true, td:true },
		th      : { th:true },
		td      : { thead:true, th:true, td:true },
		body    : { head:true, link:true, script:true },
		li      : { li:true },
		p       : { p:true },
		h1      : { p:true },
		h2      : { p:true },
		h3      : { p:true },
		h4      : { p:true },
		h5      : { p:true },
		h6      : { p:true },
		select  : formTags,
		input   : formTags,
		output  : formTags,
		button  : formTags,
		datalist: formTags,
		textarea: formTags,
		option  : { option:true },
		optgroup: { optgroup:true }
	};

	var voidElements = {
		__proto__: null,
		area: true,
		base: true,
		basefont: true,
		br: true,
		col: true,
		command: true,
		embed: true,
		frame: true,
		hr: true,
		img: true,
		input: true,
		isindex: true,
		keygen: true,
		link: true,
		meta: true,
		param: true,
		source: true,
		track: true,
		wbr: true,
	};

	var foreignContextElements = {
		__proto__: null,
		math: true,
		svg: true
	};
	var htmlIntegrationElements = {
		__proto__: null,
		mi: true,
		mo: true,
		mn: true,
		ms: true,
		mtext: true,
		"annotation-xml": true,
		foreignObject: true,
		desc: true,
		title: true
	};

	var re_nameEnd = /\s|\//;

	function Parser(cbs, options){
		this._options = options || {};
		this._cbs = cbs || {};

		this._tagname = "";
		this._attribname = "";
		this._attribvalue = "";
		this._attribs = null;
		this._stack = [];
		this._foreignContext = [];

		this.startIndex = 0;
		this.endIndex = null;

		this._lowerCaseTagNames = "lowerCaseTags" in this._options ?
			!!this._options.lowerCaseTags :
			!this._options.xmlMode;
		this._lowerCaseAttributeNames = "lowerCaseAttributeNames" in this._options ?
			!!this._options.lowerCaseAttributeNames :
			!this._options.xmlMode;

		if(this._options.Tokenizer) {
			Tokenizer$1 = this._options.Tokenizer;
		}
		this._tokenizer = new Tokenizer$1(this._options, this);

		if(this._cbs.onparserinit) this._cbs.onparserinit(this);
	}

	inherits$2(Parser, EventEmitter.EventEmitter);

	Parser.prototype._updatePosition = function(initialOffset){
		if(this.endIndex === null){
			if(this._tokenizer._sectionStart <= initialOffset){
				this.startIndex = 0;
			} else {
				this.startIndex = this._tokenizer._sectionStart - initialOffset;
			}
		}
		else this.startIndex = this.endIndex + 1;
		this.endIndex = this._tokenizer.getAbsoluteIndex();
	};

	//Tokenizer event handlers
	Parser.prototype.ontext = function(data){
		this._updatePosition(1);
		this.endIndex--;

		if(this._cbs.ontext) this._cbs.ontext(data);
	};

	Parser.prototype.onopentagname = function(name){
		if(this._lowerCaseTagNames){
			name = name.toLowerCase();
		}

		this._tagname = name;

		if(!this._options.xmlMode && name in openImpliesClose) {
			for(
				var el;
				(el = this._stack[this._stack.length - 1]) in openImpliesClose[name];
				this.onclosetag(el)
			);
		}

		if(this._options.xmlMode || !(name in voidElements)){
			this._stack.push(name);
			if(name in foreignContextElements) this._foreignContext.push(true);
			else if(name in htmlIntegrationElements) this._foreignContext.push(false);
		}

		if(this._cbs.onopentagname) this._cbs.onopentagname(name);
		if(this._cbs.onopentag) this._attribs = {};
	};

	Parser.prototype.onopentagend = function(){
		this._updatePosition(1);

		if(this._attribs){
			if(this._cbs.onopentag) this._cbs.onopentag(this._tagname, this._attribs);
			this._attribs = null;
		}

		if(!this._options.xmlMode && this._cbs.onclosetag && this._tagname in voidElements){
			this._cbs.onclosetag(this._tagname);
		}

		this._tagname = "";
	};

	Parser.prototype.onclosetag = function(name){
		this._updatePosition(1);

		if(this._lowerCaseTagNames){
			name = name.toLowerCase();
		}

		if(this._stack.length && (!(name in voidElements) || this._options.xmlMode)){
			var pos = this._stack.lastIndexOf(name);
			if(pos !== -1){
				if(this._cbs.onclosetag){
					pos = this._stack.length - pos;
					while(pos--) this._cbs.onclosetag(this._stack.pop());
				}
				else this._stack.length = pos;
			} else if(name === "p" && !this._options.xmlMode){
				this.onopentagname(name);
				this._closeCurrentTag();
			}
		} else if(!this._options.xmlMode && (name === "br" || name === "p")){
			this.onopentagname(name);
			this._closeCurrentTag();
		}
	};

	Parser.prototype.onselfclosingtag = function(){
		if(this._options.xmlMode || this._options.recognizeSelfClosing
			|| this._foreignContext[this._foreignContext.length - 1]){
			this._closeCurrentTag();
		} else {
			this.onopentagend();
		}
	};

	Parser.prototype._closeCurrentTag = function(){
		var name = this._tagname;

		this.onopentagend();

		//self-closing tags will be on the top of the stack
		//(cheaper check than in onclosetag)
		if(this._stack[this._stack.length - 1] === name){
			if(this._cbs.onclosetag){
				this._cbs.onclosetag(name);
			}
			this._stack.pop();
			if((name in foreignContextElements) || (name in htmlIntegrationElements)){
				this._foreignContext.pop();
			}
		}
	};

	Parser.prototype.onattribname = function(name){
		if(this._lowerCaseAttributeNames){
			name = name.toLowerCase();
		}
		this._attribname = name;
	};

	Parser.prototype.onattribdata = function(value){
		this._attribvalue += value;
	};

	Parser.prototype.onattribend = function(){
		if(this._cbs.onattribute) this._cbs.onattribute(this._attribname, this._attribvalue);
		if(
			this._attribs &&
			!Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)
		){
			this._attribs[this._attribname] = this._attribvalue;
		}
		this._attribname = "";
		this._attribvalue = "";
	};

	Parser.prototype._getInstructionName = function(value){
		var idx = value.search(re_nameEnd),
		    name = idx < 0 ? value : value.substr(0, idx);

		if(this._lowerCaseTagNames){
			name = name.toLowerCase();
		}

		return name;
	};

	Parser.prototype.ondeclaration = function(value){
		if(this._cbs.onprocessinginstruction){
			var name = this._getInstructionName(value);
			this._cbs.onprocessinginstruction("!" + name, "!" + value);
		}
	};

	Parser.prototype.onprocessinginstruction = function(value){
		if(this._cbs.onprocessinginstruction){
			var name = this._getInstructionName(value);
			this._cbs.onprocessinginstruction("?" + name, "?" + value);
		}
	};

	Parser.prototype.oncomment = function(value){
		this._updatePosition(4);

		if(this._cbs.oncomment) this._cbs.oncomment(value);
		if(this._cbs.oncommentend) this._cbs.oncommentend();
	};

	Parser.prototype.oncdata = function(value){
		this._updatePosition(1);

		if(this._options.xmlMode || this._options.recognizeCDATA){
			if(this._cbs.oncdatastart) this._cbs.oncdatastart();
			if(this._cbs.ontext) this._cbs.ontext(value);
			if(this._cbs.oncdataend) this._cbs.oncdataend();
		} else {
			this.oncomment("[CDATA[" + value + "]]");
		}
	};

	Parser.prototype.onerror = function(err){
		if(this._cbs.onerror) this._cbs.onerror(err);
	};

	Parser.prototype.onend = function(){
		if(this._cbs.onclosetag){
			for(
				var i = this._stack.length;
				i > 0;
				this._cbs.onclosetag(this._stack[--i])
			);
		}
		if(this._cbs.onend) this._cbs.onend();
	};


	//Resets the parser to a blank state, ready to parse a new HTML document
	Parser.prototype.reset = function(){
		if(this._cbs.onreset) this._cbs.onreset();
		this._tokenizer.reset();

		this._tagname = "";
		this._attribname = "";
		this._attribs = null;
		this._stack = [];

		if(this._cbs.onparserinit) this._cbs.onparserinit(this);
	};

	//Parses a complete HTML document and pushes it to the handler
	Parser.prototype.parseComplete = function(data){
		this.reset();
		this.end(data);
	};

	Parser.prototype.write = function(chunk){
		this._tokenizer.write(chunk);
	};

	Parser.prototype.end = function(chunk){
		this._tokenizer.end(chunk);
	};

	Parser.prototype.pause = function(){
		this._tokenizer.pause();
	};

	Parser.prototype.resume = function(){
		this._tokenizer.resume();
	};

	//alias for backwards compat
	Parser.prototype.parseChunk = Parser.prototype.write;
	Parser.prototype.done = Parser.prototype.end;

	var Parser_1 = Parser;

	//Types of elements found in the DOM
	var domelementtype = {
		Text: "text", //Text
		Directive: "directive", //<? ... ?>
		Comment: "comment", //<!-- ... -->
		Script: "script", //<script> tags
		Style: "style", //<style> tags
		Tag: "tag", //Any tag
		CDATA: "cdata", //<![CDATA[ ... ]]>
		Doctype: "doctype",

		isTag: function(elem){
			return elem.type === "tag" || elem.type === "script" || elem.type === "style";
		}
	};

	var node = createCommonjsModule(function (module) {
	// This object will be used as the prototype for Nodes when creating a
	// DOM-Level-1-compliant structure.
	var NodePrototype = module.exports = {
		get firstChild() {
			var children = this.children;
			return children && children[0] || null;
		},
		get lastChild() {
			var children = this.children;
			return children && children[children.length - 1] || null;
		},
		get nodeType() {
			return nodeTypes[this.type] || nodeTypes.element;
		}
	};

	var domLvl1 = {
		tagName: "name",
		childNodes: "children",
		parentNode: "parent",
		previousSibling: "prev",
		nextSibling: "next",
		nodeValue: "data"
	};

	var nodeTypes = {
		element: 1,
		text: 3,
		cdata: 4,
		comment: 8
	};

	Object.keys(domLvl1).forEach(function(key) {
		var shorthand = domLvl1[key];
		Object.defineProperty(NodePrototype, key, {
			get: function() {
				return this[shorthand] || null;
			},
			set: function(val) {
				this[shorthand] = val;
				return val;
			}
		});
	});
	});
	var node_1 = node.firstChild;
	var node_2 = node.lastChild;
	var node_3 = node.nodeType;

	var element = createCommonjsModule(function (module) {
	// DOM-Level-1-compliant structure

	var ElementPrototype = module.exports = Object.create(node);

	var domLvl1 = {
		tagName: "name"
	};

	Object.keys(domLvl1).forEach(function(key) {
		var shorthand = domLvl1[key];
		Object.defineProperty(ElementPrototype, key, {
			get: function() {
				return this[shorthand] || null;
			},
			set: function(val) {
				this[shorthand] = val;
				return val;
			}
		});
	});
	});

	var re_whitespace = /\s+/g;



	function DomHandler(callback, options, elementCB){
		if(typeof callback === "object"){
			elementCB = options;
			options = callback;
			callback = null;
		} else if(typeof options === "function"){
			elementCB = options;
			options = defaultOpts;
		}
		this._callback = callback;
		this._options = options || defaultOpts;
		this._elementCB = elementCB;
		this.dom = [];
		this._done = false;
		this._tagStack = [];
		this._parser = this._parser || null;
	}

	//default options
	var defaultOpts = {
		normalizeWhitespace: false, //Replace all whitespace with single spaces
		withStartIndices: false, //Add startIndex properties to nodes
		withEndIndices: false, //Add endIndex properties to nodes
	};

	DomHandler.prototype.onparserinit = function(parser){
		this._parser = parser;
	};

	//Resets the handler back to starting state
	DomHandler.prototype.onreset = function(){
		DomHandler.call(this, this._callback, this._options, this._elementCB);
	};

	//Signals the handler that parsing is done
	DomHandler.prototype.onend = function(){
		if(this._done) return;
		this._done = true;
		this._parser = null;
		this._handleCallback(null);
	};

	DomHandler.prototype._handleCallback =
	DomHandler.prototype.onerror = function(error){
		if(typeof this._callback === "function"){
			this._callback(error, this.dom);
		} else {
			if(error) throw error;
		}
	};

	DomHandler.prototype.onclosetag = function(){
		//if(this._tagStack.pop().name !== name) this._handleCallback(Error("Tagname didn't match!"));
		
		var elem = this._tagStack.pop();

		if(this._options.withEndIndices && elem){
			elem.endIndex = this._parser.endIndex;
		}

		if(this._elementCB) this._elementCB(elem);
	};

	DomHandler.prototype._createDomElement = function(properties){
		if (!this._options.withDomLvl1) return properties;

		var element$1;
		if (properties.type === "tag") {
			element$1 = Object.create(element);
		} else {
			element$1 = Object.create(node);
		}

		for (var key in properties) {
			if (properties.hasOwnProperty(key)) {
				element$1[key] = properties[key];
			}
		}

		return element$1;
	};

	DomHandler.prototype._addDomElement = function(element){
		var parent = this._tagStack[this._tagStack.length - 1];
		var siblings = parent ? parent.children : this.dom;
		var previousSibling = siblings[siblings.length - 1];

		element.next = null;

		if(this._options.withStartIndices){
			element.startIndex = this._parser.startIndex;
		}
		if(this._options.withEndIndices){
			element.endIndex = this._parser.endIndex;
		}

		if(previousSibling){
			element.prev = previousSibling;
			previousSibling.next = element;
		} else {
			element.prev = null;
		}

		siblings.push(element);
		element.parent = parent || null;
	};

	DomHandler.prototype.onopentag = function(name, attribs){
		var properties = {
			type: name === "script" ? domelementtype.Script : name === "style" ? domelementtype.Style : domelementtype.Tag,
			name: name,
			attribs: attribs,
			children: []
		};

		var element = this._createDomElement(properties);

		this._addDomElement(element);

		this._tagStack.push(element);
	};

	DomHandler.prototype.ontext = function(data){
		//the ignoreWhitespace is officially dropped, but for now,
		//it's an alias for normalizeWhitespace
		var normalize = this._options.normalizeWhitespace || this._options.ignoreWhitespace;

		var lastTag;

		if(!this._tagStack.length && this.dom.length && (lastTag = this.dom[this.dom.length-1]).type === domelementtype.Text){
			if(normalize){
				lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
			} else {
				lastTag.data += data;
			}
		} else {
			if(
				this._tagStack.length &&
				(lastTag = this._tagStack[this._tagStack.length - 1]) &&
				(lastTag = lastTag.children[lastTag.children.length - 1]) &&
				lastTag.type === domelementtype.Text
			){
				if(normalize){
					lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
				} else {
					lastTag.data += data;
				}
			} else {
				if(normalize){
					data = data.replace(re_whitespace, " ");
				}

				var element = this._createDomElement({
					data: data,
					type: domelementtype.Text
				});

				this._addDomElement(element);
			}
		}
	};

	DomHandler.prototype.oncomment = function(data){
		var lastTag = this._tagStack[this._tagStack.length - 1];

		if(lastTag && lastTag.type === domelementtype.Comment){
			lastTag.data += data;
			return;
		}

		var properties = {
			data: data,
			type: domelementtype.Comment
		};

		var element = this._createDomElement(properties);

		this._addDomElement(element);
		this._tagStack.push(element);
	};

	DomHandler.prototype.oncdatastart = function(){
		var properties = {
			children: [{
				data: "",
				type: domelementtype.Text
			}],
			type: domelementtype.CDATA
		};

		var element = this._createDomElement(properties);

		this._addDomElement(element);
		this._tagStack.push(element);
	};

	DomHandler.prototype.oncommentend = DomHandler.prototype.oncdataend = function(){
		this._tagStack.pop();
	};

	DomHandler.prototype.onprocessinginstruction = function(name, data){
		var element = this._createDomElement({
			name: name,
			data: data,
			type: domelementtype.Directive
		});

		this._addDomElement(element);
	};

	var domhandler = DomHandler;

	function shouldProcessEveryNode(node) {
	  return true;
	}

	var shouldProcessNodeDefinitions = {
	  shouldProcessEveryNode: shouldProcessEveryNode,
	};

	/**
	 * Ensure some object is a coerced to a string
	 **/
	var makeString = function makeString(object) {
	  if (object == null) return '';
	  return '' + object;
	};

	var escapeRegExp = function escapeRegExp(str) {
	  return makeString(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
	};

	var defaultToWhiteSpace = function defaultToWhiteSpace(characters) {
	  if (characters == null)
	    return '\\s';
	  else if (characters.source)
	    return characters.source;
	  else
	    return '[' + escapeRegExp(characters) + ']';
	};

	var nativeTrim = String.prototype.trim;

	var trim = function trim(str, characters) {
	  str = makeString(str);
	  if (!characters && nativeTrim) return nativeTrim.call(str);
	  characters = defaultToWhiteSpace(characters);
	  return str.replace(new RegExp('^' + characters + '+|' + characters + '+$', 'g'), '');
	};

	var decapitalize = function decapitalize(str) {
	  str = makeString(str);
	  return str.charAt(0).toLowerCase() + str.slice(1);
	};

	var camelize = function camelize(str, decapitalize$1) {
	  str = trim(str).replace(/[-_\s]+(.)?/g, function(match, c) {
	    return c ? c.toUpperCase() : "";
	  });

	  if (decapitalize$1 === true) {
	    return decapitalize(str);
	  } else {
	    return str;
	  }
	};

	var forEach = function forEach(arr, fn) {
	  for (var i = 0; i < arr.length; i++) {
	    fn(i, arr[i]);
	  }
	};

	var map$2 = function map(arr, fn) {
	  var newArr = [];

	  forEach(arr, function(key, item) {
	    newArr.push(fn(key, item));
	  });

	  return newArr;
	};

	var merge = function merge(args, curryArgs) {
	  var mergedArgs = [];

	  mergedArgs = map$2(curryArgs, function(key, item) {
	    if (typeof item === 'undefined') {
	      return args.shift();
	    } else {
	      return item;
	    }
	  });

	  return mergedArgs.concat(args);
	};

	var countDefinedItems = function(args) {
	  var count = 0;

	  forEach(args, function(key, item) {
	    if (typeof item !== 'undefined') {
	      count = count + 1;
	    }
	  });

	  return count;
	};

	var slice = Array.prototype.slice,
	    __;


	function curry(fn, length, curryArgs) {
	  return function() {
	    var args = slice.call(arguments),
	      concatArgs = curryArgs.concat(args),
	      mergedArgs = [];

	    if (length <= countDefinedItems(concatArgs)) {
	      mergedArgs = merge(args, curryArgs);
	      return fn.apply(null, mergedArgs);
	    } else {
	      if (length >= concatArgs.length) {
	        return curry(fn, length, concatArgs);
	      } else {
	        return curry(fn, length, merge(args, curryArgs));
	      }
	    }
	  };
	}

	var chickencurry = function(fn) {
	  var args = slice.call(arguments, 1);

	  return curry(fn, fn.length, args);
	};

	var n = function(fn, length) {
	  var args = slice.call(arguments, 2);

	  return curry(fn, length, args);
	};

	var ___1 = __;
	chickencurry.n = n;
	chickencurry.__ = ___1;

	var camelize$1 = chickencurry(function camelize$1(str) {
	  return camelize(str, true);
	});

	/**
	 * Converts an object into an array of key, value arrays. Only the object's
	 * own properties are used.
	 * Note that the order of the output array is not guaranteed to be consistent
	 * across different JS platforms.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.4.0
	 * @category Object
	 * @sig {String: *} -> [[String,*]]
	 * @param {Object} obj The object to extract from
	 * @return {Array} An array of key, value arrays from the object's own properties.
	 * @see R.fromPairs
	 * @example
	 *
	 *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]
	 */


	var toPairs = /*#__PURE__*/_curry1_1(function toPairs(obj) {
	  var pairs = [];
	  for (var prop in obj) {
	    if (_has_1(prop, obj)) {
	      pairs[pairs.length] = [prop, obj[prop]];
	    }
	  }
	  return pairs;
	});
	var toPairs_1 = toPairs;

	/**
	 * Optimized internal three-arity curry function.
	 *
	 * @private
	 * @category Function
	 * @param {Function} fn The function to curry.
	 * @return {Function} The curried function.
	 */


	function _curry3(fn) {
	  return function f3(a, b, c) {
	    switch (arguments.length) {
	      case 0:
	        return f3;
	      case 1:
	        return _isPlaceholder_1(a) ? f3 : _curry2_1(function (_b, _c) {
	          return fn(a, _b, _c);
	        });
	      case 2:
	        return _isPlaceholder_1(a) && _isPlaceholder_1(b) ? f3 : _isPlaceholder_1(a) ? _curry2_1(function (_a, _c) {
	          return fn(_a, b, _c);
	        }) : _isPlaceholder_1(b) ? _curry2_1(function (_b, _c) {
	          return fn(a, _b, _c);
	        }) : _curry1_1(function (_c) {
	          return fn(a, b, _c);
	        });
	      default:
	        return _isPlaceholder_1(a) && _isPlaceholder_1(b) && _isPlaceholder_1(c) ? f3 : _isPlaceholder_1(a) && _isPlaceholder_1(b) ? _curry2_1(function (_a, _b) {
	          return fn(_a, _b, c);
	        }) : _isPlaceholder_1(a) && _isPlaceholder_1(c) ? _curry2_1(function (_a, _c) {
	          return fn(_a, b, _c);
	        }) : _isPlaceholder_1(b) && _isPlaceholder_1(c) ? _curry2_1(function (_b, _c) {
	          return fn(a, _b, _c);
	        }) : _isPlaceholder_1(a) ? _curry1_1(function (_a) {
	          return fn(_a, b, c);
	        }) : _isPlaceholder_1(b) ? _curry1_1(function (_b) {
	          return fn(a, _b, c);
	        }) : _isPlaceholder_1(c) ? _curry1_1(function (_c) {
	          return fn(a, b, _c);
	        }) : fn(a, b, c);
	    }
	  };
	}
	var _curry3_1 = _curry3;

	/**
	 * Returns a single item by iterating through the list, successively calling
	 * the iterator function and passing it an accumulator value and the current
	 * value from the array, and then passing the result to the next call.
	 *
	 * The iterator function receives two values: *(acc, value)*. It may use
	 * [`R.reduced`](#reduced) to shortcut the iteration.
	 *
	 * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function
	 * is *(value, acc)*.
	 *
	 * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
	 * arrays), unlike the native `Array.prototype.reduce` method. For more details
	 * on this behavior, see:
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
	 *
	 * Dispatches to the `reduce` method of the third argument, if present. When
	 * doing so, it is up to the user to handle the [`R.reduced`](#reduced)
	 * shortcuting, as this is not implemented by `reduce`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig ((a, b) -> a) -> a -> [b] -> a
	 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
	 *        current element from the array.
	 * @param {*} acc The accumulator value.
	 * @param {Array} list The list to iterate over.
	 * @return {*} The final, accumulated value.
	 * @see R.reduced, R.addIndex, R.reduceRight
	 * @example
	 *
	 *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10
	 *      //          -               -10
	 *      //         / \              / \
	 *      //        -   4           -6   4
	 *      //       / \              / \
	 *      //      -   3   ==>     -3   3
	 *      //     / \              / \
	 *      //    -   2           -1   2
	 *      //   / \              / \
	 *      //  0   1            0   1
	 *
	 * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)
	 */


	var reduce = /*#__PURE__*/_curry3_1(_reduce_1);
	var reduce_1 = reduce;

	// These are all sourced from https://facebook.github.io/react/docs/tags-and-attributes.html -
	var HTML_ATTRIBUTES = [
	  'accept', 'acceptCharset', 'accessKey', 'action', 'allowFullScreen', 'allowTransparency',
	  'alt', 'async', 'autoComplete', 'autoFocus', 'autoPlay', 'capture', 'cellPadding',
	  'cellSpacing', 'challenge', 'charSet', 'checked', 'cite', 'classID', 'className',
	  'colSpan', 'cols', 'content', 'contentEditable', 'contextMenu', 'controls', 'coords',
	  'crossOrigin', 'data', 'dateTime', 'default', 'defer', 'dir', 'disabled', 'download',
	  'draggable', 'encType', 'form', 'formAction', 'formEncType', 'formMethod', 'formNoValidate',
	  'formTarget', 'frameBorder', 'headers', 'height', 'hidden', 'high', 'href', 'hrefLang',
	  'htmlFor', 'httpEquiv', 'icon', 'id', 'inputMode', 'integrity', 'is', 'keyParams', 'keyType',
	  'kind', 'label', 'lang', 'list', 'loop', 'low', 'manifest', 'marginHeight', 'marginWidth',
	  'max', 'maxLength', 'media', 'mediaGroup', 'method', 'min', 'minLength', 'multiple', 'muted',
	  'name', 'noValidate', 'nonce', 'open', 'optimum', 'pattern', 'placeholder', 'poster',
	  'preload', 'profile', 'radioGroup', 'readOnly', 'rel', 'required', 'reversed', 'role',
	  'rowSpan', 'rows', 'sandbox', 'scope', 'scoped', 'scrolling', 'seamless', 'selected',
	  'shape', 'size', 'sizes', 'span', 'spellCheck', 'src', 'srcDoc', 'srcLang', 'srcSet', 'start',
	  'step', 'style', 'summary', 'tabIndex', 'target', 'title', 'type', 'useMap', 'value', 'width',
	  'wmode', 'wrap',
	];

	var NON_STANDARD_ATTRIBUTES = [
	  'autoCapitalize', 'autoCorrect', 'color', 'itemProp', 'itemScope', 'itemType', 'itemRef',
	  'itemID', 'security', 'unselectable', 'results', 'autoSave',
	];

	var SVG_ATTRIBUTES = [
	  'accentHeight', 'accumulate', 'additive', 'alignmentBaseline', 'allowReorder', 'alphabetic',
	  'amplitude', 'arabicForm', 'ascent', 'attributeName', 'attributeType', 'autoReverse', 'azimuth',
	  'baseFrequency', 'baseProfile', 'baselineShift', 'bbox', 'begin', 'bias', 'by', 'calcMode',
	  'capHeight', 'clip', 'clipPath', 'clipPathUnits', 'clipRule', 'colorInterpolation',
	  'colorInterpolationFilters', 'colorProfile', 'colorRendering', 'contentScriptType',
	  'contentStyleType', 'cursor', 'cx', 'cy', 'd', 'decelerate', 'descent', 'diffuseConstant',
	  'direction', 'display', 'divisor', 'dominantBaseline', 'dur', 'dx', 'dy', 'edgeMode',
	  'elevation', 'enableBackground', 'end', 'exponent', 'externalResourcesRequired', 'fill',
	  'fillOpacity', 'fillRule', 'filter', 'filterRes', 'filterUnits', 'floodColor', 'floodOpacity',
	  'focusable', 'fontFamily', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle',
	  'fontVariant', 'fontWeight', 'format', 'from', 'fx', 'fy', 'g1', 'g2', 'glyphName',
	  'glyphOrientationHorizontal', 'glyphOrientationVertical', 'glyphRef',
	  'gradientTransform', 'gradientUnits', 'hanging', 'horizAdvX', 'horizOriginX', 'ideographic',
	  'imageRendering', 'in', 'in2', 'intercept', 'k', 'k1', 'k2', 'k3', 'k4', 'kernelMatrix',
	  'kernelUnitLength', 'kerning', 'keyPoints', 'keySplines', 'keyTimes', 'lengthAdjust',
	  'letterSpacing', 'lightingColor', 'limitingConeAngle', 'local', 'markerEnd', 'markerHeight',
	  'markerMid', 'markerStart', 'markerUnits', 'markerWidth', 'mask', 'maskContentUnits',
	  'maskUnits', 'mathematical', 'mode', 'numOctaves', 'offset', 'opacity', 'operator', 'order',
	  'orient', 'orientation', 'origin', 'overflow', 'overlinePosition', 'overlineThickness',
	  'paintOrder', 'panose1', 'pathLength', 'patternContentUnits', 'patternTransform',
	  'patternUnits', 'pointerEvents', 'points', 'pointsAtX', 'pointsAtY', 'pointsAtZ',
	  'preserveAlpha', 'preserveAspectRatio', 'primitiveUnits', 'r', 'radius', 'refX', 'refY',
	  'renderingIntent', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures',
	  'restart', 'result', 'rotate', 'rx', 'ry', 'scale', 'seed', 'shapeRendering', 'slope',
	  'spacing', 'specularConstant', 'specularExponent', 'speed', 'spreadMethod', 'startOffset',
	  'stdDeviation', 'stemh', 'stemv', 'stitchTiles', 'stopColor', 'stopOpacity',
	  'strikethroughPosition', 'strikethroughThickness', 'string', 'stroke', 'strokeDasharray',
	  'strokeDashoffset', 'strokeLinecap', 'strokeLinejoin', 'strokeMiterlimit', 'strokeOpacity',
	  'strokeWidth', 'surfaceScale', 'systemLanguage', 'tableValues', 'targetX', 'targetY',
	  'textAnchor', 'textDecoration', 'textLength', 'textRendering', 'to', 'transform', 'u1',
	  'u2', 'underlinePosition', 'underlineThickness', 'unicode', 'unicodeBidi', 'unicodeRange',
	  'unitsPerEm', 'vAlphabetic', 'vHanging', 'vIdeographic', 'vMathematical', 'values',
	  'vectorEffect', 'version', 'vertAdvY', 'vertOriginX', 'vertOriginY', 'viewBox',
	  'viewTarget', 'visibility', 'widths', 'wordSpacing', 'writingMode', 'x', 'x1', 'x2',
	  'xChannelSelector', 'xHeight', 'xlinkActuate', 'xlinkArcrole', 'xlinkHref', 'xlinkRole',
	  'xlinkShow', 'xlinkTitle', 'xlinkType', 'xmlns', 'xmlnsXlink', 'xmlBase', 'xmlLang',
	  'xmlSpace', 'y', 'y1', 'y2', 'yChannelSelector', 'z', 'zoomAndPan',
	];

	var camelCaseMap = HTML_ATTRIBUTES
	  .concat(NON_STANDARD_ATTRIBUTES)
	  .concat(SVG_ATTRIBUTES)
	  .reduce(function (soFar, attr) {
	    var lower = attr.toLowerCase();
	    if (lower !== attr) {
	      soFar[lower] = attr;
	    }
	    return soFar;
	  }, {});

	var camelCaseAttributeNames = camelCaseMap;

	function createStyleJsonFromString(styleString) {
	  styleString = styleString || '';
	  var styles = styleString.split(/;(?!base64)/);
	  var singleStyle, key, value, jsonStyles = {};
	  for (var i = 0; i < styles.length; ++i) {
	    singleStyle = styles[i].split(':');
	    if (singleStyle.length > 2) {
	      singleStyle[1] = singleStyle.slice(1).join(':');
	    }

	    key = singleStyle[0];
	    value = singleStyle[1];
	    if (typeof value === 'string'){
	      value = value.trim();
	    }

	    if (key != null && value != null && key.length > 0 && value.length > 0) {
	      jsonStyles[camelize$1(key)] = value;
	    }
	  }
	  return jsonStyles;
	}

	function createElement(node, index, data, children) {
	  var elementProps = {
	    key: index,
	  };
	  if (node.attribs) {
	    elementProps = reduce_1(function(result, keyAndValue) {
	      var key = keyAndValue[0];
	      var value = keyAndValue[1];
	      key = camelCaseAttributeNames[key.replace(/[-:]/, '')] || key;
	      if (key === 'style') {
	        value = createStyleJsonFromString(value);
	      } else if (key === 'class') {
	        key = 'className';
	      } else if (key === 'for') {
	        key = 'htmlFor';
	      }
	      if (typeof value === 'string') {
	        value = value;
	      }
	      result[key] = value || key;
	      return result;
	    }, elementProps, toPairs_1(node.attribs));
	  }

	  children = children || [];
	  var allChildren = data != null ? [data,].concat(children) : children;
	  return react.createElement.apply(
	    null, [node.name, elementProps,].concat(allChildren)
	  );
	}

	var utils = {
	  createElement: createElement,
	};

	// eslint-disable-next-line max-len
	// https://github.com/facebook/react/blob/15.0-stable/src/renderers/dom/shared/ReactDOMComponent.js#L457
	var voidElementTags = [
	  'area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param',
	  'source', 'track', 'wbr', 'menuitem', 'textarea',
	];

	function ProcessNodeDefinitions() {
	  function processDefaultNode(node, children, index) {
	    if (node.type === 'text') {
	      return node.data;
	    } else if (node.type === 'comment') {
	      // FIXME: The following doesn't work as the generated HTML results in
	      // "&lt;!--  This is a comment  --&gt;"
	      // return '<!-- ' + node.data + ' -->';
	      return false;
	    }

	    if (voidElementTags.indexOf(node.name) > -1) {
	      return utils.createElement(node, index);
	    } else {
	      return utils.createElement(node, index, node.data, children);
	    }
	  }

	  return {
	    processDefaultNode: processDefaultNode,
	  };
	}

	var processNodeDefinitions = ProcessNodeDefinitions;

	function ProcessingInstructions() {
	  var processNodeDefinitions$1 = new processNodeDefinitions();

	  return {
	    defaultProcessingInstructions: [{
	      shouldProcessNode: shouldProcessNodeDefinitions.shouldProcessEveryNode,
	      processNode: processNodeDefinitions$1.processDefaultNode,
	    },],
	  };
	}
	var processingInstructions = ProcessingInstructions;

	function alwaysValid() {
	  return true;
	}

	var isValidNodeDefinitions = {
	  alwaysValid: alwaysValid,
	};

	function Html2ReactParser(options) {
	  function parseHtmlToTree(html) {
	    options = options || {};
	    options.decodeEntities = true;
	    var handler = new domhandler();
	    var parser = new Parser_1(handler, options);
	    parser.parseComplete(html);
	    return handler.dom.filter(function (element) {
	      return element.type !== 'directive';
	    });
	  }
	  function traverseDom(node, isValidNode, processingInstructions, index) {
	    if (isValidNode(node)) {
	      var processingInstruction = find_1(function (processingInstruction) {
	        return processingInstruction.shouldProcessNode(node);
	      }, processingInstructions);
	      if (processingInstruction != null) {
	        var children = reject_1(function (x) {return x == null || x === false;},
	          addIndex_1(map_1)(function (child, i) {
	            return traverseDom(child, isValidNode, processingInstructions, i);
	          }, node.children || []));

	        if (processingInstruction.replaceChildren) {
	          return utils.createElement(node, index, node.data, [
	            processingInstruction.processNode(node, children, index),
	          ]);
	        }

	        return processingInstruction.processNode(node, children, index);
	      } else {
	        return false;
	      }
	    } else {
	      return false;
	    }
	  }
	  function parseWithInstructions(html, isValidNode, processingInstructions) {
	    var domTree = parseHtmlToTree(html);

	    var list = domTree.map(function (domTreeItem, index) {
	      return traverseDom(domTreeItem, isValidNode, processingInstructions, index);
	    });
	    return list.length <= 1 ? list[0] : list;
	  }
	  function parse(html) {
	    var processingInstructions$1 = new processingInstructions();
	    return parseWithInstructions(html,
	      isValidNodeDefinitions.alwaysValid,
	      processingInstructions$1.defaultProcessingInstructions);
	  }
	  return {
	    parse: parse,
	    parseWithInstructions: parseWithInstructions,
	  };
	}
	var parser = Html2ReactParser;

	var htmlToReact = {
	  Parser: parser,
	  ProcessingInstructions: processingInstructions,
	  IsValidNodeDefinitions: isValidNodeDefinitions,
	  ProcessNodeDefinitions: processNodeDefinitions,
	};

	const _jsxFileName$9 = "/Users/logan/Dev/apps/inbox/src/js/components/lib/elapsed.js";// display elapsed time by converting galactic time to client time

	/*
	  Goes from:
	    1531938314116       // "javascript unix time"
	  To:
	    4m                  // "elapsed timestring from current time"
	*/

	class Elapsed extends react_1 {
	  constructor(props) {
	    super(props);
	    // console.log('elapsed props...', props);
	  }

	  renderTime() {
	    let parsed = esoo(this.props.timestring);
	    const serverTime = new Date(parsed ? parsed : this.props.timestring);
	    const clientTime = new Date(); // local
	    return secToString((clientTime - serverTime) / 1000).split(' ')[0];
	  }

	  render() {
	    return (
	      react.createElement('span', { className: this.props.classes, __self: this, __source: {fileName: _jsxFileName$9, lineNumber: 27}}, "-", this.renderTime())
	    )
	  }
	}

	const _jsxFileName$a = "/Users/logan/Dev/apps/inbox/src/js/components/lib/icons/icon-check.js";
	class IconCheck extends react_1 {
	  render() {
	    return (
	      react.createElement('svg', { width: "16", height: "16", viewBox: "0 0 16 16"   , fill: "none", xmlns: "http://www.w3.org/2000/svg", __self: this, __source: {fileName: _jsxFileName$a, lineNumber: 6}}
	        , react.createElement('path', { fillRule: "evenodd", clipRule: "evenodd", d: "M14.9999 4.63293L13.2766 3L6.1698 9.7341L2.72327 6.46823L1 8.10117L6.16992 13L7.24512 11.9812L7.89319 11.3671L14.9999 4.63293Z"         , fill: "white", __self: this, __source: {fileName: _jsxFileName$a, lineNumber: 7}})
	      )
	    )
	  }
	}

	const _jsxFileName$b = "/Users/logan/Dev/apps/inbox/src/js/components/lib/icons/icon-cross.js";
	class IconCross extends react_1 {
	  render() {
	    return (
	      react.createElement('svg', { width: "16", height: "16", viewBox: "0 0 16 16"   , fill: "none", xmlns: "http://www.w3.org/2000/svg", __self: this, __source: {fileName: _jsxFileName$b, lineNumber: 6}}
	        , react.createElement('path', { fillRule: "evenodd", clipRule: "evenodd", d: "M8 6.28568L3.71436 2L2.00012 3.71429L6.28577 7.99994L2 12.2857L3.71423 14L8 9.71423L12.2858 14L14 12.2857L9.71436 7.99997L14 3.71429L12.2856 2.00003L8 6.28568Z"             , fill: "black", __self: this, __source: {fileName: _jsxFileName$b, lineNumber: 7}})
	      )
	    )
	  }
	}

	const _jsxFileName$c = "/Users/logan/Dev/apps/inbox/src/js/components/lib/message.js";
	class Message extends react_1 {
	  constructor(props) {
	    super(props);

	    this.respondInvite = this.respondInvite.bind(this);
	  }

	  buildPostTitle(messageDetails) {
	    if (messageDetails.postUrl) {
	      return (
	        react.createElement('a', { className: "pr-12 text-600 underline"  ,
	          href: messageDetails.postUrl, __self: this, __source: {fileName: _jsxFileName$c, lineNumber: 19}}
	          , messageDetails.postTitle
	        )
	      )
	    } else {
	      return null;
	    }
	  }

	  subStation(station) {
	    let stationDetails = getStationDetails(station);

	    this.props.api.hall({
	      source: {
	        nom: 'inbox',
	        sub: true,
	        srs: [station]
	      }
	    });

	    this.props.storeReports([{
	      type: REPORT_PAGE_STATUS$1,
	      data: PAGE_STATUS_TRANSITIONING
	    }]);

	    this.props.pushCallback("circle.config.dif.source", (rep) => {
	      this.props.transitionTo(stationDetails.stationUrl);
	    });
	  }

	  respondInvite(actionData) {
	    if (actionData.response === true) {
	      this.subStation(actionData.msgDetails.content.sta);
	    }

	    this.updateInvite(actionData.msgDetails, actionData.response);
	  }

	  updateInvite(msgDetails, resp) {
	    let tagstring = resp ? "Accept" : "Decline";

	    let msg = {
	      aud: [`~${this.props.api.authTokens.ship}/i`],
	      ses: [{
	        ire: {
	          top: msgDetails.msg.uid,
	          sep: {
	            lin: {
	              msg: `${tagstring} ${msgDetails.content.sta}`,
	              pat: false
	            }
	          }
	        }
	      }]
	    };

	    api.hall({
	      phrase: msg
	    });
	  }

	  render() {
	    if (this.props.details.type === "text") {
	      return this.buildPostTitle(this.props.details);
	    } else if (this.props.details.type === "inv") {
	      if (isDMStation(this.props.details.content.sta)) {
	        return null;
	      }

	      return (
	        react.createElement('div', { className: "row", __self: this, __source: {fileName: _jsxFileName$c, lineNumber: 90}}
	          , react.createElement('div', { className: "flex-offset-2 flex-col-4" , __self: this, __source: {fileName: _jsxFileName$c, lineNumber: 91}}
	            , react.createElement('a', { className: "text-mono text-host-breadcrumb" , href: `/~~/~${this.props.details.msg.aut}/==/web/landscape/profile`, __self: this, __source: {fileName: _jsxFileName$c, lineNumber: 92}}, "~", this.props.details.msg.aut)
	            , react.createElement('span', { className: "text-host-breadcrumb ml-2 mr-2"  , __self: this, __source: {fileName: _jsxFileName$c, lineNumber: 93}}, "/")
	            , react.createElement('span', { className: "text-mono text-700" , __self: this, __source: {fileName: _jsxFileName$c, lineNumber: 94}}, this.props.details.content.nom)
	          )
	          , react.createElement('div', { className: "flex-col-x", __self: this, __source: {fileName: _jsxFileName$c, lineNumber: 96}}
	            , react.createElement(Button, {
	              classes: "btn btn-sm btn-icon btn-primary mr-1"    ,
	              action: this.respondInvite,
	              actionData: {msgDetails: this.props.details, response: true},
	              pushCallback: this.props.pushCallback,
	              responseKey: "circle.config.dif.full",
	              content: IconCheck, __self: this, __source: {fileName: _jsxFileName$c, lineNumber: 97}}
	             )

	             , react.createElement(Button, {
	               classes: "btn btn-sm btn-icon"  ,
	               action: this.respondInvite,
	               actionData: {msgDetails: this.props.details, response: false},
	               pushCallback: this.props.pushCallback,
	               responseKey: "circle.config.dif.full",
	               content: IconCross, __self: this, __source: {fileName: _jsxFileName$c, lineNumber: 106}}
	              )
	          )
	        )
	      )
	    } else if (this.props.details.type === "url") {
	        if (/(jpg|img|png|gif|tiff|jpeg|JPG|IMG|PNG|TIFF)$/.exec(this.props.details.content)) {
	          return (
	            react.createElement('img', { src: this.props.details.content, style: {width:"30%"}, __self: this, __source: {fileName: _jsxFileName$c, lineNumber: 120}})
	          )
	        }
	        else {
	          return (
	            react.createElement('a', { href: this.props.details.content, target: "_blank", __self: this, __source: {fileName: _jsxFileName$c, lineNumber: 125}}, this.props.details.content)
	          )
	        }
	    } else if (this.props.details.type === "exp") {
	      return (
	        react.createElement('div', { className: "text-body", __self: this, __source: {fileName: _jsxFileName$c, lineNumber: 130}}
	          , react.createElement('div', { className: "text-mono", __self: this, __source: {fileName: _jsxFileName$c, lineNumber: 131}}, this.props.details.content)
	          , react.createElement('pre', { className: "text-mono mt-0" , __self: this, __source: {fileName: _jsxFileName$c, lineNumber: 132}}, this.props.details.res)
	        )
	      )
	    } else if (['new item', 'edited item'].includes(this.props.details.type)) {
	      return react.createElement('span', { className: "text-body", dangerouslySetInnerHTML: {__html: this.props.details.snip}, __self: this, __source: {fileName: _jsxFileName$c, lineNumber: 136}})
	    } else if (this.props.details.type === "lin") {
	      return (
	        react.createElement('span', { className: "text-body", __self: this, __source: {fileName: _jsxFileName$c, lineNumber: 139}}
	          , this.props.replyTo &&
	            react.createElement('span', { className: "text-gray", __self: this, __source: {fileName: _jsxFileName$c, lineNumber: 141}}, "[replying to ~"  , this.props.replyTo, "] " )
	          
	          , react.createElement('span', {__self: this, __source: {fileName: _jsxFileName$c, lineNumber: 143}}, this.props.details.content)
	        )
	      )
	    }

	    return react.createElement('span', { className: "text-mono", __self: this, __source: {fileName: _jsxFileName$c, lineNumber: 148}}, '<unknown message type>');
	  }
	}

	const _jsxFileName$d = "/Users/logan/Dev/apps/inbox/src/js/components/inbox/recent.js";/*
	  Data structure:
	    common: {
	      host: zod,
	      hostProfileUrl: (...)/~zod/profile,

	      cir: [@ta/dmjoin]

	      station: [host]/[circle]
	      stationUrl: [streamUrl/collIndexUrl]

	      subcircle: @ta
	      subcircleUrl: (...)collIndexUrl/subcircle

	      type: {"dm", "chat", "fora"}
	    }

	    Breadcrumb display:
	      [host] [circle* /coll@ta [*]/dmjoin *] [...subcollection]

	      case "dm":
	        <span mono *>[dmjoin]</span>

	    dm:
	*/

	class InboxRecentPage extends react_1 {
	  constructor(props) {
	    super(props);
	    this.state = {
	      activatedMsg: {
	        dateGroup: null,  // TODO: What's a good "0" value for Dates?
	        date: null
	      }
	    };

	    this.mouseenterActivate = this.mouseenterActivate.bind(this);
	    this.mouseleaveActivate = this.mouseenterActivate.bind(this);
	  }

	  activateMessageGroup(dateGroup, date) {
	    this.setState({
	      activatedMsg: {
	        dateGroup: dateGroup,
	        date: date
	      }
	    });
	  }

	  mouseenterActivate(e) {
	    if (e.currentTarget.dataset.date) {
	      this.activateMessageGroup(e.currentTarget.dataset.dateGroup, e.currentTarget.dataset.date);
	    }
	  }

	  mouseleaveActivate(e) {
	    this.activateMessageGroup(null, null);
	  }

	  buildSectionContent(section) {
	    let lastAut = "";

	    let messageRows = section.msgs.map((msg, i) => {
	      let messageDetails = getMessageContent(msg);
	      let isPostUpdate = messageDetails.contentType === "blog";
	      let displayAuthorRow = (lastAut !== msg.aut) || isPostUpdate;

	      let ret = (
	        react.createElement('div', { key: msg.uid,
	          'data-date': msg.wen,
	          'data-date-group': msg.dateGroup,
	          onMouseEnter: this.mouseenterActivate,
	          onMouseLeave: this.mouseleaveActivate, __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 78}}
	          , displayAuthorRow &&
	            react.createElement(react.Fragment, {__self: this, __source: {fileName: _jsxFileName$d, lineNumber: 84}}
	              , react.createElement('div', { className: `row align-center ${isPostUpdate && 'mt-3'}`, __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 85}}
	                , react.createElement('div', { className: "flex-col-2 flex justify-end"  , __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 86}}
	                  , isPostUpdate &&
	                    react.createElement(Icon, { type: "icon-collection-post", label: true, __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 88}})
	                  
	                )
	                , react.createElement('div', { className: "flex-col-x", __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 91}}
	                  , messageDetails.postUrl &&
	                    react.createElement('a', { className: "text-heading text-500" ,
	                      href: messageDetails.postUrl, __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 93}}
	                      , messageDetails.postTitle
	                    )
	                  
	                )
	                , react.createElement('div', { className: "flex-col-3", __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 99}})
	              )
	              , react.createElement('div', { className: "row", __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 101}}
	                , react.createElement('div', { className: "flex-col-2", __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 102}})
	                , react.createElement('div', { className: `flex-col-x ${isPostUpdate ? 'mt-1' : 'mt-3'}`, __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 103}}
	                  , react.createElement('a', { className: "vanilla text-mono text-small text-700"   , href: prettyShip(msg.aut)[1], __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 104}}, prettyShip(`~${msg.aut}`)[0])
	                )
	                , react.createElement('div', { className: "flex-col-3", __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 106}})
	              )
	            )
	          
	          , react.createElement('div', { className: "row", __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 110}}
	            , react.createElement('div', { className: "flex-col-2", __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 111}})
	            , react.createElement('div', { className: "flex-col-x", __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 112}}
	              , react.createElement(Message, { details: messageDetails, api: this.props.api, storeReports: this.props.storeReports, pushCallback: this.props.pushCallback, transitionTo: this.props.transitionTo, __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 113}})
	            )
	            , react.createElement('div', { className: "flex-col-3", __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 115}})
	          )
	        )
	      );

	      lastAut = msg.aut;
	      return ret;
	    });

	    return messageRows;
	  }
	  buildSections(sections) {
	    return sections.map((section, i) => {
	      let sectionContent = this.buildSectionContent(section);
	      let stationClass = classnames({
	        'text-mono text-700': !section.stationDetails.type.includes("collection"),
	        'text-heading text-600': section.stationDetails.type.includes("collection"),
	      });

	      return (
	        react.createElement('div', { className: "mt-4 mb-6" , key: i, __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 135}}
	          , section.stationDetails.type !== "stream-dm" &&
	            react.createElement('div', { className: "row", __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 137}}
	              , react.createElement('div', { className: "flex-col-2", __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 138}})
	              , react.createElement('div', { className: "flex-col-x", __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 139}}
	                , react.createElement('a', { href: section.stationDetails.hostProfileUrl, className: "text-host-breadcrumb", __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 140}}, "~", section.stationDetails.host)
	                , react.createElement('span', { className: "text-host-breadcrumb ml-2 mr-2"  , __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 141}}, "/")
	              )
	              , react.createElement('div', { className: "flex-col-3", __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 143}})
	            )
	          
	          , react.createElement('div', { className: "row align-center" , __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 146}}
	            , react.createElement('div', { className: "flex-col-2 flex justify-end"  , __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 147}}
	              , react.createElement(Icon, { type: section.icon, label: true, __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 148}})
	            )
	            , react.createElement('div', { className: "flex-col-x", __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 150}}
	              , react.createElement('a', { href: section.stationDetails.stationUrl, className: stationClass, __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 151}} , section.stationDetails.stationTitle)
	              , section.dateGroup === parseInt(this.state.activatedMsg.dateGroup, 10) &&
	                react.createElement(Elapsed, { timestring: parseInt(this.state.activatedMsg.date, 10), classes: "ml-3 text-timestamp" , __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 153}} )
	              
	            )
	            , react.createElement('div', { className: "flex-col-3", __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 156}})
	          )
	          , sectionContent
	        )
	      )
	    })
	  }

	  getSectionIconType(msgDetails, stationDetails) {
	    if (stationDetails.type === "stream-chat") {
	      return "icon-stream-chat";
	    } else if (stationDetails.type === "stream-dm" ) {
	      return "icon-stream-dm";
	    } else if (stationDetails.type === "collection-index" && msgDetails.type === "new item") {
	      return "icon-collection-index";
	    } else if (stationDetails.type === "collection-post" && msgDetails.type === "new item") {
	      return "icon-collection-comment";
	    }
	  }

	  // Group inbox messages by time-chunked stations, strictly ordered by message time.
	  // TODO:  Inbox does not handle messages with multiple audiences very well
	  getSectionData() {
	    let inbox = this.props.store.messages.inbox.messages;

	    let lastStationName = [];
	    let lastMessageType = "";
	    let sections = [];
	    let stationIndex = -1;
	    let lastDateGroup = "";

	    for (var i = 0; i < inbox.length; i++) {
	      let msg = inbox[i];
	      let aud = msg.aud[0];
	      let msgDetails = getMessageContent(msg);
	      let stationDetails = getStationDetails(aud);

	      if (aud !== lastStationName || msgDetails.type !== lastMessageType) {
	        lastDateGroup = msg.wen;
	        msg.dateGroup = lastDateGroup;
	        sections.push({
	          name: aud,
	          msgs: [msg],
	          icon: this.getSectionIconType(msgDetails, stationDetails),
	          msgDetails: msgDetails,
	          dateGroup: lastDateGroup,
	          stationDetails: stationDetails
	        });
	        stationIndex++;
	      } else {
	        msg.dateGroup = lastDateGroup;
	        sections[stationIndex].msgs.push(msg);
	      }

	      lastStationName = aud;
	      lastMessageType = msgDetails.type;
	    }

	    return sections;
	  }

	  buildInvites(invites) {
	    if (!invites || invites.length === 0) return null;
	    let inviteMessageElems = invites.map(i => {
	      let inviteDetails = getMessageContent(i);

	      return (
	        react.createElement(Message, {
	         details: inviteDetails,
	         api: this.props.api,
	         storeReports: this.props.storeReports,
	         pushCallback: this.props.pushCallback,
	         transitionTo: this.props.transitionTo, __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 223}} )
	      )
	    });

	    return (
	      react.createElement('div', { className: "inbox-invites mb-7" , __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 233}}
	        , inviteMessageElems
	      )
	    )
	  }

	  squashedInvites() {
	    let msgs = this.props.store.messages.stations[`~${this.props.api.authTokens.ship}/i`] || [];

	    // Split invites from responses
	    let [invites, responses] = lodash.partition(msgs, m => {
	      let streamInvite = lodash.get(m, 'sep.inv', null);
	      let collInvite = lodash.get(m, 'sep.app.sep.inv', null);
	      return streamInvite || collInvite;
	    });

	    // Filter out DM stations
	    invites = invites.filter(i => {
	      let msgContent = getMessageContent(i);
	      return !isDMStation(msgContent.content.sta);
	    });

	    // Match responses to invites
	    responses = responses.map(r => { return {uid: r.sep.ire.top} });
	    lodash.pullAllBy(invites, responses, 'uid');

	    return invites;
	  }

	  render() {
	    const sections = this.getSectionData();
	    const sectionElems = this.buildSections(sections);

	    const invites = this.squashedInvites();
	    const inviteElems = this.buildInvites(invites);


	    return (
	      react.createElement(react.Fragment, {__self: this, __source: {fileName: _jsxFileName$d, lineNumber: 271}}
	        , invites.length > 0 &&
	          react.createElement('div', { className: "row mt-3" , __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 273}}
	            , react.createElement('div', { className: "flex-offset-2 flex-col-x" , __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 274}}
	              , react.createElement('h3', { className: "mb-1", __self: this, __source: {fileName: _jsxFileName$d, lineNumber: 275}}, "Invites")
	            )
	          )
	        
	        , inviteElems
	        , sectionElems
	      )
	    )
	  }
	}

	const _jsxFileName$e = "/Users/logan/Dev/apps/inbox/src/js/components/inbox/all.js";
	class InboxAllPage extends react_1 {
	  constructor(props) {
	    super(props);
	  }

	  buildDMSection(dmStations) {
	    return dmStations.map((stationDetails) => {
	      return (
	        react.createElement('div', { key: stationDetails.station, className: "mt-3", __self: this, __source: {fileName: _jsxFileName$e, lineNumber: 15}}
	          , react.createElement('div', { className: "text-mono", __self: this, __source: {fileName: _jsxFileName$e, lineNumber: 16}}
	            , react.createElement('a', { className: "vanilla", href: stationDetails.stationUrl, __self: this, __source: {fileName: _jsxFileName$e, lineNumber: 17}}
	              , stationDetails.stationTitle
	            )
	          )
	        )
	      );
	    });
	  }

	  buildSection(stations) {
	    return stations.map((stationDetails) => {
	      let stationClass = classnames({
	        'text-mono text-700': !stationDetails.type.includes("collection"),
	        'text-heading text-600': stationDetails.type.includes("collection"),
	      });

	      return (
	        react.createElement('div', { key: stationDetails.station, className: "mt-3 row align-center"  , __self: this, __source: {fileName: _jsxFileName$e, lineNumber: 34}}
	          , react.createElement('div', { className: "text-mono flex-col-6 flex-offset-2"  , __self: this, __source: {fileName: _jsxFileName$e, lineNumber: 35}}
	            , stationDetails.type !== "stream-dm" &&
	              react.createElement(react.Fragment, {__self: this, __source: {fileName: _jsxFileName$e, lineNumber: 37}}
	                , react.createElement('a', { className: "text-host-breadcrumb", href: stationDetails.hostProfileUrl, __self: this, __source: {fileName: _jsxFileName$e, lineNumber: 38}}, "~"
	                  , stationDetails.host
	                )
	                , react.createElement('span', { className: "text-host-breadcrumb ml-2 mr-2"  , __self: this, __source: {fileName: _jsxFileName$e, lineNumber: 41}}, "/")
	              )
	            
	            , react.createElement('a', { className: stationClass, href: stationDetails.stationUrl, __self: this, __source: {fileName: _jsxFileName$e, lineNumber: 44}}
	              , stationDetails.stationTitle
	            )
	          )
	        )
	      );

	      // <div className="flex-col-1">
	      //   <Elapsed timestring={1538163986689} classes="text-timestamp" />
	      // </div>
	      // <div className="flex-col-1 flex align-center">
	      //   <Icon type="icon-user" label={true} />
	      // </div>
	    });
	  }

	  render() {
	    let stations = getSubscribedStations(this.props.api.authTokens.ship, this.props.store);
	    if (!stations) return null;

	    const chatStations = this.buildSection(stations.chatStations);
	    const collStations = this.buildSection(stations.collStations);
	    const DMStations = this.buildSection(stations.dmStations);

	    let sections = [{
	      title: "Chats",
	      icon: "icon-stream-chat",
	      data: chatStations,
	    }, {
	      title: "Forum",
	      icon: "icon-collection-index",
	      data: collStations
	    }, {
	      title: "Direct Messages",
	      icon: "icon-stream-dm",
	      data: DMStations
	    }];

	    let sectionElems = sections.map(s => {
	      return (
	        react.createElement('div', { className: "mt-4 mb-17" , __self: this, __source: {fileName: _jsxFileName$e, lineNumber: 84}}
	          , react.createElement('div', { className: "row", __self: this, __source: {fileName: _jsxFileName$e, lineNumber: 85}}
	            , react.createElement('div', { className: "flex-col-2 flex justify-end align-center"   , __self: this, __source: {fileName: _jsxFileName$e, lineNumber: 86}}
	              , react.createElement(Icon, { type: s.icon, label: true, __self: this, __source: {fileName: _jsxFileName$e, lineNumber: 87}} )
	            )
	            , react.createElement('div', { className: "flex-col-x", __self: this, __source: {fileName: _jsxFileName$e, lineNumber: 89}}
	              , react.createElement('h2', { className: "text-500 mb-1 mt-1"  , __self: this, __source: {fileName: _jsxFileName$e, lineNumber: 90}}, s.title)
	            )
	            , react.createElement('div', { className: "flex-col-3", __self: this, __source: {fileName: _jsxFileName$e, lineNumber: 92}})
	          )
	          , s.data
	        )
	      );
	    });

	    return sectionElems;
	  }
	}

	const _jsxFileName$f = "/Users/logan/Dev/apps/inbox/src/js/components/inbox.js";
	class InboxPage extends react_1 {
	  constructor(props) {
	    super(props);
	  }

	  render() {
	    let content;

	    if (this.props.store.views.inbox === "inbox-recent") {
	      content = react.createElement(InboxRecentPage, { ...this.props, __self: this, __source: {fileName: _jsxFileName$f, lineNumber: 15}} );
	    } else if (this.props.store.views.inbox === "inbox-list") {
	      content = react.createElement(InboxAllPage, { ...this.props, __self: this, __source: {fileName: _jsxFileName$f, lineNumber: 17}} );
	    }

	    return (
	      react.createElement('div', { className: "inbox-page container" , __self: this, __source: {fileName: _jsxFileName$f, lineNumber: 21}}
	        , content
	      )
	    );
	  }
	}

	function _defineProperty(a,t,e){return t in a?Object.defineProperty(a,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):a[t]=e,a}function _objectSpread(a){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{},r=Object.keys(e);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(e).filter(function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.forEach(function(t){_defineProperty(a,t,e[t]);});}return a}function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var t=0,e=new Array(a.length);t<a.length;t++)e[t]=a[t];return e}}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function createCommonjsModule$1(a,t){return t={exports:{}},a(t,t.exports),t.exports}function getRawTag(a){var t=hasOwnProperty$2.call(a,symToStringTag$1),e=a[symToStringTag$1];try{a[symToStringTag$1]=void 0;var r=!0;}catch(a){}var b=nativeObjectToString.call(a);return r&&(t?a[symToStringTag$1]=e:delete a[symToStringTag$1]),b}function objectToString$1(a){return nativeObjectToString$1.call(a)}function baseGetTag(a){return null==a?void 0===a?undefinedTag:nullTag:symToStringTag&&symToStringTag in Object(a)?_getRawTag(a):_objectToString(a)}function isObjectLike(a){return null!=a&&"object"==typeof a}function isSymbol$1(a){return "symbol"==typeof a||isObjectLike_1(a)&&_baseGetTag(a)==symbolTag}function isKey(a,t){if(isArray_1(a))return !1;var e=typeof a;return !("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=a&&!isSymbol_1(a))||(reIsPlainProp.test(a)||!reIsDeepProp.test(a)||null!=t&&a in Object(t))}function isObject$1(a){var t=typeof a;return null!=a&&("object"==t||"function"==t)}function isFunction$1(a){if(!isObject_1(a))return !1;var t=_baseGetTag(a);return t==funcTag||t==genTag||t==asyncTag||t==proxyTag}function isMasked(a){return !!maskSrcKey&&maskSrcKey in a}function toSource(a){if(null!=a){try{return funcToString$1.call(a)}catch(a){}try{return a+""}catch(a){}}return ""}function baseIsNative(a){return !(!isObject_1(a)||_isMasked(a))&&(isFunction_1(a)?reIsNative:reIsHostCtor).test(_toSource(a))}function getValue(a,t){return null==a?void 0:a[t]}function getNative(a,t){var e=_getValue(a,t);return _baseIsNative(e)?e:void 0}function hashClear(){this.__data__=_nativeCreate?_nativeCreate(null):{},this.size=0;}function hashDelete(a){var t=this.has(a)&&delete this.__data__[a];return this.size-=t?1:0,t}function hashGet(a){var t=this.__data__;if(_nativeCreate){var e=t[a];return e===HASH_UNDEFINED?void 0:e}return hasOwnProperty$2$1.call(t,a)?t[a]:void 0}function hashHas(a){var t=this.__data__;return _nativeCreate?void 0!==t[a]:hasOwnProperty$3.call(t,a)}function hashSet(a,t){var e=this.__data__;return this.size+=this.has(a)?0:1,e[a]=_nativeCreate&&void 0===t?HASH_UNDEFINED$1:t,this}function Hash(a){var t=-1,e=null==a?0:a.length;for(this.clear();++t<e;){var r=a[t];this.set(r[0],r[1]);}}function listCacheClear(){this.__data__=[],this.size=0;}function eq(a,t){return a===t||a!==a&&t!==t}function assocIndexOf(a,t){for(var e=a.length;e--;)if(eq_1(a[e][0],t))return e;return -1}function listCacheDelete(a){var t=this.__data__,e=_assocIndexOf(t,a);return !(e<0)&&(e==t.length-1?t.pop():splice.call(t,e,1),--this.size,!0)}function listCacheGet(a){var t=this.__data__,e=_assocIndexOf(t,a);return e<0?void 0:t[e][1]}function listCacheHas(a){return _assocIndexOf(this.__data__,a)>-1}function listCacheSet(a,t){var e=this.__data__,r=_assocIndexOf(e,a);return r<0?(++this.size,e.push([a,t])):e[r][1]=t,this}function ListCache(a){var t=-1,e=null==a?0:a.length;for(this.clear();++t<e;){var r=a[t];this.set(r[0],r[1]);}}function mapCacheClear(){this.size=0,this.__data__={hash:new _Hash,map:new(_Map||_ListCache),string:new _Hash};}function isKeyable(a){var t=typeof a;return "string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==a:null===a}function getMapData(a,t){var e=a.__data__;return _isKeyable(t)?e["string"==typeof t?"string":"hash"]:e.map}function mapCacheDelete(a){var t=_getMapData(this,a).delete(a);return this.size-=t?1:0,t}function mapCacheGet(a){return _getMapData(this,a).get(a)}function mapCacheHas(a){return _getMapData(this,a).has(a)}function mapCacheSet(a,t){var e=_getMapData(this,a),r=e.size;return e.set(a,t),this.size+=e.size==r?0:1,this}function MapCache(a){var t=-1,e=null==a?0:a.length;for(this.clear();++t<e;){var r=a[t];this.set(r[0],r[1]);}}function memoize(a,t){if("function"!=typeof a||null!=t&&"function"!=typeof t)throw new TypeError(FUNC_ERROR_TEXT);var e=function(){var r=arguments,b=t?t.apply(this,r):r[0],s=e.cache;if(s.has(b))return s.get(b);var d=a.apply(this,r);return e.cache=s.set(b,d)||s,d};return e.cache=new(memoize.Cache||_MapCache),e}function memoizeCapped(a){var t=memoize_1(a,function(a){return e.size===MAX_MEMOIZE_SIZE&&e.clear(),a}),e=t.cache;return t}function arrayMap(a,t){for(var e=-1,r=null==a?0:a.length,b=Array(r);++e<r;)b[e]=t(a[e],e,a);return b}function baseToString(a){if("string"==typeof a)return a;if(isArray_1(a))return _arrayMap(a,baseToString)+"";if(isSymbol_1(a))return symbolToString?symbolToString.call(a):"";var t=a+"";return "0"==t&&1/a==-INFINITY?"-0":t}function toString$2(a){return null==a?"":_baseToString(a)}function castPath(a,t){return isArray_1(a)?a:_isKey(a,t)?[a]:_stringToPath(toString_1(a))}function toKey(a){if("string"==typeof a||isSymbol_1(a))return a;var t=a+"";return "0"==t&&1/a==-INFINITY$1?"-0":t}function baseGet(a,t){for(var e=0,r=(t=_castPath(t,a)).length;null!=a&&e<r;)a=a[_toKey(t[e++])];return e&&e==r?a:void 0}function get(a,t,e){var r=null==a?void 0:_baseGet(a,t);return void 0===r?e:r}function stackClear(){this.__data__=new _ListCache,this.size=0;}function stackDelete(a){var t=this.__data__,e=t.delete(a);return this.size=t.size,e}function stackGet(a){return this.__data__.get(a)}function stackHas(a){return this.__data__.has(a)}function stackSet(a,t){var e=this.__data__;if(e instanceof _ListCache){var r=e.__data__;if(!_Map||r.length<LARGE_ARRAY_SIZE-1)return r.push([a,t]),this.size=++e.size,this;e=this.__data__=new _MapCache(r);}return e.set(a,t),this.size=e.size,this}function Stack(a){var t=this.__data__=new _ListCache(a);this.size=t.size;}function arrayEach(a,t){for(var e=-1,r=null==a?0:a.length;++e<r&&!1!==t(a[e],e,a););return a}function baseAssignValue(a,t,e){"__proto__"==t&&_defineProperty$1?_defineProperty$1(a,t,{configurable:!0,enumerable:!0,value:e,writable:!0}):a[t]=e;}function assignValue(a,t,e){var r=a[t];hasOwnProperty$4.call(a,t)&&eq_1(r,e)&&(void 0!==e||t in a)||_baseAssignValue(a,t,e);}function copyObject(a,t,e,r){var b=!e;e||(e={});for(var s=-1,d=t.length;++s<d;){var c=t[s],o=r?r(e[c],a[c],c,e,a):void 0;void 0===o&&(o=a[c]),b?_baseAssignValue(e,c,o):_assignValue(e,c,o);}return e}function baseTimes(a,t){for(var e=-1,r=Array(a);++e<a;)r[e]=t(e);return r}function baseIsArguments(a){return isObjectLike_1(a)&&_baseGetTag(a)==argsTag$1}function stubFalse(){return !1}function isIndex(a,t){var e=typeof a;return !!(t=null==t?MAX_SAFE_INTEGER:t)&&("number"==e||"symbol"!=e&&reIsUint.test(a))&&a>-1&&a%1==0&&a<t}function isLength(a){return "number"==typeof a&&a>-1&&a%1==0&&a<=MAX_SAFE_INTEGER$1}function baseIsTypedArray(a){return isObjectLike_1(a)&&isLength_1(a.length)&&!!typedArrayTags[_baseGetTag(a)]}function baseUnary(a){return function(t){return a(t)}}function arrayLikeKeys(a,t){var e=isArray_1(a),r=!e&&isArguments_1(a),b=!e&&!r&&isBuffer_1(a),s=!e&&!r&&!b&&isTypedArray_1(a),d=e||r||b||s,c=d?_baseTimes(a.length,String):[],o=c.length;for(var n in a)!t&&!hasOwnProperty$5.call(a,n)||d&&("length"==n||b&&("offset"==n||"parent"==n)||s&&("buffer"==n||"byteLength"==n||"byteOffset"==n)||_isIndex(n,o))||c.push(n);return c}function isPrototype(a){var t=a&&a.constructor;return a===("function"==typeof t&&t.prototype||objectProto$9)}function overArg(a,t){return function(e){return a(t(e))}}function baseKeys(a){if(!_isPrototype(a))return _nativeKeys(a);var t=[];for(var e in Object(a))hasOwnProperty$7.call(a,e)&&"constructor"!=e&&t.push(e);return t}function isArrayLike(a){return null!=a&&isLength_1(a.length)&&!isFunction_1(a)}function keys$1(a){return isArrayLike_1(a)?_arrayLikeKeys(a):_baseKeys(a)}function baseAssign(a,t){return a&&_copyObject(t,keys_1$1(t),a)}function nativeKeysIn(a){var t=[];if(null!=a)for(var e in Object(a))t.push(e);return t}function baseKeysIn(a){if(!isObject_1(a))return _nativeKeysIn(a);var t=_isPrototype(a),e=[];for(var r in a)("constructor"!=r||!t&&hasOwnProperty$8.call(a,r))&&e.push(r);return e}function keysIn$1(a){return isArrayLike_1(a)?_arrayLikeKeys(a,!0):_baseKeysIn(a)}function baseAssignIn(a,t){return a&&_copyObject(t,keysIn_1(t),a)}function copyArray(a,t){var e=-1,r=a.length;for(t||(t=Array(r));++e<r;)t[e]=a[e];return t}function arrayFilter(a,t){for(var e=-1,r=null==a?0:a.length,b=0,s=[];++e<r;){var d=a[e];t(d,e,a)&&(s[b++]=d);}return s}function stubArray(){return []}function copySymbols(a,t){return _copyObject(a,_getSymbols(a),t)}function arrayPush(a,t){for(var e=-1,r=t.length,b=a.length;++e<r;)a[b+e]=t[e];return a}function copySymbolsIn(a,t){return _copyObject(a,_getSymbolsIn(a),t)}function baseGetAllKeys(a,t,e){var r=t(a);return isArray_1(a)?r:_arrayPush(r,e(a))}function getAllKeys(a){return _baseGetAllKeys(a,keys_1$1,_getSymbols)}function getAllKeysIn(a){return _baseGetAllKeys(a,keysIn_1,_getSymbolsIn)}function initCloneArray(a){var t=a.length,e=new a.constructor(t);return t&&"string"==typeof a[0]&&hasOwnProperty$9.call(a,"index")&&(e.index=a.index,e.input=a.input),e}function cloneArrayBuffer(a){var t=new a.constructor(a.byteLength);return new _Uint8Array(t).set(new _Uint8Array(a)),t}function cloneDataView(a,t){var e=t?_cloneArrayBuffer(a.buffer):a.buffer;return new a.constructor(e,a.byteOffset,a.byteLength)}function cloneRegExp(a){var t=new a.constructor(a.source,reFlags.exec(a));return t.lastIndex=a.lastIndex,t}function cloneSymbol(a){return symbolValueOf?Object(symbolValueOf.call(a)):{}}function cloneTypedArray(a,t){var e=t?_cloneArrayBuffer(a.buffer):a.buffer;return new a.constructor(e,a.byteOffset,a.length)}function initCloneByTag(a,t,e){var r=a.constructor;switch(t){case arrayBufferTag$2:return _cloneArrayBuffer(a);case boolTag$2:case dateTag$2:return new r(+a);case dataViewTag$3:return _cloneDataView(a,e);case float32Tag$2:case float64Tag$2:case int8Tag$2:case int16Tag$2:case int32Tag$2:case uint8Tag$2:case uint8ClampedTag$2:case uint16Tag$2:case uint32Tag$2:return _cloneTypedArray(a,e);case mapTag$3:return new r;case numberTag$2:case stringTag$2:return new r(a);case regexpTag$2:return _cloneRegExp(a);case setTag$3:return new r;case symbolTag$2:return _cloneSymbol(a)}}function initCloneObject(a){return "function"!=typeof a.constructor||_isPrototype(a)?{}:_baseCreate(_getPrototype(a))}function baseIsMap(a){return isObjectLike_1(a)&&_getTag(a)==mapTag$4}function baseIsSet(a){return isObjectLike_1(a)&&_getTag(a)==setTag$4}function baseClone(a,t,e,r,b,s){var d,c=t&CLONE_DEEP_FLAG$1,o=t&CLONE_FLAT_FLAG,n=t&CLONE_SYMBOLS_FLAG$1;if(e&&(d=b?e(a,r,b,s):e(a)),void 0!==d)return d;if(!isObject_1(a))return a;var i=isArray_1(a);if(i){if(d=_initCloneArray(a),!c)return _copyArray(a,d)}else{var f=_getTag(a),l=f==funcTag$1||f==genTag$1;if(isBuffer_1(a))return _cloneBuffer(a,c);if(f==objectTag||f==argsTag||l&&!b){if(d=o||l?{}:_initCloneObject(a),!c)return o?_copySymbolsIn(a,_baseAssignIn(d,a)):_copySymbols(a,_baseAssign(d,a))}else{if(!cloneableTags[f])return b?a:{};d=_initCloneByTag(a,f,c);}}s||(s=new _Stack);var g=s.get(a);if(g)return g;if(s.set(a,d),isSet_1(a))return a.forEach(function(r){d.add(baseClone(r,t,e,r,a,s));}),d;if(isMap_1(a))return a.forEach(function(r,b){d.set(b,baseClone(r,t,e,b,a,s));}),d;var m=n?o?_getAllKeysIn:_getAllKeys:o?keysIn:keys_1$1,h=i?void 0:m(a);return _arrayEach(h||a,function(r,b){h&&(r=a[b=r]),_assignValue(d,b,baseClone(r,t,e,b,a,s));}),d}function cloneDeep(a){return _baseClone(a,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG)}function isUndefined$1(a){return void 0===a}function isString$1(a){return "string"==typeof a||!isArray_1(a)&&isObjectLike_1(a)&&_baseGetTag(a)==stringTag$3}function isUndefined$1$1(a){return void 0===a}function translate(a){return {a:1,c:0,e:a,b:0,d:1,f:arguments.length>1&&void 0!==arguments[1]?arguments[1]:0}}function _toConsumableArray$1(a){if(Array.isArray(a)){for(var t=0,e=Array(a.length);t<a.length;t++)e[t]=a[t];return e}return Array.from(a)}function _toArray$1(a){return Array.isArray(a)?a:Array.from(a)}function transform(){for(var a=arguments.length,t=Array(a),e=0;e<a;e++)t[e]=arguments[e];var r=function(a,t){return {a:a.a*t.a+a.c*t.b,c:a.a*t.c+a.c*t.d,e:a.a*t.e+a.c*t.f+a.e,b:a.b*t.a+a.d*t.b,d:a.b*t.c+a.d*t.d,f:a.b*t.e+a.d*t.f+a.f}};switch((t=Array.isArray(t[0])?t[0]:t).length){case 0:throw new Error("no matrices provided");case 1:return t[0];case 2:return r(t[0],t[1]);default:var b=_toArray$1(t),s=b[0],d=b[1],c=b.slice(2),o=r(s,d);return transform.apply(void 0,[o].concat(_toConsumableArray$1(c)))}}function scale(a){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;return isUndefined$1$1(t)&&(t=a),{a:a,c:0,e:0,b:0,d:t,f:0}}function toSVG(a){return toString$2$1(a)}function toString$2$1(a){return "matrix("+a.a+","+a.b+","+a.c+","+a.d+","+a.e+","+a.f+")"}var isArray$2=Array.isArray,isArray_1=isArray$2,commonjsGlobal$1="undefined"!=typeof window?window:"undefined"!=typeof global$1?global$1:"undefined"!=typeof self?self:{},freeGlobal="object"==typeof commonjsGlobal$1&&commonjsGlobal$1&&commonjsGlobal$1.Object===Object&&commonjsGlobal$1,_freeGlobal=freeGlobal,freeSelf="object"==typeof self&&self&&self.Object===Object&&self,root=_freeGlobal||freeSelf||Function("return this")(),_root=root,Symbol$1=_root.Symbol,_Symbol=Symbol$1,objectProto=Object.prototype,hasOwnProperty$2=objectProto.hasOwnProperty,nativeObjectToString=objectProto.toString,symToStringTag$1=_Symbol?_Symbol.toStringTag:void 0,_getRawTag=getRawTag,objectProto$1=Object.prototype,nativeObjectToString$1=objectProto$1.toString,_objectToString=objectToString$1,nullTag="[object Null]",undefinedTag="[object Undefined]",symToStringTag=_Symbol?_Symbol.toStringTag:void 0,_baseGetTag=baseGetTag,isObjectLike_1=isObjectLike,symbolTag="[object Symbol]",isSymbol_1=isSymbol$1,reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/,_isKey=isKey,isObject_1=isObject$1,asyncTag="[object AsyncFunction]",funcTag="[object Function]",genTag="[object GeneratorFunction]",proxyTag="[object Proxy]",isFunction_1=isFunction$1,coreJsData=_root["__core-js_shared__"],_coreJsData=coreJsData,maskSrcKey=function(){var a=/[^.]+$/.exec(_coreJsData&&_coreJsData.keys&&_coreJsData.keys.IE_PROTO||"");return a?"Symbol(src)_1."+a:""}(),_isMasked=isMasked,funcProto$1=Function.prototype,funcToString$1=funcProto$1.toString,_toSource=toSource,reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reIsHostCtor=/^\[object .+?Constructor\]$/,funcProto=Function.prototype,objectProto$2=Object.prototype,funcToString=funcProto.toString,hasOwnProperty$1$1=objectProto$2.hasOwnProperty,reIsNative=RegExp("^"+funcToString.call(hasOwnProperty$1$1).replace(reRegExpChar,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),_baseIsNative=baseIsNative,_getValue=getValue,_getNative=getNative,nativeCreate=_getNative(Object,"create"),_nativeCreate=nativeCreate,_hashClear=hashClear,_hashDelete=hashDelete,HASH_UNDEFINED="__lodash_hash_undefined__",objectProto$3=Object.prototype,hasOwnProperty$2$1=objectProto$3.hasOwnProperty,_hashGet=hashGet,objectProto$4=Object.prototype,hasOwnProperty$3=objectProto$4.hasOwnProperty,_hashHas=hashHas,HASH_UNDEFINED$1="__lodash_hash_undefined__",_hashSet=hashSet;Hash.prototype.clear=_hashClear,Hash.prototype.delete=_hashDelete,Hash.prototype.get=_hashGet,Hash.prototype.has=_hashHas,Hash.prototype.set=_hashSet;var _Hash=Hash,_listCacheClear=listCacheClear,eq_1=eq,_assocIndexOf=assocIndexOf,arrayProto=Array.prototype,splice=arrayProto.splice,_listCacheDelete=listCacheDelete,_listCacheGet=listCacheGet,_listCacheHas=listCacheHas,_listCacheSet=listCacheSet;ListCache.prototype.clear=_listCacheClear,ListCache.prototype.delete=_listCacheDelete,ListCache.prototype.get=_listCacheGet,ListCache.prototype.has=_listCacheHas,ListCache.prototype.set=_listCacheSet;var _ListCache=ListCache,Map$1=_getNative(_root,"Map"),_Map=Map$1,_mapCacheClear=mapCacheClear,_isKeyable=isKeyable,_getMapData=getMapData,_mapCacheDelete=mapCacheDelete,_mapCacheGet=mapCacheGet,_mapCacheHas=mapCacheHas,_mapCacheSet=mapCacheSet;MapCache.prototype.clear=_mapCacheClear,MapCache.prototype.delete=_mapCacheDelete,MapCache.prototype.get=_mapCacheGet,MapCache.prototype.has=_mapCacheHas,MapCache.prototype.set=_mapCacheSet;var _MapCache=MapCache,FUNC_ERROR_TEXT="Expected a function";memoize.Cache=_MapCache;var memoize_1=memoize,MAX_MEMOIZE_SIZE=500,_memoizeCapped=memoizeCapped,rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,reEscapeChar=/\\(\\)?/g,stringToPath=_memoizeCapped(function(a){var t=[];return 46===a.charCodeAt(0)&&t.push(""),a.replace(rePropName,function(a,e,r,b){t.push(r?b.replace(reEscapeChar,"$1"):e||a);}),t}),_stringToPath=stringToPath,_arrayMap=arrayMap,INFINITY=1/0,symbolProto=_Symbol?_Symbol.prototype:void 0,symbolToString=symbolProto?symbolProto.toString:void 0,_baseToString=baseToString,toString_1=toString$2,_castPath=castPath,INFINITY$1=1/0,_toKey=toKey,_baseGet=baseGet,get_1$1=get,_stackClear=stackClear,_stackDelete=stackDelete,_stackGet=stackGet,_stackHas=stackHas,LARGE_ARRAY_SIZE=200,_stackSet=stackSet;Stack.prototype.clear=_stackClear,Stack.prototype.delete=_stackDelete,Stack.prototype.get=_stackGet,Stack.prototype.has=_stackHas,Stack.prototype.set=_stackSet;var _Stack=Stack,_arrayEach=arrayEach,defineProperty=function(){try{var a=_getNative(Object,"defineProperty");return a({},"",{}),a}catch(a){}}(),_defineProperty$1=defineProperty,_baseAssignValue=baseAssignValue,objectProto$5=Object.prototype,hasOwnProperty$4=objectProto$5.hasOwnProperty,_assignValue=assignValue,_copyObject=copyObject,_baseTimes=baseTimes,argsTag$1="[object Arguments]",_baseIsArguments=baseIsArguments,objectProto$7=Object.prototype,hasOwnProperty$6=objectProto$7.hasOwnProperty,propertyIsEnumerable=objectProto$7.propertyIsEnumerable,isArguments=_baseIsArguments(function(){return arguments}())?_baseIsArguments:function(a){return isObjectLike_1(a)&&hasOwnProperty$6.call(a,"callee")&&!propertyIsEnumerable.call(a,"callee")},isArguments_1=isArguments,stubFalse_1=stubFalse,isBuffer_1=createCommonjsModule$1(function(a,t){var e=t&&!t.nodeType&&t,r=e&&!0&&a&&!a.nodeType&&a,b=r&&r.exports===e?_root.Buffer:void 0,s=(b?b.isBuffer:void 0)||stubFalse_1;a.exports=s;}),MAX_SAFE_INTEGER=9007199254740991,reIsUint=/^(?:0|[1-9]\d*)$/,_isIndex=isIndex,MAX_SAFE_INTEGER$1=9007199254740991,isLength_1=isLength,argsTag$2="[object Arguments]",arrayTag$1="[object Array]",boolTag$1="[object Boolean]",dateTag$1="[object Date]",errorTag$1="[object Error]",funcTag$2="[object Function]",mapTag$1="[object Map]",numberTag$1="[object Number]",objectTag$1="[object Object]",regexpTag$1="[object RegExp]",setTag$1="[object Set]",stringTag$1="[object String]",weakMapTag$1="[object WeakMap]",arrayBufferTag$1="[object ArrayBuffer]",dataViewTag$1="[object DataView]",float32Tag$1="[object Float32Array]",float64Tag$1="[object Float64Array]",int8Tag$1="[object Int8Array]",int16Tag$1="[object Int16Array]",int32Tag$1="[object Int32Array]",uint8Tag$1="[object Uint8Array]",uint8ClampedTag$1="[object Uint8ClampedArray]",uint16Tag$1="[object Uint16Array]",uint32Tag$1="[object Uint32Array]",typedArrayTags={};typedArrayTags[float32Tag$1]=typedArrayTags[float64Tag$1]=typedArrayTags[int8Tag$1]=typedArrayTags[int16Tag$1]=typedArrayTags[int32Tag$1]=typedArrayTags[uint8Tag$1]=typedArrayTags[uint8ClampedTag$1]=typedArrayTags[uint16Tag$1]=typedArrayTags[uint32Tag$1]=!0,typedArrayTags[argsTag$2]=typedArrayTags[arrayTag$1]=typedArrayTags[arrayBufferTag$1]=typedArrayTags[boolTag$1]=typedArrayTags[dataViewTag$1]=typedArrayTags[dateTag$1]=typedArrayTags[errorTag$1]=typedArrayTags[funcTag$2]=typedArrayTags[mapTag$1]=typedArrayTags[numberTag$1]=typedArrayTags[objectTag$1]=typedArrayTags[regexpTag$1]=typedArrayTags[setTag$1]=typedArrayTags[stringTag$1]=typedArrayTags[weakMapTag$1]=!1;var _baseIsTypedArray=baseIsTypedArray,_baseUnary=baseUnary,_nodeUtil=createCommonjsModule$1(function(a,t){var e=t&&!t.nodeType&&t,r=e&&!0&&a&&!a.nodeType&&a,b=r&&r.exports===e&&_freeGlobal.process,s=function(){try{var a=r&&r.require&&r.require("util").types;return a||b&&b.binding&&b.binding("util")}catch(a){}}();a.exports=s;}),nodeIsTypedArray=_nodeUtil&&_nodeUtil.isTypedArray,isTypedArray=nodeIsTypedArray?_baseUnary(nodeIsTypedArray):_baseIsTypedArray,isTypedArray_1=isTypedArray,objectProto$6=Object.prototype,hasOwnProperty$5=objectProto$6.hasOwnProperty,_arrayLikeKeys=arrayLikeKeys,objectProto$9=Object.prototype,_isPrototype=isPrototype,_overArg=overArg,nativeKeys=_overArg(Object.keys,Object),_nativeKeys=nativeKeys,objectProto$8=Object.prototype,hasOwnProperty$7=objectProto$8.hasOwnProperty,_baseKeys=baseKeys,isArrayLike_1=isArrayLike,keys_1$1=keys$1,_baseAssign=baseAssign,_nativeKeysIn=nativeKeysIn,objectProto$10=Object.prototype,hasOwnProperty$8=objectProto$10.hasOwnProperty,_baseKeysIn=baseKeysIn,keysIn_1=keysIn$1,_baseAssignIn=baseAssignIn,_cloneBuffer=createCommonjsModule$1(function(a,t){function e(a,t){if(t)return a.slice();var e=a.length,r=d?d(e):new a.constructor(e);return a.copy(r),r}var r=t&&!t.nodeType&&t,b=r&&!0&&a&&!a.nodeType&&a,s=b&&b.exports===r?_root.Buffer:void 0,d=s?s.allocUnsafe:void 0;a.exports=e;}),_copyArray=copyArray,_arrayFilter=arrayFilter,stubArray_1=stubArray,objectProto$11=Object.prototype,propertyIsEnumerable$1=objectProto$11.propertyIsEnumerable,nativeGetSymbols=Object.getOwnPropertySymbols,getSymbols=nativeGetSymbols?function(a){return null==a?[]:(a=Object(a),_arrayFilter(nativeGetSymbols(a),function(t){return propertyIsEnumerable$1.call(a,t)}))}:stubArray_1,_getSymbols=getSymbols,_copySymbols=copySymbols,_arrayPush=arrayPush,getPrototype=_overArg(Object.getPrototypeOf,Object),_getPrototype=getPrototype,nativeGetSymbols$1=Object.getOwnPropertySymbols,getSymbolsIn=nativeGetSymbols$1?function(a){for(var t=[];a;)_arrayPush(t,_getSymbols(a)),a=_getPrototype(a);return t}:stubArray_1,_getSymbolsIn=getSymbolsIn,_copySymbolsIn=copySymbolsIn,_baseGetAllKeys=baseGetAllKeys,_getAllKeys=getAllKeys,_getAllKeysIn=getAllKeysIn,DataView$1=_getNative(_root,"DataView"),_DataView=DataView$1,Promise$1=_getNative(_root,"Promise"),_Promise=Promise$1,Set$1=_getNative(_root,"Set"),_Set=Set$1,WeakMap=_getNative(_root,"WeakMap"),_WeakMap=WeakMap,mapTag$2="[object Map]",objectTag$2="[object Object]",promiseTag="[object Promise]",setTag$2="[object Set]",weakMapTag$2="[object WeakMap]",dataViewTag$2="[object DataView]",dataViewCtorString=_toSource(_DataView),mapCtorString=_toSource(_Map),promiseCtorString=_toSource(_Promise),setCtorString=_toSource(_Set),weakMapCtorString=_toSource(_WeakMap),getTag$1=_baseGetTag;(_DataView&&getTag$1(new _DataView(new ArrayBuffer(1)))!=dataViewTag$2||_Map&&getTag$1(new _Map)!=mapTag$2||_Promise&&getTag$1(_Promise.resolve())!=promiseTag||_Set&&getTag$1(new _Set)!=setTag$2||_WeakMap&&getTag$1(new _WeakMap)!=weakMapTag$2)&&(getTag$1=function(a){var t=_baseGetTag(a),e=t==objectTag$2?a.constructor:void 0,r=e?_toSource(e):"";if(r)switch(r){case dataViewCtorString:return dataViewTag$2;case mapCtorString:return mapTag$2;case promiseCtorString:return promiseTag;case setCtorString:return setTag$2;case weakMapCtorString:return weakMapTag$2}return t});var _getTag=getTag$1,objectProto$12=Object.prototype,hasOwnProperty$9=objectProto$12.hasOwnProperty,_initCloneArray=initCloneArray,Uint8Array$1=_root.Uint8Array,_Uint8Array=Uint8Array$1,_cloneArrayBuffer=cloneArrayBuffer,_cloneDataView=cloneDataView,reFlags=/\w*$/,_cloneRegExp=cloneRegExp,symbolProto$1=_Symbol?_Symbol.prototype:void 0,symbolValueOf=symbolProto$1?symbolProto$1.valueOf:void 0,_cloneSymbol=cloneSymbol,_cloneTypedArray=cloneTypedArray,boolTag$2="[object Boolean]",dateTag$2="[object Date]",mapTag$3="[object Map]",numberTag$2="[object Number]",regexpTag$2="[object RegExp]",setTag$3="[object Set]",stringTag$2="[object String]",symbolTag$2="[object Symbol]",arrayBufferTag$2="[object ArrayBuffer]",dataViewTag$3="[object DataView]",float32Tag$2="[object Float32Array]",float64Tag$2="[object Float64Array]",int8Tag$2="[object Int8Array]",int16Tag$2="[object Int16Array]",int32Tag$2="[object Int32Array]",uint8Tag$2="[object Uint8Array]",uint8ClampedTag$2="[object Uint8ClampedArray]",uint16Tag$2="[object Uint16Array]",uint32Tag$2="[object Uint32Array]",_initCloneByTag=initCloneByTag,objectCreate=Object.create,baseCreate=function(){function a(){}return function(t){if(!isObject_1(t))return {};if(objectCreate)return objectCreate(t);a.prototype=t;var e=new a;return a.prototype=void 0,e}}(),_baseCreate=baseCreate,_initCloneObject=initCloneObject,mapTag$4="[object Map]",_baseIsMap=baseIsMap,nodeIsMap=_nodeUtil&&_nodeUtil.isMap,isMap=nodeIsMap?_baseUnary(nodeIsMap):_baseIsMap,isMap_1=isMap,setTag$4="[object Set]",_baseIsSet=baseIsSet,nodeIsSet=_nodeUtil&&_nodeUtil.isSet,isSet=nodeIsSet?_baseUnary(nodeIsSet):_baseIsSet,isSet_1=isSet,CLONE_DEEP_FLAG$1=1,CLONE_FLAT_FLAG=2,CLONE_SYMBOLS_FLAG$1=4,argsTag="[object Arguments]",arrayTag="[object Array]",boolTag="[object Boolean]",dateTag="[object Date]",errorTag="[object Error]",funcTag$1="[object Function]",genTag$1="[object GeneratorFunction]",mapTag="[object Map]",numberTag="[object Number]",objectTag="[object Object]",regexpTag="[object RegExp]",setTag="[object Set]",stringTag="[object String]",symbolTag$1="[object Symbol]",weakMapTag="[object WeakMap]",arrayBufferTag="[object ArrayBuffer]",dataViewTag="[object DataView]",float32Tag="[object Float32Array]",float64Tag="[object Float64Array]",int8Tag="[object Int8Array]",int16Tag="[object Int16Array]",int32Tag="[object Int32Array]",uint8Tag="[object Uint8Array]",uint8ClampedTag="[object Uint8ClampedArray]",uint16Tag="[object Uint16Array]",uint32Tag="[object Uint32Array]",cloneableTags={};cloneableTags[argsTag]=cloneableTags[arrayTag]=cloneableTags[arrayBufferTag]=cloneableTags[dataViewTag]=cloneableTags[boolTag]=cloneableTags[dateTag]=cloneableTags[float32Tag]=cloneableTags[float64Tag]=cloneableTags[int8Tag]=cloneableTags[int16Tag]=cloneableTags[int32Tag]=cloneableTags[mapTag]=cloneableTags[numberTag]=cloneableTags[objectTag]=cloneableTags[regexpTag]=cloneableTags[setTag]=cloneableTags[stringTag]=cloneableTags[symbolTag$1]=cloneableTags[uint8Tag]=cloneableTags[uint8ClampedTag]=cloneableTags[uint16Tag]=cloneableTags[uint32Tag]=!0,cloneableTags[errorTag]=cloneableTags[funcTag$1]=cloneableTags[weakMapTag]=!1;var _baseClone=baseClone,CLONE_DEEP_FLAG=1,CLONE_SYMBOLS_FLAG=4,cloneDeep_1$1=cloneDeep,isUndefined_1$1=isUndefined$1,stringTag$3="[object String]",isString_1$1=isString$1,symbols={48176644:{meta:{setID:"48176644",set:["48176644"],setBaseIDs:["d.cq.2.bbbb.0"],rootBaseID:"d.cq.2.bbbb",rootIDHash:"48176644"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(6.123234262925839e-17,1,-1,6.123234262925839e-17,65,0)"},children:[{attr:{d:"M 128 2 L 0 2 L 0 0 L 128 0 L 128 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(6.123234262925839e-17,1,-1,6.123234262925839e-17,49,0)"},children:[{attr:{d:"M 128 2 L 0 2 L 0 0 L 128 0 L 128 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(6.123234262925839e-17,1,-1,6.123234262925839e-17,33,0)"},children:[{attr:{d:"M 128 2 L 0 2 L 0 0 L 128 0 L 128 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(6.123234262925839e-17,1,-1,6.123234262925839e-17,17,0)"},children:[{attr:{d:"M 128 2 L 0 2 L 0 0 L 128 0 L 128 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.cq.2.bbbb.0",baseID:"d.cq.2.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:2,paint:"BG",key:"cq",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},54112535:{meta:{setID:"54112535",set:["54112535"],setBaseIDs:["d.bd.2.abbb.0"],rootBaseID:"d.bd.2.abbb",rootIDHash:"54112535"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,79,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.bd.2.abbb.0",baseID:"d.bd.2.abbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:2,paint:"BG",key:"bd",edgemap:["a","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},62519049:{meta:{setID:"62519049",set:["62519049"],setBaseIDs:["d.dk.4.bbbb.0"],rootBaseID:"d.dk.4.bbbb",rootIDHash:"62519049"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,1.8369702788777518e-16,33)"},children:[{attr:{d:"M 2 0 C 2 17.12081527709961 15.87918472290039 31 33 31 L 33 33 C 14.774616241455078 33 0 18.225383758544922 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dk.4.bbbb.0",baseID:"d.dk.4.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"dk",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},83023171:{meta:{setID:"83023171",set:["83023171"],setBaseIDs:["d.dw.4.abba.270"],rootBaseID:"d.dw.4.abba",rootIDHash:"83023171"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,1.8369702788777518e-16,65)"},children:[{attr:{d:"M 20.63819122314453 90.74864959716797 C 32.164886474609375 113.97933197021484 47.90560531616211 127.96875 65 127.96875 L 65 130 C 46.74819564819336 130 30.48891258239746 115.1152572631836 18.85215950012207 91.66275787353516 C 7.186376571655273 68.15177154541016 0 35.742618560791016 0 0 L 2 0 C 2 35.493431091308594 9.140524864196777 67.57646942138672 20.63819122314453 90.74864959716797 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dw.4.abba.270",baseID:"d.dw.4.abba",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"dw",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},e3621cc2:{meta:{setID:"e3621cc2",set:["e3621cc2"],setBaseIDs:["g.aa.4.abba.90"],rootBaseID:"g.aa.4.abba",rootIDHash:"e3621cc2"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,0,128)"},children:[{attr:{d:"M 0 0 L 128 0 L 128 128 C 57.30760192871094 128 0 70.69239807128906 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"g.aa.4.abba.90",baseID:"g.aa.4.abba",type:"g",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"FG",key:"aa",style:{fill:"FG",stroke:"NO"}},tag:"g"}],tag:"g"},"7faaca8c":{meta:{setID:"7faaca8c",set:["7faaca8c"],setBaseIDs:["d.bj.2.bbbb.0"],rootBaseID:"d.bj.2.bbbb",rootIDHash:"7faaca8c"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(0.7071067690849304,0.7071067690849304,-0.7071067690849304,0.7071067690849304,0.7090948224067688,-0.7035711407661438)"},children:[{attr:{d:"M 0 0 L 180.90365600585938 0 L 180.90365600585938 1.997485876083374 L 0 1.997485876083374 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.bj.2.bbbb.0",baseID:"d.bj.2.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:2,paint:"BG",key:"bj",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"36a4b4a8":{meta:{setID:"36a4b4a8",set:["36a4b4a8"],setBaseIDs:["d.bh.1.bbbb.0"],rootBaseID:"d.bh.1.bbbb",rootIDHash:"36a4b4a8"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,56,56)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.bh.1.bbbb.0",baseID:"d.bh.1.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:1,paint:"BG",key:"bh",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"5dfed122":{meta:{setID:"5dfed122",set:["5dfed122"],setBaseIDs:["d.bi.1.bbbb.0"],rootBaseID:"d.bi.1.bbbb",rootIDHash:"5dfed122"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,8,104)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.bi.1.bbbb.0",baseID:"d.bi.1.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:1,paint:"FG",key:"bi",edgemap:["b","b","b","b"],style:{fill:"FG",stroke:"NO"}},tag:"g"}],tag:"g"},de3bc3d1:{meta:{setID:"de3bc3d1",set:["de3bc3d1"],setBaseIDs:["g.ab.2.bbbb.0"],rootBaseID:"g.ab.2.bbbb",rootIDHash:"de3bc3d1"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 0 C 70.69239807128906 0 128 57.30760192871094 128 128 C 57.30760192871094 128 0 70.69239807128906 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"g.ab.2.bbbb.0",baseID:"g.ab.2.bbbb",type:"g",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:2,paint:"FG",key:"ab",edgemap:["b","b","b","b"],style:{fill:"FG",stroke:"NO"}},tag:"g"}],tag:"g"},"587b58fb":{meta:{setID:"587b58fb",set:["587b58fb"],setBaseIDs:["d.bz.4.bbbb.180"],rootBaseID:"d.bz.4.bbbb",rootIDHash:"587b58fb"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(1,0,0,1,3.0040283203125,3.004150390625)"},children:[{attr:{d:"M 35.03544616699219 84.578857421875 C 13.582061767578125 62.77294921875 0.26544189453125 32.942138671875 0 0 C 32.942420959472656 0.265380859375 62.77324676513672 13.58203125 84.57886505126953 35.03515625 L 35.03544616699219 84.578857421875 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.bz.4.bbbb.180",baseID:"d.bz.4.bbbb",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"bz",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"63454c71":{meta:{setID:"63454c71",set:["63454c71"],setBaseIDs:["d.el.4.abba.90"],rootBaseID:"d.el.4.abba",rootIDHash:"63454c71"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,40,72)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.el.4.abba.90",baseID:"d.el.4.abba",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"el",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"66b0fffd":{meta:{setID:"66b0fffd",set:["66b0fffd"],setBaseIDs:["d.bk.4.bbbb.0"],rootBaseID:"d.bk.4.bbbb",rootIDHash:"66b0fffd"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(-4.371138828673793e-8,-1,1,-4.371138828673793e-8,0,130)"},children:[{attr:{d:"M 2 0 C 2 70.69239807128906 59.30760192871094 128 130 128 L 130 130 C 58.203033447265625 130 0 71.79696655273438 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.bk.4.bbbb.0",baseID:"d.bk.4.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"bk",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"7a365cc2":{meta:{setID:"7a365cc2",set:["7a365cc2"],setBaseIDs:["g.ad.1.bbbb.0"],rootBaseID:"g.ad.1.bbbb",rootIDHash:"7a365cc2"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 64 C 0 28.65378189086914 28.65378189086914 0 64 0 C 99.34622192382812 0 128 28.65378189086914 128 64 C 128 99.34622192382812 99.34622192382812 128 64 128 C 28.65378189086914 128 0 99.34622192382812 0 64 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"g.ad.1.bbbb.0",baseID:"g.ad.1.bbbb",type:"g",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:1,paint:"FG",key:"ad",edgemap:["b","b","b","b"],style:{fill:"FG",stroke:"NO"}},tag:"g"}],tag:"g"},"2befa75a":{meta:{setID:"2befa75a",set:["2befa75a"],setBaseIDs:["d.bv.1.bbbb.0"],rootBaseID:"d.bv.1.bbbb",rootIDHash:"2befa75a"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,55,55)"},children:[{attr:{d:"M 9 2 C 5.134006977081299 2 2 5.134006977081299 2 9 C 2 12.86599349975586 5.134006977081299 16 9 16 C 12.86599349975586 16 16 12.86599349975586 16 9 C 16 5.134006977081299 12.86599349975586 2 9 2 Z M 0 9 C 0 4.029437065124512 4.029437065124512 0 9 0 C 13.970562934875488 0 18 4.029437065124512 18 9 C 18 13.970562934875488 13.970562934875488 18 9 18 C 4.029437065124512 18 0 13.970562934875488 0 9 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.bv.1.bbbb.0",baseID:"d.bv.1.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:1,paint:"BG",key:"bv",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},adfbec3:{meta:{setID:"adfbec3",set:["adfbec3"],setBaseIDs:["d.bq.4.abbb.0"],rootBaseID:"d.bq.4.abbb",rootIDHash:"adfbec3"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,-2,0)"},children:[{attr:{d:"M 2 0 C 2 35.34622573852539 30.65377426147461 64 66 64 C 101.34622955322266 64 130 35.34622573852539 130 0 L 132 0 C 132 36.4507942199707 102.45079803466797 66 66 66 C 29.549205780029297 66 0 36.4507942199707 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.bq.4.abbb.0",baseID:"d.bq.4.abbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"bq",edgemap:["a","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},a5c31631:{meta:{setID:"a5c31631",set:["a5c31631"],setBaseIDs:["g.aa.4.abba.270"],rootBaseID:"g.aa.4.abba",rootIDHash:"a5c31631"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,0,128)"},children:[{attr:{d:"M 0 0 L 128 0 L 128 128 C 57.30760192871094 128 0 70.69239807128906 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"g.aa.4.abba.270",baseID:"g.aa.4.abba",type:"g",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"FG",key:"aa",style:{fill:"FG",stroke:"NO"}},tag:"g"}],tag:"g"},b7b090cf:{meta:{setID:"b7b090cf",set:["b7b090cf"],setBaseIDs:["d.bm.1.bbbb.0"],rootBaseID:"d.bm.1.bbbb",rootIDHash:"b7b090cf"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,48,48)"},children:[{attr:{d:"M 32 16 C 32 24.836585998535156 24.836563110351562 32 16 32 C 7.1634368896484375 32 0 24.836585998535156 0 16 C 0 7.163410186767578 7.1634368896484375 0 16 0 C 24.836563110351562 0 32 7.163410186767578 32 16 Z M 16 24 C 20.41828155517578 24 24 20.41828155517578 24 16 C 24 11.581722259521484 20.41828155517578 8 16 8 C 11.581722259521484 8 8 11.581722259521484 8 16 C 8 20.41828155517578 11.581722259521484 24 16 24 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.bm.1.bbbb.0",baseID:"d.bm.1.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:1,paint:"BG",key:"bm",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"362aae07":{meta:{setID:"362aae07",set:["362aae07"],setBaseIDs:["g.ab.2.bbbb.90"],rootBaseID:"g.ab.2.bbbb",rootIDHash:"362aae07"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 0 C 70.69239807128906 0 128 57.30760192871094 128 128 C 57.30760192871094 128 0 70.69239807128906 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"g.ab.2.bbbb.90",baseID:"g.ab.2.bbbb",type:"g",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:2,paint:"FG",key:"ab",style:{fill:"FG",stroke:"NO"}},tag:"g"}],tag:"g"},b193cb04:{meta:{setID:"b193cb04",set:["b193cb04"],setBaseIDs:["d.bb.1.bbbb.0"],rootBaseID:"d.bb.1.bbbb",rootIDHash:"b193cb04"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,31,31)"},children:[{attr:{d:"M 33 64 C 50.120826721191406 64 64 50.120826721191406 64 33 C 64 15.879173278808594 50.120826721191406 2 33 2 C 15.879173278808594 2 2 15.879173278808594 2 33 C 2 50.120826721191406 15.879173278808594 64 33 64 Z M 33 66 C 51.22539520263672 66 66 51.22539520263672 66 33 C 66 14.774604797363281 51.22539520263672 0 33 0 C 14.774604797363281 0 0 14.774604797363281 0 33 C 0 51.22539520263672 14.774604797363281 66 33 66 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.bb.1.bbbb.0",baseID:"d.bb.1.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:1,paint:"BG",key:"bb",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},fbf3a00b:{meta:{setID:"fbf3a00b",set:["fbf3a00b"],setBaseIDs:["g.af.1.aaaa.0"],rootBaseID:"g.af.1.aaaa",rootIDHash:"fbf3a00b"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 0 L 128 0 L 128 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"g.af.1.aaaa.0",baseID:"g.af.1.aaaa",type:"g",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:1,paint:"FG",key:"af",edgemap:["a","a","a","a"],style:{fill:"FG",stroke:"NO"}},tag:"g"}],tag:"g"},b0aeb7df:{meta:{setID:"b0aeb7df",set:["b0aeb7df"],setBaseIDs:["d.cj.4.bbbb.0"],rootBaseID:"d.cj.4.bbbb",rootIDHash:"b0aeb7df"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,24,56)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.cj.4.bbbb.0",baseID:"d.cj.4.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"cj",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"82ff5e94":{meta:{setID:"82ff5e94",set:["82ff5e94"],setBaseIDs:["g.aa.4.abba.180"],rootBaseID:"g.aa.4.abba",rootIDHash:"82ff5e94"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,0,128)"},children:[{attr:{d:"M 0 0 L 128 0 L 128 128 C 57.30760192871094 128 0 70.69239807128906 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"g.aa.4.abba.180",baseID:"g.aa.4.abba",type:"g",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"FG",key:"aa",style:{fill:"FG",stroke:"NO"}},tag:"g"}],tag:"g"},"92e85004":{meta:{setID:"92e85004",set:["92e85004"],setBaseIDs:["d.dj.4.bbbb.180"],rootBaseID:"d.dj.4.bbbb",rootIDHash:"92e85004"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,1.8369702788777518e-16,65)"},children:[{attr:{d:"M 2 0 C 2 34.793914794921875 30.206085205078125 63 65 63 L 65 65 C 29.101516723632812 65 0 35.89848327636719 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dj.4.bbbb.180",baseID:"d.dj.4.bbbb",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"dj",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"19634ad2":{meta:{setID:"19634ad2",set:["19634ad2"],setBaseIDs:["g.ac.4.bbba.0"],rootBaseID:"g.ac.4.bbba",rootIDHash:"19634ad2"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(-1.8356867592648655e-16,-1,1,-1.838254724932924e-16,0,128)"},children:[{attr:{d:"M 64 0 L 128 0 L 128 64 C 128 99.3466796875 99.34600067138672 128 64 128 C 28.65380096435547 128 0 99.3466796875 0 64 L 0 0 L 64 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"g.ac.4.bbba.0",baseID:"g.ac.4.bbba",type:"g",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"FG",key:"ac",edgemap:["b","b","b","a"],style:{fill:"FG",stroke:"NO"}},tag:"g"}],tag:"g"},"42b4e3a3":{meta:{setID:"42b4e3a3",set:["42b4e3a3"],setBaseIDs:["d.cv.2.bbbb.0"],rootBaseID:"d.cv.2.bbbb",rootIDHash:"42b4e3a3"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(6.123234262925839e-17,1,-1,6.123234262925839e-17,97,0)"},children:[{attr:{d:"M 128 2 L 0 2 L 0 0 L 128 0 L 128 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.cv.2.bbbb.0",baseID:"d.cv.2.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:2,paint:"BG",key:"cv",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"335e8694":{meta:{setID:"335e8694",set:["335e8694"],setBaseIDs:["d.dj.4.bbbb.270"],rootBaseID:"d.dj.4.bbbb",rootIDHash:"335e8694"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,1.8369702788777518e-16,65)"},children:[{attr:{d:"M 2 0 C 2 34.793914794921875 30.206085205078125 63 65 63 L 65 65 C 29.101516723632812 65 0 35.89848327636719 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dj.4.bbbb.270",baseID:"d.dj.4.bbbb",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"dj",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"2f5059f3":{meta:{setID:"2f5059f3",set:["2f5059f3"],setBaseIDs:["d.do.4.bbbb.180"],rootBaseID:"d.do.4.bbbb",rootIDHash:"2f5059f3"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(0.7071067690849304,0.7071067690849304,-0.7071067690849304,0.7071067690849304,81.38351440429688,79.96847534179688)"},children:[{attr:{d:"M 43.37837600708008 2.001432180404663 L 0 2.001432180404663 L 0 0 L 43.37837600708008 0 L 43.37837600708008 2.001432180404663 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.do.4.bbbb.180",baseID:"d.do.4.bbbb",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"do",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"4d0779c1":{meta:{setID:"4d0779c1",set:["4d0779c1"],setBaseIDs:["d.di.4.bbbb.90"],rootBaseID:"d.di.4.bbbb",rootIDHash:"4d0779c1"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,1.8369702788777518e-16,97)"},children:[{attr:{d:"M 2 0 C 2 52.46701431274414 44.53298568725586 95 97 95 L 97 97 C 43.42841720581055 97 0 53.57158279418945 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.di.4.bbbb.90",baseID:"d.di.4.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"di",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"869bd8d8":{meta:{setID:"869bd8d8",set:["869bd8d8"],setBaseIDs:["d.bf.2.bbbb.90"],rootBaseID:"d.bf.2.bbbb",rootIDHash:"869bd8d8"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(6.123234262925839e-17,1,-1,6.123234262925839e-17,65,0)"},children:[{attr:{d:"M 128 2 L 0 2 L 0 0 L 128 0 L 128 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.bf.2.bbbb.90",baseID:"d.bf.2.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:2,paint:"BG",key:"bf",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"57ed51b0":{meta:{setID:"57ed51b0",set:["57ed51b0"],setBaseIDs:["d.dv.4.abba.90"],rootBaseID:"d.dv.4.abba",rootIDHash:"57ed51b0"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,-1.135031399922791e-13,97)"},children:[{attr:{d:"M 29.915496826171875 90.59327697753906 C 47.14462661743164 113.74211120605469 70.87230682373047 127.96875 97 127.96875 L 97 130 C 70.1083984375 130 45.83607482910156 115.35247039794922 28.320030212402344 91.81814575195312 C 10.80441665649414 68.28438568115234 0 35.818397521972656 0 0 L 2 0 C 2 35.41765594482422 12.685934066772461 67.44385528564453 29.915496826171875 90.59327697753906 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dv.4.abba.90",baseID:"d.dv.4.abba",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"dv",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},b0ac0b82:{meta:{setID:"b0ac0b82",set:["b0ac0b82"],setBaseIDs:["g.ac.4.bbba.180"],rootBaseID:"g.ac.4.bbba",rootIDHash:"b0ac0b82"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(-1.8356867592648655e-16,-1,1,-1.838254724932924e-16,0,128)"},children:[{attr:{d:"M 64 0 L 128 0 L 128 64 C 128 99.3466796875 99.34600067138672 128 64 128 C 28.65380096435547 128 0 99.3466796875 0 64 L 0 0 L 64 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"g.ac.4.bbba.180",baseID:"g.ac.4.bbba",type:"g",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"FG",key:"ac",style:{fill:"FG",stroke:"NO"}},tag:"g"}],tag:"g"},"10545ed3":{meta:{setID:"10545ed3",set:["10545ed3"],setBaseIDs:["d.do.4.bbbb.0"],rootBaseID:"d.do.4.bbbb",rootIDHash:"10545ed3"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(0.7071067690849304,0.7071067690849304,-0.7071067690849304,0.7071067690849304,81.38351440429688,79.96847534179688)"},children:[{attr:{d:"M 43.37837600708008 2.001432180404663 L 0 2.001432180404663 L 0 0 L 43.37837600708008 0 L 43.37837600708008 2.001432180404663 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.do.4.bbbb.0",baseID:"d.do.4.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"do",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},fd1b186c:{meta:{setID:"fd1b186c",set:["fd1b186c"],setBaseIDs:["d.bl.2.bbbb.90"],rootBaseID:"d.bl.2.bbbb",rootIDHash:"fd1b186c"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,15,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,31,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,47,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,63,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,79,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,95,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,111,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.bl.2.bbbb.90",baseID:"d.bl.2.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:2,paint:"BG",key:"bl",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},e5fae2fb:{meta:{setID:"e5fae2fb",set:["e5fae2fb"],setBaseIDs:["d.bj.2.bbbb.90"],rootBaseID:"d.bj.2.bbbb",rootIDHash:"e5fae2fb"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(0.7071067690849304,0.7071067690849304,-0.7071067690849304,0.7071067690849304,0.7090948224067688,-0.7035711407661438)"},children:[{attr:{d:"M 0 0 L 180.90365600585938 0 L 180.90365600585938 1.997485876083374 L 0 1.997485876083374 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.bj.2.bbbb.90",baseID:"d.bj.2.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:2,paint:"BG",key:"bj",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},bddfa3f3:{meta:{setID:"bddfa3f3",set:["bddfa3f3"],setBaseIDs:["d.ba.1.bbbb.0"],rootBaseID:"d.ba.1.bbbb",rootIDHash:"bddfa3f3"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,48,48)"},children:[{attr:{d:"M 32 16 C 32 24.83655548095703 24.83655548095703 32 16 32 C 7.163444519042969 32 0 24.83655548095703 0 16 C 0 7.163444519042969 7.163444519042969 0 16 0 C 24.83655548095703 0 32 7.163444519042969 32 16 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.ba.1.bbbb.0",baseID:"d.ba.1.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:1,paint:"BG",key:"ba",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"82610c41":{meta:{setID:"82610c41",set:["82610c41"],setBaseIDs:["d.ea.1.abba.0"],rootBaseID:"d.ea.1.abba",rootIDHash:"82610c41"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,15,15)"},children:[{attr:{d:"M 49 2 C 23.042621612548828 2 2 23.042621612548828 2 49 C 2 74.95738220214844 23.042621612548828 96 49 96 C 74.95738220214844 96 96 74.95738220214844 96 49 C 96 23.042621612548828 74.95738220214844 2 49 2 Z M 0 49 C 0 21.938051223754883 21.938051223754883 0 49 0 C 76.06195068359375 0 98 21.938051223754883 98 49 C 98 76.06195068359375 76.06195068359375 98 49 98 C 21.938051223754883 98 0 76.06195068359375 0 49 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.ea.1.abba.0",baseID:"d.ea.1.abba",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:1,paint:"BG",key:"ea",edgemap:["a","b","b","a"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"613cb28b":{meta:{setID:"613cb28b",set:["613cb28b"],setBaseIDs:["d.bq.4.abbb.90"],rootBaseID:"d.bq.4.abbb",rootIDHash:"613cb28b"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,-2,0)"},children:[{attr:{d:"M 2 0 C 2 35.34622573852539 30.65377426147461 64 66 64 C 101.34622955322266 64 130 35.34622573852539 130 0 L 132 0 C 132 36.4507942199707 102.45079803466797 66 66 66 C 29.549205780029297 66 0 36.4507942199707 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.bq.4.abbb.90",baseID:"d.bq.4.abbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"bq",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},fc65290b:{meta:{setID:"fc65290b",set:["fc65290b"],setBaseIDs:["d.cp.4.bbbb.180"],rootBaseID:"d.cp.4.bbbb",rootIDHash:"fc65290b"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(1,0,0,1,10.606582641601562,0)"},children:[{attr:{d:"M 69.29649353027344 79.903076171875 C 89.74546813964844 59.4541015625 102.39341735839844 31.2041015625 102.39341735839844 0 L 100.39341735839844 0 C 100.39341735839844 30.65185546875 87.96931457519531 58.40185546875 67.88227844238281 78.48876953125 L 69.29649353027344 79.903076171875 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 57.98277282714844 68.58935546875 C 75.53633117675781 51.035888671875 86.39341735839844 26.785888671875 86.39341735839844 0 L 84.39341735839844 0 C 84.39341735839844 26.2333984375 73.76017761230469 49.9833984375 56.56855773925781 67.175048828125 L 57.98277282714844 68.58935546875 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 46.6690673828125 57.275634765625 C 61.32719421386719 42.617431640625 70.39341735839844 22.367431640625 70.39341735839844 0 L 68.39341735839844 0 C 68.39341735839844 21.815185546875 59.55104064941406 41.565185546875 45.25483703613281 55.861328125 L 46.6690673828125 57.275634765625 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 35.3553466796875 45.9619140625 C 47.1180419921875 34.19921875 54.39341735839844 17.94921875 54.39341735839844 0 L 52.39341735839844 0 C 52.39341735839844 17.39697265625 45.34190368652344 33.14697265625 33.94114685058594 44.5478515625 L 35.3553466796875 45.9619140625 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 24.041656494140625 34.648193359375 C 32.908905029296875 25.781005859375 38.39341735839844 13.531005859375 38.39341735839844 0 L 36.39341735839844 0 C 36.39341735839844 12.978759765625 31.13275146484375 24.728515625 22.627410888671875 33.23388671875 L 24.041656494140625 34.648193359375 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 12.727935791015625 23.33447265625 C 18.69976806640625 17.362548828125 22.393417358398438 9.11279296875 22.393417358398438 0 L 20.393417358398438 0 C 20.393417358398438 8.560302734375 16.923629760742188 16.310546875 11.313735961914062 21.92041015625 L 12.727935791015625 23.33447265625 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 1.41424560546875 12.020751953125 C 4.490631103515625 8.9443359375 6.3934173583984375 4.6943359375 6.3934173583984375 0 L 4.3934173583984375 0 C 4.3934173583984375 4.14208984375 2.7144775390625 7.89208984375 0 10.606689453125 L 1.41424560546875 12.020751953125 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.cp.4.bbbb.180",baseID:"d.cp.4.bbbb",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"cp",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"952f1d85":{meta:{setID:"952f1d85",set:["952f1d85"],setBaseIDs:["d.ef.4.abba.90"],rootBaseID:"d.ef.4.abba",rootIDHash:"952f1d85"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,24,88)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.ef.4.abba.90",baseID:"d.ef.4.abba",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"ef",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},cb9b5189:{meta:{setID:"cb9b5189",set:["cb9b5189"],setBaseIDs:["d.dt.4.abba.90"],rootBaseID:"d.dt.4.abba",rootIDHash:"cb9b5189"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,46,0)"},children:[{attr:{d:"M 2 0 C 2 8.836556434631348 9.163443565368652 16 18 16 C 26.836557388305664 16 34 8.836556434631348 34 0 L 36 0 C 36 9.941126823425293 27.941125869750977 18 18 18 C 8.058874130249023 18 0 9.941126823425293 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dt.4.abba.90",baseID:"d.dt.4.abba",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"dt",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"462c645e":{meta:{setID:"462c645e",set:["462c645e"],setBaseIDs:["d.dl.4.bbbb.180"],rootBaseID:"d.dl.4.bbbb",rootIDHash:"462c645e"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(1,0,0,1,64,15)"},children:[{attr:{d:"M 49 49 C 49 21.938051223754883 27.06195068359375 0 0 0 L 0 2 C 25.957382202148438 2 47 23.042621612548828 47 49 L 49 49 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.dl.4.bbbb.180",baseID:"d.dl.4.bbbb",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"dl",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},d1fb16cc:{meta:{setID:"d1fb16cc",set:["d1fb16cc"],setBaseIDs:["d.cz.4.bbbb.0"],rootBaseID:"d.cz.4.bbbb",rootIDHash:"d1fb16cc"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,8,56)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.cz.4.bbbb.0",baseID:"d.cz.4.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"cz",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"6cb74008":{meta:{setID:"6cb74008",set:["6cb74008"],setBaseIDs:["g.aa.4.abba.0"],rootBaseID:"g.aa.4.abba",rootIDHash:"6cb74008"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,0,128)"},children:[{attr:{d:"M 0 0 L 128 0 L 128 128 C 57.30760192871094 128 0 70.69239807128906 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"g.aa.4.abba.0",baseID:"g.aa.4.abba",type:"g",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"FG",key:"aa",edgemap:["a","b","b","a"],style:{fill:"FG",stroke:"NO"}},tag:"g"}],tag:"g"},"2639d7d4":{meta:{setID:"2639d7d4",set:["2639d7d4"],setBaseIDs:["d.bo.4.bbba.90"],rootBaseID:"d.bo.4.bbba",rootIDHash:"2639d7d4"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,2,2)"},children:[{attr:{d:"M 0 0 L 0 123.984375 C 34.000030517578125 123.455322265625 64.73161315917969 109.459228515625 87.09544372558594 87.095458984375 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.bo.4.bbba.90",baseID:"d.bo.4.bbba",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"bo",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},c7af9494:{meta:{setID:"c7af9494",set:["c7af9494"],setBaseIDs:["d.dk.4.bbbb.270"],rootBaseID:"d.dk.4.bbbb",rootIDHash:"c7af9494"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,1.8369702788777518e-16,33)"},children:[{attr:{d:"M 2 0 C 2 17.12081527709961 15.87918472290039 31 33 31 L 33 33 C 14.774616241455078 33 0 18.225383758544922 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dk.4.bbbb.270",baseID:"d.dk.4.bbbb",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"dk",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"7210b66f":{meta:{setID:"7210b66f",set:["7210b66f"],setBaseIDs:["d.bo.4.bbba.0"],rootBaseID:"d.bo.4.bbba",rootIDHash:"7210b66f"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,2,2)"},children:[{attr:{d:"M 0 0 L 0 123.984375 C 34.000030517578125 123.455322265625 64.73161315917969 109.459228515625 87.09544372558594 87.095458984375 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.bo.4.bbba.0",baseID:"d.bo.4.bbba",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"bo",edgemap:["b","b","b","a"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"18f6b23e":{meta:{setID:"18f6b23e",set:["18f6b23e"],setBaseIDs:["d.cp.4.bbbb.0"],rootBaseID:"d.cp.4.bbbb",rootIDHash:"18f6b23e"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,10.606582641601562,0)"},children:[{attr:{d:"M 69.29649353027344 79.903076171875 C 89.74546813964844 59.4541015625 102.39341735839844 31.2041015625 102.39341735839844 0 L 100.39341735839844 0 C 100.39341735839844 30.65185546875 87.96931457519531 58.40185546875 67.88227844238281 78.48876953125 L 69.29649353027344 79.903076171875 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 57.98277282714844 68.58935546875 C 75.53633117675781 51.035888671875 86.39341735839844 26.785888671875 86.39341735839844 0 L 84.39341735839844 0 C 84.39341735839844 26.2333984375 73.76017761230469 49.9833984375 56.56855773925781 67.175048828125 L 57.98277282714844 68.58935546875 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 46.6690673828125 57.275634765625 C 61.32719421386719 42.617431640625 70.39341735839844 22.367431640625 70.39341735839844 0 L 68.39341735839844 0 C 68.39341735839844 21.815185546875 59.55104064941406 41.565185546875 45.25483703613281 55.861328125 L 46.6690673828125 57.275634765625 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 35.3553466796875 45.9619140625 C 47.1180419921875 34.19921875 54.39341735839844 17.94921875 54.39341735839844 0 L 52.39341735839844 0 C 52.39341735839844 17.39697265625 45.34190368652344 33.14697265625 33.94114685058594 44.5478515625 L 35.3553466796875 45.9619140625 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 24.041656494140625 34.648193359375 C 32.908905029296875 25.781005859375 38.39341735839844 13.531005859375 38.39341735839844 0 L 36.39341735839844 0 C 36.39341735839844 12.978759765625 31.13275146484375 24.728515625 22.627410888671875 33.23388671875 L 24.041656494140625 34.648193359375 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 12.727935791015625 23.33447265625 C 18.69976806640625 17.362548828125 22.393417358398438 9.11279296875 22.393417358398438 0 L 20.393417358398438 0 C 20.393417358398438 8.560302734375 16.923629760742188 16.310546875 11.313735961914062 21.92041015625 L 12.727935791015625 23.33447265625 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 1.41424560546875 12.020751953125 C 4.490631103515625 8.9443359375 6.3934173583984375 4.6943359375 6.3934173583984375 0 L 4.3934173583984375 0 C 4.3934173583984375 4.14208984375 2.7144775390625 7.89208984375 0 10.606689453125 L 1.41424560546875 12.020751953125 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.cp.4.bbbb.0",baseID:"d.cp.4.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"cp",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"13446f50":{meta:{setID:"13446f50",set:["13446f50"],setBaseIDs:["d.el.4.abba.0"],rootBaseID:"d.el.4.abba",rootIDHash:"13446f50"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,40,72)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.el.4.abba.0",baseID:"d.el.4.abba",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"el",edgemap:["a","b","b","a"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"2b187d87":{meta:{setID:"2b187d87",set:["2b187d87"],setBaseIDs:["d.bg.2.bbbb.0"],rootBaseID:"d.bg.2.bbbb",rootIDHash:"2b187d87"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,15,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.bg.2.bbbb.0",baseID:"d.bg.2.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:2,paint:"BG",key:"bg",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"1c9d4f11":{meta:{setID:"1c9d4f11",set:["1c9d4f11"],setBaseIDs:["d.do.4.bbbb.270"],rootBaseID:"d.do.4.bbbb",rootIDHash:"1c9d4f11"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(0.7071067690849304,0.7071067690849304,-0.7071067690849304,0.7071067690849304,81.38351440429688,79.96847534179688)"},children:[{attr:{d:"M 43.37837600708008 2.001432180404663 L 0 2.001432180404663 L 0 0 L 43.37837600708008 0 L 43.37837600708008 2.001432180404663 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.do.4.bbbb.270",baseID:"d.do.4.bbbb",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"do",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"69daeb1a":{meta:{setID:"69daeb1a",set:["69daeb1a"],setBaseIDs:["d.da.2.bbbb.90"],rootBaseID:"d.da.2.bbbb",rootIDHash:"69daeb1a"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(-1,-8.742277657347586e-8,8.742277657347586e-8,-1,128,65.00000762939453)"},children:[{attr:{d:"M 128 2 L 0 2 L 0 0 L 128 0 L 128 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.da.2.bbbb.90",baseID:"d.da.2.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:2,paint:"BG",key:"da",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},fe5cf0f4:{meta:{setID:"fe5cf0f4",set:["fe5cf0f4"],setBaseIDs:["d.bf.2.bbbb.0"],rootBaseID:"d.bf.2.bbbb",rootIDHash:"fe5cf0f4"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(6.123234262925839e-17,1,-1,6.123234262925839e-17,65,0)"},children:[{attr:{d:"M 128 2 L 0 2 L 0 0 L 128 0 L 128 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.bf.2.bbbb.0",baseID:"d.bf.2.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:2,paint:"BG",key:"bf",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"9e7ddd3d":{meta:{setID:"9e7ddd3d",set:["9e7ddd3d"],setBaseIDs:["d.cs.2.bbbb.0"],rootBaseID:"d.cs.2.bbbb",rootIDHash:"9e7ddd3d"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,111,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.cs.2.bbbb.0",baseID:"d.cs.2.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:2,paint:"BG",key:"cs",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"3cdcdb8c":{meta:{setID:"3cdcdb8c",set:["3cdcdb8c"],setBaseIDs:["d.dr.8.abba.90"],rootBaseID:"d.dr.8.abba",rootIDHash:"3cdcdb8c"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,2,2)"},children:[{attr:{d:"M 105.84061431884766 18.159381866455078 C 94.62081909179688 6.939587593078613 79.1208267211914 0 62 0 C 27.75835418701172 0 0 27.75835418701172 0 62 C 0 79.1208267211914 6.939587593078613 94.62081909179688 18.159381866455078 105.84061431884766 L 105.84061431884766 18.159381866455078 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.dr.8.abba.90",baseID:"d.dr.8.abba",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:8,paint:"BG",key:"dr",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},acc8c8fb:{meta:{setID:"acc8c8fb",set:["acc8c8fb"],setBaseIDs:["d.ef.4.abba.0"],rootBaseID:"d.ef.4.abba",rootIDHash:"acc8c8fb"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,24,88)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.ef.4.abba.0",baseID:"d.ef.4.abba",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"ef",edgemap:["a","b","b","a"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"4dae70af":{meta:{setID:"4dae70af",set:["4dae70af"],setBaseIDs:["d.dl.4.bbbb.0"],rootBaseID:"d.dl.4.bbbb",rootIDHash:"4dae70af"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,64,15)"},children:[{attr:{d:"M 49 49 C 49 21.938051223754883 27.06195068359375 0 0 0 L 0 2 C 25.957382202148438 2 47 23.042621612548828 47 49 L 49 49 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.dl.4.bbbb.0",baseID:"d.dl.4.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"dl",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},f0d5fe71:{meta:{setID:"f0d5fe71",set:["f0d5fe71"],setBaseIDs:["d.cz.4.bbbb.180"],rootBaseID:"d.cz.4.bbbb",rootIDHash:"f0d5fe71"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(1,0,0,1,8,56)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.cz.4.bbbb.180",baseID:"d.cz.4.bbbb",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"cz",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},cb81c430:{meta:{setID:"cb81c430",set:["cb81c430"],setBaseIDs:["d.dj.4.bbbb.0"],rootBaseID:"d.dj.4.bbbb",rootIDHash:"cb81c430"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,1.8369702788777518e-16,65)"},children:[{attr:{d:"M 2 0 C 2 34.793914794921875 30.206085205078125 63 65 63 L 65 65 C 29.101516723632812 65 0 35.89848327636719 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dj.4.bbbb.0",baseID:"d.dj.4.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"dj",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},efa22418:{meta:{setID:"efa22418",set:["efa22418"],setBaseIDs:["d.el.4.abba.180"],rootBaseID:"d.el.4.abba",rootIDHash:"efa22418"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(1,0,0,1,40,72)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.el.4.abba.180",baseID:"d.el.4.abba",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"el",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"66fbf43f":{meta:{setID:"66fbf43f",set:["66fbf43f"],setBaseIDs:["d.bz.4.bbbb.0"],rootBaseID:"d.bz.4.bbbb",rootIDHash:"66fbf43f"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,3.0040283203125,3.004150390625)"},children:[{attr:{d:"M 35.03544616699219 84.578857421875 C 13.582061767578125 62.77294921875 0.26544189453125 32.942138671875 0 0 C 32.942420959472656 0.265380859375 62.77324676513672 13.58203125 84.57886505126953 35.03515625 L 35.03544616699219 84.578857421875 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.bz.4.bbbb.0",baseID:"d.bz.4.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"bz",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"6245af61":{meta:{setID:"6245af61",set:["6245af61"],setBaseIDs:["d.di.4.bbbb.0"],rootBaseID:"d.di.4.bbbb",rootIDHash:"6245af61"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,1.8369702788777518e-16,97)"},children:[{attr:{d:"M 2 0 C 2 52.46701431274414 44.53298568725586 95 97 95 L 97 97 C 43.42841720581055 97 0 53.57158279418945 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.di.4.bbbb.0",baseID:"d.di.4.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"di",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},d93ccb2:{meta:{setID:"d93ccb2",set:["d93ccb2"],setBaseIDs:["g.ac.4.bbba.90"],rootBaseID:"g.ac.4.bbba",rootIDHash:"d93ccb2"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(-1.8356867592648655e-16,-1,1,-1.838254724932924e-16,0,128)"},children:[{attr:{d:"M 64 0 L 128 0 L 128 64 C 128 99.3466796875 99.34600067138672 128 64 128 C 28.65380096435547 128 0 99.3466796875 0 64 L 0 0 L 64 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"g.ac.4.bbba.90",baseID:"g.ac.4.bbba",type:"g",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"FG",key:"ac",style:{fill:"FG",stroke:"NO"}},tag:"g"}],tag:"g"},"7191ec30":{meta:{setID:"7191ec30",set:["7191ec30"],setBaseIDs:["d.do.4.bbbb.90"],rootBaseID:"d.do.4.bbbb",rootIDHash:"7191ec30"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(0.7071067690849304,0.7071067690849304,-0.7071067690849304,0.7071067690849304,81.38351440429688,79.96847534179688)"},children:[{attr:{d:"M 43.37837600708008 2.001432180404663 L 0 2.001432180404663 L 0 0 L 43.37837600708008 0 L 43.37837600708008 2.001432180404663 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.do.4.bbbb.90",baseID:"d.do.4.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"do",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},faa6eb0:{meta:{setID:"faa6eb0",set:["faa6eb0"],setBaseIDs:["d.bg.2.bbbb.90"],rootBaseID:"d.bg.2.bbbb",rootIDHash:"faa6eb0"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,15,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.bg.2.bbbb.90",baseID:"d.bg.2.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:2,paint:"BG",key:"bg",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},a0991dbc:{meta:{setID:"a0991dbc",set:["a0991dbc"],setBaseIDs:["d.cf.4.bbbb.90"],rootBaseID:"d.cf.4.bbbb",rootIDHash:"a0991dbc"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,4,47)"},children:[{attr:{d:"M 57 28.5 C 57 44.240116119384766 44.240116119384766 57 28.5 57 C 12.759885787963867 57 0 44.240116119384766 0 28.5 C 0 12.759885787963867 12.759885787963867 0 28.5 0 C 44.240116119384766 0 57 12.759885787963867 57 28.5 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.cf.4.bbbb.90",baseID:"d.cf.4.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"FG",key:"cf",style:{fill:"FG",stroke:"NO"}},tag:"g"}],tag:"g"},c3bebfe6:{meta:{setID:"c3bebfe6",set:["c3bebfe6"],setBaseIDs:["d.dm.4.bbbb.90"],rootBaseID:"d.dm.4.bbbb",rootIDHash:"c3bebfe6"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,64,31)"},children:[{attr:{d:"M 33 33 C 33 14.774604797363281 18.22539520263672 0 0 0 L 0 2 C 17.120826721191406 2 31 15.879173278808594 31 33 L 33 33 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.dm.4.bbbb.90",baseID:"d.dm.4.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"dm",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"87cb2bff":{meta:{setID:"87cb2bff",set:["87cb2bff"],setBaseIDs:["d.dd.4.bbbb.0"],rootBaseID:"d.dd.4.bbbb",rootIDHash:"87cb2bff"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,8,8)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,104,8)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,8,104)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.dd.4.bbbb.0",baseID:"d.dd.4.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"dd",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"603da034":{meta:{setID:"603da034",set:["603da034"],setBaseIDs:["d.dv.4.abba.0"],rootBaseID:"d.dv.4.abba",rootIDHash:"603da034"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,-1.135031399922791e-13,97)"},children:[{attr:{d:"M 29.915496826171875 90.59327697753906 C 47.14462661743164 113.74211120605469 70.87230682373047 127.96875 97 127.96875 L 97 130 C 70.1083984375 130 45.83607482910156 115.35247039794922 28.320030212402344 91.81814575195312 C 10.80441665649414 68.28438568115234 0 35.818397521972656 0 0 L 2 0 C 2 35.41765594482422 12.685934066772461 67.44385528564453 29.915496826171875 90.59327697753906 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dv.4.abba.0",baseID:"d.dv.4.abba",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"dv",edgemap:["a","b","b","a"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},f3633360:{meta:{setID:"f3633360",set:["f3633360"],setBaseIDs:["d.dw.4.abba.0"],rootBaseID:"d.dw.4.abba",rootIDHash:"f3633360"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,1.8369702788777518e-16,65)"},children:[{attr:{d:"M 20.63819122314453 90.74864959716797 C 32.164886474609375 113.97933197021484 47.90560531616211 127.96875 65 127.96875 L 65 130 C 46.74819564819336 130 30.48891258239746 115.1152572631836 18.85215950012207 91.66275787353516 C 7.186376571655273 68.15177154541016 0 35.742618560791016 0 0 L 2 0 C 2 35.493431091308594 9.140524864196777 67.57646942138672 20.63819122314453 90.74864959716797 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dw.4.abba.0",baseID:"d.dw.4.abba",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"dw",edgemap:["a","b","b","a"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"6acd7409":{meta:{setID:"6acd7409",set:["6acd7409"],setBaseIDs:["d.dv.4.abba.180"],rootBaseID:"d.dv.4.abba",rootIDHash:"6acd7409"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,-1.135031399922791e-13,97)"},children:[{attr:{d:"M 29.915496826171875 90.59327697753906 C 47.14462661743164 113.74211120605469 70.87230682373047 127.96875 97 127.96875 L 97 130 C 70.1083984375 130 45.83607482910156 115.35247039794922 28.320030212402344 91.81814575195312 C 10.80441665649414 68.28438568115234 0 35.818397521972656 0 0 L 2 0 C 2 35.41765594482422 12.685934066772461 67.44385528564453 29.915496826171875 90.59327697753906 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dv.4.abba.180",baseID:"d.dv.4.abba",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"dv",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},ad7dd51b:{meta:{setID:"ad7dd51b",set:["ad7dd51b"],setBaseIDs:["d.ds.4.abba.270"],rootBaseID:"d.ds.4.abba",rootIDHash:"ad7dd51b"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(1,0,0,1,31,0)"},children:[{attr:{d:"M 1.941176414489746 0 C 1.941176414489746 17.1533145904541 15.846684455871582 31.058822631835938 33 31.058822631835938 C 50.153316497802734 31.058822631835938 64.05882263183594 17.1533145904541 64.05882263183594 0 L 66 0 C 66 18.22539520263672 51.22539520263672 33 33 33 C 14.774600982666016 33 0 18.22539520263672 0 0 L 1.941176414489746 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.ds.4.abba.270",baseID:"d.ds.4.abba",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"ds",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"6615d02d":{meta:{setID:"6615d02d",set:["6615d02d"],setBaseIDs:["d.bq.4.abbb.180"],rootBaseID:"d.bq.4.abbb",rootIDHash:"6615d02d"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(1,0,0,1,-2,0)"},children:[{attr:{d:"M 2 0 C 2 35.34622573852539 30.65377426147461 64 66 64 C 101.34622955322266 64 130 35.34622573852539 130 0 L 132 0 C 132 36.4507942199707 102.45079803466797 66 66 66 C 29.549205780029297 66 0 36.4507942199707 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.bq.4.abbb.180",baseID:"d.bq.4.abbb",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"bq",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"5ba1ba9b":{meta:{setID:"5ba1ba9b",set:["5ba1ba9b"],setBaseIDs:["d.dp.1.bbbb.0"],rootBaseID:"d.dp.1.bbbb",rootIDHash:"5ba1ba9b"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,16,16)"},children:[{attr:{d:"M 0 48 C 0 21.490337371826172 21.490337371826172 0 48 0 C 74.5096664428711 0 96 21.490337371826172 96 48 C 96 74.5096664428711 74.5096664428711 96 48 96 C 21.490337371826172 96 0 74.5096664428711 0 48 Z M 48 88 C 70.09139251708984 88 88 70.09139251708984 88 48 C 88 25.908611297607422 70.09139251708984 8 48 8 C 25.908611297607422 8 8 25.908611297607422 8 48 C 8 70.09139251708984 25.908611297607422 88 48 88 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dp.1.bbbb.0",baseID:"d.dp.1.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:1,paint:"BG",key:"dp",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},cf0f809a:{meta:{setID:"cf0f809a",set:["cf0f809a"],setBaseIDs:["d.dq.1.bbbb.0"],rootBaseID:"d.dq.1.bbbb",rootIDHash:"cf0f809a"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,32,32)"},children:[{attr:{d:"M 64 32 C 64 49.67311096191406 49.67311096191406 64 32 64 C 14.326889038085938 64 0 49.67311096191406 0 32 C 0 14.326889038085938 14.326889038085938 0 32 0 C 49.67311096191406 0 64 14.326889038085938 64 32 Z M 32 56 C 45.25483703613281 56 56 45.25483703613281 56 32 C 56 18.745166778564453 45.25483703613281 8 32 8 C 18.745166778564453 8 8 18.745166778564453 8 32 C 8 45.25483703613281 18.745166778564453 56 32 56 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dq.1.bbbb.0",baseID:"d.dq.1.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:1,paint:"BG",key:"dq",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"9ebd20ff":{meta:{setID:"9ebd20ff",set:["9ebd20ff"],setBaseIDs:["d.cp.4.bbbb.270"],rootBaseID:"d.cp.4.bbbb",rootIDHash:"9ebd20ff"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(1,0,0,1,10.606582641601562,0)"},children:[{attr:{d:"M 69.29649353027344 79.903076171875 C 89.74546813964844 59.4541015625 102.39341735839844 31.2041015625 102.39341735839844 0 L 100.39341735839844 0 C 100.39341735839844 30.65185546875 87.96931457519531 58.40185546875 67.88227844238281 78.48876953125 L 69.29649353027344 79.903076171875 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 57.98277282714844 68.58935546875 C 75.53633117675781 51.035888671875 86.39341735839844 26.785888671875 86.39341735839844 0 L 84.39341735839844 0 C 84.39341735839844 26.2333984375 73.76017761230469 49.9833984375 56.56855773925781 67.175048828125 L 57.98277282714844 68.58935546875 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 46.6690673828125 57.275634765625 C 61.32719421386719 42.617431640625 70.39341735839844 22.367431640625 70.39341735839844 0 L 68.39341735839844 0 C 68.39341735839844 21.815185546875 59.55104064941406 41.565185546875 45.25483703613281 55.861328125 L 46.6690673828125 57.275634765625 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 35.3553466796875 45.9619140625 C 47.1180419921875 34.19921875 54.39341735839844 17.94921875 54.39341735839844 0 L 52.39341735839844 0 C 52.39341735839844 17.39697265625 45.34190368652344 33.14697265625 33.94114685058594 44.5478515625 L 35.3553466796875 45.9619140625 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 24.041656494140625 34.648193359375 C 32.908905029296875 25.781005859375 38.39341735839844 13.531005859375 38.39341735839844 0 L 36.39341735839844 0 C 36.39341735839844 12.978759765625 31.13275146484375 24.728515625 22.627410888671875 33.23388671875 L 24.041656494140625 34.648193359375 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 12.727935791015625 23.33447265625 C 18.69976806640625 17.362548828125 22.393417358398438 9.11279296875 22.393417358398438 0 L 20.393417358398438 0 C 20.393417358398438 8.560302734375 16.923629760742188 16.310546875 11.313735961914062 21.92041015625 L 12.727935791015625 23.33447265625 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 1.41424560546875 12.020751953125 C 4.490631103515625 8.9443359375 6.3934173583984375 4.6943359375 6.3934173583984375 0 L 4.3934173583984375 0 C 4.3934173583984375 4.14208984375 2.7144775390625 7.89208984375 0 10.606689453125 L 1.41424560546875 12.020751953125 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.cp.4.bbbb.270",baseID:"d.cp.4.bbbb",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"cp",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"5e841ec3":{meta:{setID:"5e841ec3",set:["5e841ec3"],setBaseIDs:["d.ef.4.abba.270"],rootBaseID:"d.ef.4.abba",rootIDHash:"5e841ec3"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(1,0,0,1,24,88)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.ef.4.abba.270",baseID:"d.ef.4.abba",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"ef",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},afc30081:{meta:{setID:"afc30081",set:["afc30081"],setBaseIDs:["d.bk.4.bbbb.270"],rootBaseID:"d.bk.4.bbbb",rootIDHash:"afc30081"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(-4.371138828673793e-8,-1,1,-4.371138828673793e-8,0,130)"},children:[{attr:{d:"M 2 0 C 2 70.69239807128906 59.30760192871094 128 130 128 L 130 130 C 58.203033447265625 130 0 71.79696655273438 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.bk.4.bbbb.270",baseID:"d.bk.4.bbbb",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"bk",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"4c4076d5":{meta:{setID:"4c4076d5",set:["4c4076d5"],setBaseIDs:["d.cu.2.bbbb.90"],rootBaseID:"d.cu.2.bbbb",rootIDHash:"4c4076d5"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(6.123234262925839e-17,1,-1,6.123234262925839e-17,33,0)"},children:[{attr:{d:"M 128 2 L 0 2 L 0 0 L 128 0 L 128 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.cu.2.bbbb.90",baseID:"d.cu.2.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:2,paint:"BG",key:"cu",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},d6753be3:{meta:{setID:"d6753be3",set:["d6753be3"],setBaseIDs:["d.dd.4.bbbb.180"],rootBaseID:"d.dd.4.bbbb",rootIDHash:"d6753be3"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(1,0,0,1,8,8)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,104,8)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,8,104)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.dd.4.bbbb.180",baseID:"d.dd.4.bbbb",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"dd",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},b788c92f:{meta:{setID:"b788c92f",set:["b788c92f"],setBaseIDs:["d.de.2.bbbb.0"],rootBaseID:"d.de.2.bbbb",rootIDHash:"b788c92f"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,104,8)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,8,104)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.de.2.bbbb.0",baseID:"d.de.2.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:2,paint:"BG",key:"de",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},a4ed278a:{meta:{setID:"a4ed278a",set:["a4ed278a"],setBaseIDs:["d.cj.4.bbbb.180"],rootBaseID:"d.cj.4.bbbb",rootIDHash:"a4ed278a"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(1,0,0,1,24,56)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.cj.4.bbbb.180",baseID:"d.cj.4.bbbb",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"cj",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},eb608ee5:{meta:{setID:"eb608ee5",set:["eb608ee5"],setBaseIDs:["d.bk.4.bbbb.90"],rootBaseID:"d.bk.4.bbbb",rootIDHash:"eb608ee5"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(-4.371138828673793e-8,-1,1,-4.371138828673793e-8,0,130)"},children:[{attr:{d:"M 2 0 C 2 70.69239807128906 59.30760192871094 128 130 128 L 130 130 C 58.203033447265625 130 0 71.79696655273438 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.bk.4.bbbb.90",baseID:"d.bk.4.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"bk",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"52a6a74c":{meta:{setID:"52a6a74c",set:["52a6a74c"],setBaseIDs:["d.ct.2.bbbb.90"],rootBaseID:"d.ct.2.bbbb",rootIDHash:"52a6a74c"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,47,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.ct.2.bbbb.90",baseID:"d.ct.2.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:2,paint:"BG",key:"ct",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},e2f4d6e2:{meta:{setID:"e2f4d6e2",set:["e2f4d6e2"],setBaseIDs:["d.ct.2.bbbb.0"],rootBaseID:"d.ct.2.bbbb",rootIDHash:"e2f4d6e2"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,47,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.ct.2.bbbb.0",baseID:"d.ct.2.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:2,paint:"BG",key:"ct",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},e6117eb6:{meta:{setID:"e6117eb6",set:["e6117eb6"],setBaseIDs:["d.dd.4.bbbb.270"],rootBaseID:"d.dd.4.bbbb",rootIDHash:"e6117eb6"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(1,0,0,1,8,8)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,104,8)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,8,104)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.dd.4.bbbb.270",baseID:"d.dd.4.bbbb",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"dd",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},b397af9f:{meta:{setID:"b397af9f",set:["b397af9f"],setBaseIDs:["d.cz.4.bbbb.270"],rootBaseID:"d.cz.4.bbbb",rootIDHash:"b397af9f"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(1,0,0,1,8,56)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.cz.4.bbbb.270",baseID:"d.cz.4.bbbb",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"cz",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"427a1751":{meta:{setID:"427a1751",set:["427a1751"],setBaseIDs:["d.dn.4.bbbb.0"],rootBaseID:"d.dn.4.bbbb",rootIDHash:"427a1751"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,64,47)"},children:[{attr:{d:"M 17 17 C 17 7.6111602783203125 9.388839721679688 0 0 0 L 0 2 C 8.284271240234375 2 15 8.715728759765625 15 17 L 17 17 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.dn.4.bbbb.0",baseID:"d.dn.4.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"dn",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"1735a791":{meta:{setID:"1735a791",set:["1735a791"],setBaseIDs:["d.by.1.bbbb.0"],rootBaseID:"d.by.1.bbbb",rootIDHash:"1735a791"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,47,47)"},children:[{attr:{d:"M 17 2 C 8.715728759765625 2 2 8.715728759765625 2 17 C 2 25.284271240234375 8.715728759765625 32 17 32 C 25.284271240234375 32 32 25.284271240234375 32 17 C 32 8.715728759765625 25.284271240234375 2 17 2 Z M 0 17 C 0 7.6111602783203125 7.6111602783203125 0 17 0 C 26.388839721679688 0 34 7.6111602783203125 34 17 C 34 26.388839721679688 26.388839721679688 34 17 34 C 7.6111602783203125 34 0 26.388839721679688 0 17 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.by.1.bbbb.0",baseID:"d.by.1.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:1,paint:"BG",key:"by",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"28b33136":{meta:{setID:"28b33136",set:["28b33136"],setBaseIDs:["g.ac.4.bbba.270"],rootBaseID:"g.ac.4.bbba",rootIDHash:"28b33136"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(-1.8356867592648655e-16,-1,1,-1.838254724932924e-16,0,128)"},children:[{attr:{d:"M 64 0 L 128 0 L 128 64 C 128 99.3466796875 99.34600067138672 128 64 128 C 28.65380096435547 128 0 99.3466796875 0 64 L 0 0 L 64 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"g.ac.4.bbba.270",baseID:"g.ac.4.bbba",type:"g",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"FG",key:"ac",style:{fill:"FG",stroke:"NO"}},tag:"g"}],tag:"g"},"672fdf93":{meta:{setID:"672fdf93",set:["672fdf93"],setBaseIDs:["d.eg.4.abba.0"],rootBaseID:"d.eg.4.abba",rootIDHash:"672fdf93"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,8,104)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.eg.4.abba.0",baseID:"d.eg.4.abba",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"eg",edgemap:["a","b","b","a"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},f49b158d:{meta:{setID:"f49b158d",set:["f49b158d"],setBaseIDs:["d.cf.4.bbbb.0"],rootBaseID:"d.cf.4.bbbb",rootIDHash:"f49b158d"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,4,47)"},children:[{attr:{d:"M 57 28.5 C 57 44.240116119384766 44.240116119384766 57 28.5 57 C 12.759885787963867 57 0 44.240116119384766 0 28.5 C 0 12.759885787963867 12.759885787963867 0 28.5 0 C 44.240116119384766 0 57 12.759885787963867 57 28.5 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.cf.4.bbbb.0",baseID:"d.cf.4.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"FG",key:"cf",edgemap:["b","b","b","b"],style:{fill:"FG",stroke:"NO"}},tag:"g"}],tag:"g"},"6cf35bfb":{meta:{setID:"6cf35bfb",set:["6cf35bfb"],setBaseIDs:["d.de.2.bbbb.90"],rootBaseID:"d.de.2.bbbb",rootIDHash:"6cf35bfb"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,104,8)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,8,104)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.de.2.bbbb.90",baseID:"d.de.2.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:2,paint:"BG",key:"de",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"4c1ac47d":{meta:{setID:"4c1ac47d",set:["4c1ac47d"],setBaseIDs:["d.cn.1.bbbb.0"],rootBaseID:"d.cn.1.bbbb",rootIDHash:"4c1ac47d"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,32,32)"},children:[{attr:{d:"M 64 32 C 64 49.67311096191406 49.67311096191406 64 32 64 C 14.326889038085938 64 0 49.67311096191406 0 32 C 0 14.326889038085938 14.326889038085938 0 32 0 C 49.67311096191406 0 64 14.326889038085938 64 32 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.cn.1.bbbb.0",baseID:"d.cn.1.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:1,paint:"BG",key:"cn",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"9b3aa0b1":{meta:{setID:"9b3aa0b1",set:["9b3aa0b1"],setBaseIDs:["d.cu.2.bbbb.0"],rootBaseID:"d.cu.2.bbbb",rootIDHash:"9b3aa0b1"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(6.123234262925839e-17,1,-1,6.123234262925839e-17,33,0)"},children:[{attr:{d:"M 128 2 L 0 2 L 0 0 L 128 0 L 128 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.cu.2.bbbb.0",baseID:"d.cu.2.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:2,paint:"BG",key:"cu",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},cf042a60:{meta:{setID:"cf042a60",set:["cf042a60"],setBaseIDs:["d.bn.4.abba.0"],rootBaseID:"d.bn.4.abba",rootIDHash:"cf042a60"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 111 C 61.303611755371094 111 111 61.303611755371094 111 0 L 113 0 C 113 62.408180236816406 62.408180236816406 113 0 113 L 0 111 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 94.99999237060547 C 52.46704864501953 94.99999237060547 94.99999237060547 52.46704864501953 94.99999237060547 0 L 96.99999237060547 0 C 96.99999237060547 53.571617126464844 53.571617126464844 96.99999237060547 0 96.99999237060547 L 0 94.99999237060547 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 79 C 43.6304931640625 79 79 43.6304931640625 79 0 L 81 0 C 81 44.73506164550781 44.73506164550781 81 0 81 L 0 79 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 63 C 34.793941497802734 63 63 34.793941497802734 63 0 L 65 0 C 65 35.89850997924805 35.89850997924805 65 0 65 L 0 63 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 31 C 17.12082862854004 31 31 17.12082862854004 31 0 L 33 0 C 33 18.22539710998535 18.22539710998535 33 0 33 L 0 31 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 15 C 8.284271240234375 15 15 8.284271240234375 15 0 L 17 0 C 17 9.38884162902832 9.38884162902832 17 0 17 L 0 15 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 46.999996185302734 C 25.957382202148438 46.999996185302734 46.999996185302734 25.957382202148438 46.999996185302734 0 L 48.999996185302734 0 C 48.999996185302734 27.06195068359375 27.06195068359375 48.999996185302734 0 48.999996185302734 L 0 46.999996185302734 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.bn.4.abba.0",baseID:"d.bn.4.abba",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"bn",edgemap:["a","b","b","a"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"44e1402d":{meta:{setID:"44e1402d",set:["44e1402d"],setBaseIDs:["d.da.2.bbbb.0"],rootBaseID:"d.da.2.bbbb",rootIDHash:"44e1402d"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(-1,-8.742277657347586e-8,8.742277657347586e-8,-1,128,65.00000762939453)"},children:[{attr:{d:"M 128 2 L 0 2 L 0 0 L 128 0 L 128 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.da.2.bbbb.0",baseID:"d.da.2.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:2,paint:"BG",key:"da",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},e53a31b5:{meta:{setID:"e53a31b5",set:["e53a31b5"],setBaseIDs:["d.cl.1.bbbb.0"],rootBaseID:"d.cl.1.bbbb",rootIDHash:"e53a31b5"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,40,72)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,40,40)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,72,72)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,72,40)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.cl.1.bbbb.0",baseID:"d.cl.1.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:1,paint:"BG",key:"cl",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"2ab4bc02":{meta:{setID:"2ab4bc02",set:["2ab4bc02"],setBaseIDs:["d.dw.4.abba.90"],rootBaseID:"d.dw.4.abba",rootIDHash:"2ab4bc02"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,1.8369702788777518e-16,65)"},children:[{attr:{d:"M 20.63819122314453 90.74864959716797 C 32.164886474609375 113.97933197021484 47.90560531616211 127.96875 65 127.96875 L 65 130 C 46.74819564819336 130 30.48891258239746 115.1152572631836 18.85215950012207 91.66275787353516 C 7.186376571655273 68.15177154541016 0 35.742618560791016 0 0 L 2 0 C 2 35.493431091308594 9.140524864196777 67.57646942138672 20.63819122314453 90.74864959716797 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dw.4.abba.90",baseID:"d.dw.4.abba",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"dw",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"4456d619":{meta:{setID:"4456d619",set:["4456d619"],setBaseIDs:["d.dl.4.bbbb.90"],rootBaseID:"d.dl.4.bbbb",rootIDHash:"4456d619"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,64,15)"},children:[{attr:{d:"M 49 49 C 49 21.938051223754883 27.06195068359375 0 0 0 L 0 2 C 25.957382202148438 2 47 23.042621612548828 47 49 L 49 49 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.dl.4.bbbb.90",baseID:"d.dl.4.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"dl",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},adafc09c:{meta:{setID:"adafc09c",set:["adafc09c"],setBaseIDs:["d.cp.4.bbbb.90"],rootBaseID:"d.cp.4.bbbb",rootIDHash:"adafc09c"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,10.606582641601562,0)"},children:[{attr:{d:"M 69.29649353027344 79.903076171875 C 89.74546813964844 59.4541015625 102.39341735839844 31.2041015625 102.39341735839844 0 L 100.39341735839844 0 C 100.39341735839844 30.65185546875 87.96931457519531 58.40185546875 67.88227844238281 78.48876953125 L 69.29649353027344 79.903076171875 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 57.98277282714844 68.58935546875 C 75.53633117675781 51.035888671875 86.39341735839844 26.785888671875 86.39341735839844 0 L 84.39341735839844 0 C 84.39341735839844 26.2333984375 73.76017761230469 49.9833984375 56.56855773925781 67.175048828125 L 57.98277282714844 68.58935546875 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 46.6690673828125 57.275634765625 C 61.32719421386719 42.617431640625 70.39341735839844 22.367431640625 70.39341735839844 0 L 68.39341735839844 0 C 68.39341735839844 21.815185546875 59.55104064941406 41.565185546875 45.25483703613281 55.861328125 L 46.6690673828125 57.275634765625 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 35.3553466796875 45.9619140625 C 47.1180419921875 34.19921875 54.39341735839844 17.94921875 54.39341735839844 0 L 52.39341735839844 0 C 52.39341735839844 17.39697265625 45.34190368652344 33.14697265625 33.94114685058594 44.5478515625 L 35.3553466796875 45.9619140625 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 24.041656494140625 34.648193359375 C 32.908905029296875 25.781005859375 38.39341735839844 13.531005859375 38.39341735839844 0 L 36.39341735839844 0 C 36.39341735839844 12.978759765625 31.13275146484375 24.728515625 22.627410888671875 33.23388671875 L 24.041656494140625 34.648193359375 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 12.727935791015625 23.33447265625 C 18.69976806640625 17.362548828125 22.393417358398438 9.11279296875 22.393417358398438 0 L 20.393417358398438 0 C 20.393417358398438 8.560302734375 16.923629760742188 16.310546875 11.313735961914062 21.92041015625 L 12.727935791015625 23.33447265625 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 1.41424560546875 12.020751953125 C 4.490631103515625 8.9443359375 6.3934173583984375 4.6943359375 6.3934173583984375 0 L 4.3934173583984375 0 C 4.3934173583984375 4.14208984375 2.7144775390625 7.89208984375 0 10.606689453125 L 1.41424560546875 12.020751953125 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.cp.4.bbbb.90",baseID:"d.cp.4.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"cp",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},d7e0d9e:{meta:{setID:"d7e0d9e",set:["d7e0d9e"],setBaseIDs:["d.di.4.bbbb.270"],rootBaseID:"d.di.4.bbbb",rootIDHash:"d7e0d9e"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,1.8369702788777518e-16,97)"},children:[{attr:{d:"M 2 0 C 2 52.46701431274414 44.53298568725586 95 97 95 L 97 97 C 43.42841720581055 97 0 53.57158279418945 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.di.4.bbbb.270",baseID:"d.di.4.bbbb",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"di",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"1d989f87":{meta:{setID:"1d989f87",set:["1d989f87"],setBaseIDs:["d.cz.4.bbbb.90"],rootBaseID:"d.cz.4.bbbb",rootIDHash:"1d989f87"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,8,56)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.cz.4.bbbb.90",baseID:"d.cz.4.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"cz",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},b09cf4ef:{meta:{setID:"b09cf4ef",set:["b09cf4ef"],setBaseIDs:["d.cw.4.bbbb.270"],rootBaseID:"d.cw.4.bbbb",rootIDHash:"b09cf4ef"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(1,0,0,1,32.06146240234375,2)"},children:[{attr:{d:"M 0 0 C 1.03240966796875 16.741455078125 14.9371337890625 30 31.93853759765625 30 C 48.93994140625 30 62.84466552734375 16.741455078125 63.8770751953125 0 L 0 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.cw.4.bbbb.270",baseID:"d.cw.4.bbbb",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"cw",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"510344a7":{meta:{setID:"510344a7",set:["510344a7"],setBaseIDs:["d.cj.4.bbbb.270"],rootBaseID:"d.cj.4.bbbb",rootIDHash:"510344a7"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(1,0,0,1,24,56)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.cj.4.bbbb.270",baseID:"d.cj.4.bbbb",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"cj",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},ae1e4f7:{meta:{setID:"ae1e4f7",set:["ae1e4f7"],setBaseIDs:["d.dk.4.bbbb.180"],rootBaseID:"d.dk.4.bbbb",rootIDHash:"ae1e4f7"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,1.8369702788777518e-16,33)"},children:[{attr:{d:"M 2 0 C 2 17.12081527709961 15.87918472290039 31 33 31 L 33 33 C 14.774616241455078 33 0 18.225383758544922 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dk.4.bbbb.180",baseID:"d.dk.4.bbbb",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"dk",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},fb651938:{meta:{setID:"fb651938",set:["fb651938"],setBaseIDs:["d.dw.4.abba.180"],rootBaseID:"d.dw.4.abba",rootIDHash:"fb651938"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,1.8369702788777518e-16,65)"},children:[{attr:{d:"M 20.63819122314453 90.74864959716797 C 32.164886474609375 113.97933197021484 47.90560531616211 127.96875 65 127.96875 L 65 130 C 46.74819564819336 130 30.48891258239746 115.1152572631836 18.85215950012207 91.66275787353516 C 7.186376571655273 68.15177154541016 0 35.742618560791016 0 0 L 2 0 C 2 35.493431091308594 9.140524864196777 67.57646942138672 20.63819122314453 90.74864959716797 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dw.4.abba.180",baseID:"d.dw.4.abba",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"dw",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"8d560b8b":{meta:{setID:"8d560b8b",set:["8d560b8b"],setBaseIDs:["d.dx.4.abba.0"],rootBaseID:"d.dx.4.abba",rootIDHash:"8d560b8b"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,-5.665972113147108e-14,33)"},children:[{attr:{d:"M 21.40327262878418 118.3283462524414 C 25.199352264404297 124.80017852783203 29.149702072143555 127.96875 33 127.96875 L 33 130 C 28.013748168945312 130 23.54582405090332 125.95003509521484 19.68505096435547 119.367919921875 C 15.785710334777832 112.72005462646484 12.309096336364746 103.16806030273438 9.4028959274292 91.453857421875 C 3.5866384506225586 68.00990295410156 0 35.67653274536133 0 0 L 2 0 C 2 35.55952072143555 5.576811790466309 67.71833801269531 11.342279434204102 90.95755767822266 C 14.226941108703613 102.58494567871094 17.64575958251953 111.92227935791016 21.40327262878418 118.3283462524414 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dx.4.abba.0",baseID:"d.dx.4.abba",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"dx",edgemap:["a","b","b","a"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"9f3841fc":{meta:{setID:"9f3841fc",set:["9f3841fc"],setBaseIDs:["d.dv.4.abba.270"],rootBaseID:"d.dv.4.abba",rootIDHash:"9f3841fc"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,-1.135031399922791e-13,97)"},children:[{attr:{d:"M 29.915496826171875 90.59327697753906 C 47.14462661743164 113.74211120605469 70.87230682373047 127.96875 97 127.96875 L 97 130 C 70.1083984375 130 45.83607482910156 115.35247039794922 28.320030212402344 91.81814575195312 C 10.80441665649414 68.28438568115234 0 35.818397521972656 0 0 L 2 0 C 2 35.41765594482422 12.685934066772461 67.44385528564453 29.915496826171875 90.59327697753906 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dv.4.abba.270",baseID:"d.dv.4.abba",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"dv",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"59d9e201":{meta:{setID:"59d9e201",set:["59d9e201"],setBaseIDs:["d.dd.4.bbbb.90"],rootBaseID:"d.dd.4.bbbb",rootIDHash:"59d9e201"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,8,8)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,104,8)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,8,104)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.dd.4.bbbb.90",baseID:"d.dd.4.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"dd",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},ad042183:{meta:{setID:"ad042183",set:["ad042183"],setBaseIDs:["d.cq.2.bbbb.90"],rootBaseID:"d.cq.2.bbbb",rootIDHash:"ad042183"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(6.123234262925839e-17,1,-1,6.123234262925839e-17,65,0)"},children:[{attr:{d:"M 128 2 L 0 2 L 0 0 L 128 0 L 128 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(6.123234262925839e-17,1,-1,6.123234262925839e-17,49,0)"},children:[{attr:{d:"M 128 2 L 0 2 L 0 0 L 128 0 L 128 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(6.123234262925839e-17,1,-1,6.123234262925839e-17,33,0)"},children:[{attr:{d:"M 128 2 L 0 2 L 0 0 L 128 0 L 128 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(6.123234262925839e-17,1,-1,6.123234262925839e-17,17,0)"},children:[{attr:{d:"M 128 2 L 0 2 L 0 0 L 128 0 L 128 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.cq.2.bbbb.90",baseID:"d.cq.2.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:2,paint:"BG",key:"cq",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"1b1fba11":{meta:{setID:"1b1fba11",set:["1b1fba11"],setBaseIDs:["d.bd.2.abbb.90"],rootBaseID:"d.bd.2.abbb",rootIDHash:"1b1fba11"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,79,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.bd.2.abbb.90",baseID:"d.bd.2.abbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:2,paint:"BG",key:"bd",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},cbdce7a4:{meta:{setID:"cbdce7a4",set:["cbdce7a4"],setBaseIDs:["d.bl.2.bbbb.0"],rootBaseID:"d.bl.2.bbbb",rootIDHash:"cbdce7a4"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,15,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,31,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,47,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,63,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,79,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,95,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,111,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.bl.2.bbbb.0",baseID:"d.bl.2.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:2,paint:"BG",key:"bl",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},bfc8669e:{meta:{setID:"bfc8669e",set:["bfc8669e"],setBaseIDs:["d.cj.4.bbbb.90"],rootBaseID:"d.cj.4.bbbb",rootIDHash:"bfc8669e"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,24,56)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.cj.4.bbbb.90",baseID:"d.cj.4.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"cj",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"81113d71":{meta:{setID:"81113d71",set:["81113d71"],setBaseIDs:["d.dh.4.bbbb.90"],rootBaseID:"d.dh.4.bbbb",rootIDHash:"81113d71"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,2,2)"},children:[{attr:{d:"M 0 29.9384765625 C 16.08001708984375 28.94677734375 28.94690704345703 16.080078125 29.938514709472656 0 L 0 0 L 0 29.9384765625 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.dh.4.bbbb.90",baseID:"d.dh.4.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"dh",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},f6bb8637:{meta:{setID:"f6bb8637",set:["f6bb8637"],setBaseIDs:["d.cx.4.bbbb.90"],rootBaseID:"d.cx.4.bbbb",rootIDHash:"f6bb8637"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,48.123779296875,2)"},children:[{attr:{d:"M 0 0 C 0.98419189453125 7.892822265625 7.71697998046875 14 15.876220703125 14 C 24.03546142578125 14 30.76824951171875 7.892822265625 31.75244140625 0 L 0 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.cx.4.bbbb.90",baseID:"d.cx.4.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"cx",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},a2880ff1:{meta:{setID:"a2880ff1",set:["a2880ff1"],setBaseIDs:["d.dm.4.bbbb.0"],rootBaseID:"d.dm.4.bbbb",rootIDHash:"a2880ff1"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,64,31)"},children:[{attr:{d:"M 33 33 C 33 14.774604797363281 18.22539520263672 0 0 0 L 0 2 C 17.120826721191406 2 31 15.879173278808594 31 33 L 33 33 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.dm.4.bbbb.0",baseID:"d.dm.4.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"dm",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"5a85e6f7":{meta:{setID:"5a85e6f7",set:["5a85e6f7"],setBaseIDs:["d.cv.2.bbbb.90"],rootBaseID:"d.cv.2.bbbb",rootIDHash:"5a85e6f7"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(6.123234262925839e-17,1,-1,6.123234262925839e-17,97,0)"},children:[{attr:{d:"M 128 2 L 0 2 L 0 0 L 128 0 L 128 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.cv.2.bbbb.90",baseID:"d.cv.2.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:2,paint:"BG",key:"cv",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"8c89b36e":{meta:{setID:"8c89b36e",set:["8c89b36e"],setBaseIDs:["d.ds.4.abba.0"],rootBaseID:"d.ds.4.abba",rootIDHash:"8c89b36e"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,31,0)"},children:[{attr:{d:"M 1.941176414489746 0 C 1.941176414489746 17.1533145904541 15.846684455871582 31.058822631835938 33 31.058822631835938 C 50.153316497802734 31.058822631835938 64.05882263183594 17.1533145904541 64.05882263183594 0 L 66 0 C 66 18.22539520263672 51.22539520263672 33 33 33 C 14.774600982666016 33 0 18.22539520263672 0 0 L 1.941176414489746 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.ds.4.abba.0",baseID:"d.ds.4.abba",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"ds",edgemap:["a","b","b","a"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"824e5e1f":{meta:{setID:"824e5e1f",set:["824e5e1f"],setBaseIDs:["d.ef.4.abba.180"],rootBaseID:"d.ef.4.abba",rootIDHash:"824e5e1f"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(1,0,0,1,24,88)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.ef.4.abba.180",baseID:"d.ef.4.abba",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"ef",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"83856b0b":{meta:{setID:"83856b0b",set:["83856b0b"],setBaseIDs:["d.ds.4.abba.90"],rootBaseID:"d.ds.4.abba",rootIDHash:"83856b0b"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,31,0)"},children:[{attr:{d:"M 1.941176414489746 0 C 1.941176414489746 17.1533145904541 15.846684455871582 31.058822631835938 33 31.058822631835938 C 50.153316497802734 31.058822631835938 64.05882263183594 17.1533145904541 64.05882263183594 0 L 66 0 C 66 18.22539520263672 51.22539520263672 33 33 33 C 14.774600982666016 33 0 18.22539520263672 0 0 L 1.941176414489746 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.ds.4.abba.90",baseID:"d.ds.4.abba",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"ds",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"1e0083d1":{meta:{setID:"1e0083d1",set:["1e0083d1"],setBaseIDs:["d.el.4.abba.270"],rootBaseID:"d.el.4.abba",rootIDHash:"1e0083d1"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(1,0,0,1,40,72)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.el.4.abba.270",baseID:"d.el.4.abba",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"el",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"4b097186":{meta:{setID:"4b097186",set:["4b097186"],setBaseIDs:["d.eg.4.abba.90"],rootBaseID:"d.eg.4.abba",rootIDHash:"4b097186"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,8,104)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.eg.4.abba.90",baseID:"d.eg.4.abba",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"eg",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},e3f1ef01:{meta:{setID:"e3f1ef01",set:["e3f1ef01"],setBaseIDs:["d.bn.4.abba.180"],rootBaseID:"d.bn.4.abba",rootIDHash:"e3f1ef01"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 111 C 61.303611755371094 111 111 61.303611755371094 111 0 L 113 0 C 113 62.408180236816406 62.408180236816406 113 0 113 L 0 111 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 94.99999237060547 C 52.46704864501953 94.99999237060547 94.99999237060547 52.46704864501953 94.99999237060547 0 L 96.99999237060547 0 C 96.99999237060547 53.571617126464844 53.571617126464844 96.99999237060547 0 96.99999237060547 L 0 94.99999237060547 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 79 C 43.6304931640625 79 79 43.6304931640625 79 0 L 81 0 C 81 44.73506164550781 44.73506164550781 81 0 81 L 0 79 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 63 C 34.793941497802734 63 63 34.793941497802734 63 0 L 65 0 C 65 35.89850997924805 35.89850997924805 65 0 65 L 0 63 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 31 C 17.12082862854004 31 31 17.12082862854004 31 0 L 33 0 C 33 18.22539710998535 18.22539710998535 33 0 33 L 0 31 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 15 C 8.284271240234375 15 15 8.284271240234375 15 0 L 17 0 C 17 9.38884162902832 9.38884162902832 17 0 17 L 0 15 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 46.999996185302734 C 25.957382202148438 46.999996185302734 46.999996185302734 25.957382202148438 46.999996185302734 0 L 48.999996185302734 0 C 48.999996185302734 27.06195068359375 27.06195068359375 48.999996185302734 0 48.999996185302734 L 0 46.999996185302734 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.bn.4.abba.180",baseID:"d.bn.4.abba",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"bn",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"372ac81b":{meta:{setID:"372ac81b",set:["372ac81b"],setBaseIDs:["d.bk.4.bbbb.180"],rootBaseID:"d.bk.4.bbbb",rootIDHash:"372ac81b"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(-4.371138828673793e-8,-1,1,-4.371138828673793e-8,0,130)"},children:[{attr:{d:"M 2 0 C 2 70.69239807128906 59.30760192871094 128 130 128 L 130 130 C 58.203033447265625 130 0 71.79696655273438 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.bk.4.bbbb.180",baseID:"d.bk.4.bbbb",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"bk",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"387e568f":{meta:{setID:"387e568f",set:["387e568f"],setBaseIDs:["d.di.4.bbbb.180"],rootBaseID:"d.di.4.bbbb",rootIDHash:"387e568f"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,1.8369702788777518e-16,97)"},children:[{attr:{d:"M 2 0 C 2 52.46701431274414 44.53298568725586 95 97 95 L 97 97 C 43.42841720581055 97 0 53.57158279418945 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.di.4.bbbb.180",baseID:"d.di.4.bbbb",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"di",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},fc9ea1e2:{meta:{setID:"fc9ea1e2",set:["fc9ea1e2"],setBaseIDs:["d.bn.4.abba.90"],rootBaseID:"d.bn.4.abba",rootIDHash:"fc9ea1e2"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 111 C 61.303611755371094 111 111 61.303611755371094 111 0 L 113 0 C 113 62.408180236816406 62.408180236816406 113 0 113 L 0 111 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 94.99999237060547 C 52.46704864501953 94.99999237060547 94.99999237060547 52.46704864501953 94.99999237060547 0 L 96.99999237060547 0 C 96.99999237060547 53.571617126464844 53.571617126464844 96.99999237060547 0 96.99999237060547 L 0 94.99999237060547 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 79 C 43.6304931640625 79 79 43.6304931640625 79 0 L 81 0 C 81 44.73506164550781 44.73506164550781 81 0 81 L 0 79 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 63 C 34.793941497802734 63 63 34.793941497802734 63 0 L 65 0 C 65 35.89850997924805 35.89850997924805 65 0 65 L 0 63 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 31 C 17.12082862854004 31 31 17.12082862854004 31 0 L 33 0 C 33 18.22539710998535 18.22539710998535 33 0 33 L 0 31 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 15 C 8.284271240234375 15 15 8.284271240234375 15 0 L 17 0 C 17 9.38884162902832 9.38884162902832 17 0 17 L 0 15 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 46.999996185302734 C 25.957382202148438 46.999996185302734 46.999996185302734 25.957382202148438 46.999996185302734 0 L 48.999996185302734 0 C 48.999996185302734 27.06195068359375 27.06195068359375 48.999996185302734 0 48.999996185302734 L 0 46.999996185302734 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.bn.4.abba.90",baseID:"d.bn.4.abba",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"bn",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"7d18e429":{meta:{setID:"7d18e429",set:["7d18e429"],setBaseIDs:["d.ci.4.bbbb.180"],rootBaseID:"d.ci.4.bbbb",rootIDHash:"7d18e429"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(5.551115123125783e-17,-1,1,5.551115123125783e-17,63,64)"},children:[{attr:{d:"M 64 2 L 0 2 L 0 0 L 64 0 L 64 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.ci.4.bbbb.180",baseID:"d.ci.4.bbbb",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"ci",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},d842a67d:{meta:{setID:"d842a67d",set:["d842a67d"],setBaseIDs:["d.ec.2.abba.0"],rootBaseID:"d.ec.2.abba",rootIDHash:"d842a67d"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,24,56)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,88,56)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.ec.2.abba.0",baseID:"d.ec.2.abba",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:2,paint:"BG",key:"ec",edgemap:["a","b","b","a"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},fe4199fc:{meta:{setID:"fe4199fc",set:["fe4199fc"],setBaseIDs:["d.dm.4.bbbb.180"],rootBaseID:"d.dm.4.bbbb",rootIDHash:"fe4199fc"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(1,0,0,1,64,31)"},children:[{attr:{d:"M 33 33 C 33 14.774604797363281 18.22539520263672 0 0 0 L 0 2 C 17.120826721191406 2 31 15.879173278808594 31 33 L 33 33 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.dm.4.bbbb.180",baseID:"d.dm.4.bbbb",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"dm",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"975397b2":{meta:{setID:"975397b2",set:["975397b2"],setBaseIDs:["d.eg.4.abba.270"],rootBaseID:"d.eg.4.abba",rootIDHash:"975397b2"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(1,0,0,1,8,104)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.eg.4.abba.270",baseID:"d.eg.4.abba",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"eg",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},b645c8d3:{meta:{setID:"b645c8d3",set:["b645c8d3"],setBaseIDs:["d.cw.4.bbbb.0"],rootBaseID:"d.cw.4.bbbb",rootIDHash:"b645c8d3"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,32.06146240234375,2)"},children:[{attr:{d:"M 0 0 C 1.03240966796875 16.741455078125 14.9371337890625 30 31.93853759765625 30 C 48.93994140625 30 62.84466552734375 16.741455078125 63.8770751953125 0 L 0 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.cw.4.bbbb.0",baseID:"d.cw.4.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"cw",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"8d8261d6":{meta:{setID:"8d8261d6",set:["8d8261d6"],setBaseIDs:["d.bn.4.abba.270"],rootBaseID:"d.bn.4.abba",rootIDHash:"8d8261d6"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 111 C 61.303611755371094 111 111 61.303611755371094 111 0 L 113 0 C 113 62.408180236816406 62.408180236816406 113 0 113 L 0 111 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 94.99999237060547 C 52.46704864501953 94.99999237060547 94.99999237060547 52.46704864501953 94.99999237060547 0 L 96.99999237060547 0 C 96.99999237060547 53.571617126464844 53.571617126464844 96.99999237060547 0 96.99999237060547 L 0 94.99999237060547 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 79 C 43.6304931640625 79 79 43.6304931640625 79 0 L 81 0 C 81 44.73506164550781 44.73506164550781 81 0 81 L 0 79 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 63 C 34.793941497802734 63 63 34.793941497802734 63 0 L 65 0 C 65 35.89850997924805 35.89850997924805 65 0 65 L 0 63 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 31 C 17.12082862854004 31 31 17.12082862854004 31 0 L 33 0 C 33 18.22539710998535 18.22539710998535 33 0 33 L 0 31 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 15 C 8.284271240234375 15 15 8.284271240234375 15 0 L 17 0 C 17 9.38884162902832 9.38884162902832 17 0 17 L 0 15 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{d:"M 0 46.999996185302734 C 25.957382202148438 46.999996185302734 46.999996185302734 25.957382202148438 46.999996185302734 0 L 48.999996185302734 0 C 48.999996185302734 27.06195068359375 27.06195068359375 48.999996185302734 0 48.999996185302734 L 0 46.999996185302734 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.bn.4.abba.270",baseID:"d.bn.4.abba",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"bn",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},ab99a1a:{meta:{setID:"ab99a1a",set:["ab99a1a"],setBaseIDs:["d.em.4.abba.0"],rootBaseID:"d.em.4.abba",rootIDHash:"ab99a1a"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,2,57.359375)"},children:[{attr:{d:"M 54.359222412109375 0 C 40.325164794921875 13.78662109375 21.164825439453125 22.3719482421875 0 22.634521484375 L 0 68.6251220703125 C 34.000030517578125 68.0960693359375 64.73162841796875 54.0999755859375 87.095458984375 31.7362060546875 L 54.359222412109375 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.em.4.abba.0",baseID:"d.em.4.abba",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"em",edgemap:["a","b","b","a"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"20fd4083":{meta:{setID:"20fd4083",set:["20fd4083"],setBaseIDs:["d.bq.4.abbb.270"],rootBaseID:"d.bq.4.abbb",rootIDHash:"20fd4083"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(1,0,0,1,-2,0)"},children:[{attr:{d:"M 2 0 C 2 35.34622573852539 30.65377426147461 64 66 64 C 101.34622955322266 64 130 35.34622573852539 130 0 L 132 0 C 132 36.4507942199707 102.45079803466797 66 66 66 C 29.549205780029297 66 0 36.4507942199707 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.bq.4.abbb.270",baseID:"d.bq.4.abbb",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"bq",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"7fcb0d8f":{meta:{setID:"7fcb0d8f",set:["7fcb0d8f"],setBaseIDs:["d.cw.4.bbbb.90"],rootBaseID:"d.cw.4.bbbb",rootIDHash:"7fcb0d8f"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,32.06146240234375,2)"},children:[{attr:{d:"M 0 0 C 1.03240966796875 16.741455078125 14.9371337890625 30 31.93853759765625 30 C 48.93994140625 30 62.84466552734375 16.741455078125 63.8770751953125 0 L 0 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.cw.4.bbbb.90",baseID:"d.cw.4.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"cw",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"6e9d4a77":{meta:{setID:"6e9d4a77",set:["6e9d4a77"],setBaseIDs:["d.dj.4.bbbb.90"],rootBaseID:"d.dj.4.bbbb",rootIDHash:"6e9d4a77"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,1.8369702788777518e-16,65)"},children:[{attr:{d:"M 2 0 C 2 34.793914794921875 30.206085205078125 63 65 63 L 65 65 C 29.101516723632812 65 0 35.89848327636719 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dj.4.bbbb.90",baseID:"d.dj.4.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"dj",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"82e8305":{meta:{setID:"82e8305",set:["82e8305"],setBaseIDs:["d.ec.2.abba.90"],rootBaseID:"d.ec.2.abba",rootIDHash:"82e8305"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,24,56)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"},{attr:{transform:"matrix(1,0,0,1,88,56)"},children:[{attr:{d:"M 16 8 C 16 12.418277740478516 12.418277740478516 16 8 16 C 3.5817220211029053 16 0 12.418277740478516 0 8 C 0 3.5817220211029053 3.5817220211029053 0 8 0 C 12.418277740478516 0 16 3.5817220211029053 16 8 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.ec.2.abba.90",baseID:"d.ec.2.abba",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:2,paint:"BG",key:"ec",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},a9e89fe4:{meta:{setID:"a9e89fe4",set:["a9e89fe4"],setBaseIDs:["d.cw.4.bbbb.180"],rootBaseID:"d.cw.4.bbbb",rootIDHash:"a9e89fe4"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(1,0,0,1,32.06146240234375,2)"},children:[{attr:{d:"M 0 0 C 1.03240966796875 16.741455078125 14.9371337890625 30 31.93853759765625 30 C 48.93994140625 30 62.84466552734375 16.741455078125 63.8770751953125 0 L 0 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.cw.4.bbbb.180",baseID:"d.cw.4.bbbb",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"cw",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},d24107f2:{meta:{setID:"d24107f2",set:["d24107f2"],setBaseIDs:["d.ds.4.abba.180"],rootBaseID:"d.ds.4.abba",rootIDHash:"d24107f2"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(1,0,0,1,31,0)"},children:[{attr:{d:"M 1.941176414489746 0 C 1.941176414489746 17.1533145904541 15.846684455871582 31.058822631835938 33 31.058822631835938 C 50.153316497802734 31.058822631835938 64.05882263183594 17.1533145904541 64.05882263183594 0 L 66 0 C 66 18.22539520263672 51.22539520263672 33 33 33 C 14.774600982666016 33 0 18.22539520263672 0 0 L 1.941176414489746 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.ds.4.abba.180",baseID:"d.ds.4.abba",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"ds",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},cb44703d:{meta:{setID:"cb44703d",set:["cb44703d"],setBaseIDs:["d.ci.4.bbbb.90"],rootBaseID:"d.ci.4.bbbb",rootIDHash:"cb44703d"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(5.551115123125783e-17,-1,1,5.551115123125783e-17,63,64)"},children:[{attr:{d:"M 64 2 L 0 2 L 0 0 L 64 0 L 64 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.ci.4.bbbb.90",baseID:"d.ci.4.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"ci",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"6b5e126b":{meta:{setID:"6b5e126b",set:["6b5e126b"],setBaseIDs:["d.ee.4.abba.180"],rootBaseID:"d.ee.4.abba",rootIDHash:"6b5e126b"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(1,0,0,1,0,-2)"},children:[{attr:{d:"M 31 33.5 C 31 16.152257919311523 17.135732650756836 2.0615384578704834 0 2.0615384578704834 L 0 0 C 18.210493087768555 0 33 14.983217239379883 33 33.5 C 33 52.016780853271484 18.210493087768555 67 0 67 L 0 64.93846130371094 C 17.135732650756836 64.93846130371094 31 50.84773635864258 31 33.5 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.ee.4.abba.180",baseID:"d.ee.4.abba",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"ee",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"3d22f9b0":{meta:{setID:"3d22f9b0",set:["3d22f9b0"],setBaseIDs:["d.dl.4.bbbb.270"],rootBaseID:"d.dl.4.bbbb",rootIDHash:"3d22f9b0"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(1,0,0,1,64,15)"},children:[{attr:{d:"M 49 49 C 49 21.938051223754883 27.06195068359375 0 0 0 L 0 2 C 25.957382202148438 2 47 23.042621612548828 47 49 L 49 49 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.dl.4.bbbb.270",baseID:"d.dl.4.bbbb",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"dl",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},fb5ca265:{meta:{setID:"fb5ca265",set:["fb5ca265"],setBaseIDs:["d.cs.2.bbbb.90"],rootBaseID:"d.cs.2.bbbb",rootIDHash:"fb5ca265"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,111,0)"},children:[{attr:{d:"M 0 0 L 2 0 L 2 128 L 0 128 L 0 0 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.cs.2.bbbb.90",baseID:"d.cs.2.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:2,paint:"BG",key:"cs",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},ec96cafb:{meta:{setID:"ec96cafb",set:["ec96cafb"],setBaseIDs:["d.bt.4.bbbb.180"],rootBaseID:"d.bt.4.bbbb",rootIDHash:"ec96cafb"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(0.5299989581108093,0.847998321056366,-0.847998321056366,0.5299989581108093,1.269600510597229,-0.7934557199478149)"},children:[{attr:{d:"M 150.94369506835938 1.9943454265594482 L 0 1.9943454265594482 L 0 0 L 150.94369506835938 0 L 150.94369506835938 1.9943454265594482 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.bt.4.bbbb.180",baseID:"d.bt.4.bbbb",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"bt",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"9f680a2b":{meta:{setID:"9f680a2b",set:["9f680a2b"],setBaseIDs:["d.ce.1.bbbb.0"],rootBaseID:"d.ce.1.bbbb",rootIDHash:"9f680a2b"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,16,16)"},children:[{attr:{d:"M 0 48 C 0 21.490337371826172 21.490337371826172 0 48 0 C 74.5096664428711 0 96 21.490337371826172 96 48 C 96 74.5096664428711 74.5096664428711 96 48 96 C 21.490337371826172 96 0 74.5096664428711 0 48 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.ce.1.bbbb.0",baseID:"d.ce.1.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:1,paint:"BG",key:"ce",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},b46295d4:{meta:{setID:"b46295d4",set:["b46295d4"],setBaseIDs:["d.bz.4.bbbb.90"],rootBaseID:"d.bz.4.bbbb",rootIDHash:"b46295d4"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(1,0,0,1,3.0040283203125,3.004150390625)"},children:[{attr:{d:"M 35.03544616699219 84.578857421875 C 13.582061767578125 62.77294921875 0.26544189453125 32.942138671875 0 0 C 32.942420959472656 0.265380859375 62.77324676513672 13.58203125 84.57886505126953 35.03515625 L 35.03544616699219 84.578857421875 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.bz.4.bbbb.90",baseID:"d.bz.4.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"bz",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"2d91e72f":{meta:{setID:"2d91e72f",set:["2d91e72f"],setBaseIDs:["d.dk.4.bbbb.90"],rootBaseID:"d.dk.4.bbbb",rootIDHash:"2d91e72f"},children:[{attr:{transform:"matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,128,0)"},children:[{attr:{transform:"matrix(-1.8369702788777518e-16,-1,1,-1.8369702788777518e-16,1.8369702788777518e-16,33)"},children:[{attr:{d:"M 2 0 C 2 17.12081527709961 15.87918472290039 31 33 31 L 33 33 C 14.774616241455078 33 0 18.225383758544922 0 0 L 2 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.dk.4.bbbb.90",baseID:"d.dk.4.bbbb",type:"d",relativeTransform:{a:6.123233995736766e-17,c:-1,e:128,b:1,d:6.123233995736766e-17,f:0},rotations:4,paint:"BG",key:"dk",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"55d21172":{meta:{setID:"55d21172",set:["55d21172"],setBaseIDs:["d.cx.4.bbbb.0"],rootBaseID:"d.cx.4.bbbb",rootIDHash:"55d21172"},children:[{attr:{transform:"matrix(1,0,0,1,0,0)"},children:[{attr:{transform:"matrix(1,0,0,1,48.123779296875,2)"},children:[{attr:{d:"M 0 0 C 0.98419189453125 7.892822265625 7.71697998046875 14 15.876220703125 14 C 24.03546142578125 14 30.76824951171875 7.892822265625 31.75244140625 0 L 0 0 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.cx.4.bbbb.0",baseID:"d.cx.4.bbbb",type:"d",relativeTransform:{a:1,c:0,e:0,b:0,d:1,f:0},rotations:4,paint:"BG",key:"cx",edgemap:["b","b","b","b"],style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"6f23470b":{meta:{setID:"6f23470b",set:["6f23470b"],setBaseIDs:["d.ca.4.bbbb.180"],rootBaseID:"d.ca.4.bbbb",rootIDHash:"6f23470b"},children:[{attr:{transform:"matrix(-1,1.2246467991473532e-16,-1.2246467991473532e-16,-1,128,128)"},children:[{attr:{transform:"matrix(1,0,0,1,0.8699696660041809,0.8699747920036316)"},children:[{attr:{d:"M 112.12674713134766 0 C 111.66136932373047 61.71796417236328 61.71796798706055 111.66136932373047 0 112.12674713134766 C 0.07810759544372559 111.4577407836914 0.161374032497406 110.79031372070312 0.24975842237472534 110.12449645996094 C 60.66484069824219 109.52742767333984 109.52742767333984 60.66484069824219 110.12449645996094 0.2497583031654358 C 110.79031372070312 0.16137391328811646 111.4577407836914 0.07810753583908081 112.12674713134766 0 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 96.05703735351562 2.9277095794677734 C 94.11087036132812 53.479217529296875 53.47922134399414 94.11087799072266 2.92771053314209 96.05703735351562 C 3.0964479446411133 95.3803939819336 3.2705700397491455 94.70587921142578 3.450028657913208 94.0335464477539 C 52.480045318603516 91.8392105102539 91.8392105102539 52.480045318603516 94.0335464477539 3.4500277042388916 C 94.70587921142578 3.270569086074829 95.3803939819336 3.096446990966797 96.05703735351562 2.9277095794677734 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 8.235589027404785 79.62393188476562 C 45.69525909423828 75.4333724975586 75.4333724975586 45.69525909423828 79.62393188476562 8.235587120056152 C 78.9149169921875 8.519139289855957 78.20903015136719 8.808850288391113 77.50634002685547 9.104653358459473 C 73.0142822265625 44.75928497314453 44.75929260253906 73.0142822265625 9.104655265808105 77.50634002685547 C 8.808852195739746 78.20903015136719 8.51914119720459 78.9149169921875 8.235589027404785 79.62393188476562 Z",fillRule:"NONZERO"},tag:"path"},{attr:{d:"M 17.15437126159668 61.59848403930664 C 38.56138610839844 55.43290328979492 55.43291091918945 38.56138610839844 61.59849166870117 17.15437126159668 C 60.73215103149414 17.67171287536621 59.8724365234375 18.198997497558594 59.019508361816406 18.736074447631836 C 52.795589447021484 37.75990295410156 37.75990295410156 52.79558563232422 18.73607635498047 59.01950454711914 C 18.198999404907227 59.872432708740234 17.67171287536621 60.73214340209961 17.15437126159668 61.59848403930664 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.ca.4.bbbb.180",baseID:"d.ca.4.bbbb",type:"d",relativeTransform:{a:-1,c:-1.2246467991473532e-16,e:128,b:1.2246467991473532e-16,d:-1,f:128},rotations:4,paint:"BG",key:"ca",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},"235d50bf":{meta:{setID:"235d50bf",set:["235d50bf"],setBaseIDs:["d.ci.4.bbbb.270"],rootBaseID:"d.ci.4.bbbb",rootIDHash:"235d50bf"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(5.551115123125783e-17,-1,1,5.551115123125783e-17,63,64)"},children:[{attr:{d:"M 64 2 L 0 2 L 0 0 L 64 0 L 64 2 Z",fillRule:"EVENODD"},tag:"path"}],tag:"g"}],meta:{id:"d.ci.4.bbbb.270",baseID:"d.ci.4.bbbb",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"ci",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"},b3ae909c:{meta:{setID:"b3ae909c",set:["b3ae909c"],setBaseIDs:["d.dm.4.bbbb.270"],rootBaseID:"d.dm.4.bbbb",rootIDHash:"b3ae909c"},children:[{attr:{transform:"matrix(-1.8369701987210297e-16,-1,1,-1.8369701987210297e-16,1.4210854715202004e-14,128)"},children:[{attr:{transform:"matrix(1,0,0,1,64,31)"},children:[{attr:{d:"M 33 33 C 33 14.774604797363281 18.22539520263672 0 0 0 L 0 2 C 17.120826721191406 2 31 15.879173278808594 31 33 L 33 33 Z",fillRule:"NONZERO"},tag:"path"}],tag:"g"}],meta:{id:"d.dm.4.bbbb.270",baseID:"d.dm.4.bbbb",type:"d",relativeTransform:{a:-1.8369701987210297e-16,c:1,e:1.4210854715202004e-14,b:-1,d:-1.8369701987210297e-16,f:128},rotations:4,paint:"BG",key:"dm",style:{fill:"BG",stroke:"NO"}},tag:"g"}],tag:"g"}},mapping={bac:"e3621cc2:7faaca8c:36a4b4a8:5dfed122",bal:"de3bc3d1:587b58fb:63454c71",ban:"e3621cc2:66b0fffd",bar:"7a365cc2:2befa75a:7faaca8c",bat:"e3621cc2:adfbec3",bec:"a5c31631:7faaca8c:b7b090cf",bel:"362aae07:b193cb04",ben:"fbf3a00b:2befa75a:b0aeb7df",bep:"82ff5e94:92e85004",ber:"19634ad2:42b4e3a3",bes:"a5c31631:7faaca8c:335e8694",bet:"7a365cc2:2f5059f3",bex:"19634ad2:2f5059f3:b7b090cf",bic:"e3621cc2:4d0779c1",bid:"e3621cc2:869bd8d8:57ed51b0",bil:"b0ac0b82:10545ed3:b7b090cf",bin:"fbf3a00b",bis:"e3621cc2:869bd8d8:fd1b186c",bit:"de3bc3d1:e5fae2fb:bddfa3f3",bol:"7a365cc2:869bd8d8:82610c41",bon:"82ff5e94:613cb28b",bor:"b0ac0b82:7faaca8c:fc65290b",bos:"e3621cc2:7faaca8c:952f1d85",bot:"b0ac0b82:36a4b4a8:cb9b5189",bud:"a5c31631:462c645e:d1fb16cc",bur:"6cb74008:2639d7d4:5dfed122",bus:"a5c31631:7faaca8c:c7af9494",byl:"6cb74008:7210b66f:5dfed122",byn:"6cb74008:18f6b23e",byr:"362aae07:7faaca8c:13446f50",byt:"19634ad2:869bd8d8:82610c41:2b187d87",dab:"e3621cc2:1c9d4f11:5dfed122",dac:"e3621cc2:e5fae2fb:869bd8d8:69daeb1a",dal:"de3bc3d1:587b58fb:7faaca8c",dan:"b0ac0b82:fe5cf0f4:2befa75a:9e7ddd3d",dap:"e3621cc2:10545ed3:bddfa3f3",dar:"7a365cc2:3cdcdb8c:acc8c8fb",das:"fbf3a00b:fe5cf0f4:b7b090cf",dat:"e3621cc2:613cb28b",dav:"b0ac0b82:869bd8d8:4dae70af:f0d5fe71",deb:"fbf3a00b:cb81c430",dec:"a5c31631:efa22418",def:"de3bc3d1:66fbf43f:5dfed122",deg:"fbf3a00b:335e8694",del:"362aae07:acc8c8fb",dem:"7a365cc2:7faaca8c:6245af61",den:"fbf3a00b:7faaca8c:6245af61",dep:"82ff5e94:fc65290b",der:"d93ccb2:42b4e3a3",des:"82ff5e94:42b4e3a3",det:"7a365cc2:7191ec30",dev:"19634ad2:36a4b4a8",dex:"19634ad2:fe5cf0f4:b7b090cf",dib:"7a365cc2:869bd8d8:faa6eb0",dif:"e3621cc2:2639d7d4:a0991dbc",dig:"b0ac0b82:fe5cf0f4:2befa75a:2f5059f3",dil:"b0ac0b82:e5fae2fb:10545ed3",din:"fbf3a00b:42b4e3a3",dir:"e3621cc2:2befa75a:2f5059f3:c3bebfe6",dis:"82ff5e94:7faaca8c:87cb2bff",div:"fbf3a00b:fe5cf0f4:603da034:f3633360",doc:"362aae07:2befa75a:fe5cf0f4:6acd7409",dol:"7a365cc2:869bd8d8:ad7dd51b",don:"82ff5e94:6615d02d",dop:"7a365cc2:36a4b4a8:869bd8d8:5ba1ba9b",dor:"b0ac0b82:869bd8d8",dos:"e3621cc2:7faaca8c:cf0f809a",dot:"b0ac0b82:36a4b4a8",dov:"fbf3a00b:e5fae2fb:9ebd20ff",doz:"7a365cc2:3cdcdb8c",duc:"a5c31631:869bd8d8:faa6eb0",dul:"7a365cc2:36a4b4a8:4dae70af",dun:"19634ad2:4dae70af",dur:"d93ccb2",dus:"a5c31631:e5fae2fb:4d0779c1",dut:"fbf3a00b:5e841ec3",dux:"6cb74008:afc30081",dyl:"a5c31631:66b0fffd",dyn:"6cb74008:4c4076d5",dyr:"362aae07:7faaca8c:d6753be3",dys:"a5c31631:adfbec3",dyt:"19634ad2:869bd8d8:b193cb04:b0aeb7df",fab:"e3621cc2:e5fae2fb:36a4b4a8:5dfed122",fad:"6cb74008:b788c92f",fal:"362aae07:e5fae2fb:9ebd20ff",fam:"b0ac0b82:869bd8d8:36a4b4a8:fe5cf0f4",fan:"b0ac0b82:fe5cf0f4:2befa75a:e5fae2fb",fas:"fbf3a00b:b193cb04:a4ed278a",feb:"fbf3a00b:eb608ee5",fed:"7a365cc2:36a4b4a8:52a6a74c",fel:"362aae07:1c9d4f11",fen:"fbf3a00b:7faaca8c:fc65290b",fep:"a5c31631:e5fae2fb",fer:"19634ad2:fe5cf0f4",fes:"82ff5e94:e2f4d6e2",fet:"7a365cc2:e5fae2fb",fex:"19634ad2:1c9d4f11:b7b090cf",fid:"e3621cc2:7faaca8c:e6117eb6",fig:"b0ac0b82:fe5cf0f4:2befa75a:b193cb04",fil:"b0ac0b82:869bd8d8:48176644",fin:"fbf3a00b:9e7ddd3d",fip:"b0ac0b82:7faaca8c:82610c41:b397af9f",fir:"e3621cc2:2befa75a:1c9d4f11:427a1751",fit:"de3bc3d1:e5fae2fb:4dae70af",fod:"b0ac0b82:b7b090cf",fog:"82ff5e94:7faaca8c:2befa75a:1735a791",fol:"7a365cc2:869bd8d8:1735a791",fon:"82ff5e94:7faaca8c",fop:"7a365cc2:7faaca8c:462c645e:d1fb16cc",for:"b0ac0b82:36a4b4a8:9e7ddd3d",fos:"6cb74008:7faaca8c:cf0f809a",fot:"b0ac0b82:36a4b4a8:7191ec30",ful:"7a365cc2:5ba1ba9b",fun:"28b33136:7faaca8c:7191ec30:672fdf93",fur:"6cb74008:2befa75a:e5fae2fb:cf0f809a",fus:"a5c31631:e5fae2fb:c7af9494",fyl:"6cb74008:7210b66f:f49b158d",fyn:"6cb74008:e5fae2fb",fyr:"362aae07:7faaca8c:1c9d4f11",hab:"e3621cc2:e5fae2fb:5dfed122",hac:"e3621cc2:e5fae2fb:2befa75a:b193cb04",had:"6cb74008:6cf35bfb",hal:"362aae07:fe5cf0f4:83023171",han:"6cb74008:66b0fffd",hap:"7a365cc2:82610c41:7faaca8c:4c1ac47d",har:"7a365cc2:2befa75a:fe5cf0f4",has:"fbf3a00b:b193cb04:b0aeb7df",hat:"e3621cc2:2639d7d4",hav:"e3621cc2:42b4e3a3",heb:"fbf3a00b:66b0fffd",hec:"a5c31631:e6117eb6",hep:"a5c31631:7faaca8c",hes:"82ff5e94:9b3aa0b1",het:"7a365cc2:42b4e3a3",hex:"19634ad2:e5fae2fb:b7b090cf",hid:"e3621cc2:7faaca8c:cf042a60",hil:"b0ac0b82:fe5cf0f4:44e1402d",hin:"fbf3a00b:9b3aa0b1",hob:"28b33136:869bd8d8",hoc:"b0ac0b82:1c9d4f11:bddfa3f3",hod:"b0ac0b82:54112535",hol:"7a365cc2:869bd8d8:2befa75a",hop:"7a365cc2:36a4b4a8:869bd8d8:cf0f809a",hos:"e3621cc2:7faaca8c:e53a31b5",hul:"7a365cc2:82610c41:b0aeb7df",hus:"a5c31631:7faaca8c:36a4b4a8",hut:"fbf3a00b:6cf35bfb",lab:"82ff5e94:7faaca8c:1c9d4f11:5dfed122",lac:"e3621cc2:869bd8d8:57ed51b0:2ab4bc02",lad:"82ff5e94:b788c92f",lag:"b0ac0b82:4456d619",lan:"b0ac0b82:fe5cf0f4:2befa75a:9b3aa0b1",lap:"e3621cc2:4dae70af:f0d5fe71",lar:"7a365cc2:2befa75a:869bd8d8",las:"fbf3a00b:82610c41:d1fb16cc",lat:"e3621cc2:cf042a60",lav:"82ff5e94:adafc09c",leb:"fbf3a00b:d7e0d9e",lec:"a5c31631:7faaca8c:bddfa3f3",led:"7a365cc2:1d989f87",leg:"fbf3a00b:b09cf4ef",len:"fbf3a00b:82610c41:510344a7",lep:"82ff5e94:ae1e4f7",ler:"19634ad2:2b187d87",let:"7a365cc2:fe5cf0f4",lev:"19634ad2:bddfa3f3",lex:"19634ad2:7faaca8c:7191ec30:b7b090cf",lib:"7a365cc2:869bd8d8:fb651938",lid:"e3621cc2:e5fae2fb:2f5059f3",lig:"7a365cc2:82610c41",lin:"fbf3a00b:54112535",lis:"a5c31631:869bd8d8:f3633360",lit:"de3bc3d1:7faaca8c:18f6b23e",liv:"fbf3a00b:fe5cf0f4:603da034:8d560b8b",loc:"de3bc3d1:869bd8d8:9f3841fc",lod:"b0ac0b82:462c645e",lom:"fbf3a00b:59d9e201",lon:"82ff5e94:cf042a60",lop:"7a365cc2:36a4b4a8:869bd8d8:ad042183",lor:"b0ac0b82:fe5cf0f4",los:"e3621cc2:7faaca8c:5e841ec3",luc:"a5c31631:869bd8d8:1b1fba11",lud:"a5c31631:869bd8d8:cbdce7a4",lug:"19634ad2",lun:"7a365cc2:b193cb04",lup:"19634ad2:869bd8d8:5ba1ba9b",lur:"a5c31631:fe5cf0f4:cbdce7a4",lus:"a5c31631:e5fae2fb:5e841ec3",lut:"fbf3a00b:d1fb16cc",lux:"6cb74008:b7b090cf",lyd:"de3bc3d1:7faaca8c:b193cb04:bfc8669e",lyn:"6cb74008:9b3aa0b1",lyr:"362aae07:7faaca8c:efa22418",lys:"a5c31631:bddfa3f3",lyt:"19634ad2:e5fae2fb:2befa75a:10545ed3",lyx:"6cb74008:7faaca8c:952f1d85",mac:"e3621cc2:5dfed122",mag:"b0ac0b82:869bd8d8:82610c41:510344a7",mal:"de3bc3d1:10545ed3:5dfed122",map:"82ff5e94:10545ed3:bddfa3f3",mar:"7a365cc2:3cdcdb8c:fe5cf0f4",mas:"fbf3a00b:b193cb04:b7b090cf",mat:"e3621cc2:81113d71",meb:"fbf3a00b:4d0779c1",mec:"a5c31631:10545ed3:bddfa3f3",med:"7a365cc2:f0d5fe71",meg:"fbf3a00b:92e85004",mel:"362aae07:7191ec30",mep:"82ff5e94:fd1b186c",mer:"19634ad2:9b3aa0b1",mes:"a5c31631:7faaca8c:7191ec30",met:"7a365cc2:9b3aa0b1",mev:"19634ad2:1735a791",mex:"19634ad2:7faaca8c:b7b090cf",mic:"a5c31631:335e8694",mid:"e3621cc2:869bd8d8:fb651938",mig:"b0ac0b82:fe5cf0f4:2befa75a:10545ed3",mil:"b0ac0b82:869bd8d8:fd1b186c",min:"fbf3a00b:7faaca8c",mip:"82ff5e94:2befa75a:fe5cf0f4:f6bb8637",mir:"e3621cc2:2befa75a:2f5059f3:a2880ff1",mis:"82ff5e94:7faaca8c:92e85004",mit:"de3bc3d1:e5fae2fb:87cb2bff",moc:"de3bc3d1:869bd8d8:5a85e6f7",mod:"b0ac0b82:1b1fba11",mog:"82ff5e94:b193cb04:7faaca8c:1735a791",mol:"7a365cc2:869bd8d8:8c89b36e",mon:"82ff5e94:b7b090cf",mop:"7a365cc2:7faaca8c:82610c41:b0aeb7df",mor:"b0ac0b82:36a4b4a8:2f5059f3",mos:"e3621cc2:e5fae2fb:824e5e1f",mot:"b0ac0b82:36a4b4a8:83856b0b",mud:"a5c31631:7faaca8c:1e0083d1",mug:"19634ad2:cf0f809a",mul:"7a365cc2:10545ed3:4dae70af",mun:"7a365cc2:bddfa3f3",mur:"a5c31631:869bd8d8:36a4b4a8:b0aeb7df",mus:"a5c31631:e5fae2fb:d7e0d9e",mut:"fbf3a00b:824e5e1f",myl:"6cb74008:2f5059f3:4b097186",myn:"6cb74008:e3f1ef01",myr:"362aae07:7faaca8c:e6117eb6",nac:"e3621cc2:2befa75a:5dfed122",nal:"de3bc3d1:7faaca8c:cf042a60",nam:"b0ac0b82:869bd8d8:36a4b4a8:a4ed278a",nap:"82ff5e94:fe5cf0f4:bddfa3f3",nar:"7a365cc2:2befa75a:b193cb04",nat:"e3621cc2:372ac81b",nav:"e3621cc2:adafc09c",neb:"fbf3a00b:387e568f",nec:"a5c31631:6cf35bfb",ned:"7a365cc2:36a4b4a8",nel:"362aae07:7faaca8c:6245af61",nem:"7a365cc2:7faaca8c:92e85004",nep:"a5c31631:fc9ea1e2",ner:"19634ad2:54112535",nes:"82ff5e94:fe5cf0f4",net:"7a365cc2:7d18e429",nev:"19634ad2:2befa75a",nex:"19634ad2:10545ed3:b7b090cf",nib:"7a365cc2:869bd8d8:5a85e6f7",nid:"e3621cc2:869bd8d8:2ab4bc02",nil:"b0ac0b82:869bd8d8:ad042183",nim:"28b33136:e2f4d6e2",nis:"82ff5e94:7faaca8c:387e568f",noc:"b0ac0b82:fe5cf0f4:bddfa3f3",nod:"b0ac0b82:d842a67d",nol:"7a365cc2:869bd8d8:510344a7",nom:"fbf3a00b:d6753be3",nop:"7a365cc2:7faaca8c:1c9d4f11:bddfa3f3",nor:"b0ac0b82:36a4b4a8:fe4199fc",nos:"e3621cc2:e5fae2fb:952f1d85",nov:"fbf3a00b:7faaca8c:cf042a60",nub:"a5c31631:869bd8d8",nul:"7a365cc2:b193cb04:d1fb16cc",num:"a5c31631:e5fae2fb:59d9e201",nup:"19634ad2:5ba1ba9b",nus:"a5c31631:7210b66f:f49b158d",nut:"fbf3a00b:975397b2",nux:"a5c31631:869bd8d8:fd1b186c",nyd:"de3bc3d1:7faaca8c:b193cb04:1735a791",nyl:"a5c31631:7faaca8c:fc65290b",nym:"6cb74008:cbdce7a4",nyr:"362aae07:7faaca8c:18f6b23e",nys:"a5c31631:672fdf93",nyt:"19634ad2:869bd8d8:a2880ff1:4dae70af",nyx:"6cb74008:7faaca8c:b7b090cf",pac:"e3621cc2:e5fae2fb:2befa75a:1d989f87",pad:"e3621cc2:b788c92f",pag:"b0ac0b82:7191ec30",pal:"de3bc3d1:e5fae2fb:adafc09c",pan:"e3621cc2:e5fae2fb",par:"7a365cc2:2befa75a:e5fae2fb",pas:"fbf3a00b:fe5cf0f4:cbdce7a4",pat:"e3621cc2:fc9ea1e2",pec:"a5c31631:e5fae2fb:13446f50",ped:"7a365cc2:d1fb16cc",peg:"fbf3a00b:b645c8d3",pel:"362aae07:4c1ac47d",pem:"7a365cc2:7faaca8c:335e8694",pen:"fbf3a00b:7faaca8c:8c89b36e",per:"d93ccb2:fe5cf0f4",pes:"82ff5e94:7faaca8c:4456d619",pet:"7a365cc2:10545ed3",pex:"19634ad2:b193cb04:b7b090cf",pic:"a5c31631:8d8261d6",pid:"e3621cc2:7faaca8c:5dfed122",pil:"b0ac0b82:e5fae2fb:5e841ec3",pin:"fbf3a00b:2b187d87",pit:"de3bc3d1:e5fae2fb:5dfed122",poc:"de3bc3d1:fe5cf0f4:42b4e3a3",pod:"b0ac0b82:5a85e6f7",pol:"7a365cc2:82610c41:4c4076d5",pon:"82ff5e94",pos:"e3621cc2:7faaca8c:824e5e1f",pub:"a5c31631:9b3aa0b1",pun:"7a365cc2:4dae70af:a2880ff1:427a1751",pur:"6cb74008:ab99a1a",put:"fbf3a00b:13446f50",pyl:"a5c31631:20fd4083",pyx:"6cb74008:7faaca8c:824e5e1f",rab:"82ff5e94:7faaca8c:7191ec30:5dfed122",rac:"de3bc3d1:5dfed122",rad:"a5c31631:b788c92f",rag:"b0ac0b82:2f5059f3",ral:"de3bc3d1:2befa75a:b193cb04",ram:"b0ac0b82:fe5cf0f4:2befa75a:b7b090cf",ran:"b0ac0b82:fe5cf0f4:2befa75a:7faaca8c",rap:"e3621cc2:fe5cf0f4:f0d5fe71",rav:"e3621cc2:4c4076d5",reb:"fbf3a00b:372ac81b",rec:"a5c31631:d6753be3",red:"7a365cc2:b397af9f",ref:"de3bc3d1:7faaca8c:5dfed122",reg:"fbf3a00b:7fcb0d8f",rel:"362aae07:fd1b186c",rem:"7a365cc2:7faaca8c:6e9d4a77",ren:"fbf3a00b:2befa75a:10545ed3",rep:"82ff5e94:387e568f",res:"82ff5e94:10545ed3",ret:"7a365cc2:869bd8d8",rev:"19634ad2:b7b090cf",rex:"19634ad2:869bd8d8:b7b090cf",rib:"7a365cc2:869bd8d8:e2f4d6e2",ric:"a5c31631:d7e0d9e",rid:"e3621cc2:fe5cf0f4:54112535",rig:"7a365cc2:82e8305",ril:"b0ac0b82:e5fae2fb:824e5e1f",rin:"fbf3a00b:48176644",rip:"b0ac0b82:7faaca8c:4dae70af:f0d5fe71",ris:"82ff5e94:7faaca8c:18f6b23e",rit:"de3bc3d1:e5fae2fb:b7b090cf",riv:"fbf3a00b:fe5cf0f4:b193cb04:82610c41",roc:"de3bc3d1:869bd8d8:57ed51b0",rol:"7a365cc2:869bd8d8:cf0f809a",ron:"82ff5e94:66b0fffd",rop:"7a365cc2:7faaca8c:10545ed3:4dae70af",ros:"e3621cc2:e5fae2fb:5e841ec3",rov:"fbf3a00b:7faaca8c:18f6b23e",ruc:"a5c31631:869bd8d8:4c4076d5",rud:"a5c31631:869bd8d8:48176644",rul:"7a365cc2:10545ed3:b7b090cf",rum:"6cb74008:62519049",run:"19634ad2:cbdce7a4",rup:"19634ad2:b193cb04:fe5cf0f4:5ba1ba9b",rus:"a5c31631:e5fae2fb:335e8694",rut:"fbf3a00b:952f1d85",rux:"a5c31631:869bd8d8:fe4199fc",ryc:"a5c31631:5a85e6f7",ryd:"de3bc3d1:7faaca8c:2f5059f3:c3bebfe6",ryg:"6cb74008",ryl:"e3621cc2:e5fae2fb:adafc09c",rym:"6cb74008:5a85e6f7",ryn:"6cb74008:eb608ee5",ryp:"6cb74008:7faaca8c",rys:"a5c31631:6245af61",ryt:"19634ad2:e5fae2fb:82610c41:1735a791",ryx:"6cb74008:2befa75a:e5fae2fb",sab:"e3621cc2:7faaca8c:1c9d4f11:5dfed122",sal:"de3bc3d1:e5fae2fb:9ebd20ff",sam:"b0ac0b82:fe5cf0f4:82610c41:b7b090cf",san:"e3621cc2:7faaca8c",sap:"e3621cc2:869bd8d8:f0d5fe71",sar:"7a365cc2:82610c41:fe5cf0f4",sat:"e3621cc2:afc30081",sav:"b0ac0b82:e5fae2fb:4dae70af:1d989f87",seb:"fbf3a00b:6e9d4a77",sec:"a5c31631:952f1d85",sed:"7a365cc2:36a4b4a8:a4ed278a",sef:"de3bc3d1:36a4b4a8:5dfed122",seg:"fbf3a00b:a9e89fe4",sel:"362aae07:2befa75a",sem:"7a365cc2:7faaca8c:cb81c430",sen:"fbf3a00b:fe5cf0f4:36a4b4a8:d24107f2",sep:"82ff5e94:cbdce7a4",ser:"d93ccb2:9b3aa0b1",set:"7a365cc2:cb44703d",sev:"19634ad2:82610c41",sib:"7a365cc2:e5fae2fb:4d0779c1",sic:"e3621cc2:4dae70af",sid:"e3621cc2:869bd8d8:6b5e126b",sig:"7a365cc2:d842a67d",sil:"b0ac0b82:e5fae2fb:2f5059f3",sim:"28b33136:48176644",sip:"fbf3a00b:fe5cf0f4:3d22f9b0:d1fb16cc",sit:"de3bc3d1:2befa75a:b7b090cf",siv:"fbf3a00b:fe5cf0f4:36a4b4a8:fb5ca265",soc:"362aae07:2befa75a:fe5cf0f4:603da034",sog:"82ff5e94:2befa75a:e5fae2fb:cf0f809a",sol:"7a365cc2:869bd8d8:b193cb04",som:"fbf3a00b:e6117eb6",son:"82ff5e94:ec96cafb",sop:"7a365cc2:7faaca8c:b193cb04:1d989f87",sor:"b0ac0b82:7faaca8c:18f6b23e",sov:"fbf3a00b:e5fae2fb:adafc09c",sub:"a5c31631:fe5cf0f4",sud:"a5c31631:869bd8d8:b7b090cf",sug:"19634ad2:d842a67d",sul:"7a365cc2:cf0f809a",sum:"6cb74008:cb81c430",sun:"7a365cc2:9f680a2b",sup:"19634ad2:36a4b4a8:869bd8d8:5ba1ba9b",sur:"a5c31631:7faaca8c:ab99a1a",sut:"fbf3a00b:b788c92f",syd:"de3bc3d1:7faaca8c:2f5059f3:3d22f9b0",syl:"6cb74008:7faaca8c:d6753be3",sym:"6cb74008:42b4e3a3",syn:"6cb74008:9ebd20ff",syp:"6cb74008:7faaca8c:cb81c430",syr:"362aae07:7faaca8c:59d9e201",syt:"19634ad2:e5fae2fb:82610c41:b193cb04",syx:"6cb74008:7faaca8c:fc65290b",tab:"e3621cc2:7faaca8c:2befa75a:5dfed122",tac:"e3621cc2:e5fae2fb:2befa75a:f0d5fe71",tad:"e3621cc2:6cf35bfb",tag:"b0ac0b82:10545ed3",tal:"de3bc3d1:e5fae2fb:d7e0d9e",tam:"b0ac0b82:869bd8d8:36a4b4a8:52a6a74c",tan:"e3621cc2:8d8261d6",tap:"7a365cc2:82610c41:869bd8d8:4c1ac47d",tar:"7a365cc2:82610c41:d1fb16cc",tas:"fbf3a00b:fe5cf0f4:cf0f809a",teb:"fbf3a00b:6245af61",tec:"a5c31631:10545ed3:b7b090cf",ted:"7a365cc2:acc8c8fb",teg:"fbf3a00b:f6bb8637",tel:"362aae07:b46295d4:672fdf93",tem:"7a365cc2:7faaca8c:387e568f",ten:"fbf3a00b:e53a31b5",tep:"82ff5e94:6245af61",ter:"d93ccb2:54112535",tes:"82ff5e94:54112535",tev:"19634ad2:b193cb04",tex:"19634ad2:7191ec30:b7b090cf",tic:"e3621cc2:2d91e72f",tid:"e3621cc2:fe5cf0f4:42b4e3a3",til:"b0ac0b82:10545ed3:bddfa3f3",tim:"28b33136:7faaca8c",tin:"fbf3a00b:e2f4d6e2",tip:"82ff5e94:2befa75a:fe5cf0f4:b7b090cf",tir:"e3621cc2:2befa75a:b193cb04:7faaca8c",tob:"28b33136:5a85e6f7",toc:"de3bc3d1:2befa75a:5a85e6f7",tod:"b0ac0b82:82e8305",tog:"82ff5e94:2befa75a:e5fae2fb:fe4199fc",tol:"7a365cc2:869bd8d8:d24107f2",tom:"fbf3a00b:87cb2bff",ton:"82ff5e94:e3f1ef01",top:"7a365cc2:7faaca8c:2befa75a:b193cb04",tor:"b0ac0b82:36a4b4a8:b193cb04",tuc:"a5c31631:869bd8d8:5a85e6f7",tud:"a5c31631:869bd8d8:d1fb16cc",tug:"19634ad2:ad042183",tul:"7a365cc2:b7b090cf",tun:"28b33136:7faaca8c:36a4b4a8:82610c41",tus:"a5c31631:e5fae2fb:952f1d85",tux:"a5c31631:869bd8d8:510344a7",tyc:"a5c31631:b7b090cf",tyd:"de3bc3d1:7faaca8c:7191ec30:bddfa3f3",tyl:"a5c31631:eb608ee5",tyn:"6cb74008:372ac81b",typ:"6cb74008:7faaca8c:6245af61",tyr:"362aae07:7faaca8c:4456d619",tyv:"362aae07:b193cb04:e5fae2fb:87cb2bff",wac:"e3621cc2:869bd8d8:36a4b4a8:5dfed122",wal:"362aae07:fe5cf0f4:9b3aa0b1",wan:"e3621cc2",wat:"e3621cc2:b7b090cf",web:"fbf3a00b:afc30081",wed:"7a365cc2:952f1d85",weg:"fbf3a00b:55d21172",wel:"362aae07:6f23470b",wen:"fbf3a00b:7faaca8c:cb81c430",wep:"82ff5e94:6cf35bfb",wer:"d93ccb2:2b187d87",wes:"82ff5e94:10545ed3:975397b2",wet:"7a365cc2:235d50bf",wex:"19634ad2:2befa75a:b7b090cf",wic:"82ff5e94:87cb2bff",wid:"e3621cc2:7191ec30:b7b090cf",win:"fbf3a00b:fe5cf0f4",wis:"e3621cc2:869bd8d8:ad042183",wit:"362aae07:cbdce7a4",wol:"7a365cc2:869bd8d8:83856b0b",wor:"b0ac0b82:36a4b4a8:1c9d4f11",wyc:"a5c31631",wyd:"de3bc3d1:7faaca8c:2f5059f3:b3ae909c",wyl:"a5c31631:6615d02d",wyn:"6cb74008:cf042a60",wyt:"19634ad2:e5fae2fb:82610c41:b0aeb7df",wyx:"6cb74008:7faaca8c:87cb2bff",zod:"7a365cc2"},sylgraphjson={symbols:symbols,mapping:mapping},last=function(a){return a[a.length-1]},patpStrToArr=function(a){return a.replace(/[\^~-]/g,"").match(/.{1,3}/g)},_pour=function(a){var t=a.patp,e=a.renderer,r=a.sylgraph,b=a.size,s=a.colorway,d=a.symbols,c=a.margin,o=a.ignoreColorway;t=isString_1$1(t)?patpStrToArr(t):t,d=isUndefined_1$1(d)?lookup$1(t,r):d;var n=grid({length:d.length,margin:c,size:b}),i=knoll(d,n),f=dyes({tag:"svg",meta:{},attr:{width:b,height:b},children:[baseRectangle(b,o)].concat(_toConsumableArray(i))},t,s);return isUndefined_1$1(e)?f:e.svg(f)},lookup$1=function(a,t){if(isUndefined_1$1(a))throw new Error("Missing patp argument to pour()");return a.map(function(a){var e=t.mapping[a];return isUndefined_1$1(e)?DEFAULT_SYMBOL:{attr:{},meta:{},tag:"g",children:e.split(":").map(function(a){var e=t.symbols[a];return isUndefined_1$1(e)?DEFAULT_ELEM:e})}})},knoll=function(a,t){return a.map(function(a,e){var r=cloneDeep_1$1(a),b=t.grid[e],s=transform(translate(b.x,b.y),scale(t.scale,t.scale));return isUndefined_1$1(r.attr)&&(r.attr={}),r.attr.transform=toSVG(s),r})},baseRectangle=function(a,t){return {tag:"rect",meta:!0===t?{style:{fill:"FG",stroke:"NO"},bg:!0}:{style:{fill:"BG",stroke:"NO"},bg:!0},attr:{width:a,height:a,x:0,y:0}}},DEFAULT_ELEM={tag:"g",attr:{},children:[{tag:"path",meta:{style:{fill:"FG",stroke:"NO"}},attr:{d:"M64 128C99.3462 128 128 99.3462 128 64C128 28.6538 99.3462 0 64 0C28.6538 0 0 28.6538 0 64C0 99.3462 28.6538 128 64 128ZM81.2255 35.9706L92.5392 47.2843L75.5686 64.2549L92.5392 81.2253L81.2255 92.5391L64.2549 75.5685L47.2843 92.5391L35.9706 81.2253L52.9412 64.2549L35.9706 47.2843L47.2843 35.9706L64.2549 52.9412L81.2255 35.9706Z"}}]},DEFAULT_SYMBOL={tag:"g",attr:{},children:[{tag:"path",meta:{style:{fill:"FG",stroke:"NO"}},attr:{d:"M64 128C99.3462 128 128 99.3462 128 64C128 28.6538 99.3462 0 64 0C28.6538 0 0 28.6538 0 64C0 99.3462 28.6538 128 64 128ZM81.2255 35.9706L92.5392 47.2843L75.5686 64.2549L92.5392 81.2253L81.2255 92.5391L64.2549 75.5685L47.2843 92.5391L35.9706 81.2253L52.9412 64.2549L35.9706 47.2843L47.2843 35.9706L64.2549 52.9412L81.2255 35.9706Z"}}]},pour=function(a){var t=a.patp,e=a.renderer,r=a.size,b=a.sylgraph,s=a.colorway,d=a.symbols,c=a.margin,o=a.ignoreColorway;return b=isUndefined_1$1(b)?sylgraphjson:b,_pour({patp:t,sylgraph:b,renderer:e,size:r,colorway:s,symbols:d,margin:c,ignoreColorway:o})},grid=function(a){var t=a.length,e=a.margin,r=a.size;2*e>r&&console.warn("sigil-js: margin cannot be larger than sigil size");var b=isNotMarginMode(e),s=b?.08*r:e,d=r-2*s,c=b||t>1?d/2:d,o={le:t,mm:b,tw:r,sw:c,rm:s,rp:c/128*2},n={1:[{x:dc$1(o),y:dc$1(o)}],2:[{x:d1(o),y:dc$1(o)},{x:d2(o),y:dc$1(o)}],4:[{x:d1(o),y:d1(o)},{x:d2(o),y:d1(o)},{x:d1(o),y:d2(o)},{x:d2(o),y:d2(o)}]};return _objectSpread({},o,{scale:o.sw/128,grid:n[t]})},isNotMarginMode=function(a){return "auto"===a||void 0===a},dc$1=function(a){var t=a.le,e=a.mm,r=a.tw,b=a.sw,s=a.rm;return t>1||!0===e?r-1.5*b-s:s},d1=function(a){a.tw,a.sw;return a.rm-a.rp/2},d2=function(a){return a.tw-a.sw-a.rm+a.rp/2},CW=[["#fff","#000000"]],prism=function(a,t){return t[0]},dyes=function(a,t,e){return isUndefined_1$1(e)?(e=isUndefined_1$1(t)?CW[0]:prism(t,CW),wash(a,e)):wash(a,e)},applyColor=function(a,t){return "FG"===a?t[0]:"BG"===a?t[1]:"TC"===a?t[2]:"NC"===a?"grey":last(t)},applyStyleAttrs=function(a,t){var e=a.fill;return {fill:applyColor(e,t)}},wash=function a(t,e){var r=get_1$1(t,["meta","style"],!1),b=get_1$1(t,"children",[]),s=get_1$1(t,"attr",{});return _objectSpread({},t,{attr:!1!==r?_objectSpread({},s,applyStyleAttrs(r,e)):_objectSpread({},s),children:b.map(function(t){return a(t,e)})})};var symbolProto$2=_Symbol?_Symbol.prototype:void 0,symbolValueOf$1=symbolProto$2?symbolProto$2.valueOf:void 0;

	const _jsxFileName$g = "/Users/logan/Dev/apps/inbox/src/js/components/lib/seal-dict.js";
	const ReactSVGComponents = {
	  svg: p => {
	    return (
	      react.createElement('svg', { ...p.attr, version: '1.1', xmlns: 'http://www.w3.org/2000/svg', __self: undefined, __source: {fileName: _jsxFileName$g, lineNumber: 8}}
	       ,  lodash.map(lodash.get(p, 'children', []), child => ReactSVGComponents[child.tag](child)) 
	      )
	    )
	  },
	  circle: p => {
	    return (
	      react.createElement('circle', { ...p.attr, __self: undefined, __source: {fileName: _jsxFileName$g, lineNumber: 15}}
	      ,  lodash.map(lodash.get(p, 'children', []), child => ReactSVGComponents[child.tag](child)) 
	      )
	    )
	  },
	  rect: p => {
	    return (
	      react.createElement('rect', { ...p.attr, __self: undefined, __source: {fileName: _jsxFileName$g, lineNumber: 22}}
	      ,  lodash.map(lodash.get(p, 'children', []), child => ReactSVGComponents[child.tag](child)) 
	      )
	    )
	  },
	  path: p => {
	    return (
	      react.createElement('path', { ...p.attr, __self: undefined, __source: {fileName: _jsxFileName$g, lineNumber: 29}}
	      ,  lodash.map(lodash.get(p, 'children', []), child => ReactSVGComponents[child.tag](child)) 
	      )
	    )
	  },
	  g: p => {
	    return (
	      react.createElement('g', { ...p.attr, __self: undefined, __source: {fileName: _jsxFileName$g, lineNumber: 36}}
	        ,  lodash.map(lodash.get(p, 'children', []), child => ReactSVGComponents[child.tag](child)) 
	      )
	    )
	  },
	  polygon: p => {
	    return (
	      react.createElement('polygon', { ...p.attr, __self: undefined, __source: {fileName: _jsxFileName$g, lineNumber: 43}}
	      ,  lodash.map(lodash.get(p, 'children', []), child => ReactSVGComponents[child.tag](child)) 
	      )
	    )
	  },
	  line: p => {
	    return (
	      react.createElement('line', { ...p.attr, __self: undefined, __source: {fileName: _jsxFileName$g, lineNumber: 50}}
	      ,  lodash.map(lodash.get(p, 'children', []), child => ReactSVGComponents[child.tag](child)) 
	      )
	    )
	  },
	  polyline: p => {
	    return (
	      react.createElement('polyline', { ...p.attr, __self: undefined, __source: {fileName: _jsxFileName$g, lineNumber: 57}}
	      ,  lodash.map(lodash.get(p, 'children', []), child => ReactSVGComponents[child.tag](child)) 
	      )
	    )
	  }
	};

	class SealDict {
	  constructor() {
	    this.dict = {};
	  }

	  getPrefix(patp) {
	    return patp.length === 3 ? patp : patp.substr(0, 3);
	  }

	  getSeal(patp, size, prefix) {
	    if (patp.length > 13) {
	      patp = "tiz";
	    }

	    let sigilShip = prefix ? this.getPrefix(patp) : patp;
	    let key = `${sigilShip}+${size}`;

	    if (!this.dict[key]) {
	      this.dict[key] = pour({size: size, patp: sigilShip, renderer: ReactSVGComponents, margin: 0, colorway: ["#000", "#fff"]});
	    }

	    return this.dict[key];
	  }
	}

	const sealDict = new SealDict;

	class Sigil extends react_1 {
	  render() {
	    let prefix = this.props.prefix ? JSON.parse(this.props.prefix) : false;

	    return (
	      sealDict.getSeal(this.props.ship.substr(1), this.props.size, prefix)
	    )
	  }
	}

	const _jsxFileName$h = "/Users/logan/Dev/apps/inbox/src/js/components/lib/chat-list.js";
	class ChatList extends react_1 {
	  componentDidMount() {
	    let path = `/public`;

	    this.props.api.bind(path, "PUT", this.props.hostship.slice(1));
	  }

	  renderText() {
	    if (this.props.store.public[this.props.hostship]) {
	      const text = this.props.store.public[this.props.hostship].map((cir) => {
	        const deets = getStationDetails(cir);
	        if (deets.type == "text") {
	          return (
	            react.createElement('div', { className: "mt-2 text-500" , __self: this, __source: {fileName: _jsxFileName$h, lineNumber: 18}}
	              , react.createElement('a', { href: deets.stationUrl, __self: this, __source: {fileName: _jsxFileName$h, lineNumber: 19}}, "~", deets.host, " / "  , deets.stationTitle)
	            )
	          )
	        } else if (deets.type == "text-topic") {
	          return null;
	        }
	      });
	      return text;
	    } else {
	      return null;
	    }
	  }

	  renderChats() {
	    if (this.props.store.public[this.props.hostship]) {
	      const chats = this.props.store.public[this.props.hostship].map((cir) => {
	        const deets = getStationDetails(cir);
	        if (deets.type == "stream-chat") {
	          return (
	            react.createElement('div', { className: "mt-2 text-500" , __self: this, __source: {fileName: _jsxFileName$h, lineNumber: 38}}
	              , react.createElement('a', { href: `/~~/landscape/stream?station=${cir}`, __self: this, __source: {fileName: _jsxFileName$h, lineNumber: 39}}, cir)
	            )
	          )
	        } else {
	          return null;
	        }
	      });
	      return chats;
	    } else {
	      return null;
	    }
	  }

	  render() {
	    const chats = this.renderChats();
	    const text = this.renderText();
	    return (
	      react.createElement('div', {__self: this, __source: {fileName: _jsxFileName$h, lineNumber: 56}}
	        , react.createElement('div', { className: "text-600 mt-8" , __self: this, __source: {fileName: _jsxFileName$h, lineNumber: 57}}, "Blogs, Fora and Notes"   )
	        , text
	        , react.createElement('div', { className: "text-600 mt-8" , __self: this, __source: {fileName: _jsxFileName$h, lineNumber: 59}}, "Chats")
	        , chats
	      )
	    );
	  }
	}

	const _jsxFileName$i = "/Users/logan/Dev/apps/inbox/src/js/components/lib/profile-msg-btn.js";
	class ProfileMsgBtn extends react_1 {
	  render() {
	    if (this.props.api.authTokens.ship === this.props.ship.substr(1)) return null;

	    let members = [this.props.api.authTokens.ship, this.props.ship.substr(1)];
	    let dmStation = `~${this.props.api.authTokens.ship}/${members.sort().join(".")}`;
	    let dmLink = `/~~/landscape/stream?station=${dmStation}`;

	    return (
	      react.createElement('a', { className: "vanilla mt-10 btn btn-primary inline-block"    , href: dmLink, __self: this, __source: {fileName: _jsxFileName$i, lineNumber: 12}}, "Message")
	    );
	  }
	}

	var lib = (typeof self === 'object' && self.self === self && self) ||
	  (typeof commonjsGlobal === 'object' && commonjsGlobal.global === commonjsGlobal && commonjsGlobal) ||
	  commonjsGlobal;

	var canPromise = function() {
	  return (
	    typeof lib.Promise === 'function' &&
	    typeof lib.Promise.prototype.then === 'function'
	  )
	};

	var buffer = bufferEs6.Buffer;

	var toSJISFunction;
	var CODEWORDS_COUNT = [
	  0, // Not used
	  26, 44, 70, 100, 134, 172, 196, 242, 292, 346,
	  404, 466, 532, 581, 655, 733, 815, 901, 991, 1085,
	  1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185,
	  2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706
	];

	/**
	 * Returns the QR Code size for the specified version
	 *
	 * @param  {Number} version QR Code version
	 * @return {Number}         size of QR code
	 */
	var getSymbolSize = function getSymbolSize (version) {
	  if (!version) throw new Error('"version" cannot be null or undefined')
	  if (version < 1 || version > 40) throw new Error('"version" should be in range from 1 to 40')
	  return version * 4 + 17
	};

	/**
	 * Returns the total number of codewords used to store data and EC information.
	 *
	 * @param  {Number} version QR Code version
	 * @return {Number}         Data length in bits
	 */
	var getSymbolTotalCodewords = function getSymbolTotalCodewords (version) {
	  return CODEWORDS_COUNT[version]
	};

	/**
	 * Encode data with Bose-Chaudhuri-Hocquenghem
	 *
	 * @param  {Number} data Value to encode
	 * @return {Number}      Encoded value
	 */
	var getBCHDigit = function (data) {
	  var digit = 0;

	  while (data !== 0) {
	    digit++;
	    data >>>= 1;
	  }

	  return digit
	};

	var setToSJISFunction = function setToSJISFunction (f) {
	  if (typeof f !== 'function') {
	    throw new Error('"toSJISFunc" is not a valid function.')
	  }

	  toSJISFunction = f;
	};

	var isKanjiModeEnabled = function () {
	  return typeof toSJISFunction !== 'undefined'
	};

	var toSJIS = function toSJIS (kanji) {
	  return toSJISFunction(kanji)
	};

	var utils$1 = {
		getSymbolSize: getSymbolSize,
		getSymbolTotalCodewords: getSymbolTotalCodewords,
		getBCHDigit: getBCHDigit,
		setToSJISFunction: setToSJISFunction,
		isKanjiModeEnabled: isKanjiModeEnabled,
		toSJIS: toSJIS
	};

	var errorCorrectionLevel = createCommonjsModule(function (module, exports) {
	exports.L = { bit: 1 };
	exports.M = { bit: 0 };
	exports.Q = { bit: 3 };
	exports.H = { bit: 2 };

	function fromString (string) {
	  if (typeof string !== 'string') {
	    throw new Error('Param is not a string')
	  }

	  var lcStr = string.toLowerCase();

	  switch (lcStr) {
	    case 'l':
	    case 'low':
	      return exports.L

	    case 'm':
	    case 'medium':
	      return exports.M

	    case 'q':
	    case 'quartile':
	      return exports.Q

	    case 'h':
	    case 'high':
	      return exports.H

	    default:
	      throw new Error('Unknown EC Level: ' + string)
	  }
	}

	exports.isValid = function isValid (level) {
	  return level && typeof level.bit !== 'undefined' &&
	    level.bit >= 0 && level.bit < 4
	};

	exports.from = function from (value, defaultValue) {
	  if (exports.isValid(value)) {
	    return value
	  }

	  try {
	    return fromString(value)
	  } catch (e) {
	    return defaultValue
	  }
	};
	});
	var errorCorrectionLevel_1 = errorCorrectionLevel.L;
	var errorCorrectionLevel_2 = errorCorrectionLevel.M;
	var errorCorrectionLevel_3 = errorCorrectionLevel.Q;
	var errorCorrectionLevel_4 = errorCorrectionLevel.H;
	var errorCorrectionLevel_5 = errorCorrectionLevel.isValid;

	function BitBuffer () {
	  this.buffer = [];
	  this.length = 0;
	}

	BitBuffer.prototype = {

	  get: function (index) {
	    var bufIndex = Math.floor(index / 8);
	    return ((this.buffer[bufIndex] >>> (7 - index % 8)) & 1) === 1
	  },

	  put: function (num, length) {
	    for (var i = 0; i < length; i++) {
	      this.putBit(((num >>> (length - i - 1)) & 1) === 1);
	    }
	  },

	  getLengthInBits: function () {
	    return this.length
	  },

	  putBit: function (bit) {
	    var bufIndex = Math.floor(this.length / 8);
	    if (this.buffer.length <= bufIndex) {
	      this.buffer.push(0);
	    }

	    if (bit) {
	      this.buffer[bufIndex] |= (0x80 >>> (this.length % 8));
	    }

	    this.length++;
	  }
	};

	var bitBuffer = BitBuffer;

	/**
	 * Helper class to handle QR Code symbol modules
	 *
	 * @param {Number} size Symbol size
	 */
	function BitMatrix (size) {
	  if (!size || size < 1) {
	    throw new Error('BitMatrix size must be defined and greater than 0')
	  }

	  this.size = size;
	  this.data = new buffer(size * size);
	  this.data.fill(0);
	  this.reservedBit = new buffer(size * size);
	  this.reservedBit.fill(0);
	}

	/**
	 * Set bit value at specified location
	 * If reserved flag is set, this bit will be ignored during masking process
	 *
	 * @param {Number}  row
	 * @param {Number}  col
	 * @param {Boolean} value
	 * @param {Boolean} reserved
	 */
	BitMatrix.prototype.set = function (row, col, value, reserved) {
	  var index = row * this.size + col;
	  this.data[index] = value;
	  if (reserved) this.reservedBit[index] = true;
	};

	/**
	 * Returns bit value at specified location
	 *
	 * @param  {Number}  row
	 * @param  {Number}  col
	 * @return {Boolean}
	 */
	BitMatrix.prototype.get = function (row, col) {
	  return this.data[row * this.size + col]
	};

	/**
	 * Applies xor operator at specified location
	 * (used during masking process)
	 *
	 * @param {Number}  row
	 * @param {Number}  col
	 * @param {Boolean} value
	 */
	BitMatrix.prototype.xor = function (row, col, value) {
	  this.data[row * this.size + col] ^= value;
	};

	/**
	 * Check if bit at specified location is reserved
	 *
	 * @param {Number}   row
	 * @param {Number}   col
	 * @return {Boolean}
	 */
	BitMatrix.prototype.isReserved = function (row, col) {
	  return this.reservedBit[row * this.size + col]
	};

	var bitMatrix = BitMatrix;

	var alignmentPattern = createCommonjsModule(function (module, exports) {
	/**
	 * Alignment pattern are fixed reference pattern in defined positions
	 * in a matrix symbology, which enables the decode software to re-synchronise
	 * the coordinate mapping of the image modules in the event of moderate amounts
	 * of distortion of the image.
	 *
	 * Alignment patterns are present only in QR Code symbols of version 2 or larger
	 * and their number depends on the symbol version.
	 */

	var getSymbolSize = utils$1.getSymbolSize;

	/**
	 * Calculate the row/column coordinates of the center module of each alignment pattern
	 * for the specified QR Code version.
	 *
	 * The alignment patterns are positioned symmetrically on either side of the diagonal
	 * running from the top left corner of the symbol to the bottom right corner.
	 *
	 * Since positions are simmetrical only half of the coordinates are returned.
	 * Each item of the array will represent in turn the x and y coordinate.
	 * @see {@link getPositions}
	 *
	 * @param  {Number} version QR Code version
	 * @return {Array}          Array of coordinate
	 */
	exports.getRowColCoords = function getRowColCoords (version) {
	  if (version === 1) return []

	  var posCount = Math.floor(version / 7) + 2;
	  var size = getSymbolSize(version);
	  var intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;
	  var positions = [size - 7]; // Last coord is always (size - 7)

	  for (var i = 1; i < posCount - 1; i++) {
	    positions[i] = positions[i - 1] - intervals;
	  }

	  positions.push(6); // First coord is always 6

	  return positions.reverse()
	};

	/**
	 * Returns an array containing the positions of each alignment pattern.
	 * Each array's element represent the center point of the pattern as (x, y) coordinates
	 *
	 * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}
	 * and filtering out the items that overlaps with finder pattern
	 *
	 * @example
	 * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.
	 * The alignment patterns, therefore, are to be centered on (row, column)
	 * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).
	 * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns
	 * and are not therefore used for alignment patterns.
	 *
	 * var pos = getPositions(7)
	 * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]
	 *
	 * @param  {Number} version QR Code version
	 * @return {Array}          Array of coordinates
	 */
	exports.getPositions = function getPositions (version) {
	  var coords = [];
	  var pos = exports.getRowColCoords(version);
	  var posLength = pos.length;

	  for (var i = 0; i < posLength; i++) {
	    for (var j = 0; j < posLength; j++) {
	      // Skip if position is occupied by finder patterns
	      if ((i === 0 && j === 0) ||             // top-left
	          (i === 0 && j === posLength - 1) || // bottom-left
	          (i === posLength - 1 && j === 0)) { // top-right
	        continue
	      }

	      coords.push([pos[i], pos[j]]);
	    }
	  }

	  return coords
	};
	});
	var alignmentPattern_1 = alignmentPattern.getRowColCoords;
	var alignmentPattern_2 = alignmentPattern.getPositions;

	var getSymbolSize$1 = utils$1.getSymbolSize;
	var FINDER_PATTERN_SIZE = 7;

	/**
	 * Returns an array containing the positions of each finder pattern.
	 * Each array's element represent the top-left point of the pattern as (x, y) coordinates
	 *
	 * @param  {Number} version QR Code version
	 * @return {Array}          Array of coordinates
	 */
	var getPositions = function getPositions (version) {
	  var size = getSymbolSize$1(version);

	  return [
	    // top-left
	    [0, 0],
	    // top-right
	    [size - FINDER_PATTERN_SIZE, 0],
	    // bottom-left
	    [0, size - FINDER_PATTERN_SIZE]
	  ]
	};

	var finderPattern = {
		getPositions: getPositions
	};

	var maskPattern = createCommonjsModule(function (module, exports) {
	/**
	 * Data mask pattern reference
	 * @type {Object}
	 */
	exports.Patterns = {
	  PATTERN000: 0,
	  PATTERN001: 1,
	  PATTERN010: 2,
	  PATTERN011: 3,
	  PATTERN100: 4,
	  PATTERN101: 5,
	  PATTERN110: 6,
	  PATTERN111: 7
	};

	/**
	 * Weighted penalty scores for the undesirable features
	 * @type {Object}
	 */
	var PenaltyScores = {
	  N1: 3,
	  N2: 3,
	  N3: 40,
	  N4: 10
	};

	/**
	 * Check if mask pattern value is valid
	 *
	 * @param  {Number}  mask    Mask pattern
	 * @return {Boolean}         true if valid, false otherwise
	 */
	exports.isValid = function isValid (mask) {
	  return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7
	};

	/**
	 * Returns mask pattern from a value.
	 * If value is not valid, returns undefined
	 *
	 * @param  {Number|String} value        Mask pattern value
	 * @return {Number}                     Valid mask pattern or undefined
	 */
	exports.from = function from (value) {
	  return exports.isValid(value) ? parseInt(value, 10) : undefined
	};

	/**
	* Find adjacent modules in row/column with the same color
	* and assign a penalty value.
	*
	* Points: N1 + i
	* i is the amount by which the number of adjacent modules of the same color exceeds 5
	*/
	exports.getPenaltyN1 = function getPenaltyN1 (data) {
	  var size = data.size;
	  var points = 0;
	  var sameCountCol = 0;
	  var sameCountRow = 0;
	  var lastCol = null;
	  var lastRow = null;

	  for (var row = 0; row < size; row++) {
	    sameCountCol = sameCountRow = 0;
	    lastCol = lastRow = null;

	    for (var col = 0; col < size; col++) {
	      var module = data.get(row, col);
	      if (module === lastCol) {
	        sameCountCol++;
	      } else {
	        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
	        lastCol = module;
	        sameCountCol = 1;
	      }

	      module = data.get(col, row);
	      if (module === lastRow) {
	        sameCountRow++;
	      } else {
	        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
	        lastRow = module;
	        sameCountRow = 1;
	      }
	    }

	    if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
	    if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
	  }

	  return points
	};

	/**
	 * Find 2x2 blocks with the same color and assign a penalty value
	 *
	 * Points: N2 * (m - 1) * (n - 1)
	 */
	exports.getPenaltyN2 = function getPenaltyN2 (data) {
	  var size = data.size;
	  var points = 0;

	  for (var row = 0; row < size - 1; row++) {
	    for (var col = 0; col < size - 1; col++) {
	      var last = data.get(row, col) +
	        data.get(row, col + 1) +
	        data.get(row + 1, col) +
	        data.get(row + 1, col + 1);

	      if (last === 4 || last === 0) points++;
	    }
	  }

	  return points * PenaltyScores.N2
	};

	/**
	 * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,
	 * preceded or followed by light area 4 modules wide
	 *
	 * Points: N3 * number of pattern found
	 */
	exports.getPenaltyN3 = function getPenaltyN3 (data) {
	  var size = data.size;
	  var points = 0;
	  var bitsCol = 0;
	  var bitsRow = 0;

	  for (var row = 0; row < size; row++) {
	    bitsCol = bitsRow = 0;
	    for (var col = 0; col < size; col++) {
	      bitsCol = ((bitsCol << 1) & 0x7FF) | data.get(row, col);
	      if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++;

	      bitsRow = ((bitsRow << 1) & 0x7FF) | data.get(col, row);
	      if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++;
	    }
	  }

	  return points * PenaltyScores.N3
	};

	/**
	 * Calculate proportion of dark modules in entire symbol
	 *
	 * Points: N4 * k
	 *
	 * k is the rating of the deviation of the proportion of dark modules
	 * in the symbol from 50% in steps of 5%
	 */
	exports.getPenaltyN4 = function getPenaltyN4 (data) {
	  var darkCount = 0;
	  var modulesCount = data.data.length;

	  for (var i = 0; i < modulesCount; i++) darkCount += data.data[i];

	  var k = Math.abs(Math.ceil((darkCount * 100 / modulesCount) / 5) - 10);

	  return k * PenaltyScores.N4
	};

	/**
	 * Return mask value at given position
	 *
	 * @param  {Number} maskPattern Pattern reference value
	 * @param  {Number} i           Row
	 * @param  {Number} j           Column
	 * @return {Boolean}            Mask value
	 */
	function getMaskAt (maskPattern, i, j) {
	  switch (maskPattern) {
	    case exports.Patterns.PATTERN000: return (i + j) % 2 === 0
	    case exports.Patterns.PATTERN001: return i % 2 === 0
	    case exports.Patterns.PATTERN010: return j % 3 === 0
	    case exports.Patterns.PATTERN011: return (i + j) % 3 === 0
	    case exports.Patterns.PATTERN100: return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0
	    case exports.Patterns.PATTERN101: return (i * j) % 2 + (i * j) % 3 === 0
	    case exports.Patterns.PATTERN110: return ((i * j) % 2 + (i * j) % 3) % 2 === 0
	    case exports.Patterns.PATTERN111: return ((i * j) % 3 + (i + j) % 2) % 2 === 0

	    default: throw new Error('bad maskPattern:' + maskPattern)
	  }
	}

	/**
	 * Apply a mask pattern to a BitMatrix
	 *
	 * @param  {Number}    pattern Pattern reference number
	 * @param  {BitMatrix} data    BitMatrix data
	 */
	exports.applyMask = function applyMask (pattern, data) {
	  var size = data.size;

	  for (var col = 0; col < size; col++) {
	    for (var row = 0; row < size; row++) {
	      if (data.isReserved(row, col)) continue
	      data.xor(row, col, getMaskAt(pattern, row, col));
	    }
	  }
	};

	/**
	 * Returns the best mask pattern for data
	 *
	 * @param  {BitMatrix} data
	 * @return {Number} Mask pattern reference number
	 */
	exports.getBestMask = function getBestMask (data, setupFormatFunc) {
	  var numPatterns = Object.keys(exports.Patterns).length;
	  var bestPattern = 0;
	  var lowerPenalty = Infinity;

	  for (var p = 0; p < numPatterns; p++) {
	    setupFormatFunc(p);
	    exports.applyMask(p, data);

	    // Calculate penalty
	    var penalty =
	      exports.getPenaltyN1(data) +
	      exports.getPenaltyN2(data) +
	      exports.getPenaltyN3(data) +
	      exports.getPenaltyN4(data);

	    // Undo previously applied mask
	    exports.applyMask(p, data);

	    if (penalty < lowerPenalty) {
	      lowerPenalty = penalty;
	      bestPattern = p;
	    }
	  }

	  return bestPattern
	};
	});
	var maskPattern_1 = maskPattern.Patterns;
	var maskPattern_2 = maskPattern.isValid;
	var maskPattern_3 = maskPattern.getPenaltyN1;
	var maskPattern_4 = maskPattern.getPenaltyN2;
	var maskPattern_5 = maskPattern.getPenaltyN3;
	var maskPattern_6 = maskPattern.getPenaltyN4;
	var maskPattern_7 = maskPattern.applyMask;
	var maskPattern_8 = maskPattern.getBestMask;

	var EC_BLOCKS_TABLE = [
	// L  M  Q  H
	  1, 1, 1, 1,
	  1, 1, 1, 1,
	  1, 1, 2, 2,
	  1, 2, 2, 4,
	  1, 2, 4, 4,
	  2, 4, 4, 4,
	  2, 4, 6, 5,
	  2, 4, 6, 6,
	  2, 5, 8, 8,
	  4, 5, 8, 8,
	  4, 5, 8, 11,
	  4, 8, 10, 11,
	  4, 9, 12, 16,
	  4, 9, 16, 16,
	  6, 10, 12, 18,
	  6, 10, 17, 16,
	  6, 11, 16, 19,
	  6, 13, 18, 21,
	  7, 14, 21, 25,
	  8, 16, 20, 25,
	  8, 17, 23, 25,
	  9, 17, 23, 34,
	  9, 18, 25, 30,
	  10, 20, 27, 32,
	  12, 21, 29, 35,
	  12, 23, 34, 37,
	  12, 25, 34, 40,
	  13, 26, 35, 42,
	  14, 28, 38, 45,
	  15, 29, 40, 48,
	  16, 31, 43, 51,
	  17, 33, 45, 54,
	  18, 35, 48, 57,
	  19, 37, 51, 60,
	  19, 38, 53, 63,
	  20, 40, 56, 66,
	  21, 43, 59, 70,
	  22, 45, 62, 74,
	  24, 47, 65, 77,
	  25, 49, 68, 81
	];

	var EC_CODEWORDS_TABLE = [
	// L  M  Q  H
	  7, 10, 13, 17,
	  10, 16, 22, 28,
	  15, 26, 36, 44,
	  20, 36, 52, 64,
	  26, 48, 72, 88,
	  36, 64, 96, 112,
	  40, 72, 108, 130,
	  48, 88, 132, 156,
	  60, 110, 160, 192,
	  72, 130, 192, 224,
	  80, 150, 224, 264,
	  96, 176, 260, 308,
	  104, 198, 288, 352,
	  120, 216, 320, 384,
	  132, 240, 360, 432,
	  144, 280, 408, 480,
	  168, 308, 448, 532,
	  180, 338, 504, 588,
	  196, 364, 546, 650,
	  224, 416, 600, 700,
	  224, 442, 644, 750,
	  252, 476, 690, 816,
	  270, 504, 750, 900,
	  300, 560, 810, 960,
	  312, 588, 870, 1050,
	  336, 644, 952, 1110,
	  360, 700, 1020, 1200,
	  390, 728, 1050, 1260,
	  420, 784, 1140, 1350,
	  450, 812, 1200, 1440,
	  480, 868, 1290, 1530,
	  510, 924, 1350, 1620,
	  540, 980, 1440, 1710,
	  570, 1036, 1530, 1800,
	  570, 1064, 1590, 1890,
	  600, 1120, 1680, 1980,
	  630, 1204, 1770, 2100,
	  660, 1260, 1860, 2220,
	  720, 1316, 1950, 2310,
	  750, 1372, 2040, 2430
	];

	/**
	 * Returns the number of error correction block that the QR Code should contain
	 * for the specified version and error correction level.
	 *
	 * @param  {Number} version              QR Code version
	 * @param  {Number} errorCorrectionLevel Error correction level
	 * @return {Number}                      Number of error correction blocks
	 */
	var getBlocksCount = function getBlocksCount (version, errorCorrectionLevel$1) {
	  switch (errorCorrectionLevel$1) {
	    case errorCorrectionLevel.L:
	      return EC_BLOCKS_TABLE[(version - 1) * 4 + 0]
	    case errorCorrectionLevel.M:
	      return EC_BLOCKS_TABLE[(version - 1) * 4 + 1]
	    case errorCorrectionLevel.Q:
	      return EC_BLOCKS_TABLE[(version - 1) * 4 + 2]
	    case errorCorrectionLevel.H:
	      return EC_BLOCKS_TABLE[(version - 1) * 4 + 3]
	    default:
	      return undefined
	  }
	};

	/**
	 * Returns the number of error correction codewords to use for the specified
	 * version and error correction level.
	 *
	 * @param  {Number} version              QR Code version
	 * @param  {Number} errorCorrectionLevel Error correction level
	 * @return {Number}                      Number of error correction codewords
	 */
	var getTotalCodewordsCount = function getTotalCodewordsCount (version, errorCorrectionLevel$1) {
	  switch (errorCorrectionLevel$1) {
	    case errorCorrectionLevel.L:
	      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0]
	    case errorCorrectionLevel.M:
	      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1]
	    case errorCorrectionLevel.Q:
	      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2]
	    case errorCorrectionLevel.H:
	      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3]
	    default:
	      return undefined
	  }
	};

	var errorCorrectionCode = {
		getBlocksCount: getBlocksCount,
		getTotalCodewordsCount: getTotalCodewordsCount
	};

	var EXP_TABLE = new buffer(512);
	var LOG_TABLE = new buffer(256)

	/**
	 * Precompute the log and anti-log tables for faster computation later
	 *
	 * For each possible value in the galois field 2^8, we will pre-compute
	 * the logarithm and anti-logarithm (exponential) of this value
	 *
	 * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}
	 */
	;(function initTables () {
	  var x = 1;
	  for (var i = 0; i < 255; i++) {
	    EXP_TABLE[i] = x;
	    LOG_TABLE[x] = i;

	    x <<= 1; // multiply by 2

	    // The QR code specification says to use byte-wise modulo 100011101 arithmetic.
	    // This means that when a number is 256 or larger, it should be XORed with 0x11D.
	    if (x & 0x100) { // similar to x >= 256, but a lot faster (because 0x100 == 256)
	      x ^= 0x11D;
	    }
	  }

	  // Optimization: double the size of the anti-log table so that we don't need to mod 255 to
	  // stay inside the bounds (because we will mainly use this table for the multiplication of
	  // two GF numbers, no more).
	  // @see {@link mul}
	  for (i = 255; i < 512; i++) {
	    EXP_TABLE[i] = EXP_TABLE[i - 255];
	  }
	}());

	/**
	 * Returns log value of n inside Galois Field
	 *
	 * @param  {Number} n
	 * @return {Number}
	 */
	var log$1 = function log (n) {
	  if (n < 1) throw new Error('log(' + n + ')')
	  return LOG_TABLE[n]
	};

	/**
	 * Returns anti-log value of n inside Galois Field
	 *
	 * @param  {Number} n
	 * @return {Number}
	 */
	var exp = function exp (n) {
	  return EXP_TABLE[n]
	};

	/**
	 * Multiplies two number inside Galois Field
	 *
	 * @param  {Number} x
	 * @param  {Number} y
	 * @return {Number}
	 */
	var mul = function mul (x, y) {
	  if (x === 0 || y === 0) return 0

	  // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized
	  // @see {@link initTables}
	  return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]]
	};

	var galoisField = {
		log: log$1,
		exp: exp,
		mul: mul
	};

	var polynomial = createCommonjsModule(function (module, exports) {
	/**
	 * Multiplies two polynomials inside Galois Field
	 *
	 * @param  {Buffer} p1 Polynomial
	 * @param  {Buffer} p2 Polynomial
	 * @return {Buffer}    Product of p1 and p2
	 */
	exports.mul = function mul (p1, p2) {
	  var coeff = new buffer(p1.length + p2.length - 1);
	  coeff.fill(0);

	  for (var i = 0; i < p1.length; i++) {
	    for (var j = 0; j < p2.length; j++) {
	      coeff[i + j] ^= galoisField.mul(p1[i], p2[j]);
	    }
	  }

	  return coeff
	};

	/**
	 * Calculate the remainder of polynomials division
	 *
	 * @param  {Buffer} divident Polynomial
	 * @param  {Buffer} divisor  Polynomial
	 * @return {Buffer}          Remainder
	 */
	exports.mod = function mod (divident, divisor) {
	  var result = new buffer(divident);

	  while ((result.length - divisor.length) >= 0) {
	    var coeff = result[0];

	    for (var i = 0; i < divisor.length; i++) {
	      result[i] ^= galoisField.mul(divisor[i], coeff);
	    }

	    // remove all zeros from buffer head
	    var offset = 0;
	    while (offset < result.length && result[offset] === 0) offset++;
	    result = result.slice(offset);
	  }

	  return result
	};

	/**
	 * Generate an irreducible generator polynomial of specified degree
	 * (used by Reed-Solomon encoder)
	 *
	 * @param  {Number} degree Degree of the generator polynomial
	 * @return {Buffer}        Buffer containing polynomial coefficients
	 */
	exports.generateECPolynomial = function generateECPolynomial (degree) {
	  var poly = new buffer([1]);
	  for (var i = 0; i < degree; i++) {
	    poly = exports.mul(poly, [1, galoisField.exp(i)]);
	  }

	  return poly
	};
	});
	var polynomial_1 = polynomial.mul;
	var polynomial_2 = polynomial.mod;
	var polynomial_3 = polynomial.generateECPolynomial;

	function ReedSolomonEncoder (degree) {
	  this.genPoly = undefined;
	  this.degree = degree;

	  if (this.degree) this.initialize(this.degree);
	}

	/**
	 * Initialize the encoder.
	 * The input param should correspond to the number of error correction codewords.
	 *
	 * @param  {Number} degree
	 */
	ReedSolomonEncoder.prototype.initialize = function initialize (degree) {
	  // create an irreducible generator polynomial
	  this.degree = degree;
	  this.genPoly = polynomial.generateECPolynomial(this.degree);
	};

	/**
	 * Encodes a chunk of data
	 *
	 * @param  {Buffer} data Buffer containing input data
	 * @return {Buffer}      Buffer containing encoded data
	 */
	ReedSolomonEncoder.prototype.encode = function encode (data) {
	  if (!this.genPoly) {
	    throw new Error('Encoder not initialized')
	  }

	  // Calculate EC for this data block
	  // extends data size to data+genPoly size
	  var pad = new buffer(this.degree);
	  pad.fill(0);
	  var paddedData = buffer.concat([data, pad], data.length + this.degree);

	  // The error correction codewords are the remainder after dividing the data codewords
	  // by a generator polynomial
	  var remainder = polynomial.mod(paddedData, this.genPoly);

	  // return EC data blocks (last n byte, where n is the degree of genPoly)
	  // If coefficients number in remainder are less than genPoly degree,
	  // pad with 0s to the left to reach the needed number of coefficients
	  var start = this.degree - remainder.length;
	  if (start > 0) {
	    var buff = new buffer(this.degree);
	    buff.fill(0);
	    remainder.copy(buff, start);

	    return buff
	  }

	  return remainder
	};

	var reedSolomonEncoder = ReedSolomonEncoder;

	/**
	 * Check if QR Code version is valid
	 *
	 * @param  {Number}  version QR Code version
	 * @return {Boolean}         true if valid version, false otherwise
	 */
	var isValid = function isValid (version) {
	  return !isNaN(version) && version >= 1 && version <= 40
	};

	var versionCheck = {
		isValid: isValid
	};

	var numeric = '[0-9]+';
	var alphanumeric = '[A-Z $%*+\\-./:]+';
	var kanji = '(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|' +
	  '[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|' +
	  '[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|' +
	  '[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+';
	kanji = kanji.replace(/u/g, '\\u');

	var byte = '(?:(?![A-Z0-9 $%*+\\-./:]|' + kanji + ')(?:.|[\r\n]))+';

	var KANJI = new RegExp(kanji, 'g');
	var BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\-./:]+', 'g');
	var BYTE = new RegExp(byte, 'g');
	var NUMERIC = new RegExp(numeric, 'g');
	var ALPHANUMERIC = new RegExp(alphanumeric, 'g');

	var TEST_KANJI = new RegExp('^' + kanji + '$');
	var TEST_NUMERIC = new RegExp('^' + numeric + '$');
	var TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+\\-./:]+$');

	var testKanji = function testKanji (str) {
	  return TEST_KANJI.test(str)
	};

	var testNumeric = function testNumeric (str) {
	  return TEST_NUMERIC.test(str)
	};

	var testAlphanumeric = function testAlphanumeric (str) {
	  return TEST_ALPHANUMERIC.test(str)
	};

	var regex = {
		KANJI: KANJI,
		BYTE_KANJI: BYTE_KANJI,
		BYTE: BYTE,
		NUMERIC: NUMERIC,
		ALPHANUMERIC: ALPHANUMERIC,
		testKanji: testKanji,
		testNumeric: testNumeric,
		testAlphanumeric: testAlphanumeric
	};

	var mode = createCommonjsModule(function (module, exports) {
	/**
	 * Numeric mode encodes data from the decimal digit set (0 - 9)
	 * (byte values 30HEX to 39HEX).
	 * Normally, 3 data characters are represented by 10 bits.
	 *
	 * @type {Object}
	 */
	exports.NUMERIC = {
	  id: 'Numeric',
	  bit: 1 << 0,
	  ccBits: [10, 12, 14]
	};

	/**
	 * Alphanumeric mode encodes data from a set of 45 characters,
	 * i.e. 10 numeric digits (0 - 9),
	 *      26 alphabetic characters (A - Z),
	 *   and 9 symbols (SP, $, %, *, +, -, ., /, :).
	 * Normally, two input characters are represented by 11 bits.
	 *
	 * @type {Object}
	 */
	exports.ALPHANUMERIC = {
	  id: 'Alphanumeric',
	  bit: 1 << 1,
	  ccBits: [9, 11, 13]
	};

	/**
	 * In byte mode, data is encoded at 8 bits per character.
	 *
	 * @type {Object}
	 */
	exports.BYTE = {
	  id: 'Byte',
	  bit: 1 << 2,
	  ccBits: [8, 16, 16]
	};

	/**
	 * The Kanji mode efficiently encodes Kanji characters in accordance with
	 * the Shift JIS system based on JIS X 0208.
	 * The Shift JIS values are shifted from the JIS X 0208 values.
	 * JIS X 0208 gives details of the shift coded representation.
	 * Each two-byte character value is compacted to a 13-bit binary codeword.
	 *
	 * @type {Object}
	 */
	exports.KANJI = {
	  id: 'Kanji',
	  bit: 1 << 3,
	  ccBits: [8, 10, 12]
	};

	/**
	 * Mixed mode will contain a sequences of data in a combination of any of
	 * the modes described above
	 *
	 * @type {Object}
	 */
	exports.MIXED = {
	  bit: -1
	};

	/**
	 * Returns the number of bits needed to store the data length
	 * according to QR Code specifications.
	 *
	 * @param  {Mode}   mode    Data mode
	 * @param  {Number} version QR Code version
	 * @return {Number}         Number of bits
	 */
	exports.getCharCountIndicator = function getCharCountIndicator (mode, version) {
	  if (!mode.ccBits) throw new Error('Invalid mode: ' + mode)

	  if (!versionCheck.isValid(version)) {
	    throw new Error('Invalid version: ' + version)
	  }

	  if (version >= 1 && version < 10) return mode.ccBits[0]
	  else if (version < 27) return mode.ccBits[1]
	  return mode.ccBits[2]
	};

	/**
	 * Returns the most efficient mode to store the specified data
	 *
	 * @param  {String} dataStr Input data string
	 * @return {Mode}           Best mode
	 */
	exports.getBestModeForData = function getBestModeForData (dataStr) {
	  if (regex.testNumeric(dataStr)) return exports.NUMERIC
	  else if (regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC
	  else if (regex.testKanji(dataStr)) return exports.KANJI
	  else return exports.BYTE
	};

	/**
	 * Return mode name as string
	 *
	 * @param {Mode} mode Mode object
	 * @returns {String}  Mode name
	 */
	exports.toString = function toString (mode) {
	  if (mode && mode.id) return mode.id
	  throw new Error('Invalid mode')
	};

	/**
	 * Check if input param is a valid mode object
	 *
	 * @param   {Mode}    mode Mode object
	 * @returns {Boolean} True if valid mode, false otherwise
	 */
	exports.isValid = function isValid (mode) {
	  return mode && mode.bit && mode.ccBits
	};

	/**
	 * Get mode object from its name
	 *
	 * @param   {String} string Mode name
	 * @returns {Mode}          Mode object
	 */
	function fromString (string) {
	  if (typeof string !== 'string') {
	    throw new Error('Param is not a string')
	  }

	  var lcStr = string.toLowerCase();

	  switch (lcStr) {
	    case 'numeric':
	      return exports.NUMERIC
	    case 'alphanumeric':
	      return exports.ALPHANUMERIC
	    case 'kanji':
	      return exports.KANJI
	    case 'byte':
	      return exports.BYTE
	    default:
	      throw new Error('Unknown mode: ' + string)
	  }
	}

	/**
	 * Returns mode from a value.
	 * If value is not a valid mode, returns defaultValue
	 *
	 * @param  {Mode|String} value        Encoding mode
	 * @param  {Mode}        defaultValue Fallback value
	 * @return {Mode}                     Encoding mode
	 */
	exports.from = function from (value, defaultValue) {
	  if (exports.isValid(value)) {
	    return value
	  }

	  try {
	    return fromString(value)
	  } catch (e) {
	    return defaultValue
	  }
	};
	});
	var mode_1 = mode.NUMERIC;
	var mode_2 = mode.ALPHANUMERIC;
	var mode_3 = mode.BYTE;
	var mode_4 = mode.KANJI;
	var mode_5 = mode.MIXED;
	var mode_6 = mode.getCharCountIndicator;
	var mode_7 = mode.getBestModeForData;
	var mode_8 = mode.isValid;

	var toString$3 = {}.toString;

	var isarray = Array.isArray || function (arr) {
	  return toString$3.call(arr) == '[object Array]';
	};

	var version$1 = createCommonjsModule(function (module, exports) {
	// Generator polynomial used to encode version information
	var G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);
	var G18_BCH = utils$1.getBCHDigit(G18);

	function getBestVersionForDataLength (mode, length, errorCorrectionLevel) {
	  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
	    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {
	      return currentVersion
	    }
	  }

	  return undefined
	}

	function getReservedBitsCount (mode$1, version) {
	  // Character count indicator + mode indicator bits
	  return mode.getCharCountIndicator(mode$1, version) + 4
	}

	function getTotalBitsFromDataArray (segments, version) {
	  var totalBits = 0;

	  segments.forEach(function (data) {
	    var reservedBits = getReservedBitsCount(data.mode, version);
	    totalBits += reservedBits + data.getBitsLength();
	  });

	  return totalBits
	}

	function getBestVersionForMixedData (segments, errorCorrectionLevel) {
	  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
	    var length = getTotalBitsFromDataArray(segments, currentVersion);
	    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode.MIXED)) {
	      return currentVersion
	    }
	  }

	  return undefined
	}

	/**
	 * Returns version number from a value.
	 * If value is not a valid version, returns defaultValue
	 *
	 * @param  {Number|String} value        QR Code version
	 * @param  {Number}        defaultValue Fallback value
	 * @return {Number}                     QR Code version number
	 */
	exports.from = function from (value, defaultValue) {
	  if (versionCheck.isValid(value)) {
	    return parseInt(value, 10)
	  }

	  return defaultValue
	};

	/**
	 * Returns how much data can be stored with the specified QR code version
	 * and error correction level
	 *
	 * @param  {Number} version              QR Code version (1-40)
	 * @param  {Number} errorCorrectionLevel Error correction level
	 * @param  {Mode}   mode                 Data mode
	 * @return {Number}                      Quantity of storable data
	 */
	exports.getCapacity = function getCapacity (version, errorCorrectionLevel, mode$1) {
	  if (!versionCheck.isValid(version)) {
	    throw new Error('Invalid QR Code version')
	  }

	  // Use Byte mode as default
	  if (typeof mode$1 === 'undefined') mode$1 = mode.BYTE;

	  // Total codewords for this QR code version (Data + Error correction)
	  var totalCodewords = utils$1.getSymbolTotalCodewords(version);

	  // Total number of error correction codewords
	  var ecTotalCodewords = errorCorrectionCode.getTotalCodewordsCount(version, errorCorrectionLevel);

	  // Total number of data codewords
	  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;

	  if (mode$1 === mode.MIXED) return dataTotalCodewordsBits

	  var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode$1, version);

	  // Return max number of storable codewords
	  switch (mode$1) {
	    case mode.NUMERIC:
	      return Math.floor((usableBits / 10) * 3)

	    case mode.ALPHANUMERIC:
	      return Math.floor((usableBits / 11) * 2)

	    case mode.KANJI:
	      return Math.floor(usableBits / 13)

	    case mode.BYTE:
	    default:
	      return Math.floor(usableBits / 8)
	  }
	};

	/**
	 * Returns the minimum version needed to contain the amount of data
	 *
	 * @param  {Segment} data                    Segment of data
	 * @param  {Number} [errorCorrectionLevel=H] Error correction level
	 * @param  {Mode} mode                       Data mode
	 * @return {Number}                          QR Code version
	 */
	exports.getBestVersionForData = function getBestVersionForData (data, errorCorrectionLevel$1) {
	  var seg;

	  var ecl = errorCorrectionLevel.from(errorCorrectionLevel$1, errorCorrectionLevel.M);

	  if (isarray(data)) {
	    if (data.length > 1) {
	      return getBestVersionForMixedData(data, ecl)
	    }

	    if (data.length === 0) {
	      return 1
	    }

	    seg = data[0];
	  } else {
	    seg = data;
	  }

	  return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl)
	};

	/**
	 * Returns version information with relative error correction bits
	 *
	 * The version information is included in QR Code symbols of version 7 or larger.
	 * It consists of an 18-bit sequence containing 6 data bits,
	 * with 12 error correction bits calculated using the (18, 6) Golay code.
	 *
	 * @param  {Number} version QR Code version
	 * @return {Number}         Encoded version info bits
	 */
	exports.getEncodedBits = function getEncodedBits (version) {
	  if (!versionCheck.isValid(version) || version < 7) {
	    throw new Error('Invalid QR Code version')
	  }

	  var d = version << 12;

	  while (utils$1.getBCHDigit(d) - G18_BCH >= 0) {
	    d ^= (G18 << (utils$1.getBCHDigit(d) - G18_BCH));
	  }

	  return (version << 12) | d
	};
	});
	var version_1 = version$1.getCapacity;
	var version_2 = version$1.getBestVersionForData;
	var version_3 = version$1.getEncodedBits;

	var G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);
	var G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);
	var G15_BCH = utils$1.getBCHDigit(G15);

	/**
	 * Returns format information with relative error correction bits
	 *
	 * The format information is a 15-bit sequence containing 5 data bits,
	 * with 10 error correction bits calculated using the (15, 5) BCH code.
	 *
	 * @param  {Number} errorCorrectionLevel Error correction level
	 * @param  {Number} mask                 Mask pattern
	 * @return {Number}                      Encoded format information bits
	 */
	var getEncodedBits = function getEncodedBits (errorCorrectionLevel, mask) {
	  var data = ((errorCorrectionLevel.bit << 3) | mask);
	  var d = data << 10;

	  while (utils$1.getBCHDigit(d) - G15_BCH >= 0) {
	    d ^= (G15 << (utils$1.getBCHDigit(d) - G15_BCH));
	  }

	  // xor final data with mask pattern in order to ensure that
	  // no combination of Error Correction Level and data mask pattern
	  // will result in an all-zero data string
	  return ((data << 10) | d) ^ G15_MASK
	};

	var formatInfo = {
		getEncodedBits: getEncodedBits
	};

	function NumericData (data) {
	  this.mode = mode.NUMERIC;
	  this.data = data.toString();
	}

	NumericData.getBitsLength = function getBitsLength (length) {
	  return 10 * Math.floor(length / 3) + ((length % 3) ? ((length % 3) * 3 + 1) : 0)
	};

	NumericData.prototype.getLength = function getLength () {
	  return this.data.length
	};

	NumericData.prototype.getBitsLength = function getBitsLength () {
	  return NumericData.getBitsLength(this.data.length)
	};

	NumericData.prototype.write = function write (bitBuffer) {
	  var i, group, value;

	  // The input data string is divided into groups of three digits,
	  // and each group is converted to its 10-bit binary equivalent.
	  for (i = 0; i + 3 <= this.data.length; i += 3) {
	    group = this.data.substr(i, 3);
	    value = parseInt(group, 10);

	    bitBuffer.put(value, 10);
	  }

	  // If the number of input digits is not an exact multiple of three,
	  // the final one or two digits are converted to 4 or 7 bits respectively.
	  var remainingNum = this.data.length - i;
	  if (remainingNum > 0) {
	    group = this.data.substr(i);
	    value = parseInt(group, 10);

	    bitBuffer.put(value, remainingNum * 3 + 1);
	  }
	};

	var numericData = NumericData;

	/**
	 * Array of characters available in alphanumeric mode
	 *
	 * As per QR Code specification, to each character
	 * is assigned a value from 0 to 44 which in this case coincides
	 * with the array index
	 *
	 * @type {Array}
	 */
	var ALPHA_NUM_CHARS = [
	  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
	  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
	  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
	  ' ', '$', '%', '*', '+', '-', '.', '/', ':'
	];

	function AlphanumericData (data) {
	  this.mode = mode.ALPHANUMERIC;
	  this.data = data;
	}

	AlphanumericData.getBitsLength = function getBitsLength (length) {
	  return 11 * Math.floor(length / 2) + 6 * (length % 2)
	};

	AlphanumericData.prototype.getLength = function getLength () {
	  return this.data.length
	};

	AlphanumericData.prototype.getBitsLength = function getBitsLength () {
	  return AlphanumericData.getBitsLength(this.data.length)
	};

	AlphanumericData.prototype.write = function write (bitBuffer) {
	  var i;

	  // Input data characters are divided into groups of two characters
	  // and encoded as 11-bit binary codes.
	  for (i = 0; i + 2 <= this.data.length; i += 2) {
	    // The character value of the first character is multiplied by 45
	    var value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45;

	    // The character value of the second digit is added to the product
	    value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]);

	    // The sum is then stored as 11-bit binary number
	    bitBuffer.put(value, 11);
	  }

	  // If the number of input data characters is not a multiple of two,
	  // the character value of the final character is encoded as a 6-bit binary number.
	  if (this.data.length % 2) {
	    bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);
	  }
	};

	var alphanumericData = AlphanumericData;

	function ByteData (data) {
	  this.mode = mode.BYTE;
	  this.data = new buffer(data);
	}

	ByteData.getBitsLength = function getBitsLength (length) {
	  return length * 8
	};

	ByteData.prototype.getLength = function getLength () {
	  return this.data.length
	};

	ByteData.prototype.getBitsLength = function getBitsLength () {
	  return ByteData.getBitsLength(this.data.length)
	};

	ByteData.prototype.write = function (bitBuffer) {
	  for (var i = 0, l = this.data.length; i < l; i++) {
	    bitBuffer.put(this.data[i], 8);
	  }
	};

	var byteData = ByteData;

	function KanjiData (data) {
	  this.mode = mode.KANJI;
	  this.data = data;
	}

	KanjiData.getBitsLength = function getBitsLength (length) {
	  return length * 13
	};

	KanjiData.prototype.getLength = function getLength () {
	  return this.data.length
	};

	KanjiData.prototype.getBitsLength = function getBitsLength () {
	  return KanjiData.getBitsLength(this.data.length)
	};

	KanjiData.prototype.write = function (bitBuffer) {
	  var i;

	  // In the Shift JIS system, Kanji characters are represented by a two byte combination.
	  // These byte values are shifted from the JIS X 0208 values.
	  // JIS X 0208 gives details of the shift coded representation.
	  for (i = 0; i < this.data.length; i++) {
	    var value = utils$1.toSJIS(this.data[i]);

	    // For characters with Shift JIS values from 0x8140 to 0x9FFC:
	    if (value >= 0x8140 && value <= 0x9FFC) {
	      // Subtract 0x8140 from Shift JIS value
	      value -= 0x8140;

	    // For characters with Shift JIS values from 0xE040 to 0xEBBF
	    } else if (value >= 0xE040 && value <= 0xEBBF) {
	      // Subtract 0xC140 from Shift JIS value
	      value -= 0xC140;
	    } else {
	      throw new Error(
	        'Invalid SJIS character: ' + this.data[i] + '\n' +
	        'Make sure your charset is UTF-8')
	    }

	    // Multiply most significant byte of result by 0xC0
	    // and add least significant byte to product
	    value = (((value >>> 8) & 0xff) * 0xC0) + (value & 0xff);

	    // Convert result to a 13-bit binary string
	    bitBuffer.put(value, 13);
	  }
	};

	var kanjiData = KanjiData;

	var dijkstra_1 = createCommonjsModule(function (module) {

	/******************************************************************************
	 * Created 2008-08-19.
	 *
	 * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.
	 *
	 * Copyright (C) 2008
	 *   Wyatt Baldwin <self@wyattbaldwin.com>
	 *   All rights reserved
	 *
	 * Licensed under the MIT license.
	 *
	 *   http://www.opensource.org/licenses/mit-license.php
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 *****************************************************************************/
	var dijkstra = {
	  single_source_shortest_paths: function(graph, s, d) {
	    // Predecessor map for each node that has been encountered.
	    // node ID => predecessor node ID
	    var predecessors = {};

	    // Costs of shortest paths from s to all nodes encountered.
	    // node ID => cost
	    var costs = {};
	    costs[s] = 0;

	    // Costs of shortest paths from s to all nodes encountered; differs from
	    // `costs` in that it provides easy access to the node that currently has
	    // the known shortest path from s.
	    // XXX: Do we actually need both `costs` and `open`?
	    var open = dijkstra.PriorityQueue.make();
	    open.push(s, 0);

	    var closest,
	        u, v,
	        cost_of_s_to_u,
	        adjacent_nodes,
	        cost_of_e,
	        cost_of_s_to_u_plus_cost_of_e,
	        cost_of_s_to_v,
	        first_visit;
	    while (!open.empty()) {
	      // In the nodes remaining in graph that have a known cost from s,
	      // find the node, u, that currently has the shortest path from s.
	      closest = open.pop();
	      u = closest.value;
	      cost_of_s_to_u = closest.cost;

	      // Get nodes adjacent to u...
	      adjacent_nodes = graph[u] || {};

	      // ...and explore the edges that connect u to those nodes, updating
	      // the cost of the shortest paths to any or all of those nodes as
	      // necessary. v is the node across the current edge from u.
	      for (v in adjacent_nodes) {
	        if (adjacent_nodes.hasOwnProperty(v)) {
	          // Get the cost of the edge running from u to v.
	          cost_of_e = adjacent_nodes[v];

	          // Cost of s to u plus the cost of u to v across e--this is *a*
	          // cost from s to v that may or may not be less than the current
	          // known cost to v.
	          cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;

	          // If we haven't visited v yet OR if the current known cost from s to
	          // v is greater than the new cost we just found (cost of s to u plus
	          // cost of u to v across e), update v's cost in the cost list and
	          // update v's predecessor in the predecessor list (it's now u).
	          cost_of_s_to_v = costs[v];
	          first_visit = (typeof costs[v] === 'undefined');
	          if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {
	            costs[v] = cost_of_s_to_u_plus_cost_of_e;
	            open.push(v, cost_of_s_to_u_plus_cost_of_e);
	            predecessors[v] = u;
	          }
	        }
	      }
	    }

	    if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {
	      var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');
	      throw new Error(msg);
	    }

	    return predecessors;
	  },

	  extract_shortest_path_from_predecessor_list: function(predecessors, d) {
	    var nodes = [];
	    var u = d;
	    var predecessor;
	    while (u) {
	      nodes.push(u);
	      predecessor = predecessors[u];
	      u = predecessors[u];
	    }
	    nodes.reverse();
	    return nodes;
	  },

	  find_path: function(graph, s, d) {
	    var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);
	    return dijkstra.extract_shortest_path_from_predecessor_list(
	      predecessors, d);
	  },

	  /**
	   * A very naive priority queue implementation.
	   */
	  PriorityQueue: {
	    make: function (opts) {
	      var T = dijkstra.PriorityQueue,
	          t = {},
	          key;
	      opts = opts || {};
	      for (key in T) {
	        if (T.hasOwnProperty(key)) {
	          t[key] = T[key];
	        }
	      }
	      t.queue = [];
	      t.sorter = opts.sorter || T.default_sorter;
	      return t;
	    },

	    default_sorter: function (a, b) {
	      return a.cost - b.cost;
	    },

	    /**
	     * Add a new item to the queue and ensure the highest priority element
	     * is at the front of the queue.
	     */
	    push: function (value, cost) {
	      var item = {value: value, cost: cost};
	      this.queue.push(item);
	      this.queue.sort(this.sorter);
	    },

	    /**
	     * Return the highest priority element in the queue.
	     */
	    pop: function () {
	      return this.queue.shift();
	    },

	    empty: function () {
	      return this.queue.length === 0;
	    }
	  }
	};


	// node.js module exports
	{
	  module.exports = dijkstra;
	}
	});

	var segments = createCommonjsModule(function (module, exports) {
	/**
	 * Returns UTF8 byte length
	 *
	 * @param  {String} str Input string
	 * @return {Number}     Number of byte
	 */
	function getStringByteLength (str) {
	  return unescape(encodeURIComponent(str)).length
	}

	/**
	 * Get a list of segments of the specified mode
	 * from a string
	 *
	 * @param  {Mode}   mode Segment mode
	 * @param  {String} str  String to process
	 * @return {Array}       Array of object with segments data
	 */
	function getSegments (regex, mode, str) {
	  var segments = [];
	  var result;

	  while ((result = regex.exec(str)) !== null) {
	    segments.push({
	      data: result[0],
	      index: result.index,
	      mode: mode,
	      length: result[0].length
	    });
	  }

	  return segments
	}

	/**
	 * Extracts a series of segments with the appropriate
	 * modes from a string
	 *
	 * @param  {String} dataStr Input string
	 * @return {Array}          Array of object with segments data
	 */
	function getSegmentsFromString (dataStr) {
	  var numSegs = getSegments(regex.NUMERIC, mode.NUMERIC, dataStr);
	  var alphaNumSegs = getSegments(regex.ALPHANUMERIC, mode.ALPHANUMERIC, dataStr);
	  var byteSegs;
	  var kanjiSegs;

	  if (utils$1.isKanjiModeEnabled()) {
	    byteSegs = getSegments(regex.BYTE, mode.BYTE, dataStr);
	    kanjiSegs = getSegments(regex.KANJI, mode.KANJI, dataStr);
	  } else {
	    byteSegs = getSegments(regex.BYTE_KANJI, mode.BYTE, dataStr);
	    kanjiSegs = [];
	  }

	  var segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);

	  return segs
	    .sort(function (s1, s2) {
	      return s1.index - s2.index
	    })
	    .map(function (obj) {
	      return {
	        data: obj.data,
	        mode: obj.mode,
	        length: obj.length
	      }
	    })
	}

	/**
	 * Returns how many bits are needed to encode a string of
	 * specified length with the specified mode
	 *
	 * @param  {Number} length String length
	 * @param  {Mode} mode     Segment mode
	 * @return {Number}        Bit length
	 */
	function getSegmentBitsLength (length, mode$1) {
	  switch (mode$1) {
	    case mode.NUMERIC:
	      return numericData.getBitsLength(length)
	    case mode.ALPHANUMERIC:
	      return alphanumericData.getBitsLength(length)
	    case mode.KANJI:
	      return kanjiData.getBitsLength(length)
	    case mode.BYTE:
	      return byteData.getBitsLength(length)
	  }
	}

	/**
	 * Merges adjacent segments which have the same mode
	 *
	 * @param  {Array} segs Array of object with segments data
	 * @return {Array}      Array of object with segments data
	 */
	function mergeSegments (segs) {
	  return segs.reduce(function (acc, curr) {
	    var prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;
	    if (prevSeg && prevSeg.mode === curr.mode) {
	      acc[acc.length - 1].data += curr.data;
	      return acc
	    }

	    acc.push(curr);
	    return acc
	  }, [])
	}

	/**
	 * Generates a list of all possible nodes combination which
	 * will be used to build a segments graph.
	 *
	 * Nodes are divided by groups. Each group will contain a list of all the modes
	 * in which is possible to encode the given text.
	 *
	 * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.
	 * The group for '12345' will contain then 3 objects, one for each
	 * possible encoding mode.
	 *
	 * Each node represents a possible segment.
	 *
	 * @param  {Array} segs Array of object with segments data
	 * @return {Array}      Array of object with segments data
	 */
	function buildNodes (segs) {
	  var nodes = [];
	  for (var i = 0; i < segs.length; i++) {
	    var seg = segs[i];

	    switch (seg.mode) {
	      case mode.NUMERIC:
	        nodes.push([seg,
	          { data: seg.data, mode: mode.ALPHANUMERIC, length: seg.length },
	          { data: seg.data, mode: mode.BYTE, length: seg.length }
	        ]);
	        break
	      case mode.ALPHANUMERIC:
	        nodes.push([seg,
	          { data: seg.data, mode: mode.BYTE, length: seg.length }
	        ]);
	        break
	      case mode.KANJI:
	        nodes.push([seg,
	          { data: seg.data, mode: mode.BYTE, length: getStringByteLength(seg.data) }
	        ]);
	        break
	      case mode.BYTE:
	        nodes.push([
	          { data: seg.data, mode: mode.BYTE, length: getStringByteLength(seg.data) }
	        ]);
	    }
	  }

	  return nodes
	}

	/**
	 * Builds a graph from a list of nodes.
	 * All segments in each node group will be connected with all the segments of
	 * the next group and so on.
	 *
	 * At each connection will be assigned a weight depending on the
	 * segment's byte length.
	 *
	 * @param  {Array} nodes    Array of object with segments data
	 * @param  {Number} version QR Code version
	 * @return {Object}         Graph of all possible segments
	 */
	function buildGraph (nodes, version) {
	  var table = {};
	  var graph = {'start': {}};
	  var prevNodeIds = ['start'];

	  for (var i = 0; i < nodes.length; i++) {
	    var nodeGroup = nodes[i];
	    var currentNodeIds = [];

	    for (var j = 0; j < nodeGroup.length; j++) {
	      var node = nodeGroup[j];
	      var key = '' + i + j;

	      currentNodeIds.push(key);
	      table[key] = { node: node, lastCount: 0 };
	      graph[key] = {};

	      for (var n = 0; n < prevNodeIds.length; n++) {
	        var prevNodeId = prevNodeIds[n];

	        if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {
	          graph[prevNodeId][key] =
	            getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) -
	            getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);

	          table[prevNodeId].lastCount += node.length;
	        } else {
	          if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;

	          graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) +
	            4 + mode.getCharCountIndicator(node.mode, version); // switch cost
	        }
	      }
	    }

	    prevNodeIds = currentNodeIds;
	  }

	  for (n = 0; n < prevNodeIds.length; n++) {
	    graph[prevNodeIds[n]]['end'] = 0;
	  }

	  return { map: graph, table: table }
	}

	/**
	 * Builds a segment from a specified data and mode.
	 * If a mode is not specified, the more suitable will be used.
	 *
	 * @param  {String} data             Input data
	 * @param  {Mode | String} modesHint Data mode
	 * @return {Segment}                 Segment
	 */
	function buildSingleSegment (data, modesHint) {
	  var mode$1;
	  var bestMode = mode.getBestModeForData(data);

	  mode$1 = mode.from(modesHint, bestMode);

	  // Make sure data can be encoded
	  if (mode$1 !== mode.BYTE && mode$1.bit < bestMode.bit) {
	    throw new Error('"' + data + '"' +
	      ' cannot be encoded with mode ' + mode.toString(mode$1) +
	      '.\n Suggested mode is: ' + mode.toString(bestMode))
	  }

	  // Use Mode.BYTE if Kanji support is disabled
	  if (mode$1 === mode.KANJI && !utils$1.isKanjiModeEnabled()) {
	    mode$1 = mode.BYTE;
	  }

	  switch (mode$1) {
	    case mode.NUMERIC:
	      return new numericData(data)

	    case mode.ALPHANUMERIC:
	      return new alphanumericData(data)

	    case mode.KANJI:
	      return new kanjiData(data)

	    case mode.BYTE:
	      return new byteData(data)
	  }
	}

	/**
	 * Builds a list of segments from an array.
	 * Array can contain Strings or Objects with segment's info.
	 *
	 * For each item which is a string, will be generated a segment with the given
	 * string and the more appropriate encoding mode.
	 *
	 * For each item which is an object, will be generated a segment with the given
	 * data and mode.
	 * Objects must contain at least the property "data".
	 * If property "mode" is not present, the more suitable mode will be used.
	 *
	 * @param  {Array} array Array of objects with segments data
	 * @return {Array}       Array of Segments
	 */
	exports.fromArray = function fromArray (array) {
	  return array.reduce(function (acc, seg) {
	    if (typeof seg === 'string') {
	      acc.push(buildSingleSegment(seg, null));
	    } else if (seg.data) {
	      acc.push(buildSingleSegment(seg.data, seg.mode));
	    }

	    return acc
	  }, [])
	};

	/**
	 * Builds an optimized sequence of segments from a string,
	 * which will produce the shortest possible bitstream.
	 *
	 * @param  {String} data    Input string
	 * @param  {Number} version QR Code version
	 * @return {Array}          Array of segments
	 */
	exports.fromString = function fromString (data, version) {
	  var segs = getSegmentsFromString(data, utils$1.isKanjiModeEnabled());

	  var nodes = buildNodes(segs);
	  var graph = buildGraph(nodes, version);
	  var path = dijkstra_1.find_path(graph.map, 'start', 'end');

	  var optimizedSegs = [];
	  for (var i = 1; i < path.length - 1; i++) {
	    optimizedSegs.push(graph.table[path[i]].node);
	  }

	  return exports.fromArray(mergeSegments(optimizedSegs))
	};

	/**
	 * Splits a string in various segments with the modes which
	 * best represent their content.
	 * The produced segments are far from being optimized.
	 * The output of this function is only used to estimate a QR Code version
	 * which may contain the data.
	 *
	 * @param  {string} data Input string
	 * @return {Array}       Array of segments
	 */
	exports.rawSplit = function rawSplit (data) {
	  return exports.fromArray(
	    getSegmentsFromString(data, utils$1.isKanjiModeEnabled())
	  )
	};
	});
	var segments_1 = segments.fromArray;
	var segments_2 = segments.fromString;
	var segments_3 = segments.rawSplit;

	/**
	 * QRCode for JavaScript
	 *
	 * modified by Ryan Day for nodejs support
	 * Copyright (c) 2011 Ryan Day
	 *
	 * Licensed under the MIT license:
	 *   http://www.opensource.org/licenses/mit-license.php
	 *
	//---------------------------------------------------------------------
	// QRCode for JavaScript
	//
	// Copyright (c) 2009 Kazuhiko Arase
	//
	// URL: http://www.d-project.com/
	//
	// Licensed under the MIT license:
	//   http://www.opensource.org/licenses/mit-license.php
	//
	// The word "QR Code" is registered trademark of
	// DENSO WAVE INCORPORATED
	//   http://www.denso-wave.com/qrcode/faqpatent-e.html
	//
	//---------------------------------------------------------------------
	*/

	/**
	 * Add finder patterns bits to matrix
	 *
	 * @param  {BitMatrix} matrix  Modules matrix
	 * @param  {Number}    version QR Code version
	 */
	function setupFinderPattern (matrix, version) {
	  var size = matrix.size;
	  var pos = finderPattern.getPositions(version);

	  for (var i = 0; i < pos.length; i++) {
	    var row = pos[i][0];
	    var col = pos[i][1];

	    for (var r = -1; r <= 7; r++) {
	      if (row + r <= -1 || size <= row + r) continue

	      for (var c = -1; c <= 7; c++) {
	        if (col + c <= -1 || size <= col + c) continue

	        if ((r >= 0 && r <= 6 && (c === 0 || c === 6)) ||
	          (c >= 0 && c <= 6 && (r === 0 || r === 6)) ||
	          (r >= 2 && r <= 4 && c >= 2 && c <= 4)) {
	          matrix.set(row + r, col + c, true, true);
	        } else {
	          matrix.set(row + r, col + c, false, true);
	        }
	      }
	    }
	  }
	}

	/**
	 * Add timing pattern bits to matrix
	 *
	 * Note: this function must be called before {@link setupAlignmentPattern}
	 *
	 * @param  {BitMatrix} matrix Modules matrix
	 */
	function setupTimingPattern (matrix) {
	  var size = matrix.size;

	  for (var r = 8; r < size - 8; r++) {
	    var value = r % 2 === 0;
	    matrix.set(r, 6, value, true);
	    matrix.set(6, r, value, true);
	  }
	}

	/**
	 * Add alignment patterns bits to matrix
	 *
	 * Note: this function must be called after {@link setupTimingPattern}
	 *
	 * @param  {BitMatrix} matrix  Modules matrix
	 * @param  {Number}    version QR Code version
	 */
	function setupAlignmentPattern (matrix, version) {
	  var pos = alignmentPattern.getPositions(version);

	  for (var i = 0; i < pos.length; i++) {
	    var row = pos[i][0];
	    var col = pos[i][1];

	    for (var r = -2; r <= 2; r++) {
	      for (var c = -2; c <= 2; c++) {
	        if (r === -2 || r === 2 || c === -2 || c === 2 ||
	          (r === 0 && c === 0)) {
	          matrix.set(row + r, col + c, true, true);
	        } else {
	          matrix.set(row + r, col + c, false, true);
	        }
	      }
	    }
	  }
	}

	/**
	 * Add version info bits to matrix
	 *
	 * @param  {BitMatrix} matrix  Modules matrix
	 * @param  {Number}    version QR Code version
	 */
	function setupVersionInfo (matrix, version) {
	  var size = matrix.size;
	  var bits = version$1.getEncodedBits(version);
	  var row, col, mod;

	  for (var i = 0; i < 18; i++) {
	    row = Math.floor(i / 3);
	    col = i % 3 + size - 8 - 3;
	    mod = ((bits >> i) & 1) === 1;

	    matrix.set(row, col, mod, true);
	    matrix.set(col, row, mod, true);
	  }
	}

	/**
	 * Add format info bits to matrix
	 *
	 * @param  {BitMatrix} matrix               Modules matrix
	 * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level
	 * @param  {Number}    maskPattern          Mask pattern reference value
	 */
	function setupFormatInfo (matrix, errorCorrectionLevel, maskPattern) {
	  var size = matrix.size;
	  var bits = formatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);
	  var i, mod;

	  for (i = 0; i < 15; i++) {
	    mod = ((bits >> i) & 1) === 1;

	    // vertical
	    if (i < 6) {
	      matrix.set(i, 8, mod, true);
	    } else if (i < 8) {
	      matrix.set(i + 1, 8, mod, true);
	    } else {
	      matrix.set(size - 15 + i, 8, mod, true);
	    }

	    // horizontal
	    if (i < 8) {
	      matrix.set(8, size - i - 1, mod, true);
	    } else if (i < 9) {
	      matrix.set(8, 15 - i - 1 + 1, mod, true);
	    } else {
	      matrix.set(8, 15 - i - 1, mod, true);
	    }
	  }

	  // fixed module
	  matrix.set(size - 8, 8, 1, true);
	}

	/**
	 * Add encoded data bits to matrix
	 *
	 * @param  {BitMatrix} matrix Modules matrix
	 * @param  {Buffer}    data   Data codewords
	 */
	function setupData (matrix, data) {
	  var size = matrix.size;
	  var inc = -1;
	  var row = size - 1;
	  var bitIndex = 7;
	  var byteIndex = 0;

	  for (var col = size - 1; col > 0; col -= 2) {
	    if (col === 6) col--;

	    while (true) {
	      for (var c = 0; c < 2; c++) {
	        if (!matrix.isReserved(row, col - c)) {
	          var dark = false;

	          if (byteIndex < data.length) {
	            dark = (((data[byteIndex] >>> bitIndex) & 1) === 1);
	          }

	          matrix.set(row, col - c, dark);
	          bitIndex--;

	          if (bitIndex === -1) {
	            byteIndex++;
	            bitIndex = 7;
	          }
	        }
	      }

	      row += inc;

	      if (row < 0 || size <= row) {
	        row -= inc;
	        inc = -inc;
	        break
	      }
	    }
	  }
	}

	/**
	 * Create encoded codewords from data input
	 *
	 * @param  {Number}   version              QR Code version
	 * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level
	 * @param  {ByteData} data                 Data input
	 * @return {Buffer}                        Buffer containing encoded codewords
	 */
	function createData (version, errorCorrectionLevel, segments) {
	  // Prepare data buffer
	  var buffer = new bitBuffer();

	  segments.forEach(function (data) {
	    // prefix data with mode indicator (4 bits)
	    buffer.put(data.mode.bit, 4);

	    // Prefix data with character count indicator.
	    // The character count indicator is a string of bits that represents the
	    // number of characters that are being encoded.
	    // The character count indicator must be placed after the mode indicator
	    // and must be a certain number of bits long, depending on the QR version
	    // and data mode
	    // @see {@link Mode.getCharCountIndicator}.
	    buffer.put(data.getLength(), mode.getCharCountIndicator(data.mode, version));

	    // add binary data sequence to buffer
	    data.write(buffer);
	  });

	  // Calculate required number of bits
	  var totalCodewords = utils$1.getSymbolTotalCodewords(version);
	  var ecTotalCodewords = errorCorrectionCode.getTotalCodewordsCount(version, errorCorrectionLevel);
	  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;

	  // Add a terminator.
	  // If the bit string is shorter than the total number of required bits,
	  // a terminator of up to four 0s must be added to the right side of the string.
	  // If the bit string is more than four bits shorter than the required number of bits,
	  // add four 0s to the end.
	  if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
	    buffer.put(0, 4);
	  }

	  // If the bit string is fewer than four bits shorter, add only the number of 0s that
	  // are needed to reach the required number of bits.

	  // After adding the terminator, if the number of bits in the string is not a multiple of 8,
	  // pad the string on the right with 0s to make the string's length a multiple of 8.
	  while (buffer.getLengthInBits() % 8 !== 0) {
	    buffer.putBit(0);
	  }

	  // Add pad bytes if the string is still shorter than the total number of required bits.
	  // Extend the buffer to fill the data capacity of the symbol corresponding to
	  // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)
	  // and 00010001 (0x11) alternately.
	  var remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;
	  for (var i = 0; i < remainingByte; i++) {
	    buffer.put(i % 2 ? 0x11 : 0xEC, 8);
	  }

	  return createCodewords(buffer, version, errorCorrectionLevel)
	}

	/**
	 * Encode input data with Reed-Solomon and return codewords with
	 * relative error correction bits
	 *
	 * @param  {BitBuffer} bitBuffer            Data to encode
	 * @param  {Number}    version              QR Code version
	 * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level
	 * @return {Buffer}                         Buffer containing encoded codewords
	 */
	function createCodewords (bitBuffer, version, errorCorrectionLevel) {
	  // Total codewords for this QR code version (Data + Error correction)
	  var totalCodewords = utils$1.getSymbolTotalCodewords(version);

	  // Total number of error correction codewords
	  var ecTotalCodewords = errorCorrectionCode.getTotalCodewordsCount(version, errorCorrectionLevel);

	  // Total number of data codewords
	  var dataTotalCodewords = totalCodewords - ecTotalCodewords;

	  // Total number of blocks
	  var ecTotalBlocks = errorCorrectionCode.getBlocksCount(version, errorCorrectionLevel);

	  // Calculate how many blocks each group should contain
	  var blocksInGroup2 = totalCodewords % ecTotalBlocks;
	  var blocksInGroup1 = ecTotalBlocks - blocksInGroup2;

	  var totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);

	  var dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);
	  var dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;

	  // Number of EC codewords is the same for both groups
	  var ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;

	  // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount
	  var rs = new reedSolomonEncoder(ecCount);

	  var offset = 0;
	  var dcData = new Array(ecTotalBlocks);
	  var ecData = new Array(ecTotalBlocks);
	  var maxDataSize = 0;
	  var buffer$1 = new buffer(bitBuffer.buffer);

	  // Divide the buffer into the required number of blocks
	  for (var b = 0; b < ecTotalBlocks; b++) {
	    var dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;

	    // extract a block of data from buffer
	    dcData[b] = buffer$1.slice(offset, offset + dataSize);

	    // Calculate EC codewords for this data block
	    ecData[b] = rs.encode(dcData[b]);

	    offset += dataSize;
	    maxDataSize = Math.max(maxDataSize, dataSize);
	  }

	  // Create final data
	  // Interleave the data and error correction codewords from each block
	  var data = new buffer(totalCodewords);
	  var index = 0;
	  var i, r;

	  // Add data codewords
	  for (i = 0; i < maxDataSize; i++) {
	    for (r = 0; r < ecTotalBlocks; r++) {
	      if (i < dcData[r].length) {
	        data[index++] = dcData[r][i];
	      }
	    }
	  }

	  // Apped EC codewords
	  for (i = 0; i < ecCount; i++) {
	    for (r = 0; r < ecTotalBlocks; r++) {
	      data[index++] = ecData[r][i];
	    }
	  }

	  return data
	}

	/**
	 * Build QR Code symbol
	 *
	 * @param  {String} data                 Input string
	 * @param  {Number} version              QR Code version
	 * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level
	 * @param  {MaskPattern} maskPattern     Mask pattern
	 * @return {Object}                      Object containing symbol data
	 */
	function createSymbol (data, version, errorCorrectionLevel, maskPattern$1) {
	  var segments$1;

	  if (isarray(data)) {
	    segments$1 = segments.fromArray(data);
	  } else if (typeof data === 'string') {
	    var estimatedVersion = version;

	    if (!estimatedVersion) {
	      var rawSegments = segments.rawSplit(data);

	      // Estimate best version that can contain raw splitted segments
	      estimatedVersion = version$1.getBestVersionForData(rawSegments,
	        errorCorrectionLevel);
	    }

	    // Build optimized segments
	    // If estimated version is undefined, try with the highest version
	    segments$1 = segments.fromString(data, estimatedVersion || 40);
	  } else {
	    throw new Error('Invalid data')
	  }

	  // Get the min version that can contain data
	  var bestVersion = version$1.getBestVersionForData(segments$1,
	      errorCorrectionLevel);

	  // If no version is found, data cannot be stored
	  if (!bestVersion) {
	    throw new Error('The amount of data is too big to be stored in a QR Code')
	  }

	  // If not specified, use min version as default
	  if (!version) {
	    version = bestVersion;

	  // Check if the specified version can contain the data
	  } else if (version < bestVersion) {
	    throw new Error('\n' +
	      'The chosen QR Code version cannot contain this amount of data.\n' +
	      'Minimum version required to store current data is: ' + bestVersion + '.\n'
	    )
	  }

	  var dataBits = createData(version, errorCorrectionLevel, segments$1);

	  // Allocate matrix buffer
	  var moduleCount = utils$1.getSymbolSize(version);
	  var modules = new bitMatrix(moduleCount);

	  // Add function modules
	  setupFinderPattern(modules, version);
	  setupTimingPattern(modules);
	  setupAlignmentPattern(modules, version);

	  // Add temporary dummy bits for format info just to set them as reserved.
	  // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}
	  // since the masking operation must be performed only on the encoding region.
	  // These blocks will be replaced with correct values later in code.
	  setupFormatInfo(modules, errorCorrectionLevel, 0);

	  if (version >= 7) {
	    setupVersionInfo(modules, version);
	  }

	  // Add data codewords
	  setupData(modules, dataBits);

	  if (isNaN(maskPattern$1)) {
	    // Find best mask pattern
	    maskPattern$1 = maskPattern.getBestMask(modules,
	      setupFormatInfo.bind(null, modules, errorCorrectionLevel));
	  }

	  // Apply mask pattern
	  maskPattern.applyMask(maskPattern$1, modules);

	  // Replace format info bits with correct values
	  setupFormatInfo(modules, errorCorrectionLevel, maskPattern$1);

	  return {
	    modules: modules,
	    version: version,
	    errorCorrectionLevel: errorCorrectionLevel,
	    maskPattern: maskPattern$1,
	    segments: segments$1
	  }
	}

	/**
	 * QR Code
	 *
	 * @param {String | Array} data                 Input data
	 * @param {Object} options                      Optional configurations
	 * @param {Number} options.version              QR Code version
	 * @param {String} options.errorCorrectionLevel Error correction level
	 * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis
	 */
	var create = function create (data, options) {
	  if (typeof data === 'undefined' || data === '') {
	    throw new Error('No input text')
	  }

	  var errorCorrectionLevel$1 = errorCorrectionLevel.M;
	  var version;
	  var mask;

	  if (typeof options !== 'undefined') {
	    // Use higher error correction level as default
	    errorCorrectionLevel$1 = errorCorrectionLevel.from(options.errorCorrectionLevel, errorCorrectionLevel.M);
	    version = version$1.from(options.version);
	    mask = maskPattern.from(options.maskPattern);

	    if (options.toSJISFunc) {
	      utils$1.setToSJISFunction(options.toSJISFunc);
	    }
	  }

	  return createSymbol(data, version, errorCorrectionLevel$1, mask)
	};

	var qrcode = {
		create: create
	};

	var require$$0$1 = {};

	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}

	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};

	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};

	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};

	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};

	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};

	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return Buffer.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = Buffer.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

	// Copyright Joyent, Inc. and other Node contributors.
	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     };


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	function StringDecoder(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	}

	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}

	Readable.ReadableState = ReadableState;

	var debug = debuglog('stream');
	inherits$1(Readable, EventEmitter);

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event])
	      emitter.on(event, fn);
	    else if (Array.isArray(emitter._events[event]))
	      emitter._events[event].unshift(fn);
	    else
	      emitter._events[event] = [fn, emitter._events[event]];
	  }
	}
	function listenerCount$1 (emitter, type) {
	  return emitter.listeners(type).length;
	}
	function ReadableState(options, stream) {

	  options = options || {};

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	function Readable(options) {

	  if (!(this instanceof Readable)) return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options && typeof options.read === 'function') this._read = options.read;

	  EventEmitter.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;

	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = Buffer.from(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }

	      if (!addToFront) state.reading = false;

	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	          if (state.needReadable) emitReadable(stream);
	        }
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}

	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;

	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}

	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    nextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false);

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (listenerCount$1(dest, 'error') === 0) dest.emit('error', er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && src.listeners('data').length) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;

	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var _i = 0; _i < len; _i++) {
	      dests[_i].emit('unpipe', this);
	    }return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1) return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = EventEmitter.prototype.on.call(this, ev, fn);

	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        nextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    nextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach$1(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};

	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;

	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }

	  return ret;
	}

	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}

	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = Buffer.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    nextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function forEach$1(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	// A bit simpler than readable streams.
	Writable.WritableState = WritableState;
	inherits$1(Writable, EventEmitter);

	function nop() {}

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	function WritableState(options, stream) {
	  Object.defineProperty(this, 'buffer', {
	    get: deprecate(function () {
	      return this.getBuffer();
	    }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	  });
	  options = options || {};

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function writableStateGetBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	function Writable(options) {

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;

	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }

	  EventEmitter.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  nextTick(cb, er);
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	  // Always throw error if a null is written
	  // if we are not in object mode then throw
	  // if it is not a buffer, string, or undefined.
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    nextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

	  if (typeof cb !== 'function') cb = nop;

	  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function () {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer.from(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);

	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) nextTick(cb, er);else cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      /*<replacement>*/
	        nextTick(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	        afterWrite(stream, state, finished, cb);
	      }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;

	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }

	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) nextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;

	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}

	inherits$1(Duplex, Readable);

	var keys$2 = Object.keys(Writable.prototype);
	for (var v = 0; v < keys$2.length; v++) {
	  var method = keys$2[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false) this.readable = false;

	  if (options && options.writable === false) this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  nextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	// a transform stream is a readable/writable stream where you do
	inherits$1(Transform, Duplex);

	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined) stream.push(data);

	  cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;

	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }

	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er) {
	      done(stream, er);
	    });else done(stream);
	  });
	}

	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('Not implemented');
	};

	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	function done(stream, er) {
	  if (er) return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

	  if (ts.transforming) throw new Error('Calling transform done when still transforming');

	  return stream.push(null);
	}

	inherits$1(PassThrough, Transform);
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

	inherits$1(Stream, EventEmitter);
	Stream.Readable = Readable;
	Stream.Writable = Writable;
	Stream.Duplex = Duplex;
	Stream.Transform = Transform;
	Stream.PassThrough = PassThrough;

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;

	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EventEmitter.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EventEmitter.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};

	var msg = {
	  2:      'need dictionary',     /* Z_NEED_DICT       2  */
	  1:      'stream end',          /* Z_STREAM_END      1  */
	  0:      '',                    /* Z_OK              0  */
	  '-1':   'file error',          /* Z_ERRNO         (-1) */
	  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
	  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
	  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
	  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
	  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
	};

	function ZStream() {
	  /* next input byte */
	  this.input = null; // JS specific, because we have no pointers
	  this.next_in = 0;
	  /* number of bytes available at input */
	  this.avail_in = 0;
	  /* total number of input bytes read so far */
	  this.total_in = 0;
	  /* next output byte should be put there */
	  this.output = null; // JS specific, because we have no pointers
	  this.next_out = 0;
	  /* remaining free space at output */
	  this.avail_out = 0;
	  /* total number of bytes output so far */
	  this.total_out = 0;
	  /* last error message, NULL if no error */
	  this.msg = ''/*Z_NULL*/;
	  /* not visible by applications */
	  this.state = null;
	  /* best guess about the data type: binary or text */
	  this.data_type = 2/*Z_UNKNOWN*/;
	  /* adler32 value of the uncompressed data */
	  this.adler = 0;
	}

	function arraySet(dest, src, src_offs, len, dest_offs) {
	  if (src.subarray && dest.subarray) {
	    dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
	    return;
	  }
	  // Fallback to ordinary array
	  for (var i = 0; i < len; i++) {
	    dest[dest_offs + i] = src[src_offs + i];
	  }
	}


	var Buf8 = Uint8Array;
	var Buf16 = Uint16Array;
	var Buf32 = Int32Array;
	// Enable/Disable typed arrays use, for testing
	//

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	//var Z_FILTERED          = 1;
	//var Z_HUFFMAN_ONLY      = 2;
	//var Z_RLE               = 3;
	var Z_FIXED = 4;
	//var Z_DEFAULT_STRATEGY  = 0;

	/* Possible values of the data_type field (though see inflate()) */
	var Z_BINARY = 0;
	var Z_TEXT = 1;
	//var Z_ASCII             = 1; // = Z_TEXT
	var Z_UNKNOWN = 2;

	/*============================================================================*/


	function zero$1(buf) {
	  var len = buf.length;
	  while (--len >= 0) {
	    buf[len] = 0;
	  }
	}

	// From zutil.h

	var STORED_BLOCK = 0;
	var STATIC_TREES = 1;
	var DYN_TREES = 2;
	/* The three kinds of block type */

	var MIN_MATCH = 3;
	var MAX_MATCH = 258;
	/* The minimum and maximum match lengths */

	// From deflate.h
	/* ===========================================================================
	 * Internal compression state.
	 */

	var LENGTH_CODES = 29;
	/* number of length codes, not counting the special END_BLOCK code */

	var LITERALS = 256;
	/* number of literal bytes 0..255 */

	var L_CODES = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */

	var D_CODES = 30;
	/* number of distance codes */

	var BL_CODES = 19;
	/* number of codes used to transfer the bit lengths */

	var HEAP_SIZE = 2 * L_CODES + 1;
	/* maximum heap size */

	var MAX_BITS = 15;
	/* All codes must not exceed MAX_BITS bits */

	var Buf_size = 16;
	/* size of bit buffer in bi_buf */


	/* ===========================================================================
	 * Constants
	 */

	var MAX_BL_BITS = 7;
	/* Bit length codes must not exceed MAX_BL_BITS bits */

	var END_BLOCK = 256;
	/* end of block literal code */

	var REP_3_6 = 16;
	/* repeat previous bit length 3-6 times (2 bits of repeat count) */

	var REPZ_3_10 = 17;
	/* repeat a zero length 3-10 times  (3 bits of repeat count) */

	var REPZ_11_138 = 18;
	/* repeat a zero length 11-138 times  (7 bits of repeat count) */

	/* eslint-disable comma-spacing,array-bracket-spacing */
	var extra_lbits = /* extra bits for each length code */ [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];

	var extra_dbits = /* extra bits for each distance code */ [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];

	var extra_blbits = /* extra bits for each bit length code */ [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];

	var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
	/* eslint-enable comma-spacing,array-bracket-spacing */

	/* The lengths of the bit length codes are sent in order of decreasing
	 * probability, to avoid transmitting the lengths for unused bit length codes.
	 */

	/* ===========================================================================
	 * Local data. These are initialized only once.
	 */

	// We pre-fill arrays with 0 to avoid uninitialized gaps

	var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

	// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
	var static_ltree = new Array((L_CODES + 2) * 2);
	zero$1(static_ltree);
	/* The static literal tree. Since the bit lengths are imposed, there is no
	 * need for the L_CODES extra codes used during heap construction. However
	 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
	 * below).
	 */

	var static_dtree = new Array(D_CODES * 2);
	zero$1(static_dtree);
	/* The static distance tree. (Actually a trivial tree since all codes use
	 * 5 bits.)
	 */

	var _dist_code = new Array(DIST_CODE_LEN);
	zero$1(_dist_code);
	/* Distance codes. The first 256 values correspond to the distances
	 * 3 .. 258, the last 256 values correspond to the top 8 bits of
	 * the 15 bit distances.
	 */

	var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
	zero$1(_length_code);
	/* length code for each normalized match length (0 == MIN_MATCH) */

	var base_length = new Array(LENGTH_CODES);
	zero$1(base_length);
	/* First normalized length for each code (0 = MIN_MATCH) */

	var base_dist = new Array(D_CODES);
	zero$1(base_dist);
	/* First normalized distance for each code (0 = distance of 1) */


	function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

	  this.static_tree = static_tree; /* static tree or NULL */
	  this.extra_bits = extra_bits; /* extra bits for each code or NULL */
	  this.extra_base = extra_base; /* base index for extra_bits */
	  this.elems = elems; /* max number of elements in the tree */
	  this.max_length = max_length; /* max bit length for the codes */

	  // show if `static_tree` has data or dummy - needed for monomorphic objects
	  this.has_stree = static_tree && static_tree.length;
	}


	var static_l_desc;
	var static_d_desc;
	var static_bl_desc;


	function TreeDesc(dyn_tree, stat_desc) {
	  this.dyn_tree = dyn_tree; /* the dynamic tree */
	  this.max_code = 0; /* largest code with non zero frequency */
	  this.stat_desc = stat_desc; /* the corresponding static tree */
	}



	function d_code(dist) {
	  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
	}


	/* ===========================================================================
	 * Output a short LSB first on the stream.
	 * IN assertion: there is enough room in pendingBuf.
	 */
	function put_short(s, w) {
	  //    put_byte(s, (uch)((w) & 0xff));
	  //    put_byte(s, (uch)((ush)(w) >> 8));
	  s.pending_buf[s.pending++] = (w) & 0xff;
	  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
	}


	/* ===========================================================================
	 * Send a value on a given number of bits.
	 * IN assertion: length <= 16 and value fits in length bits.
	 */
	function send_bits(s, value, length) {
	  if (s.bi_valid > (Buf_size - length)) {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    put_short(s, s.bi_buf);
	    s.bi_buf = value >> (Buf_size - s.bi_valid);
	    s.bi_valid += length - Buf_size;
	  } else {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    s.bi_valid += length;
	  }
	}


	function send_code(s, c, tree) {
	  send_bits(s, tree[c * 2] /*.Code*/ , tree[c * 2 + 1] /*.Len*/ );
	}


	/* ===========================================================================
	 * Reverse the first len bits of a code, using straightforward code (a faster
	 * method would use a table)
	 * IN assertion: 1 <= len <= 15
	 */
	function bi_reverse(code, len) {
	  var res = 0;
	  do {
	    res |= code & 1;
	    code >>>= 1;
	    res <<= 1;
	  } while (--len > 0);
	  return res >>> 1;
	}


	/* ===========================================================================
	 * Flush the bit buffer, keeping at most 7 bits in it.
	 */
	function bi_flush(s) {
	  if (s.bi_valid === 16) {
	    put_short(s, s.bi_buf);
	    s.bi_buf = 0;
	    s.bi_valid = 0;

	  } else if (s.bi_valid >= 8) {
	    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
	    s.bi_buf >>= 8;
	    s.bi_valid -= 8;
	  }
	}


	/* ===========================================================================
	 * Compute the optimal bit lengths for a tree and update the total bit length
	 * for the current block.
	 * IN assertion: the fields freq and dad are set, heap[heap_max] and
	 *    above are the tree nodes sorted by increasing frequency.
	 * OUT assertions: the field len is set to the optimal bit length, the
	 *     array bl_count contains the frequencies for each bit length.
	 *     The length opt_len is updated; static_len is also updated if stree is
	 *     not null.
	 */
	function gen_bitlen(s, desc) {
	//    deflate_state *s;
	//    tree_desc *desc;    /* the tree descriptor */
	  var tree = desc.dyn_tree;
	  var max_code = desc.max_code;
	  var stree = desc.stat_desc.static_tree;
	  var has_stree = desc.stat_desc.has_stree;
	  var extra = desc.stat_desc.extra_bits;
	  var base = desc.stat_desc.extra_base;
	  var max_length = desc.stat_desc.max_length;
	  var h; /* heap index */
	  var n, m; /* iterate over the tree elements */
	  var bits; /* bit length */
	  var xbits; /* extra bits */
	  var f; /* frequency */
	  var overflow = 0; /* number of elements with bit length too large */

	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    s.bl_count[bits] = 0;
	  }

	  /* In a first pass, compute the optimal bit lengths (which may
	   * overflow in the case of the bit length tree).
	   */
	  tree[s.heap[s.heap_max] * 2 + 1] /*.Len*/ = 0; /* root of the heap */

	  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
	    n = s.heap[h];
	    bits = tree[tree[n * 2 + 1] /*.Dad*/ * 2 + 1] /*.Len*/ + 1;
	    if (bits > max_length) {
	      bits = max_length;
	      overflow++;
	    }
	    tree[n * 2 + 1] /*.Len*/ = bits;
	    /* We overwrite tree[n].Dad which is no longer needed */

	    if (n > max_code) {
	      continue;
	    } /* not a leaf node */

	    s.bl_count[bits]++;
	    xbits = 0;
	    if (n >= base) {
	      xbits = extra[n - base];
	    }
	    f = tree[n * 2] /*.Freq*/ ;
	    s.opt_len += f * (bits + xbits);
	    if (has_stree) {
	      s.static_len += f * (stree[n * 2 + 1] /*.Len*/ + xbits);
	    }
	  }
	  if (overflow === 0) {
	    return;
	  }

	  // Trace((stderr,"\nbit length overflow\n"));
	  /* This happens for example on obj2 and pic of the Calgary corpus */

	  /* Find the first bit length which could increase: */
	  do {
	    bits = max_length - 1;
	    while (s.bl_count[bits] === 0) {
	      bits--;
	    }
	    s.bl_count[bits]--; /* move one leaf down the tree */
	    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
	    s.bl_count[max_length]--;
	    /* The brother of the overflow item also moves one step up,
	     * but this does not affect bl_count[max_length]
	     */
	    overflow -= 2;
	  } while (overflow > 0);

	  /* Now recompute all bit lengths, scanning in increasing frequency.
	   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
	   * lengths instead of fixing only the wrong ones. This idea is taken
	   * from 'ar' written by Haruhiko Okumura.)
	   */
	  for (bits = max_length; bits !== 0; bits--) {
	    n = s.bl_count[bits];
	    while (n !== 0) {
	      m = s.heap[--h];
	      if (m > max_code) {
	        continue;
	      }
	      if (tree[m * 2 + 1] /*.Len*/ !== bits) {
	        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
	        s.opt_len += (bits - tree[m * 2 + 1] /*.Len*/ ) * tree[m * 2] /*.Freq*/ ;
	        tree[m * 2 + 1] /*.Len*/ = bits;
	      }
	      n--;
	    }
	  }
	}


	/* ===========================================================================
	 * Generate the codes for a given tree and bit counts (which need not be
	 * optimal).
	 * IN assertion: the array bl_count contains the bit length statistics for
	 * the given tree and the field len is set for all tree elements.
	 * OUT assertion: the field code is set for all tree elements of non
	 *     zero code length.
	 */
	function gen_codes(tree, max_code, bl_count) {
	//    ct_data *tree;             /* the tree to decorate */
	//    int max_code;              /* largest code with non zero frequency */
	//    ushf *bl_count;            /* number of codes at each bit length */

	  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
	  var code = 0; /* running code value */
	  var bits; /* bit index */
	  var n; /* code index */

	  /* The distribution counts are first used to generate the code values
	   * without bit reversal.
	   */
	  for (bits = 1; bits <= MAX_BITS; bits++) {
	    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
	  }
	  /* Check that the bit counts in bl_count are consistent. The last code
	   * must be all ones.
	   */
	  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
	  //        "inconsistent bit counts");
	  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

	  for (n = 0; n <= max_code; n++) {
	    var len = tree[n * 2 + 1] /*.Len*/ ;
	    if (len === 0) {
	      continue;
	    }
	    /* Now reverse the bits */
	    tree[n * 2] /*.Code*/ = bi_reverse(next_code[len]++, len);

	    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
	    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
	  }
	}


	/* ===========================================================================
	 * Initialize the various 'constant' tables.
	 */
	function tr_static_init() {
	  var n; /* iterates over tree elements */
	  var bits; /* bit counter */
	  var length; /* length value */
	  var code; /* code value */
	  var dist; /* distance index */
	  var bl_count = new Array(MAX_BITS + 1);
	  /* number of codes at each bit length for an optimal tree */

	  // do check in _tr_init()
	  //if (static_init_done) return;

	  /* For some embedded targets, global variables are not initialized: */
	  /*#ifdef NO_INIT_GLOBAL_POINTERS
	    static_l_desc.static_tree = static_ltree;
	    static_l_desc.extra_bits = extra_lbits;
	    static_d_desc.static_tree = static_dtree;
	    static_d_desc.extra_bits = extra_dbits;
	    static_bl_desc.extra_bits = extra_blbits;
	  #endif*/

	  /* Initialize the mapping length (0..255) -> length code (0..28) */
	  length = 0;
	  for (code = 0; code < LENGTH_CODES - 1; code++) {
	    base_length[code] = length;
	    for (n = 0; n < (1 << extra_lbits[code]); n++) {
	      _length_code[length++] = code;
	    }
	  }
	  //Assert (length == 256, "tr_static_init: length != 256");
	  /* Note that the length 255 (match length 258) can be represented
	   * in two different ways: code 284 + 5 bits or code 285, so we
	   * overwrite length_code[255] to use the best encoding:
	   */
	  _length_code[length - 1] = code;

	  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
	  dist = 0;
	  for (code = 0; code < 16; code++) {
	    base_dist[code] = dist;
	    for (n = 0; n < (1 << extra_dbits[code]); n++) {
	      _dist_code[dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: dist != 256");
	  dist >>= 7; /* from now on, all distances are divided by 128 */
	  for (; code < D_CODES; code++) {
	    base_dist[code] = dist << 7;
	    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
	      _dist_code[256 + dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

	  /* Construct the codes of the static literal tree */
	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    bl_count[bits] = 0;
	  }

	  n = 0;
	  while (n <= 143) {
	    static_ltree[n * 2 + 1] /*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  while (n <= 255) {
	    static_ltree[n * 2 + 1] /*.Len*/ = 9;
	    n++;
	    bl_count[9]++;
	  }
	  while (n <= 279) {
	    static_ltree[n * 2 + 1] /*.Len*/ = 7;
	    n++;
	    bl_count[7]++;
	  }
	  while (n <= 287) {
	    static_ltree[n * 2 + 1] /*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  /* Codes 286 and 287 do not exist, but we must include them in the
	   * tree construction to get a canonical Huffman tree (longest code
	   * all ones)
	   */
	  gen_codes(static_ltree, L_CODES + 1, bl_count);

	  /* The static distance tree is trivial: */
	  for (n = 0; n < D_CODES; n++) {
	    static_dtree[n * 2 + 1] /*.Len*/ = 5;
	    static_dtree[n * 2] /*.Code*/ = bi_reverse(n, 5);
	  }

	  // Now data ready and we can init static trees
	  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
	  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
	  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);

	  //static_init_done = true;
	}


	/* ===========================================================================
	 * Initialize a new block.
	 */
	function init_block(s) {
	  var n; /* iterates over tree elements */

	  /* Initialize the trees. */
	  for (n = 0; n < L_CODES; n++) {
	    s.dyn_ltree[n * 2] /*.Freq*/ = 0;
	  }
	  for (n = 0; n < D_CODES; n++) {
	    s.dyn_dtree[n * 2] /*.Freq*/ = 0;
	  }
	  for (n = 0; n < BL_CODES; n++) {
	    s.bl_tree[n * 2] /*.Freq*/ = 0;
	  }

	  s.dyn_ltree[END_BLOCK * 2] /*.Freq*/ = 1;
	  s.opt_len = s.static_len = 0;
	  s.last_lit = s.matches = 0;
	}


	/* ===========================================================================
	 * Flush the bit buffer and align the output on a byte boundary
	 */
	function bi_windup(s) {
	  if (s.bi_valid > 8) {
	    put_short(s, s.bi_buf);
	  } else if (s.bi_valid > 0) {
	    //put_byte(s, (Byte)s->bi_buf);
	    s.pending_buf[s.pending++] = s.bi_buf;
	  }
	  s.bi_buf = 0;
	  s.bi_valid = 0;
	}

	/* ===========================================================================
	 * Copy a stored block, storing first the length and its
	 * one's complement if requested.
	 */
	function copy_block(s, buf, len, header) {
	//DeflateState *s;
	//charf    *buf;    /* the input data */
	//unsigned len;     /* its length */
	//int      header;  /* true if block header must be written */

	  bi_windup(s); /* align on byte boundary */

	  if (header) {
	    put_short(s, len);
	    put_short(s, ~len);
	  }
	  //  while (len--) {
	  //    put_byte(s, *buf++);
	  //  }
	  arraySet(s.pending_buf, s.window, buf, len, s.pending);
	  s.pending += len;
	}

	/* ===========================================================================
	 * Compares to subtrees, using the tree depth as tie breaker when
	 * the subtrees have equal frequency. This minimizes the worst case length.
	 */
	function smaller(tree, n, m, depth) {
	  var _n2 = n * 2;
	  var _m2 = m * 2;
	  return (tree[_n2] /*.Freq*/ < tree[_m2] /*.Freq*/ ||
	    (tree[_n2] /*.Freq*/ === tree[_m2] /*.Freq*/ && depth[n] <= depth[m]));
	}

	/* ===========================================================================
	 * Restore the heap property by moving down the tree starting at node k,
	 * exchanging a node with the smallest of its two sons if necessary, stopping
	 * when the heap property is re-established (each father smaller than its
	 * two sons).
	 */
	function pqdownheap(s, tree, k)
	//    deflate_state *s;
	//    ct_data *tree;  /* the tree to restore */
	//    int k;               /* node to move down */
	{
	  var v = s.heap[k];
	  var j = k << 1; /* left son of k */
	  while (j <= s.heap_len) {
	    /* Set j to the smallest of the two sons: */
	    if (j < s.heap_len &&
	      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
	      j++;
	    }
	    /* Exit if v is smaller than both sons */
	    if (smaller(tree, v, s.heap[j], s.depth)) {
	      break;
	    }

	    /* Exchange v with the smallest son */
	    s.heap[k] = s.heap[j];
	    k = j;

	    /* And continue down the tree, setting j to the left son of k */
	    j <<= 1;
	  }
	  s.heap[k] = v;
	}


	// inlined manually
	// var SMALLEST = 1;

	/* ===========================================================================
	 * Send the block data compressed using the given Huffman trees
	 */
	function compress_block(s, ltree, dtree)
	//    deflate_state *s;
	//    const ct_data *ltree; /* literal tree */
	//    const ct_data *dtree; /* distance tree */
	{
	  var dist; /* distance of matched string */
	  var lc; /* match length or unmatched char (if dist == 0) */
	  var lx = 0; /* running index in l_buf */
	  var code; /* the code to send */
	  var extra; /* number of extra bits to send */

	  if (s.last_lit !== 0) {
	    do {
	      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
	      lc = s.pending_buf[s.l_buf + lx];
	      lx++;

	      if (dist === 0) {
	        send_code(s, lc, ltree); /* send a literal byte */
	        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
	      } else {
	        /* Here, lc is the match length - MIN_MATCH */
	        code = _length_code[lc];
	        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
	        extra = extra_lbits[code];
	        if (extra !== 0) {
	          lc -= base_length[code];
	          send_bits(s, lc, extra); /* send the extra length bits */
	        }
	        dist--; /* dist is now the match distance - 1 */
	        code = d_code(dist);
	        //Assert (code < D_CODES, "bad d_code");

	        send_code(s, code, dtree); /* send the distance code */
	        extra = extra_dbits[code];
	        if (extra !== 0) {
	          dist -= base_dist[code];
	          send_bits(s, dist, extra); /* send the extra distance bits */
	        }
	      } /* literal or match pair ? */

	      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
	      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
	      //       "pendingBuf overflow");

	    } while (lx < s.last_lit);
	  }

	  send_code(s, END_BLOCK, ltree);
	}


	/* ===========================================================================
	 * Construct one Huffman tree and assigns the code bit strings and lengths.
	 * Update the total bit length for the current block.
	 * IN assertion: the field freq is set for all tree elements.
	 * OUT assertions: the fields len and code are set to the optimal bit length
	 *     and corresponding code. The length opt_len is updated; static_len is
	 *     also updated if stree is not null. The field max_code is set.
	 */
	function build_tree(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc; /* the tree descriptor */
	{
	  var tree = desc.dyn_tree;
	  var stree = desc.stat_desc.static_tree;
	  var has_stree = desc.stat_desc.has_stree;
	  var elems = desc.stat_desc.elems;
	  var n, m; /* iterate over heap elements */
	  var max_code = -1; /* largest code with non zero frequency */
	  var node; /* new node being created */

	  /* Construct the initial heap, with least frequent element in
	   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
	   * heap[0] is not used.
	   */
	  s.heap_len = 0;
	  s.heap_max = HEAP_SIZE;

	  for (n = 0; n < elems; n++) {
	    if (tree[n * 2] /*.Freq*/ !== 0) {
	      s.heap[++s.heap_len] = max_code = n;
	      s.depth[n] = 0;

	    } else {
	      tree[n * 2 + 1] /*.Len*/ = 0;
	    }
	  }

	  /* The pkzip format requires that at least one distance code exists,
	   * and that at least one bit should be sent even if there is only one
	   * possible code. So to avoid special checks later on we force at least
	   * two codes of non zero frequency.
	   */
	  while (s.heap_len < 2) {
	    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
	    tree[node * 2] /*.Freq*/ = 1;
	    s.depth[node] = 0;
	    s.opt_len--;

	    if (has_stree) {
	      s.static_len -= stree[node * 2 + 1] /*.Len*/ ;
	    }
	    /* node is 0 or 1 so it does not have extra bits */
	  }
	  desc.max_code = max_code;

	  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
	   * establish sub-heaps of increasing lengths:
	   */
	  for (n = (s.heap_len >> 1 /*int /2*/ ); n >= 1; n--) {
	    pqdownheap(s, tree, n);
	  }

	  /* Construct the Huffman tree by repeatedly combining the least two
	   * frequent nodes.
	   */
	  node = elems; /* next internal node of the tree */
	  do {
	    //pqremove(s, tree, n);  /* n = node of least frequency */
	    /*** pqremove ***/
	    n = s.heap[1 /*SMALLEST*/ ];
	    s.heap[1 /*SMALLEST*/ ] = s.heap[s.heap_len--];
	    pqdownheap(s, tree, 1 /*SMALLEST*/ );
	    /***/

	    m = s.heap[1 /*SMALLEST*/ ]; /* m = node of next least frequency */

	    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
	    s.heap[--s.heap_max] = m;

	    /* Create a new node father of n and m */
	    tree[node * 2] /*.Freq*/ = tree[n * 2] /*.Freq*/ + tree[m * 2] /*.Freq*/ ;
	    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
	    tree[n * 2 + 1] /*.Dad*/ = tree[m * 2 + 1] /*.Dad*/ = node;

	    /* and insert the new node in the heap */
	    s.heap[1 /*SMALLEST*/ ] = node++;
	    pqdownheap(s, tree, 1 /*SMALLEST*/ );

	  } while (s.heap_len >= 2);

	  s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/ ];

	  /* At this point, the fields freq and dad are set. We can now
	   * generate the bit lengths.
	   */
	  gen_bitlen(s, desc);

	  /* The field len is now set, we can generate the bit codes */
	  gen_codes(tree, max_code, s.bl_count);
	}


	/* ===========================================================================
	 * Scan a literal or distance tree to determine the frequencies of the codes
	 * in the bit length tree.
	 */
	function scan_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree;   /* the tree to be scanned */
	//    int max_code;    /* and its largest code of non zero frequency */
	{
	  var n; /* iterates over all tree elements */
	  var prevlen = -1; /* last emitted length */
	  var curlen; /* length of current code */

	  var nextlen = tree[0 * 2 + 1] /*.Len*/ ; /* length of next code */

	  var count = 0; /* repeat count of the current code */
	  var max_count = 7; /* max repeat count */
	  var min_count = 4; /* min repeat count */

	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }
	  tree[(max_code + 1) * 2 + 1] /*.Len*/ = 0xffff; /* guard */

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      s.bl_tree[curlen * 2] /*.Freq*/ += count;

	    } else if (curlen !== 0) {

	      if (curlen !== prevlen) {
	        s.bl_tree[curlen * 2] /*.Freq*/ ++;
	      }
	      s.bl_tree[REP_3_6 * 2] /*.Freq*/ ++;

	    } else if (count <= 10) {
	      s.bl_tree[REPZ_3_10 * 2] /*.Freq*/ ++;

	    } else {
	      s.bl_tree[REPZ_11_138 * 2] /*.Freq*/ ++;
	    }

	    count = 0;
	    prevlen = curlen;

	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Send a literal or distance tree in compressed form, using the codes in
	 * bl_tree.
	 */
	function send_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree; /* the tree to be scanned */
	//    int max_code;       /* and its largest code of non zero frequency */
	{
	  var n; /* iterates over all tree elements */
	  var prevlen = -1; /* last emitted length */
	  var curlen; /* length of current code */

	  var nextlen = tree[0 * 2 + 1] /*.Len*/ ; /* length of next code */

	  var count = 0; /* repeat count of the current code */
	  var max_count = 7; /* max repeat count */
	  var min_count = 4; /* min repeat count */

	  /* tree[max_code+1].Len = -1; */
	  /* guard already set */
	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      do {
	        send_code(s, curlen, s.bl_tree);
	      } while (--count !== 0);

	    } else if (curlen !== 0) {
	      if (curlen !== prevlen) {
	        send_code(s, curlen, s.bl_tree);
	        count--;
	      }
	      //Assert(count >= 3 && count <= 6, " 3_6?");
	      send_code(s, REP_3_6, s.bl_tree);
	      send_bits(s, count - 3, 2);

	    } else if (count <= 10) {
	      send_code(s, REPZ_3_10, s.bl_tree);
	      send_bits(s, count - 3, 3);

	    } else {
	      send_code(s, REPZ_11_138, s.bl_tree);
	      send_bits(s, count - 11, 7);
	    }

	    count = 0;
	    prevlen = curlen;
	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Construct the Huffman tree for the bit lengths and return the index in
	 * bl_order of the last bit length code to send.
	 */
	function build_bl_tree(s) {
	  var max_blindex; /* index of last bit length code of non zero freq */

	  /* Determine the bit length frequencies for literal and distance trees */
	  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
	  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

	  /* Build the bit length tree: */
	  build_tree(s, s.bl_desc);
	  /* opt_len now includes the length of the tree representations, except
	   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
	   */

	  /* Determine the number of bit length codes to send. The pkzip format
	   * requires that at least 4 bit length codes be sent. (appnote.txt says
	   * 3 but the actual value used is 4.)
	   */
	  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
	    if (s.bl_tree[bl_order[max_blindex] * 2 + 1] /*.Len*/ !== 0) {
	      break;
	    }
	  }
	  /* Update opt_len to include the bit length tree and counts */
	  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
	  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
	  //        s->opt_len, s->static_len));

	  return max_blindex;
	}


	/* ===========================================================================
	 * Send the header for a block using dynamic Huffman trees: the counts, the
	 * lengths of the bit length codes, the literal tree and the distance tree.
	 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
	 */
	function send_all_trees(s, lcodes, dcodes, blcodes)
	//    deflate_state *s;
	//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
	{
	  var rank; /* index in bl_order */

	  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
	  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
	  //        "too many codes");
	  //Tracev((stderr, "\nbl counts: "));
	  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
	  send_bits(s, dcodes - 1, 5);
	  send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */
	  for (rank = 0; rank < blcodes; rank++) {
	    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
	    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1] /*.Len*/ , 3);
	  }
	  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
	  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
	  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
	}


	/* ===========================================================================
	 * Check if the data type is TEXT or BINARY, using the following algorithm:
	 * - TEXT if the two conditions below are satisfied:
	 *    a) There are no non-portable control characters belonging to the
	 *       "black list" (0..6, 14..25, 28..31).
	 *    b) There is at least one printable character belonging to the
	 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
	 * - BINARY otherwise.
	 * - The following partially-portable control characters form a
	 *   "gray list" that is ignored in this detection algorithm:
	 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
	 * IN assertion: the fields Freq of dyn_ltree are set.
	 */
	function detect_data_type(s) {
	  /* black_mask is the bit mask of black-listed bytes
	   * set bits 0..6, 14..25, and 28..31
	   * 0xf3ffc07f = binary 11110011111111111100000001111111
	   */
	  var black_mask = 0xf3ffc07f;
	  var n;

	  /* Check for non-textual ("black-listed") bytes. */
	  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
	    if ((black_mask & 1) && (s.dyn_ltree[n * 2] /*.Freq*/ !== 0)) {
	      return Z_BINARY;
	    }
	  }

	  /* Check for textual ("white-listed") bytes. */
	  if (s.dyn_ltree[9 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[10 * 2] /*.Freq*/ !== 0 ||
	    s.dyn_ltree[13 * 2] /*.Freq*/ !== 0) {
	    return Z_TEXT;
	  }
	  for (n = 32; n < LITERALS; n++) {
	    if (s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
	      return Z_TEXT;
	    }
	  }

	  /* There are no "black-listed" or "white-listed" bytes:
	   * this stream either is empty or has tolerated ("gray-listed") bytes only.
	   */
	  return Z_BINARY;
	}


	var static_init_done = false;

	/* ===========================================================================
	 * Initialize the tree data structures for a new zlib stream.
	 */
	function _tr_init(s) {

	  if (!static_init_done) {
	    tr_static_init();
	    static_init_done = true;
	  }

	  s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
	  s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
	  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

	  s.bi_buf = 0;
	  s.bi_valid = 0;

	  /* Initialize the first block of the first file: */
	  init_block(s);
	}


	/* ===========================================================================
	 * Send a stored block
	 */
	function _tr_stored_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */
	  copy_block(s, buf, stored_len, true); /* with header */
	}


	/* ===========================================================================
	 * Send one empty static block to give enough lookahead for inflate.
	 * This takes 10 bits, of which 7 may remain in the bit buffer.
	 */
	function _tr_align(s) {
	  send_bits(s, STATIC_TREES << 1, 3);
	  send_code(s, END_BLOCK, static_ltree);
	  bi_flush(s);
	}


	/* ===========================================================================
	 * Determine the best encoding for the current block: dynamic trees, static
	 * trees or store, and output the encoded block to the zip file.
	 */
	function _tr_flush_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block, or NULL if too old */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  var opt_lenb, static_lenb; /* opt_len and static_len in bytes */
	  var max_blindex = 0; /* index of last bit length code of non zero freq */

	  /* Build the Huffman trees unless a stored block is forced */
	  if (s.level > 0) {

	    /* Check if the file is binary or text */
	    if (s.strm.data_type === Z_UNKNOWN) {
	      s.strm.data_type = detect_data_type(s);
	    }

	    /* Construct the literal and distance trees */
	    build_tree(s, s.l_desc);
	    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));

	    build_tree(s, s.d_desc);
	    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));
	    /* At this point, opt_len and static_len are the total bit lengths of
	     * the compressed block data, excluding the tree representations.
	     */

	    /* Build the bit length tree for the above two trees, and get the index
	     * in bl_order of the last bit length code to send.
	     */
	    max_blindex = build_bl_tree(s);

	    /* Determine the best encoding. Compute the block lengths in bytes. */
	    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
	    static_lenb = (s.static_len + 3 + 7) >>> 3;

	    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
	    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
	    //        s->last_lit));

	    if (static_lenb <= opt_lenb) {
	      opt_lenb = static_lenb;
	    }

	  } else {
	    // Assert(buf != (char*)0, "lost buf");
	    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
	  }

	  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
	    /* 4: two words for the lengths */

	    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
	     * Otherwise we can't have processed more than WSIZE input bytes since
	     * the last block flush, because compression would have been
	     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
	     * transform a block into a stored block.
	     */
	    _tr_stored_block(s, buf, stored_len, last);

	  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

	    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
	    compress_block(s, static_ltree, static_dtree);

	  } else {
	    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
	    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
	    compress_block(s, s.dyn_ltree, s.dyn_dtree);
	  }
	  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
	  /* The above check is made mod 2^32, for files larger than 512 MB
	   * and uLong implemented on 32 bits.
	   */
	  init_block(s);

	  if (last) {
	    bi_windup(s);
	  }
	  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
	  //       s->compressed_len-7*last));
	}

	/* ===========================================================================
	 * Save the match info and tally the frequency counts. Return true if
	 * the current block must be flushed.
	 */
	function _tr_tally(s, dist, lc)
	//    deflate_state *s;
	//    unsigned dist;  /* distance of matched string */
	//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
	{
	  //var out_length, in_length, dcode;

	  s.pending_buf[s.d_buf + s.last_lit * 2] = (dist >>> 8) & 0xff;
	  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

	  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
	  s.last_lit++;

	  if (dist === 0) {
	    /* lc is the unmatched char */
	    s.dyn_ltree[lc * 2] /*.Freq*/ ++;
	  } else {
	    s.matches++;
	    /* Here, lc is the match length - MIN_MATCH */
	    dist--; /* dist = match distance - 1 */
	    //Assert((ush)dist < (ush)MAX_DIST(s) &&
	    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
	    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

	    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2] /*.Freq*/ ++;
	    s.dyn_dtree[d_code(dist) * 2] /*.Freq*/ ++;
	  }

	  // (!) This block is disabled in zlib defailts,
	  // don't enable it for binary compatibility

	  //#ifdef TRUNCATE_BLOCK
	  //  /* Try to guess if it is profitable to stop the current block here */
	  //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
	  //    /* Compute an upper bound for the compressed length */
	  //    out_length = s.last_lit*8;
	  //    in_length = s.strstart - s.block_start;
	  //
	  //    for (dcode = 0; dcode < D_CODES; dcode++) {
	  //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
	  //    }
	  //    out_length >>>= 3;
	  //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
	  //    //       s->last_lit, in_length, out_length,
	  //    //       100L - out_length*100L/in_length));
	  //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
	  //      return true;
	  //    }
	  //  }
	  //#endif

	  return (s.last_lit === s.lit_bufsize - 1);
	  /* We avoid equality with lit_bufsize because of wraparound at 64K
	   * on 16 bit machines and because stored blocks are restricted to
	   * 64K-1 bytes.
	   */
	}

	// Note: adler32 takes 12% for level 0 and 2% for level 6.
	// It doesn't worth to make additional optimizationa as in original.
	// Small size is preferable.

	function adler32(adler, buf, len, pos) {
	  var s1 = (adler & 0xffff) |0,
	      s2 = ((adler >>> 16) & 0xffff) |0,
	      n = 0;

	  while (len !== 0) {
	    // Set limit ~ twice less than 5552, to keep
	    // s2 in 31-bits, because we force signed ints.
	    // in other case %= will fail.
	    n = len > 2000 ? 2000 : len;
	    len -= n;

	    do {
	      s1 = (s1 + buf[pos++]) |0;
	      s2 = (s2 + s1) |0;
	    } while (--n);

	    s1 %= 65521;
	    s2 %= 65521;
	  }

	  return (s1 | (s2 << 16)) |0;
	}

	// Note: we can't get significant speed boost here.
	// So write code to minimize size - no pregenerated tables
	// and array tools dependencies.


	// Use ordinary array, since untyped makes no boost here
	function makeTable() {
	  var c, table = [];

	  for (var n = 0; n < 256; n++) {
	    c = n;
	    for (var k = 0; k < 8; k++) {
	      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
	    }
	    table[n] = c;
	  }

	  return table;
	}

	// Create table on load. Just 255 signed longs. Not a problem.
	var crcTable = makeTable();


	function crc32(crc, buf, len, pos) {
	  var t = crcTable,
	      end = pos + len;

	  crc ^= -1;

	  for (var i = pos; i < end; i++) {
	    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
	  }

	  return (crc ^ (-1)); // >>> 0;
	}

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	var Z_NO_FLUSH = 0;
	var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	var Z_FULL_FLUSH = 3;
	var Z_FINISH = 4;
	var Z_BLOCK = 5;
	//var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK = 0;
	var Z_STREAM_END = 1;
	//var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR = -2;
	var Z_DATA_ERROR = -3;
	//var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR = -5;
	//var Z_VERSION_ERROR = -6;


	/* compression levels */
	//var Z_NO_COMPRESSION      = 0;
	//var Z_BEST_SPEED          = 1;
	//var Z_BEST_COMPRESSION    = 9;
	var Z_DEFAULT_COMPRESSION = -1;


	var Z_FILTERED = 1;
	var Z_HUFFMAN_ONLY = 2;
	var Z_RLE = 3;
	var Z_FIXED$1 = 4;

	/* Possible values of the data_type field (though see inflate()) */
	//var Z_BINARY              = 0;
	//var Z_TEXT                = 1;
	//var Z_ASCII               = 1; // = Z_TEXT
	var Z_UNKNOWN$1 = 2;


	/* The deflate compression method */
	var Z_DEFLATED = 8;

	/*============================================================================*/


	var MAX_MEM_LEVEL = 9;


	var LENGTH_CODES$1 = 29;
	/* number of length codes, not counting the special END_BLOCK code */
	var LITERALS$1 = 256;
	/* number of literal bytes 0..255 */
	var L_CODES$1 = LITERALS$1 + 1 + LENGTH_CODES$1;
	/* number of Literal or Length codes, including the END_BLOCK code */
	var D_CODES$1 = 30;
	/* number of distance codes */
	var BL_CODES$1 = 19;
	/* number of codes used to transfer the bit lengths */
	var HEAP_SIZE$1 = 2 * L_CODES$1 + 1;
	/* maximum heap size */
	var MAX_BITS$1 = 15;
	/* All codes must not exceed MAX_BITS bits */

	var MIN_MATCH$1 = 3;
	var MAX_MATCH$1 = 258;
	var MIN_LOOKAHEAD = (MAX_MATCH$1 + MIN_MATCH$1 + 1);

	var PRESET_DICT = 0x20;

	var INIT_STATE = 42;
	var EXTRA_STATE = 69;
	var NAME_STATE = 73;
	var COMMENT_STATE = 91;
	var HCRC_STATE = 103;
	var BUSY_STATE = 113;
	var FINISH_STATE = 666;

	var BS_NEED_MORE = 1; /* block not completed, need more input or more output */
	var BS_BLOCK_DONE = 2; /* block flush performed */
	var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
	var BS_FINISH_DONE = 4; /* finish done, accept no more input or output */

	var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

	function err(strm, errorCode) {
	  strm.msg = msg[errorCode];
	  return errorCode;
	}

	function rank(f) {
	  return ((f) << 1) - ((f) > 4 ? 9 : 0);
	}

	function zero$2(buf) {
	  var len = buf.length;
	  while (--len >= 0) {
	    buf[len] = 0;
	  }
	}


	/* =========================================================================
	 * Flush as much pending output as possible. All deflate() output goes
	 * through this function so some applications may wish to modify it
	 * to avoid allocating a large strm->output buffer and copying into it.
	 * (See also read_buf()).
	 */
	function flush_pending(strm) {
	  var s = strm.state;

	  //_tr_flush_bits(s);
	  var len = s.pending;
	  if (len > strm.avail_out) {
	    len = strm.avail_out;
	  }
	  if (len === 0) {
	    return;
	  }

	  arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
	  strm.next_out += len;
	  s.pending_out += len;
	  strm.total_out += len;
	  strm.avail_out -= len;
	  s.pending -= len;
	  if (s.pending === 0) {
	    s.pending_out = 0;
	  }
	}


	function flush_block_only(s, last) {
	  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
	  s.block_start = s.strstart;
	  flush_pending(s.strm);
	}


	function put_byte(s, b) {
	  s.pending_buf[s.pending++] = b;
	}


	/* =========================================================================
	 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
	 * IN assertion: the stream state is correct and there is enough room in
	 * pending_buf.
	 */
	function putShortMSB(s, b) {
	  //  put_byte(s, (Byte)(b >> 8));
	  //  put_byte(s, (Byte)(b & 0xff));
	  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
	  s.pending_buf[s.pending++] = b & 0xff;
	}


	/* ===========================================================================
	 * Read a new buffer from the current input stream, update the adler32
	 * and total number of bytes read.  All deflate() input goes through
	 * this function so some applications may wish to modify it to avoid
	 * allocating a large strm->input buffer and copying from it.
	 * (See also flush_pending()).
	 */
	function read_buf(strm, buf, start, size) {
	  var len = strm.avail_in;

	  if (len > size) {
	    len = size;
	  }
	  if (len === 0) {
	    return 0;
	  }

	  strm.avail_in -= len;

	  // zmemcpy(buf, strm->next_in, len);
	  arraySet(buf, strm.input, strm.next_in, len, start);
	  if (strm.state.wrap === 1) {
	    strm.adler = adler32(strm.adler, buf, len, start);
	  } else if (strm.state.wrap === 2) {
	    strm.adler = crc32(strm.adler, buf, len, start);
	  }

	  strm.next_in += len;
	  strm.total_in += len;

	  return len;
	}


	/* ===========================================================================
	 * Set match_start to the longest match starting at the given string and
	 * return its length. Matches shorter or equal to prev_length are discarded,
	 * in which case the result is equal to prev_length and match_start is
	 * garbage.
	 * IN assertions: cur_match is the head of the hash chain for the current
	 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
	 * OUT assertion: the match length is not greater than s->lookahead.
	 */
	function longest_match(s, cur_match) {
	  var chain_length = s.max_chain_length; /* max hash chain length */
	  var scan = s.strstart; /* current string */
	  var match; /* matched string */
	  var len; /* length of current match */
	  var best_len = s.prev_length; /* best match length so far */
	  var nice_match = s.nice_match; /* stop if match long enough */
	  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
	    s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0 /*NIL*/ ;

	  var _win = s.window; // shortcut

	  var wmask = s.w_mask;
	  var prev = s.prev;

	  /* Stop when cur_match becomes <= limit. To simplify the code,
	   * we prevent matches with the string of window index 0.
	   */

	  var strend = s.strstart + MAX_MATCH$1;
	  var scan_end1 = _win[scan + best_len - 1];
	  var scan_end = _win[scan + best_len];

	  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
	   * It is easy to get rid of this optimization if necessary.
	   */
	  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

	  /* Do not waste too much time if we already have a good match: */
	  if (s.prev_length >= s.good_match) {
	    chain_length >>= 2;
	  }
	  /* Do not look for matches beyond the end of the input. This is necessary
	   * to make deflate deterministic.
	   */
	  if (nice_match > s.lookahead) {
	    nice_match = s.lookahead;
	  }

	  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

	  do {
	    // Assert(cur_match < s->strstart, "no future");
	    match = cur_match;

	    /* Skip to next match if the match length cannot increase
	     * or if the match length is less than 2.  Note that the checks below
	     * for insufficient lookahead only occur occasionally for performance
	     * reasons.  Therefore uninitialized memory will be accessed, and
	     * conditional jumps will be made that depend on those values.
	     * However the length of the match is limited to the lookahead, so
	     * the output of deflate is not affected by the uninitialized values.
	     */

	    if (_win[match + best_len] !== scan_end ||
	      _win[match + best_len - 1] !== scan_end1 ||
	      _win[match] !== _win[scan] ||
	      _win[++match] !== _win[scan + 1]) {
	      continue;
	    }

	    /* The check at best_len-1 can be removed because it will be made
	     * again later. (This heuristic is not always a win.)
	     * It is not necessary to compare scan[2] and match[2] since they
	     * are always equal when the other bytes match, given that
	     * the hash keys are equal and that HASH_BITS >= 8.
	     */
	    scan += 2;
	    match++;
	    // Assert(*scan == *match, "match[2]?");

	    /* We check for insufficient lookahead only every 8th comparison;
	     * the 256th check will be made at strstart+258.
	     */
	    do {
	      /*jshint noempty:false*/
	    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	      _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	      _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	      _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	      scan < strend);

	    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

	    len = MAX_MATCH$1 - (strend - scan);
	    scan = strend - MAX_MATCH$1;

	    if (len > best_len) {
	      s.match_start = cur_match;
	      best_len = len;
	      if (len >= nice_match) {
	        break;
	      }
	      scan_end1 = _win[scan + best_len - 1];
	      scan_end = _win[scan + best_len];
	    }
	  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

	  if (best_len <= s.lookahead) {
	    return best_len;
	  }
	  return s.lookahead;
	}


	/* ===========================================================================
	 * Fill the window when the lookahead becomes insufficient.
	 * Updates strstart and lookahead.
	 *
	 * IN assertion: lookahead < MIN_LOOKAHEAD
	 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
	 *    At least one byte has been read, or avail_in == 0; reads are
	 *    performed for at least two bytes (required for the zip translate_eol
	 *    option -- not supported here).
	 */
	function fill_window(s) {
	  var _w_size = s.w_size;
	  var p, n, m, more, str;

	  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

	  do {
	    more = s.window_size - s.lookahead - s.strstart;

	    // JS ints have 32 bit, block below not needed
	    /* Deal with !@#$% 64K limit: */
	    //if (sizeof(int) <= 2) {
	    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
	    //        more = wsize;
	    //
	    //  } else if (more == (unsigned)(-1)) {
	    //        /* Very unlikely, but possible on 16 bit machine if
	    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
	    //         */
	    //        more--;
	    //    }
	    //}


	    /* If the window is almost full and there is insufficient lookahead,
	     * move the upper half to the lower one to make room in the upper half.
	     */
	    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

	      arraySet(s.window, s.window, _w_size, _w_size, 0);
	      s.match_start -= _w_size;
	      s.strstart -= _w_size;
	      /* we now have strstart >= MAX_DIST */
	      s.block_start -= _w_size;

	      /* Slide the hash table (could be avoided with 32 bit values
	       at the expense of memory usage). We slide even when level == 0
	       to keep the hash table consistent if we switch back to level > 0
	       later. (Using level 0 permanently is not an optimal usage of
	       zlib, so we don't care about this pathological case.)
	       */

	      n = s.hash_size;
	      p = n;
	      do {
	        m = s.head[--p];
	        s.head[p] = (m >= _w_size ? m - _w_size : 0);
	      } while (--n);

	      n = _w_size;
	      p = n;
	      do {
	        m = s.prev[--p];
	        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
	        /* If n is not on any hash chain, prev[n] is garbage but
	         * its value will never be used.
	         */
	      } while (--n);

	      more += _w_size;
	    }
	    if (s.strm.avail_in === 0) {
	      break;
	    }

	    /* If there was no sliding:
	     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
	     *    more == window_size - lookahead - strstart
	     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
	     * => more >= window_size - 2*WSIZE + 2
	     * In the BIG_MEM or MMAP case (not yet supported),
	     *   window_size == input_size + MIN_LOOKAHEAD  &&
	     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
	     * Otherwise, window_size == 2*WSIZE so more >= 2.
	     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
	     */
	    //Assert(more >= 2, "more < 2");
	    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
	    s.lookahead += n;

	    /* Initialize the hash value now that we have some input: */
	    if (s.lookahead + s.insert >= MIN_MATCH$1) {
	      str = s.strstart - s.insert;
	      s.ins_h = s.window[str];

	      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
	      //#if MIN_MATCH != 3
	      //        Call update_hash() MIN_MATCH-3 more times
	      //#endif
	      while (s.insert) {
	        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH$1 - 1]) & s.hash_mask;

	        s.prev[str & s.w_mask] = s.head[s.ins_h];
	        s.head[s.ins_h] = str;
	        str++;
	        s.insert--;
	        if (s.lookahead + s.insert < MIN_MATCH$1) {
	          break;
	        }
	      }
	    }
	    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
	     * but this is not important since only literal bytes will be emitted.
	     */

	  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

	  /* If the WIN_INIT bytes after the end of the current data have never been
	   * written, then zero those bytes in order to avoid memory check reports of
	   * the use of uninitialized (or uninitialised as Julian writes) bytes by
	   * the longest match routines.  Update the high water mark for the next
	   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
	   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
	   */
	  //  if (s.high_water < s.window_size) {
	  //    var curr = s.strstart + s.lookahead;
	  //    var init = 0;
	  //
	  //    if (s.high_water < curr) {
	  //      /* Previous high water mark below current data -- zero WIN_INIT
	  //       * bytes or up to end of window, whichever is less.
	  //       */
	  //      init = s.window_size - curr;
	  //      if (init > WIN_INIT)
	  //        init = WIN_INIT;
	  //      zmemzero(s->window + curr, (unsigned)init);
	  //      s->high_water = curr + init;
	  //    }
	  //    else if (s->high_water < (ulg)curr + WIN_INIT) {
	  //      /* High water mark at or above current data, but below current data
	  //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
	  //       * to end of window, whichever is less.
	  //       */
	  //      init = (ulg)curr + WIN_INIT - s->high_water;
	  //      if (init > s->window_size - s->high_water)
	  //        init = s->window_size - s->high_water;
	  //      zmemzero(s->window + s->high_water, (unsigned)init);
	  //      s->high_water += init;
	  //    }
	  //  }
	  //
	  //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
	  //    "not enough room for search");
	}

	/* ===========================================================================
	 * Copy without compression as much as possible from the input stream, return
	 * the current block state.
	 * This function does not insert new strings in the dictionary since
	 * uncompressible data is probably not useful. This function is used
	 * only for the level=0 compression option.
	 * NOTE: this function should be optimized to avoid extra copying from
	 * window to pending_buf.
	 */
	function deflate_stored(s, flush) {
	  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
	   * to pending_buf_size, and each stored block has a 5 byte header:
	   */
	  var max_block_size = 0xffff;

	  if (max_block_size > s.pending_buf_size - 5) {
	    max_block_size = s.pending_buf_size - 5;
	  }

	  /* Copy as much as possible from input to output: */
	  for (;;) {
	    /* Fill the window as much as possible: */
	    if (s.lookahead <= 1) {

	      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
	      //  s->block_start >= (long)s->w_size, "slide too late");
	      //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
	      //        s.block_start >= s.w_size)) {
	      //        throw  new Error("slide too late");
	      //      }

	      fill_window(s);
	      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }

	      if (s.lookahead === 0) {
	        break;
	      }
	      /* flush the current block */
	    }
	    //Assert(s->block_start >= 0L, "block gone");
	    //    if (s.block_start < 0) throw new Error("block gone");

	    s.strstart += s.lookahead;
	    s.lookahead = 0;

	    /* Emit a stored block if pending_buf will be full: */
	    var max_start = s.block_start + max_block_size;

	    if (s.strstart === 0 || s.strstart >= max_start) {
	      /* strstart == 0 is possible when wraparound on 16-bit machine */
	      s.lookahead = s.strstart - max_start;
	      s.strstart = max_start;
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/


	    }
	    /* Flush if we may have to slide, otherwise block_start may become
	     * negative and the data will be gone:
	     */
	    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }

	  s.insert = 0;

	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }

	  if (s.strstart > s.block_start) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_NEED_MORE;
	}

	/* ===========================================================================
	 * Compress as much as possible from the input stream, return the current
	 * block state.
	 * This function does not perform lazy evaluation of matches and inserts
	 * new strings in the dictionary only for unmatched strings or for short
	 * matches. It is used only for the fast compression options.
	 */
	function deflate_fast(s, flush) {
	  var hash_head; /* head of the hash chain */
	  var bflush; /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break; /* flush the current block */
	      }
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0 /*NIL*/ ;
	    if (s.lookahead >= MIN_MATCH$1) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     * At this point we have always match_length < MIN_MATCH
	     */
	    if (hash_head !== 0 /*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */
	    }
	    if (s.match_length >= MIN_MATCH$1) {
	      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

	      /*** _tr_tally_dist(s, s.strstart - s.match_start,
	                     s.match_length - MIN_MATCH, bflush); ***/
	      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH$1);

	      s.lookahead -= s.match_length;

	      /* Insert new strings in the hash table only if the match length
	       * is not too large. This saves time but degrades compression.
	       */
	      if (s.match_length <= s.max_lazy_match /*max_insert_length*/ && s.lookahead >= MIN_MATCH$1) {
	        s.match_length--; /* string at strstart already in table */
	        do {
	          s.strstart++;
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
	           * always MIN_MATCH bytes ahead.
	           */
	        } while (--s.match_length !== 0);
	        s.strstart++;
	      } else {
	        s.strstart += s.match_length;
	        s.match_length = 0;
	        s.ins_h = s.window[s.strstart];
	        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

	        //#if MIN_MATCH != 3
	        //                Call UPDATE_HASH() MIN_MATCH-3 more times
	        //#endif
	        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
	         * matter since it will be recomputed at next deflate call.
	         */
	      }
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s.window[s.strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = _tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = ((s.strstart < (MIN_MATCH$1 - 1)) ? s.strstart : MIN_MATCH$1 - 1);
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * Same as above, but achieves better compression. We use a lazy
	 * evaluation for matches: a match is finally adopted only if there is
	 * no better match at the next window position.
	 */
	function deflate_slow(s, flush) {
	  var hash_head; /* head of hash chain */
	  var bflush; /* set if current block must be flushed */

	  var max_insert;

	  /* Process the input block. */
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break;
	      } /* flush the current block */
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0 /*NIL*/ ;
	    if (s.lookahead >= MIN_MATCH$1) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     */
	    s.prev_length = s.match_length;
	    s.prev_match = s.match_start;
	    s.match_length = MIN_MATCH$1 - 1;

	    if (hash_head !== 0 /*NIL*/ && s.prev_length < s.max_lazy_match &&
	      s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD) /*MAX_DIST(s)*/ ) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */

	      if (s.match_length <= 5 &&
	        (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH$1 && s.strstart - s.match_start > 4096 /*TOO_FAR*/ ))) {

	        /* If prev_match is also MIN_MATCH, match_start is garbage
	         * but we will ignore the current match anyway.
	         */
	        s.match_length = MIN_MATCH$1 - 1;
	      }
	    }
	    /* If there was a match at the previous step and the current
	     * match is not better, output the previous match:
	     */
	    if (s.prev_length >= MIN_MATCH$1 && s.match_length <= s.prev_length) {
	      max_insert = s.strstart + s.lookahead - MIN_MATCH$1;
	      /* Do not insert strings in hash table beyond this. */

	      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

	      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
	                     s.prev_length - MIN_MATCH, bflush);***/
	      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH$1);
	      /* Insert in hash table all strings up to the end of the match.
	       * strstart-1 and strstart are already inserted. If there is not
	       * enough lookahead, the last two strings are not inserted in
	       * the hash table.
	       */
	      s.lookahead -= s.prev_length - 1;
	      s.prev_length -= 2;
	      do {
	        if (++s.strstart <= max_insert) {
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	        }
	      } while (--s.prev_length !== 0);
	      s.match_available = 0;
	      s.match_length = MIN_MATCH$1 - 1;
	      s.strstart++;

	      if (bflush) {
	        /*** FLUSH_BLOCK(s, 0); ***/
	        flush_block_only(s, false);
	        if (s.strm.avail_out === 0) {
	          return BS_NEED_MORE;
	        }
	        /***/
	      }

	    } else if (s.match_available) {
	      /* If there was no match at the previous position, output a
	       * single literal. If there was a match but the current match
	       * is longer, truncate the previous match to a single literal.
	       */
	      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

	      if (bflush) {
	        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
	        flush_block_only(s, false);
	        /***/
	      }
	      s.strstart++;
	      s.lookahead--;
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	    } else {
	      /* There is no previous match to compare with, wait for
	       * the next step to decide.
	       */
	      s.match_available = 1;
	      s.strstart++;
	      s.lookahead--;
	    }
	  }
	  //Assert (flush != Z_NO_FLUSH, "no flush?");
	  if (s.match_available) {
	    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

	    s.match_available = 0;
	  }
	  s.insert = s.strstart < MIN_MATCH$1 - 1 ? s.strstart : MIN_MATCH$1 - 1;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_BLOCK_DONE;
	}


	/* ===========================================================================
	 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
	 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
	 * deflate switches away from Z_RLE.)
	 */
	function deflate_rle(s, flush) {
	  var bflush; /* set if current block must be flushed */
	  var prev; /* byte at distance one to match */
	  var scan, strend; /* scan goes up to strend for length of run */

	  var _win = s.window;

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the longest run, plus one for the unrolled loop.
	     */
	    if (s.lookahead <= MAX_MATCH$1) {
	      fill_window(s);
	      if (s.lookahead <= MAX_MATCH$1 && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break;
	      } /* flush the current block */
	    }

	    /* See how many times the previous byte repeats */
	    s.match_length = 0;
	    if (s.lookahead >= MIN_MATCH$1 && s.strstart > 0) {
	      scan = s.strstart - 1;
	      prev = _win[scan];
	      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
	        strend = s.strstart + MAX_MATCH$1;
	        do {
	          /*jshint noempty:false*/
	        } while (prev === _win[++scan] && prev === _win[++scan] &&
	          prev === _win[++scan] && prev === _win[++scan] &&
	          prev === _win[++scan] && prev === _win[++scan] &&
	          prev === _win[++scan] && prev === _win[++scan] &&
	          scan < strend);
	        s.match_length = MAX_MATCH$1 - (strend - scan);
	        if (s.match_length > s.lookahead) {
	          s.match_length = s.lookahead;
	        }
	      }
	      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
	    }

	    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
	    if (s.match_length >= MIN_MATCH$1) {
	      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

	      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
	      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH$1);

	      s.lookahead -= s.match_length;
	      s.strstart += s.match_length;
	      s.match_length = 0;
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s->window[s->strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = _tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
	 * (It will be regenerated if this run of deflate switches away from Huffman.)
	 */
	function deflate_huff(s, flush) {
	  var bflush; /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we have a literal to write. */
	    if (s.lookahead === 0) {
	      fill_window(s);
	      if (s.lookahead === 0) {
	        if (flush === Z_NO_FLUSH) {
	          return BS_NEED_MORE;
	        }
	        break; /* flush the current block */
	      }
	    }

	    /* Output a literal byte */
	    s.match_length = 0;
	    //Tracevv((stderr,"%c", s->window[s->strstart]));
	    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	    bflush = _tr_tally(s, 0, s.window[s.strstart]);
	    s.lookahead--;
	    s.strstart++;
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* Values for max_lazy_match, good_match and max_chain_length, depending on
	 * the desired pack level (0..9). The values given below have been tuned to
	 * exclude worst case performance for pathological files. Better values may be
	 * found for specific files.
	 */
	function Config(good_length, max_lazy, nice_length, max_chain, func) {
	  this.good_length = good_length;
	  this.max_lazy = max_lazy;
	  this.nice_length = nice_length;
	  this.max_chain = max_chain;
	  this.func = func;
	}

	var configuration_table;

	configuration_table = [
	  /*      good lazy nice chain */
	  new Config(0, 0, 0, 0, deflate_stored), /* 0 store only */
	  new Config(4, 4, 8, 4, deflate_fast), /* 1 max speed, no lazy matches */
	  new Config(4, 5, 16, 8, deflate_fast), /* 2 */
	  new Config(4, 6, 32, 32, deflate_fast), /* 3 */

	  new Config(4, 4, 16, 16, deflate_slow), /* 4 lazy matches */
	  new Config(8, 16, 32, 32, deflate_slow), /* 5 */
	  new Config(8, 16, 128, 128, deflate_slow), /* 6 */
	  new Config(8, 32, 128, 256, deflate_slow), /* 7 */
	  new Config(32, 128, 258, 1024, deflate_slow), /* 8 */
	  new Config(32, 258, 258, 4096, deflate_slow) /* 9 max compression */
	];


	/* ===========================================================================
	 * Initialize the "longest match" routines for a new zlib stream
	 */
	function lm_init(s) {
	  s.window_size = 2 * s.w_size;

	  /*** CLEAR_HASH(s); ***/
	  zero$2(s.head); // Fill with NIL (= 0);

	  /* Set the default configuration parameters:
	   */
	  s.max_lazy_match = configuration_table[s.level].max_lazy;
	  s.good_match = configuration_table[s.level].good_length;
	  s.nice_match = configuration_table[s.level].nice_length;
	  s.max_chain_length = configuration_table[s.level].max_chain;

	  s.strstart = 0;
	  s.block_start = 0;
	  s.lookahead = 0;
	  s.insert = 0;
	  s.match_length = s.prev_length = MIN_MATCH$1 - 1;
	  s.match_available = 0;
	  s.ins_h = 0;
	}


	function DeflateState() {
	  this.strm = null; /* pointer back to this zlib stream */
	  this.status = 0; /* as the name implies */
	  this.pending_buf = null; /* output still pending */
	  this.pending_buf_size = 0; /* size of pending_buf */
	  this.pending_out = 0; /* next pending byte to output to the stream */
	  this.pending = 0; /* nb of bytes in the pending buffer */
	  this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
	  this.gzhead = null; /* gzip header information to write */
	  this.gzindex = 0; /* where in extra, name, or comment */
	  this.method = Z_DEFLATED; /* can only be DEFLATED */
	  this.last_flush = -1; /* value of flush param for previous deflate call */

	  this.w_size = 0; /* LZ77 window size (32K by default) */
	  this.w_bits = 0; /* log2(w_size)  (8..16) */
	  this.w_mask = 0; /* w_size - 1 */

	  this.window = null;
	  /* Sliding window. Input bytes are read into the second half of the window,
	   * and move to the first half later to keep a dictionary of at least wSize
	   * bytes. With this organization, matches are limited to a distance of
	   * wSize-MAX_MATCH bytes, but this ensures that IO is always
	   * performed with a length multiple of the block size.
	   */

	  this.window_size = 0;
	  /* Actual size of window: 2*wSize, except when the user input buffer
	   * is directly used as sliding window.
	   */

	  this.prev = null;
	  /* Link to older string with same hash index. To limit the size of this
	   * array to 64K, this link is maintained only for the last 32K strings.
	   * An index in this array is thus a window index modulo 32K.
	   */

	  this.head = null; /* Heads of the hash chains or NIL. */

	  this.ins_h = 0; /* hash index of string to be inserted */
	  this.hash_size = 0; /* number of elements in hash table */
	  this.hash_bits = 0; /* log2(hash_size) */
	  this.hash_mask = 0; /* hash_size-1 */

	  this.hash_shift = 0;
	  /* Number of bits by which ins_h must be shifted at each input
	   * step. It must be such that after MIN_MATCH steps, the oldest
	   * byte no longer takes part in the hash key, that is:
	   *   hash_shift * MIN_MATCH >= hash_bits
	   */

	  this.block_start = 0;
	  /* Window position at the beginning of the current output block. Gets
	   * negative when the window is moved backwards.
	   */

	  this.match_length = 0; /* length of best match */
	  this.prev_match = 0; /* previous match */
	  this.match_available = 0; /* set if previous match exists */
	  this.strstart = 0; /* start of string to insert */
	  this.match_start = 0; /* start of matching string */
	  this.lookahead = 0; /* number of valid bytes ahead in window */

	  this.prev_length = 0;
	  /* Length of the best match at previous step. Matches not greater than this
	   * are discarded. This is used in the lazy match evaluation.
	   */

	  this.max_chain_length = 0;
	  /* To speed up deflation, hash chains are never searched beyond this
	   * length.  A higher limit improves compression ratio but degrades the
	   * speed.
	   */

	  this.max_lazy_match = 0;
	  /* Attempt to find a better match only when the current match is strictly
	   * smaller than this value. This mechanism is used only for compression
	   * levels >= 4.
	   */
	  // That's alias to max_lazy_match, don't use directly
	  //this.max_insert_length = 0;
	  /* Insert new strings in the hash table only if the match length is not
	   * greater than this length. This saves time but degrades compression.
	   * max_insert_length is used only for compression levels <= 3.
	   */

	  this.level = 0; /* compression level (1..9) */
	  this.strategy = 0; /* favor or force Huffman coding*/

	  this.good_match = 0;
	  /* Use a faster search when the previous match is longer than this */

	  this.nice_match = 0; /* Stop searching when current match exceeds this */

	  /* used by c: */

	  /* Didn't use ct_data typedef below to suppress compiler warning */

	  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
	  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
	  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

	  // Use flat array of DOUBLE size, with interleaved fata,
	  // because JS does not support effective
	  this.dyn_ltree = new Buf16(HEAP_SIZE$1 * 2);
	  this.dyn_dtree = new Buf16((2 * D_CODES$1 + 1) * 2);
	  this.bl_tree = new Buf16((2 * BL_CODES$1 + 1) * 2);
	  zero$2(this.dyn_ltree);
	  zero$2(this.dyn_dtree);
	  zero$2(this.bl_tree);

	  this.l_desc = null; /* desc. for literal tree */
	  this.d_desc = null; /* desc. for distance tree */
	  this.bl_desc = null; /* desc. for bit length tree */

	  //ush bl_count[MAX_BITS+1];
	  this.bl_count = new Buf16(MAX_BITS$1 + 1);
	  /* number of codes at each bit length for an optimal tree */

	  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
	  this.heap = new Buf16(2 * L_CODES$1 + 1); /* heap used to build the Huffman trees */
	  zero$2(this.heap);

	  this.heap_len = 0; /* number of elements in the heap */
	  this.heap_max = 0; /* element of largest frequency */
	  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
	   * The same heap array is used to build all
	   */

	  this.depth = new Buf16(2 * L_CODES$1 + 1); //uch depth[2*L_CODES+1];
	  zero$2(this.depth);
	  /* Depth of each subtree used as tie breaker for trees of equal frequency
	   */

	  this.l_buf = 0; /* buffer index for literals or lengths */

	  this.lit_bufsize = 0;
	  /* Size of match buffer for literals/lengths.  There are 4 reasons for
	   * limiting lit_bufsize to 64K:
	   *   - frequencies can be kept in 16 bit counters
	   *   - if compression is not successful for the first block, all input
	   *     data is still in the window so we can still emit a stored block even
	   *     when input comes from standard input.  (This can also be done for
	   *     all blocks if lit_bufsize is not greater than 32K.)
	   *   - if compression is not successful for a file smaller than 64K, we can
	   *     even emit a stored file instead of a stored block (saving 5 bytes).
	   *     This is applicable only for zip (not gzip or zlib).
	   *   - creating new Huffman trees less frequently may not provide fast
	   *     adaptation to changes in the input data statistics. (Take for
	   *     example a binary file with poorly compressible code followed by
	   *     a highly compressible string table.) Smaller buffer sizes give
	   *     fast adaptation but have of course the overhead of transmitting
	   *     trees more frequently.
	   *   - I can't count above 4
	   */

	  this.last_lit = 0; /* running index in l_buf */

	  this.d_buf = 0;
	  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
	   * the same number of elements. To use different lengths, an extra flag
	   * array would be necessary.
	   */

	  this.opt_len = 0; /* bit length of current block with optimal trees */
	  this.static_len = 0; /* bit length of current block with static trees */
	  this.matches = 0; /* number of string matches in current block */
	  this.insert = 0; /* bytes at end of window left to insert */


	  this.bi_buf = 0;
	  /* Output buffer. bits are inserted starting at the bottom (least
	   * significant bits).
	   */
	  this.bi_valid = 0;
	  /* Number of valid bits in bi_buf.  All bits above the last valid bit
	   * are always zero.
	   */

	  // Used for window memory init. We safely ignore it for JS. That makes
	  // sense only for pointers and memory check tools.
	  //this.high_water = 0;
	  /* High water mark offset in window for initialized bytes -- bytes above
	   * this are set to zero in order to avoid memory check warnings when
	   * longest match routines access bytes past the input.  This is then
	   * updated to the new high water mark.
	   */
	}


	function deflateResetKeep(strm) {
	  var s;

	  if (!strm || !strm.state) {
	    return err(strm, Z_STREAM_ERROR);
	  }

	  strm.total_in = strm.total_out = 0;
	  strm.data_type = Z_UNKNOWN$1;

	  s = strm.state;
	  s.pending = 0;
	  s.pending_out = 0;

	  if (s.wrap < 0) {
	    s.wrap = -s.wrap;
	    /* was made negative by deflate(..., Z_FINISH); */
	  }
	  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
	  strm.adler = (s.wrap === 2) ?
	    0 // crc32(0, Z_NULL, 0)
	    :
	    1; // adler32(0, Z_NULL, 0)
	  s.last_flush = Z_NO_FLUSH;
	  _tr_init(s);
	  return Z_OK;
	}


	function deflateReset(strm) {
	  var ret = deflateResetKeep(strm);
	  if (ret === Z_OK) {
	    lm_init(strm.state);
	  }
	  return ret;
	}


	function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
	  if (!strm) { // === Z_NULL
	    return Z_STREAM_ERROR;
	  }
	  var wrap = 1;

	  if (level === Z_DEFAULT_COMPRESSION) {
	    level = 6;
	  }

	  if (windowBits < 0) { /* suppress zlib wrapper */
	    wrap = 0;
	    windowBits = -windowBits;
	  } else if (windowBits > 15) {
	    wrap = 2; /* write gzip wrapper instead */
	    windowBits -= 16;
	  }


	  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
	    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
	    strategy < 0 || strategy > Z_FIXED$1) {
	    return err(strm, Z_STREAM_ERROR);
	  }


	  if (windowBits === 8) {
	    windowBits = 9;
	  }
	  /* until 256-byte window bug fixed */

	  var s = new DeflateState();

	  strm.state = s;
	  s.strm = strm;

	  s.wrap = wrap;
	  s.gzhead = null;
	  s.w_bits = windowBits;
	  s.w_size = 1 << s.w_bits;
	  s.w_mask = s.w_size - 1;

	  s.hash_bits = memLevel + 7;
	  s.hash_size = 1 << s.hash_bits;
	  s.hash_mask = s.hash_size - 1;
	  s.hash_shift = ~~((s.hash_bits + MIN_MATCH$1 - 1) / MIN_MATCH$1);

	  s.window = new Buf8(s.w_size * 2);
	  s.head = new Buf16(s.hash_size);
	  s.prev = new Buf16(s.w_size);

	  // Don't need mem init magic for JS.
	  //s.high_water = 0;  /* nothing written to s->window yet */

	  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

	  s.pending_buf_size = s.lit_bufsize * 4;

	  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
	  //s->pending_buf = (uchf *) overlay;
	  s.pending_buf = new Buf8(s.pending_buf_size);

	  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
	  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
	  s.d_buf = 1 * s.lit_bufsize;

	  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
	  s.l_buf = (1 + 2) * s.lit_bufsize;

	  s.level = level;
	  s.strategy = strategy;
	  s.method = method;

	  return deflateReset(strm);
	}


	function deflate(strm, flush) {
	  var old_flush, s;
	  var beg, val; // for gzip header write only

	  if (!strm || !strm.state ||
	    flush > Z_BLOCK || flush < 0) {
	    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
	  }

	  s = strm.state;

	  if (!strm.output ||
	    (!strm.input && strm.avail_in !== 0) ||
	    (s.status === FINISH_STATE && flush !== Z_FINISH)) {
	    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
	  }

	  s.strm = strm; /* just in case */
	  old_flush = s.last_flush;
	  s.last_flush = flush;

	  /* Write the header */
	  if (s.status === INIT_STATE) {
	    if (s.wrap === 2) {
	      // GZIP header
	      strm.adler = 0; //crc32(0L, Z_NULL, 0);
	      put_byte(s, 31);
	      put_byte(s, 139);
	      put_byte(s, 8);
	      if (!s.gzhead) { // s->gzhead == Z_NULL
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, s.level === 9 ? 2 :
	          (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	            4 : 0));
	        put_byte(s, OS_CODE);
	        s.status = BUSY_STATE;
	      } else {
	        put_byte(s, (s.gzhead.text ? 1 : 0) +
	          (s.gzhead.hcrc ? 2 : 0) +
	          (!s.gzhead.extra ? 0 : 4) +
	          (!s.gzhead.name ? 0 : 8) +
	          (!s.gzhead.comment ? 0 : 16)
	        );
	        put_byte(s, s.gzhead.time & 0xff);
	        put_byte(s, (s.gzhead.time >> 8) & 0xff);
	        put_byte(s, (s.gzhead.time >> 16) & 0xff);
	        put_byte(s, (s.gzhead.time >> 24) & 0xff);
	        put_byte(s, s.level === 9 ? 2 :
	          (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	            4 : 0));
	        put_byte(s, s.gzhead.os & 0xff);
	        if (s.gzhead.extra && s.gzhead.extra.length) {
	          put_byte(s, s.gzhead.extra.length & 0xff);
	          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
	        }
	        if (s.gzhead.hcrc) {
	          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
	        }
	        s.gzindex = 0;
	        s.status = EXTRA_STATE;
	      }
	    } else // DEFLATE header
	    {
	      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
	      var level_flags = -1;

	      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
	        level_flags = 0;
	      } else if (s.level < 6) {
	        level_flags = 1;
	      } else if (s.level === 6) {
	        level_flags = 2;
	      } else {
	        level_flags = 3;
	      }
	      header |= (level_flags << 6);
	      if (s.strstart !== 0) {
	        header |= PRESET_DICT;
	      }
	      header += 31 - (header % 31);

	      s.status = BUSY_STATE;
	      putShortMSB(s, header);

	      /* Save the adler32 of the preset dictionary: */
	      if (s.strstart !== 0) {
	        putShortMSB(s, strm.adler >>> 16);
	        putShortMSB(s, strm.adler & 0xffff);
	      }
	      strm.adler = 1; // adler32(0L, Z_NULL, 0);
	    }
	  }

	  //#ifdef GZIP
	  if (s.status === EXTRA_STATE) {
	    if (s.gzhead.extra /* != Z_NULL*/ ) {
	      beg = s.pending; /* start of bytes to update crc */

	      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            break;
	          }
	        }
	        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
	        s.gzindex++;
	      }
	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (s.gzindex === s.gzhead.extra.length) {
	        s.gzindex = 0;
	        s.status = NAME_STATE;
	      }
	    } else {
	      s.status = NAME_STATE;
	    }
	  }
	  if (s.status === NAME_STATE) {
	    if (s.gzhead.name /* != Z_NULL*/ ) {
	      beg = s.pending; /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.name.length) {
	          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.gzindex = 0;
	        s.status = COMMENT_STATE;
	      }
	    } else {
	      s.status = COMMENT_STATE;
	    }
	  }
	  if (s.status === COMMENT_STATE) {
	    if (s.gzhead.comment /* != Z_NULL*/ ) {
	      beg = s.pending; /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.comment.length) {
	          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.status = HCRC_STATE;
	      }
	    } else {
	      s.status = HCRC_STATE;
	    }
	  }
	  if (s.status === HCRC_STATE) {
	    if (s.gzhead.hcrc) {
	      if (s.pending + 2 > s.pending_buf_size) {
	        flush_pending(strm);
	      }
	      if (s.pending + 2 <= s.pending_buf_size) {
	        put_byte(s, strm.adler & 0xff);
	        put_byte(s, (strm.adler >> 8) & 0xff);
	        strm.adler = 0; //crc32(0L, Z_NULL, 0);
	        s.status = BUSY_STATE;
	      }
	    } else {
	      s.status = BUSY_STATE;
	    }
	  }
	  //#endif

	  /* Flush as much pending output as possible */
	  if (s.pending !== 0) {
	    flush_pending(strm);
	    if (strm.avail_out === 0) {
	      /* Since avail_out is 0, deflate will be called again with
	       * more output space, but possibly with both pending and
	       * avail_in equal to zero. There won't be anything to do,
	       * but this is not an error situation so make sure we
	       * return OK instead of BUF_ERROR at next call of deflate:
	       */
	      s.last_flush = -1;
	      return Z_OK;
	    }

	    /* Make sure there is something to do and avoid duplicate consecutive
	     * flushes. For repeated and useless calls with Z_FINISH, we keep
	     * returning Z_STREAM_END instead of Z_BUF_ERROR.
	     */
	  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
	    flush !== Z_FINISH) {
	    return err(strm, Z_BUF_ERROR);
	  }

	  /* User must not provide more input after the first FINISH: */
	  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
	    return err(strm, Z_BUF_ERROR);
	  }

	  /* Start a new block or continue the current one.
	   */
	  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
	    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
	    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
	      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
	        configuration_table[s.level].func(s, flush));

	    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
	      s.status = FINISH_STATE;
	    }
	    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
	      if (strm.avail_out === 0) {
	        s.last_flush = -1;
	        /* avoid BUF_ERROR next call, see above */
	      }
	      return Z_OK;
	      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
	       * of deflate should use the same flush parameter to make sure
	       * that the flush is complete. So we don't have to output an
	       * empty block here, this will be done at next call. This also
	       * ensures that for a very small output buffer, we emit at most
	       * one empty block.
	       */
	    }
	    if (bstate === BS_BLOCK_DONE) {
	      if (flush === Z_PARTIAL_FLUSH) {
	        _tr_align(s);
	      } else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

	        _tr_stored_block(s, 0, 0, false);
	        /* For a full flush, this empty block will be recognized
	         * as a special marker by inflate_sync().
	         */
	        if (flush === Z_FULL_FLUSH) {
	          /*** CLEAR_HASH(s); ***/
	          /* forget history */
	          zero$2(s.head); // Fill with NIL (= 0);

	          if (s.lookahead === 0) {
	            s.strstart = 0;
	            s.block_start = 0;
	            s.insert = 0;
	          }
	        }
	      }
	      flush_pending(strm);
	      if (strm.avail_out === 0) {
	        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
	        return Z_OK;
	      }
	    }
	  }
	  //Assert(strm->avail_out > 0, "bug2");
	  //if (strm.avail_out <= 0) { throw new Error("bug2");}

	  if (flush !== Z_FINISH) {
	    return Z_OK;
	  }
	  if (s.wrap <= 0) {
	    return Z_STREAM_END;
	  }

	  /* Write the trailer */
	  if (s.wrap === 2) {
	    put_byte(s, strm.adler & 0xff);
	    put_byte(s, (strm.adler >> 8) & 0xff);
	    put_byte(s, (strm.adler >> 16) & 0xff);
	    put_byte(s, (strm.adler >> 24) & 0xff);
	    put_byte(s, strm.total_in & 0xff);
	    put_byte(s, (strm.total_in >> 8) & 0xff);
	    put_byte(s, (strm.total_in >> 16) & 0xff);
	    put_byte(s, (strm.total_in >> 24) & 0xff);
	  } else {
	    putShortMSB(s, strm.adler >>> 16);
	    putShortMSB(s, strm.adler & 0xffff);
	  }

	  flush_pending(strm);
	  /* If avail_out is zero, the application will call deflate again
	   * to flush the rest.
	   */
	  if (s.wrap > 0) {
	    s.wrap = -s.wrap;
	  }
	  /* write the trailer only once! */
	  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
	}

	function deflateEnd(strm) {
	  var status;

	  if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/ ) {
	    return Z_STREAM_ERROR;
	  }

	  status = strm.state.status;
	  if (status !== INIT_STATE &&
	    status !== EXTRA_STATE &&
	    status !== NAME_STATE &&
	    status !== COMMENT_STATE &&
	    status !== HCRC_STATE &&
	    status !== BUSY_STATE &&
	    status !== FINISH_STATE
	  ) {
	    return err(strm, Z_STREAM_ERROR);
	  }

	  strm.state = null;

	  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
	}

	/* Not implemented
	exports.deflateBound = deflateBound;
	exports.deflateCopy = deflateCopy;
	exports.deflateParams = deflateParams;
	exports.deflatePending = deflatePending;
	exports.deflatePrime = deflatePrime;
	exports.deflateTune = deflateTune;
	*/

	// See state defs from inflate.js
	var BAD = 30;       /* got a data error -- remain here until reset */
	var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

	/*
	   Decode literal, length, and distance codes and write out the resulting
	   literal and match bytes until either not enough input or output is
	   available, an end-of-block is encountered, or a data error is encountered.
	   When large enough input and output buffers are supplied to inflate(), for
	   example, a 16K input buffer and a 64K output buffer, more than 95% of the
	   inflate execution time is spent in this routine.

	   Entry assumptions:

	        state.mode === LEN
	        strm.avail_in >= 6
	        strm.avail_out >= 258
	        start >= strm.avail_out
	        state.bits < 8

	   On return, state.mode is one of:

	        LEN -- ran out of enough output space or enough available input
	        TYPE -- reached end of block code, inflate() to interpret next block
	        BAD -- error in block data

	   Notes:

	    - The maximum input bits used by a length/distance pair is 15 bits for the
	      length code, 5 bits for the length extra, 15 bits for the distance code,
	      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	      Therefore if strm.avail_in >= 6, then there is enough input to avoid
	      checking for available input while decoding.

	    - The maximum bytes that a single length/distance pair can output is 258
	      bytes, which is the maximum length that can be coded.  inflate_fast()
	      requires strm.avail_out >= 258 for each loop to avoid checking for
	      output space.
	 */
	function inflate_fast(strm, start) {
	  var state;
	  var _in;                    /* local strm.input */
	  var last;                   /* have enough input while in < last */
	  var _out;                   /* local strm.output */
	  var beg;                    /* inflate()'s initial strm.output */
	  var end;                    /* while out < end, enough space available */
	//#ifdef INFLATE_STRICT
	  var dmax;                   /* maximum distance from zlib header */
	//#endif
	  var wsize;                  /* window size or zero if not using window */
	  var whave;                  /* valid bytes in the window */
	  var wnext;                  /* window write index */
	  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
	  var s_window;               /* allocated sliding window, if wsize != 0 */
	  var hold;                   /* local strm.hold */
	  var bits;                   /* local strm.bits */
	  var lcode;                  /* local strm.lencode */
	  var dcode;                  /* local strm.distcode */
	  var lmask;                  /* mask for first level of length codes */
	  var dmask;                  /* mask for first level of distance codes */
	  var here;                   /* retrieved table entry */
	  var op;                     /* code bits, operation, extra bits, or */
	                              /*  window position, window bytes to copy */
	  var len;                    /* match length, unused bytes */
	  var dist;                   /* match distance */
	  var from;                   /* where to copy match from */
	  var from_source;


	  var input, output; // JS specific, because we have no pointers

	  /* copy state to local variables */
	  state = strm.state;
	  //here = state.here;
	  _in = strm.next_in;
	  input = strm.input;
	  last = _in + (strm.avail_in - 5);
	  _out = strm.next_out;
	  output = strm.output;
	  beg = _out - (start - strm.avail_out);
	  end = _out + (strm.avail_out - 257);
	//#ifdef INFLATE_STRICT
	  dmax = state.dmax;
	//#endif
	  wsize = state.wsize;
	  whave = state.whave;
	  wnext = state.wnext;
	  s_window = state.window;
	  hold = state.hold;
	  bits = state.bits;
	  lcode = state.lencode;
	  dcode = state.distcode;
	  lmask = (1 << state.lenbits) - 1;
	  dmask = (1 << state.distbits) - 1;


	  /* decode literals and length/distances until end-of-block or not enough
	     input data or output space */

	  top:
	  do {
	    if (bits < 15) {
	      hold += input[_in++] << bits;
	      bits += 8;
	      hold += input[_in++] << bits;
	      bits += 8;
	    }

	    here = lcode[hold & lmask];

	    dolen:
	    for (;;) { // Goto emulation
	      op = here >>> 24/*here.bits*/;
	      hold >>>= op;
	      bits -= op;
	      op = (here >>> 16) & 0xff/*here.op*/;
	      if (op === 0) {                          /* literal */
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        output[_out++] = here & 0xffff/*here.val*/;
	      }
	      else if (op & 16) {                     /* length base */
	        len = here & 0xffff/*here.val*/;
	        op &= 15;                           /* number of extra bits */
	        if (op) {
	          if (bits < op) {
	            hold += input[_in++] << bits;
	            bits += 8;
	          }
	          len += hold & ((1 << op) - 1);
	          hold >>>= op;
	          bits -= op;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", len));
	        if (bits < 15) {
	          hold += input[_in++] << bits;
	          bits += 8;
	          hold += input[_in++] << bits;
	          bits += 8;
	        }
	        here = dcode[hold & dmask];

	        dodist:
	        for (;;) { // goto emulation
	          op = here >>> 24/*here.bits*/;
	          hold >>>= op;
	          bits -= op;
	          op = (here >>> 16) & 0xff/*here.op*/;

	          if (op & 16) {                      /* distance base */
	            dist = here & 0xffff/*here.val*/;
	            op &= 15;                       /* number of extra bits */
	            if (bits < op) {
	              hold += input[_in++] << bits;
	              bits += 8;
	              if (bits < op) {
	                hold += input[_in++] << bits;
	                bits += 8;
	              }
	            }
	            dist += hold & ((1 << op) - 1);
	//#ifdef INFLATE_STRICT
	            if (dist > dmax) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD;
	              break top;
	            }
	//#endif
	            hold >>>= op;
	            bits -= op;
	            //Tracevv((stderr, "inflate:         distance %u\n", dist));
	            op = _out - beg;                /* max distance in output */
	            if (dist > op) {                /* see if copy from window */
	              op = dist - op;               /* distance back in window */
	              if (op > whave) {
	                if (state.sane) {
	                  strm.msg = 'invalid distance too far back';
	                  state.mode = BAD;
	                  break top;
	                }

	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//                if (len <= op - whave) {
	//                  do {
	//                    output[_out++] = 0;
	//                  } while (--len);
	//                  continue top;
	//                }
	//                len -= op - whave;
	//                do {
	//                  output[_out++] = 0;
	//                } while (--op > whave);
	//                if (op === 0) {
	//                  from = _out - dist;
	//                  do {
	//                    output[_out++] = output[from++];
	//                  } while (--len);
	//                  continue top;
	//                }
	//#endif
	              }
	              from = 0; // window index
	              from_source = s_window;
	              if (wnext === 0) {           /* very common case */
	                from += wsize - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              else if (wnext < op) {      /* wrap around window */
	                from += wsize + wnext - op;
	                op -= wnext;
	                if (op < len) {         /* some from end of window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = 0;
	                  if (wnext < len) {  /* some from start of window */
	                    op = wnext;
	                    len -= op;
	                    do {
	                      output[_out++] = s_window[from++];
	                    } while (--op);
	                    from = _out - dist;      /* rest from output */
	                    from_source = output;
	                  }
	                }
	              }
	              else {                      /* contiguous in window */
	                from += wnext - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              while (len > 2) {
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                len -= 3;
	              }
	              if (len) {
	                output[_out++] = from_source[from++];
	                if (len > 1) {
	                  output[_out++] = from_source[from++];
	                }
	              }
	            }
	            else {
	              from = _out - dist;          /* copy direct from output */
	              do {                        /* minimum length is three */
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                len -= 3;
	              } while (len > 2);
	              if (len) {
	                output[_out++] = output[from++];
	                if (len > 1) {
	                  output[_out++] = output[from++];
	                }
	              }
	            }
	          }
	          else if ((op & 64) === 0) {          /* 2nd level distance code */
	            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	            continue dodist;
	          }
	          else {
	            strm.msg = 'invalid distance code';
	            state.mode = BAD;
	            break top;
	          }

	          break; // need to emulate goto via "continue"
	        }
	      }
	      else if ((op & 64) === 0) {              /* 2nd level length code */
	        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	        continue dolen;
	      }
	      else if (op & 32) {                     /* end-of-block */
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.mode = TYPE;
	        break top;
	      }
	      else {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break top;
	      }

	      break; // need to emulate goto via "continue"
	    }
	  } while (_in < last && _out < end);

	  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
	  len = bits >> 3;
	  _in -= len;
	  bits -= len << 3;
	  hold &= (1 << bits) - 1;

	  /* update state and return */
	  strm.next_in = _in;
	  strm.next_out = _out;
	  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
	  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
	  state.hold = hold;
	  state.bits = bits;
	  return;
	}

	var MAXBITS = 15;
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	var lbase = [ /* Length codes 257..285 base */
	  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
	  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
	];

	var lext = [ /* Length codes 257..285 extra */
	  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
	  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
	];

	var dbase = [ /* Distance codes 0..29 base */
	  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
	  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
	  8193, 12289, 16385, 24577, 0, 0
	];

	var dext = [ /* Distance codes 0..29 extra */
	  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
	  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
	  28, 28, 29, 29, 64, 64
	];

	function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
	  var bits = opts.bits;
	  //here = opts.here; /* table entry for duplication */

	  var len = 0; /* a code's length in bits */
	  var sym = 0; /* index of code symbols */
	  var min = 0,
	    max = 0; /* minimum and maximum code lengths */
	  var root = 0; /* number of index bits for root table */
	  var curr = 0; /* number of index bits for current table */
	  var drop = 0; /* code bits to drop for sub-table */
	  var left = 0; /* number of prefix codes available */
	  var used = 0; /* code entries in table used */
	  var huff = 0; /* Huffman code */
	  var incr; /* for incrementing code, index */
	  var fill; /* index for replicating entries */
	  var low; /* low bits for current root entry */
	  var mask; /* mask for low root bits */
	  var next; /* next available space in table */
	  var base = null; /* base value table to use */
	  var base_index = 0;
	  //  var shoextra;    /* extra bits table to use */
	  var end; /* use base and extra for symbol > end */
	  var count = new Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
	  var offs = new Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
	  var extra = null;
	  var extra_index = 0;

	  var here_bits, here_op, here_val;

	  /*
	   Process a set of code lengths to create a canonical Huffman code.  The
	   code lengths are lens[0..codes-1].  Each length corresponds to the
	   symbols 0..codes-1.  The Huffman code is generated by first sorting the
	   symbols by length from short to long, and retaining the symbol order
	   for codes with equal lengths.  Then the code starts with all zero bits
	   for the first code of the shortest length, and the codes are integer
	   increments for the same length, and zeros are appended as the length
	   increases.  For the deflate format, these bits are stored backwards
	   from their more natural integer increment ordering, and so when the
	   decoding tables are built in the large loop below, the integer codes
	   are incremented backwards.

	   This routine assumes, but does not check, that all of the entries in
	   lens[] are in the range 0..MAXBITS.  The caller must assure this.
	   1..MAXBITS is interpreted as that code length.  zero means that that
	   symbol does not occur in this code.

	   The codes are sorted by computing a count of codes for each length,
	   creating from that a table of starting indices for each length in the
	   sorted table, and then entering the symbols in order in the sorted
	   table.  The sorted table is work[], with that space being provided by
	   the caller.

	   The length counts are used for other purposes as well, i.e. finding
	   the minimum and maximum length codes, determining if there are any
	   codes at all, checking for a valid set of lengths, and looking ahead
	   at length counts to determine sub-table sizes when building the
	   decoding tables.
	   */

	  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
	  for (len = 0; len <= MAXBITS; len++) {
	    count[len] = 0;
	  }
	  for (sym = 0; sym < codes; sym++) {
	    count[lens[lens_index + sym]]++;
	  }

	  /* bound code lengths, force root to be within code lengths */
	  root = bits;
	  for (max = MAXBITS; max >= 1; max--) {
	    if (count[max] !== 0) {
	      break;
	    }
	  }
	  if (root > max) {
	    root = max;
	  }
	  if (max === 0) { /* no symbols to code at all */
	    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
	    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
	    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;


	    //table.op[opts.table_index] = 64;
	    //table.bits[opts.table_index] = 1;
	    //table.val[opts.table_index++] = 0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;

	    opts.bits = 1;
	    return 0; /* no symbols, but wait for decoding to report error */
	  }
	  for (min = 1; min < max; min++) {
	    if (count[min] !== 0) {
	      break;
	    }
	  }
	  if (root < min) {
	    root = min;
	  }

	  /* check for an over-subscribed or incomplete set of lengths */
	  left = 1;
	  for (len = 1; len <= MAXBITS; len++) {
	    left <<= 1;
	    left -= count[len];
	    if (left < 0) {
	      return -1;
	    } /* over-subscribed */
	  }
	  if (left > 0 && (type === CODES || max !== 1)) {
	    return -1; /* incomplete set */
	  }

	  /* generate offsets into symbol table for each length for sorting */
	  offs[1] = 0;
	  for (len = 1; len < MAXBITS; len++) {
	    offs[len + 1] = offs[len] + count[len];
	  }

	  /* sort symbols by length, by symbol order within each length */
	  for (sym = 0; sym < codes; sym++) {
	    if (lens[lens_index + sym] !== 0) {
	      work[offs[lens[lens_index + sym]]++] = sym;
	    }
	  }

	  /*
	   Create and fill in decoding tables.  In this loop, the table being
	   filled is at next and has curr index bits.  The code being used is huff
	   with length len.  That code is converted to an index by dropping drop
	   bits off of the bottom.  For codes where len is less than drop + curr,
	   those top drop + curr - len bits are incremented through all values to
	   fill the table with replicated entries.

	   root is the number of index bits for the root table.  When len exceeds
	   root, sub-tables are created pointed to by the root entry with an index
	   of the low root bits of huff.  This is saved in low to check for when a
	   new sub-table should be started.  drop is zero when the root table is
	   being filled, and drop is root when sub-tables are being filled.

	   When a new sub-table is needed, it is necessary to look ahead in the
	   code lengths to determine what size sub-table is needed.  The length
	   counts are used for this, and so count[] is decremented as codes are
	   entered in the tables.

	   used keeps track of how many table entries have been allocated from the
	   provided *table space.  It is checked for LENS and DIST tables against
	   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	   the initial root table size constants.  See the comments in inftrees.h
	   for more information.

	   sym increments through all symbols, and the loop terminates when
	   all codes of length max, i.e. all codes, have been processed.  This
	   routine permits incomplete codes, so another loop after this one fills
	   in the rest of the decoding tables with invalid code markers.
	   */

	  /* set up for code type */
	  // poor man optimization - use if-else instead of switch,
	  // to avoid deopts in old v8
	  if (type === CODES) {
	    base = extra = work; /* dummy value--not used */
	    end = 19;

	  } else if (type === LENS) {
	    base = lbase;
	    base_index -= 257;
	    extra = lext;
	    extra_index -= 257;
	    end = 256;

	  } else { /* DISTS */
	    base = dbase;
	    extra = dext;
	    end = -1;
	  }

	  /* initialize opts for loop */
	  huff = 0; /* starting code */
	  sym = 0; /* starting code symbol */
	  len = min; /* starting code length */
	  next = table_index; /* current table to fill in */
	  curr = root; /* current table index bits */
	  drop = 0; /* current bits to drop from code for index */
	  low = -1; /* trigger new sub-table when len > root */
	  used = 1 << root; /* use root table entries */
	  mask = used - 1; /* mask for comparing low */

	  /* check available table space */
	  if ((type === LENS && used > ENOUGH_LENS) ||
	    (type === DISTS && used > ENOUGH_DISTS)) {
	    return 1;
	  }
	  /* process all codes and make table entries */
	  for (;;) {
	    /* create table entry */
	    here_bits = len - drop;
	    if (work[sym] < end) {
	      here_op = 0;
	      here_val = work[sym];
	    } else if (work[sym] > end) {
	      here_op = extra[extra_index + work[sym]];
	      here_val = base[base_index + work[sym]];
	    } else {
	      here_op = 32 + 64; /* end of block */
	      here_val = 0;
	    }

	    /* replicate for those indices with low len bits equal to huff */
	    incr = 1 << (len - drop);
	    fill = 1 << curr;
	    min = fill; /* save offset to next table */
	    do {
	      fill -= incr;
	      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val | 0;
	    } while (fill !== 0);

	    /* backwards increment the len-bit code huff */
	    incr = 1 << (len - 1);
	    while (huff & incr) {
	      incr >>= 1;
	    }
	    if (incr !== 0) {
	      huff &= incr - 1;
	      huff += incr;
	    } else {
	      huff = 0;
	    }

	    /* go to next symbol, update count, len */
	    sym++;
	    if (--count[len] === 0) {
	      if (len === max) {
	        break;
	      }
	      len = lens[lens_index + work[sym]];
	    }

	    /* create new sub-table if needed */
	    if (len > root && (huff & mask) !== low) {
	      /* if first time, transition to sub-tables */
	      if (drop === 0) {
	        drop = root;
	      }

	      /* increment past last table */
	      next += min; /* here min is 1 << curr */

	      /* determine length of next table */
	      curr = len - drop;
	      left = 1 << curr;
	      while (curr + drop < max) {
	        left -= count[curr + drop];
	        if (left <= 0) {
	          break;
	        }
	        curr++;
	        left <<= 1;
	      }

	      /* check for enough space */
	      used += 1 << curr;
	      if ((type === LENS && used > ENOUGH_LENS) ||
	        (type === DISTS && used > ENOUGH_DISTS)) {
	        return 1;
	      }

	      /* point entry in root table to sub-table */
	      low = huff & mask;
	      /*table.op[low] = curr;
	      table.bits[low] = root;
	      table.val[low] = next - opts.table_index;*/
	      table[low] = (root << 24) | (curr << 16) | (next - table_index) | 0;
	    }
	  }

	  /* fill in remaining table entry if code is incomplete (guaranteed to have
	   at most one remaining entry, since if the code is incomplete, the
	   maximum code length that was allowed to get this far is one bit) */
	  if (huff !== 0) {
	    //table.op[next + huff] = 64;            /* invalid code marker */
	    //table.bits[next + huff] = len - drop;
	    //table.val[next + huff] = 0;
	    table[next + huff] = ((len - drop) << 24) | (64 << 16) | 0;
	  }

	  /* set return parameters */
	  //opts.table_index += used;
	  opts.bits = root;
	  return 0;
	}

	var CODES$1 = 0;
	var LENS$1 = 1;
	var DISTS$1 = 2;

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	//var Z_NO_FLUSH      = 0;
	//var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	//var Z_FULL_FLUSH    = 3;
	var Z_FINISH$1 = 4;
	var Z_BLOCK$1 = 5;
	var Z_TREES = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK$1 = 0;
	var Z_STREAM_END$1 = 1;
	var Z_NEED_DICT = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR$1 = -2;
	var Z_DATA_ERROR$1 = -3;
	var Z_MEM_ERROR = -4;
	var Z_BUF_ERROR$1 = -5;
	//var Z_VERSION_ERROR = -6;

	/* The deflate compression method */
	var Z_DEFLATED$1 = 8;


	/* STATES ====================================================================*/
	/* ===========================================================================*/


	var HEAD = 1; /* i: waiting for magic header */
	var FLAGS = 2; /* i: waiting for method and flags (gzip) */
	var TIME = 3; /* i: waiting for modification time (gzip) */
	var OS = 4; /* i: waiting for extra flags and operating system (gzip) */
	var EXLEN = 5; /* i: waiting for extra length (gzip) */
	var EXTRA = 6; /* i: waiting for extra bytes (gzip) */
	var NAME = 7; /* i: waiting for end of file name (gzip) */
	var COMMENT = 8; /* i: waiting for end of comment (gzip) */
	var HCRC = 9; /* i: waiting for header crc (gzip) */
	var DICTID = 10; /* i: waiting for dictionary check value */
	var DICT = 11; /* waiting for inflateSetDictionary() call */
	var TYPE$1 = 12; /* i: waiting for type bits, including last-flag bit */
	var TYPEDO = 13; /* i: same, but skip check to exit inflate on new block */
	var STORED = 14; /* i: waiting for stored size (length and complement) */
	var COPY_ = 15; /* i/o: same as COPY below, but only first time in */
	var COPY$2 = 16; /* i/o: waiting for input or output to copy stored block */
	var TABLE = 17; /* i: waiting for dynamic block table lengths */
	var LENLENS = 18; /* i: waiting for code length code lengths */
	var CODELENS = 19; /* i: waiting for length/lit and distance code lengths */
	var LEN_ = 20; /* i: same as LEN below, but only first time in */
	var LEN = 21; /* i: waiting for length/lit/eob code */
	var LENEXT = 22; /* i: waiting for length extra bits */
	var DIST = 23; /* i: waiting for distance code */
	var DISTEXT = 24; /* i: waiting for distance extra bits */
	var MATCH = 25; /* o: waiting for output space to copy string */
	var LIT = 26; /* o: waiting for output space to write literal */
	var CHECK = 27; /* i: waiting for 32-bit check value */
	var LENGTH = 28; /* i: waiting for 32-bit length (gzip) */
	var DONE = 29; /* finished check, done -- remain here until reset */
	var BAD$1 = 30; /* got a data error -- remain here until reset */
	var MEM = 31; /* got an inflate() memory error -- remain here until reset */
	var SYNC = 32; /* looking for synchronization bytes to restart inflate() */

	/* ===========================================================================*/



	var ENOUGH_LENS$1 = 852;
	var ENOUGH_DISTS$1 = 592;


	function zswap32(q) {
	  return (((q >>> 24) & 0xff) +
	    ((q >>> 8) & 0xff00) +
	    ((q & 0xff00) << 8) +
	    ((q & 0xff) << 24));
	}


	function InflateState() {
	  this.mode = 0; /* current inflate mode */
	  this.last = false; /* true if processing last block */
	  this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
	  this.havedict = false; /* true if dictionary provided */
	  this.flags = 0; /* gzip header method and flags (0 if zlib) */
	  this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */
	  this.check = 0; /* protected copy of check value */
	  this.total = 0; /* protected copy of output count */
	  // TODO: may be {}
	  this.head = null; /* where to save gzip header information */

	  /* sliding window */
	  this.wbits = 0; /* log base 2 of requested window size */
	  this.wsize = 0; /* window size or zero if not using window */
	  this.whave = 0; /* valid bytes in the window */
	  this.wnext = 0; /* window write index */
	  this.window = null; /* allocated sliding window, if needed */

	  /* bit accumulator */
	  this.hold = 0; /* input bit accumulator */
	  this.bits = 0; /* number of bits in "in" */

	  /* for string and stored block copying */
	  this.length = 0; /* literal or length of data to copy */
	  this.offset = 0; /* distance back to copy string from */

	  /* for table and code decoding */
	  this.extra = 0; /* extra bits needed */

	  /* fixed and dynamic code tables */
	  this.lencode = null; /* starting table for length/literal codes */
	  this.distcode = null; /* starting table for distance codes */
	  this.lenbits = 0; /* index bits for lencode */
	  this.distbits = 0; /* index bits for distcode */

	  /* dynamic table building */
	  this.ncode = 0; /* number of code length code lengths */
	  this.nlen = 0; /* number of length code lengths */
	  this.ndist = 0; /* number of distance code lengths */
	  this.have = 0; /* number of code lengths in lens[] */
	  this.next = null; /* next available space in codes[] */

	  this.lens = new Buf16(320); /* temporary storage for code lengths */
	  this.work = new Buf16(288); /* work area for code table building */

	  /*
	   because we don't have pointers in js, we use lencode and distcode directly
	   as buffers so we don't need codes
	  */
	  //this.codes = new Buf32(ENOUGH);       /* space for code tables */
	  this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */
	  this.distdyn = null; /* dynamic table for distance codes (JS specific) */
	  this.sane = 0; /* if false, allow invalid distance too far */
	  this.back = 0; /* bits back of last unprocessed length/lit */
	  this.was = 0; /* initial length of match */
	}

	function inflateResetKeep(strm) {
	  var state;

	  if (!strm || !strm.state) {
	    return Z_STREAM_ERROR$1;
	  }
	  state = strm.state;
	  strm.total_in = strm.total_out = state.total = 0;
	  strm.msg = ''; /*Z_NULL*/
	  if (state.wrap) { /* to support ill-conceived Java test suite */
	    strm.adler = state.wrap & 1;
	  }
	  state.mode = HEAD;
	  state.last = 0;
	  state.havedict = 0;
	  state.dmax = 32768;
	  state.head = null /*Z_NULL*/ ;
	  state.hold = 0;
	  state.bits = 0;
	  //state.lencode = state.distcode = state.next = state.codes;
	  state.lencode = state.lendyn = new Buf32(ENOUGH_LENS$1);
	  state.distcode = state.distdyn = new Buf32(ENOUGH_DISTS$1);

	  state.sane = 1;
	  state.back = -1;
	  //Tracev((stderr, "inflate: reset\n"));
	  return Z_OK$1;
	}

	function inflateReset(strm) {
	  var state;

	  if (!strm || !strm.state) {
	    return Z_STREAM_ERROR$1;
	  }
	  state = strm.state;
	  state.wsize = 0;
	  state.whave = 0;
	  state.wnext = 0;
	  return inflateResetKeep(strm);

	}

	function inflateReset2(strm, windowBits) {
	  var wrap;
	  var state;

	  /* get the state */
	  if (!strm || !strm.state) {
	    return Z_STREAM_ERROR$1;
	  }
	  state = strm.state;

	  /* extract wrap request from windowBits parameter */
	  if (windowBits < 0) {
	    wrap = 0;
	    windowBits = -windowBits;
	  } else {
	    wrap = (windowBits >> 4) + 1;
	    if (windowBits < 48) {
	      windowBits &= 15;
	    }
	  }

	  /* set number of window bits, free window if different */
	  if (windowBits && (windowBits < 8 || windowBits > 15)) {
	    return Z_STREAM_ERROR$1;
	  }
	  if (state.window !== null && state.wbits !== windowBits) {
	    state.window = null;
	  }

	  /* update state and reset the rest of it */
	  state.wrap = wrap;
	  state.wbits = windowBits;
	  return inflateReset(strm);
	}

	function inflateInit2(strm, windowBits) {
	  var ret;
	  var state;

	  if (!strm) {
	    return Z_STREAM_ERROR$1;
	  }
	  //strm.msg = Z_NULL;                 /* in case we return an error */

	  state = new InflateState();

	  //if (state === Z_NULL) return Z_MEM_ERROR;
	  //Tracev((stderr, "inflate: allocated\n"));
	  strm.state = state;
	  state.window = null /*Z_NULL*/ ;
	  ret = inflateReset2(strm, windowBits);
	  if (ret !== Z_OK$1) {
	    strm.state = null /*Z_NULL*/ ;
	  }
	  return ret;
	}


	/*
	 Return state with length and distance decoding tables and index sizes set to
	 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	 If BUILDFIXED is defined, then instead this routine builds the tables the
	 first time it's called, and returns those tables the first time and
	 thereafter.  This reduces the size of the code by about 2K bytes, in
	 exchange for a little execution time.  However, BUILDFIXED should not be
	 used for threaded applications, since the rewriting of the tables and virgin
	 may not be thread-safe.
	 */
	var virgin = true;

	var lenfix, distfix; // We have no pointers in JS, so keep tables separate

	function fixedtables(state) {
	  /* build fixed huffman tables if first call (may not be thread safe) */
	  if (virgin) {
	    var sym;

	    lenfix = new Buf32(512);
	    distfix = new Buf32(32);

	    /* literal/length table */
	    sym = 0;
	    while (sym < 144) {
	      state.lens[sym++] = 8;
	    }
	    while (sym < 256) {
	      state.lens[sym++] = 9;
	    }
	    while (sym < 280) {
	      state.lens[sym++] = 7;
	    }
	    while (sym < 288) {
	      state.lens[sym++] = 8;
	    }

	    inflate_table(LENS$1, state.lens, 0, 288, lenfix, 0, state.work, {
	      bits: 9
	    });

	    /* distance table */
	    sym = 0;
	    while (sym < 32) {
	      state.lens[sym++] = 5;
	    }

	    inflate_table(DISTS$1, state.lens, 0, 32, distfix, 0, state.work, {
	      bits: 5
	    });

	    /* do this just once */
	    virgin = false;
	  }

	  state.lencode = lenfix;
	  state.lenbits = 9;
	  state.distcode = distfix;
	  state.distbits = 5;
	}


	/*
	 Update the window with the last wsize (normally 32K) bytes written before
	 returning.  If window does not exist yet, create it.  This is only called
	 when a window is already in use, or when output has been written during this
	 inflate call, but the end of the deflate stream has not been reached yet.
	 It is also called to create a window for dictionary data when a dictionary
	 is loaded.

	 Providing output buffers larger than 32K to inflate() should provide a speed
	 advantage, since only the last 32K of output is copied to the sliding window
	 upon return from inflate(), and since all distances after the first 32K of
	 output will fall in the output data, making match copies simpler and faster.
	 The advantage may be dependent on the size of the processor's data caches.
	 */
	function updatewindow(strm, src, end, copy) {
	  var dist;
	  var state = strm.state;

	  /* if it hasn't been done already, allocate space for the window */
	  if (state.window === null) {
	    state.wsize = 1 << state.wbits;
	    state.wnext = 0;
	    state.whave = 0;

	    state.window = new Buf8(state.wsize);
	  }

	  /* copy state->wsize or less output bytes into the circular window */
	  if (copy >= state.wsize) {
	    arraySet(state.window, src, end - state.wsize, state.wsize, 0);
	    state.wnext = 0;
	    state.whave = state.wsize;
	  } else {
	    dist = state.wsize - state.wnext;
	    if (dist > copy) {
	      dist = copy;
	    }
	    //zmemcpy(state->window + state->wnext, end - copy, dist);
	    arraySet(state.window, src, end - copy, dist, state.wnext);
	    copy -= dist;
	    if (copy) {
	      //zmemcpy(state->window, end - copy, copy);
	      arraySet(state.window, src, end - copy, copy, 0);
	      state.wnext = copy;
	      state.whave = state.wsize;
	    } else {
	      state.wnext += dist;
	      if (state.wnext === state.wsize) {
	        state.wnext = 0;
	      }
	      if (state.whave < state.wsize) {
	        state.whave += dist;
	      }
	    }
	  }
	  return 0;
	}

	function inflate(strm, flush) {
	  var state;
	  var input, output; // input/output buffers
	  var next; /* next input INDEX */
	  var put; /* next output INDEX */
	  var have, left; /* available input and output */
	  var hold; /* bit buffer */
	  var bits; /* bits in bit buffer */
	  var _in, _out; /* save starting available input and output */
	  var copy; /* number of stored or match bytes to copy */
	  var from; /* where to copy match bytes from */
	  var from_source;
	  var here = 0; /* current decoding table entry */
	  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
	  //var last;                   /* parent table entry */
	  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
	  var len; /* length to copy for repeats, bits to drop */
	  var ret; /* return code */
	  var hbuf = new Buf8(4); /* buffer for gzip header crc calculation */
	  var opts;

	  var n; // temporary var for NEED_BITS

	  var order = /* permutation of code lengths */ [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];


	  if (!strm || !strm.state || !strm.output ||
	    (!strm.input && strm.avail_in !== 0)) {
	    return Z_STREAM_ERROR$1;
	  }

	  state = strm.state;
	  if (state.mode === TYPE$1) {
	    state.mode = TYPEDO;
	  } /* skip check */


	  //--- LOAD() ---
	  put = strm.next_out;
	  output = strm.output;
	  left = strm.avail_out;
	  next = strm.next_in;
	  input = strm.input;
	  have = strm.avail_in;
	  hold = state.hold;
	  bits = state.bits;
	  //---

	  _in = have;
	  _out = left;
	  ret = Z_OK$1;

	  inf_leave: // goto emulation
	    for (;;) {
	      switch (state.mode) {
	      case HEAD:
	        if (state.wrap === 0) {
	          state.mode = TYPEDO;
	          break;
	        }
	        //=== NEEDBITS(16);
	        while (bits < 16) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if ((state.wrap & 2) && hold === 0x8b1f) { /* gzip header */
	          state.check = 0 /*crc32(0L, Z_NULL, 0)*/ ;
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//

	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	          state.mode = FLAGS;
	          break;
	        }
	        state.flags = 0; /* expect zlib header */
	        if (state.head) {
	          state.head.done = false;
	        }
	        if (!(state.wrap & 1) || /* check if zlib header allowed */
	          (((hold & 0xff) /*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
	          strm.msg = 'incorrect header check';
	          state.mode = BAD$1;
	          break;
	        }
	        if ((hold & 0x0f) /*BITS(4)*/ !== Z_DEFLATED$1) {
	          strm.msg = 'unknown compression method';
	          state.mode = BAD$1;
	          break;
	        }
	        //--- DROPBITS(4) ---//
	        hold >>>= 4;
	        bits -= 4;
	        //---//
	        len = (hold & 0x0f) /*BITS(4)*/ + 8;
	        if (state.wbits === 0) {
	          state.wbits = len;
	        } else if (len > state.wbits) {
	          strm.msg = 'invalid window size';
	          state.mode = BAD$1;
	          break;
	        }
	        state.dmax = 1 << len;
	        //Tracev((stderr, "inflate:   zlib header ok\n"));
	        strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
	        state.mode = hold & 0x200 ? DICTID : TYPE$1;
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        break;
	      case FLAGS:
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.flags = hold;
	        if ((state.flags & 0xff) !== Z_DEFLATED$1) {
	          strm.msg = 'unknown compression method';
	          state.mode = BAD$1;
	          break;
	        }
	        if (state.flags & 0xe000) {
	          strm.msg = 'unknown header flags set';
	          state.mode = BAD$1;
	          break;
	        }
	        if (state.head) {
	          state.head.text = ((hold >> 8) & 1);
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = TIME;
	        /* falls through */
	      case TIME:
	        //=== NEEDBITS(32); */
	        while (bits < 32) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (state.head) {
	          state.head.time = hold;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC4(state.check, hold)
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          hbuf[2] = (hold >>> 16) & 0xff;
	          hbuf[3] = (hold >>> 24) & 0xff;
	          state.check = crc32(state.check, hbuf, 4, 0);
	          //===
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = OS;
	        /* falls through */
	      case OS:
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (state.head) {
	          state.head.xflags = (hold & 0xff);
	          state.head.os = (hold >> 8);
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = EXLEN;
	        /* falls through */
	      case EXLEN:
	        if (state.flags & 0x0400) {
	          //=== NEEDBITS(16); */
	          while (bits < 16) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.length = hold;
	          if (state.head) {
	            state.head.extra_len = hold;
	          }
	          if (state.flags & 0x0200) {
	            //=== CRC2(state.check, hold);
	            hbuf[0] = hold & 0xff;
	            hbuf[1] = (hold >>> 8) & 0xff;
	            state.check = crc32(state.check, hbuf, 2, 0);
	            //===//
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	        } else if (state.head) {
	          state.head.extra = null /*Z_NULL*/ ;
	        }
	        state.mode = EXTRA;
	        /* falls through */
	      case EXTRA:
	        if (state.flags & 0x0400) {
	          copy = state.length;
	          if (copy > have) {
	            copy = have;
	          }
	          if (copy) {
	            if (state.head) {
	              len = state.head.extra_len - state.length;
	              if (!state.head.extra) {
	                // Use untyped array for more conveniend processing later
	                state.head.extra = new Array(state.head.extra_len);
	              }
	              arraySet(
	                state.head.extra,
	                input,
	                next,
	                // extra field is limited to 65536 bytes
	                // - no need for additional size check
	                copy,
	                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
	                len
	              );
	              //zmemcpy(state.head.extra + len, next,
	              //        len + copy > state.head.extra_max ?
	              //        state.head.extra_max - len : copy);
	            }
	            if (state.flags & 0x0200) {
	              state.check = crc32(state.check, input, copy, next);
	            }
	            have -= copy;
	            next += copy;
	            state.length -= copy;
	          }
	          if (state.length) {
	            break inf_leave;
	          }
	        }
	        state.length = 0;
	        state.mode = NAME;
	        /* falls through */
	      case NAME:
	        if (state.flags & 0x0800) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          copy = 0;
	          do {
	            // TODO: 2 or 1 bytes?
	            len = input[next + copy++];
	            /* use constant limit because in js we should not preallocate memory */
	            if (state.head && len &&
	              (state.length < 65536 /*state.head.name_max*/ )) {
	              state.head.name += String.fromCharCode(len);
	            }
	          } while (len && copy < have);

	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          if (len) {
	            break inf_leave;
	          }
	        } else if (state.head) {
	          state.head.name = null;
	        }
	        state.length = 0;
	        state.mode = COMMENT;
	        /* falls through */
	      case COMMENT:
	        if (state.flags & 0x1000) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          copy = 0;
	          do {
	            len = input[next + copy++];
	            /* use constant limit because in js we should not preallocate memory */
	            if (state.head && len &&
	              (state.length < 65536 /*state.head.comm_max*/ )) {
	              state.head.comment += String.fromCharCode(len);
	            }
	          } while (len && copy < have);
	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          if (len) {
	            break inf_leave;
	          }
	        } else if (state.head) {
	          state.head.comment = null;
	        }
	        state.mode = HCRC;
	        /* falls through */
	      case HCRC:
	        if (state.flags & 0x0200) {
	          //=== NEEDBITS(16); */
	          while (bits < 16) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          if (hold !== (state.check & 0xffff)) {
	            strm.msg = 'header crc mismatch';
	            state.mode = BAD$1;
	            break;
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	        }
	        if (state.head) {
	          state.head.hcrc = ((state.flags >> 9) & 1);
	          state.head.done = true;
	        }
	        strm.adler = state.check = 0;
	        state.mode = TYPE$1;
	        break;
	      case DICTID:
	        //=== NEEDBITS(32); */
	        while (bits < 32) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        strm.adler = state.check = zswap32(hold);
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = DICT;
	        /* falls through */
	      case DICT:
	        if (state.havedict === 0) {
	          //--- RESTORE() ---
	          strm.next_out = put;
	          strm.avail_out = left;
	          strm.next_in = next;
	          strm.avail_in = have;
	          state.hold = hold;
	          state.bits = bits;
	          //---
	          return Z_NEED_DICT;
	        }
	        strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
	        state.mode = TYPE$1;
	        /* falls through */
	      case TYPE$1:
	        if (flush === Z_BLOCK$1 || flush === Z_TREES) {
	          break inf_leave;
	        }
	        /* falls through */
	      case TYPEDO:
	        if (state.last) {
	          //--- BYTEBITS() ---//
	          hold >>>= bits & 7;
	          bits -= bits & 7;
	          //---//
	          state.mode = CHECK;
	          break;
	        }
	        //=== NEEDBITS(3); */
	        while (bits < 3) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.last = (hold & 0x01) /*BITS(1)*/ ;
	        //--- DROPBITS(1) ---//
	        hold >>>= 1;
	        bits -= 1;
	        //---//

	        switch ((hold & 0x03) /*BITS(2)*/ ) {
	        case 0:
	          /* stored block */
	          //Tracev((stderr, "inflate:     stored block%s\n",
	          //        state.last ? " (last)" : ""));
	          state.mode = STORED;
	          break;
	        case 1:
	          /* fixed block */
	          fixedtables(state);
	          //Tracev((stderr, "inflate:     fixed codes block%s\n",
	          //        state.last ? " (last)" : ""));
	          state.mode = LEN_; /* decode codes */
	          if (flush === Z_TREES) {
	            //--- DROPBITS(2) ---//
	            hold >>>= 2;
	            bits -= 2;
	            //---//
	            break inf_leave;
	          }
	          break;
	        case 2:
	          /* dynamic block */
	          //Tracev((stderr, "inflate:     dynamic codes block%s\n",
	          //        state.last ? " (last)" : ""));
	          state.mode = TABLE;
	          break;
	        case 3:
	          strm.msg = 'invalid block type';
	          state.mode = BAD$1;
	        }
	        //--- DROPBITS(2) ---//
	        hold >>>= 2;
	        bits -= 2;
	        //---//
	        break;
	      case STORED:
	        //--- BYTEBITS() ---// /* go to byte boundary */
	        hold >>>= bits & 7;
	        bits -= bits & 7;
	        //---//
	        //=== NEEDBITS(32); */
	        while (bits < 32) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
	          strm.msg = 'invalid stored block lengths';
	          state.mode = BAD$1;
	          break;
	        }
	        state.length = hold & 0xffff;
	        //Tracev((stderr, "inflate:       stored length %u\n",
	        //        state.length));
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = COPY_;
	        if (flush === Z_TREES) {
	          break inf_leave;
	        }
	        /* falls through */
	      case COPY_:
	        state.mode = COPY$2;
	        /* falls through */
	      case COPY$2:
	        copy = state.length;
	        if (copy) {
	          if (copy > have) {
	            copy = have;
	          }
	          if (copy > left) {
	            copy = left;
	          }
	          if (copy === 0) {
	            break inf_leave;
	          }
	          //--- zmemcpy(put, next, copy); ---
	          arraySet(output, input, next, copy, put);
	          //---//
	          have -= copy;
	          next += copy;
	          left -= copy;
	          put += copy;
	          state.length -= copy;
	          break;
	        }
	        //Tracev((stderr, "inflate:       stored end\n"));
	        state.mode = TYPE$1;
	        break;
	      case TABLE:
	        //=== NEEDBITS(14); */
	        while (bits < 14) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.nlen = (hold & 0x1f) /*BITS(5)*/ + 257;
	        //--- DROPBITS(5) ---//
	        hold >>>= 5;
	        bits -= 5;
	        //---//
	        state.ndist = (hold & 0x1f) /*BITS(5)*/ + 1;
	        //--- DROPBITS(5) ---//
	        hold >>>= 5;
	        bits -= 5;
	        //---//
	        state.ncode = (hold & 0x0f) /*BITS(4)*/ + 4;
	        //--- DROPBITS(4) ---//
	        hold >>>= 4;
	        bits -= 4;
	        //---//
	        //#ifndef PKZIP_BUG_WORKAROUND
	        if (state.nlen > 286 || state.ndist > 30) {
	          strm.msg = 'too many length or distance symbols';
	          state.mode = BAD$1;
	          break;
	        }
	        //#endif
	        //Tracev((stderr, "inflate:       table sizes ok\n"));
	        state.have = 0;
	        state.mode = LENLENS;
	        /* falls through */
	      case LENLENS:
	        while (state.have < state.ncode) {
	          //=== NEEDBITS(3);
	          while (bits < 3) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.lens[order[state.have++]] = (hold & 0x07); //BITS(3);
	          //--- DROPBITS(3) ---//
	          hold >>>= 3;
	          bits -= 3;
	          //---//
	        }
	        while (state.have < 19) {
	          state.lens[order[state.have++]] = 0;
	        }
	        // We have separate tables & no pointers. 2 commented lines below not needed.
	        //state.next = state.codes;
	        //state.lencode = state.next;
	        // Switch to use dynamic table
	        state.lencode = state.lendyn;
	        state.lenbits = 7;

	        opts = {
	          bits: state.lenbits
	        };
	        ret = inflate_table(CODES$1, state.lens, 0, 19, state.lencode, 0, state.work, opts);
	        state.lenbits = opts.bits;

	        if (ret) {
	          strm.msg = 'invalid code lengths set';
	          state.mode = BAD$1;
	          break;
	        }
	        //Tracev((stderr, "inflate:       code lengths ok\n"));
	        state.have = 0;
	        state.mode = CODELENS;
	        /* falls through */
	      case CODELENS:
	        while (state.have < state.nlen + state.ndist) {
	          for (;;) {
	            here = state.lencode[hold & ((1 << state.lenbits) - 1)]; /*BITS(state.lenbits)*/
	            here_bits = here >>> 24;
	            here_op = (here >>> 16) & 0xff;
	            here_val = here & 0xffff;

	            if ((here_bits) <= bits) {
	              break;
	            }
	            //--- PULLBYTE() ---//
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	            //---//
	          }
	          if (here_val < 16) {
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            state.lens[state.have++] = here_val;
	          } else {
	            if (here_val === 16) {
	              //=== NEEDBITS(here.bits + 2);
	              n = here_bits + 2;
	              while (bits < n) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              if (state.have === 0) {
	                strm.msg = 'invalid bit length repeat';
	                state.mode = BAD$1;
	                break;
	              }
	              len = state.lens[state.have - 1];
	              copy = 3 + (hold & 0x03); //BITS(2);
	              //--- DROPBITS(2) ---//
	              hold >>>= 2;
	              bits -= 2;
	              //---//
	            } else if (here_val === 17) {
	              //=== NEEDBITS(here.bits + 3);
	              n = here_bits + 3;
	              while (bits < n) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              len = 0;
	              copy = 3 + (hold & 0x07); //BITS(3);
	              //--- DROPBITS(3) ---//
	              hold >>>= 3;
	              bits -= 3;
	              //---//
	            } else {
	              //=== NEEDBITS(here.bits + 7);
	              n = here_bits + 7;
	              while (bits < n) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              len = 0;
	              copy = 11 + (hold & 0x7f); //BITS(7);
	              //--- DROPBITS(7) ---//
	              hold >>>= 7;
	              bits -= 7;
	              //---//
	            }
	            if (state.have + copy > state.nlen + state.ndist) {
	              strm.msg = 'invalid bit length repeat';
	              state.mode = BAD$1;
	              break;
	            }
	            while (copy--) {
	              state.lens[state.have++] = len;
	            }
	          }
	        }

	        /* handle error breaks in while */
	        if (state.mode === BAD$1) {
	          break;
	        }

	        /* check for end-of-block code (better have one) */
	        if (state.lens[256] === 0) {
	          strm.msg = 'invalid code -- missing end-of-block';
	          state.mode = BAD$1;
	          break;
	        }

	        /* build code tables -- note: do not change the lenbits or distbits
	           values here (9 and 6) without reading the comments in inftrees.h
	           concerning the ENOUGH constants, which depend on those values */
	        state.lenbits = 9;

	        opts = {
	          bits: state.lenbits
	        };
	        ret = inflate_table(LENS$1, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
	        // We have separate tables & no pointers. 2 commented lines below not needed.
	        // state.next_index = opts.table_index;
	        state.lenbits = opts.bits;
	        // state.lencode = state.next;

	        if (ret) {
	          strm.msg = 'invalid literal/lengths set';
	          state.mode = BAD$1;
	          break;
	        }

	        state.distbits = 6;
	        //state.distcode.copy(state.codes);
	        // Switch to use dynamic table
	        state.distcode = state.distdyn;
	        opts = {
	          bits: state.distbits
	        };
	        ret = inflate_table(DISTS$1, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
	        // We have separate tables & no pointers. 2 commented lines below not needed.
	        // state.next_index = opts.table_index;
	        state.distbits = opts.bits;
	        // state.distcode = state.next;

	        if (ret) {
	          strm.msg = 'invalid distances set';
	          state.mode = BAD$1;
	          break;
	        }
	        //Tracev((stderr, 'inflate:       codes ok\n'));
	        state.mode = LEN_;
	        if (flush === Z_TREES) {
	          break inf_leave;
	        }
	        /* falls through */
	      case LEN_:
	        state.mode = LEN;
	        /* falls through */
	      case LEN:
	        if (have >= 6 && left >= 258) {
	          //--- RESTORE() ---
	          strm.next_out = put;
	          strm.avail_out = left;
	          strm.next_in = next;
	          strm.avail_in = have;
	          state.hold = hold;
	          state.bits = bits;
	          //---
	          inflate_fast(strm, _out);
	          //--- LOAD() ---
	          put = strm.next_out;
	          output = strm.output;
	          left = strm.avail_out;
	          next = strm.next_in;
	          input = strm.input;
	          have = strm.avail_in;
	          hold = state.hold;
	          bits = state.bits;
	          //---

	          if (state.mode === TYPE$1) {
	            state.back = -1;
	          }
	          break;
	        }
	        state.back = 0;
	        for (;;) {
	          here = state.lencode[hold & ((1 << state.lenbits) - 1)]; /*BITS(state.lenbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if (here_bits <= bits) {
	            break;
	          }
	          //--- PULLBYTE() ---//
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if (here_op && (here_op & 0xf0) === 0) {
	          last_bits = here_bits;
	          last_op = here_op;
	          last_val = here_val;
	          for (;;) {
	            here = state.lencode[last_val +
	              ((hold & ((1 << (last_bits + last_op)) - 1)) /*BITS(last.bits + last.op)*/ >> last_bits)];
	            here_bits = here >>> 24;
	            here_op = (here >>> 16) & 0xff;
	            here_val = here & 0xffff;

	            if ((last_bits + here_bits) <= bits) {
	              break;
	            }
	            //--- PULLBYTE() ---//
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	            //---//
	          }
	          //--- DROPBITS(last.bits) ---//
	          hold >>>= last_bits;
	          bits -= last_bits;
	          //---//
	          state.back += last_bits;
	        }
	        //--- DROPBITS(here.bits) ---//
	        hold >>>= here_bits;
	        bits -= here_bits;
	        //---//
	        state.back += here_bits;
	        state.length = here_val;
	        if (here_op === 0) {
	          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	          //        "inflate:         literal '%c'\n" :
	          //        "inflate:         literal 0x%02x\n", here.val));
	          state.mode = LIT;
	          break;
	        }
	        if (here_op & 32) {
	          //Tracevv((stderr, "inflate:         end of block\n"));
	          state.back = -1;
	          state.mode = TYPE$1;
	          break;
	        }
	        if (here_op & 64) {
	          strm.msg = 'invalid literal/length code';
	          state.mode = BAD$1;
	          break;
	        }
	        state.extra = here_op & 15;
	        state.mode = LENEXT;
	        /* falls through */
	      case LENEXT:
	        if (state.extra) {
	          //=== NEEDBITS(state.extra);
	          n = state.extra;
	          while (bits < n) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.length += hold & ((1 << state.extra) - 1) /*BITS(state.extra)*/ ;
	          //--- DROPBITS(state.extra) ---//
	          hold >>>= state.extra;
	          bits -= state.extra;
	          //---//
	          state.back += state.extra;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", state.length));
	        state.was = state.length;
	        state.mode = DIST;
	        /* falls through */
	      case DIST:
	        for (;;) {
	          here = state.distcode[hold & ((1 << state.distbits) - 1)]; /*BITS(state.distbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((here_bits) <= bits) {
	            break;
	          }
	          //--- PULLBYTE() ---//
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if ((here_op & 0xf0) === 0) {
	          last_bits = here_bits;
	          last_op = here_op;
	          last_val = here_val;
	          for (;;) {
	            here = state.distcode[last_val +
	              ((hold & ((1 << (last_bits + last_op)) - 1)) /*BITS(last.bits + last.op)*/ >> last_bits)];
	            here_bits = here >>> 24;
	            here_op = (here >>> 16) & 0xff;
	            here_val = here & 0xffff;

	            if ((last_bits + here_bits) <= bits) {
	              break;
	            }
	            //--- PULLBYTE() ---//
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	            //---//
	          }
	          //--- DROPBITS(last.bits) ---//
	          hold >>>= last_bits;
	          bits -= last_bits;
	          //---//
	          state.back += last_bits;
	        }
	        //--- DROPBITS(here.bits) ---//
	        hold >>>= here_bits;
	        bits -= here_bits;
	        //---//
	        state.back += here_bits;
	        if (here_op & 64) {
	          strm.msg = 'invalid distance code';
	          state.mode = BAD$1;
	          break;
	        }
	        state.offset = here_val;
	        state.extra = (here_op) & 15;
	        state.mode = DISTEXT;
	        /* falls through */
	      case DISTEXT:
	        if (state.extra) {
	          //=== NEEDBITS(state.extra);
	          n = state.extra;
	          while (bits < n) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.offset += hold & ((1 << state.extra) - 1) /*BITS(state.extra)*/ ;
	          //--- DROPBITS(state.extra) ---//
	          hold >>>= state.extra;
	          bits -= state.extra;
	          //---//
	          state.back += state.extra;
	        }
	        //#ifdef INFLATE_STRICT
	        if (state.offset > state.dmax) {
	          strm.msg = 'invalid distance too far back';
	          state.mode = BAD$1;
	          break;
	        }
	        //#endif
	        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
	        state.mode = MATCH;
	        /* falls through */
	      case MATCH:
	        if (left === 0) {
	          break inf_leave;
	        }
	        copy = _out - left;
	        if (state.offset > copy) { /* copy from window */
	          copy = state.offset - copy;
	          if (copy > state.whave) {
	            if (state.sane) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD$1;
	              break;
	            }
	            // (!) This block is disabled in zlib defailts,
	            // don't enable it for binary compatibility
	            //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	            //          Trace((stderr, "inflate.c too far\n"));
	            //          copy -= state.whave;
	            //          if (copy > state.length) { copy = state.length; }
	            //          if (copy > left) { copy = left; }
	            //          left -= copy;
	            //          state.length -= copy;
	            //          do {
	            //            output[put++] = 0;
	            //          } while (--copy);
	            //          if (state.length === 0) { state.mode = LEN; }
	            //          break;
	            //#endif
	          }
	          if (copy > state.wnext) {
	            copy -= state.wnext;
	            from = state.wsize - copy;
	          } else {
	            from = state.wnext - copy;
	          }
	          if (copy > state.length) {
	            copy = state.length;
	          }
	          from_source = state.window;
	        } else { /* copy from output */
	          from_source = output;
	          from = put - state.offset;
	          copy = state.length;
	        }
	        if (copy > left) {
	          copy = left;
	        }
	        left -= copy;
	        state.length -= copy;
	        do {
	          output[put++] = from_source[from++];
	        } while (--copy);
	        if (state.length === 0) {
	          state.mode = LEN;
	        }
	        break;
	      case LIT:
	        if (left === 0) {
	          break inf_leave;
	        }
	        output[put++] = state.length;
	        left--;
	        state.mode = LEN;
	        break;
	      case CHECK:
	        if (state.wrap) {
	          //=== NEEDBITS(32);
	          while (bits < 32) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            // Use '|' insdead of '+' to make sure that result is signed
	            hold |= input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          _out -= left;
	          strm.total_out += _out;
	          state.total += _out;
	          if (_out) {
	            strm.adler = state.check =
	              /*UPDATE(state.check, put - _out, _out);*/
	              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

	          }
	          _out = left;
	          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
	          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
	            strm.msg = 'incorrect data check';
	            state.mode = BAD$1;
	            break;
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	          //Tracev((stderr, "inflate:   check matches trailer\n"));
	        }
	        state.mode = LENGTH;
	        /* falls through */
	      case LENGTH:
	        if (state.wrap && state.flags) {
	          //=== NEEDBITS(32);
	          while (bits < 32) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          if (hold !== (state.total & 0xffffffff)) {
	            strm.msg = 'incorrect length check';
	            state.mode = BAD$1;
	            break;
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	          //Tracev((stderr, "inflate:   length matches trailer\n"));
	        }
	        state.mode = DONE;
	        /* falls through */
	      case DONE:
	        ret = Z_STREAM_END$1;
	        break inf_leave;
	      case BAD$1:
	        ret = Z_DATA_ERROR$1;
	        break inf_leave;
	      case MEM:
	        return Z_MEM_ERROR;
	      case SYNC:
	        /* falls through */
	      default:
	        return Z_STREAM_ERROR$1;
	      }
	    }

	  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

	  /*
	     Return from inflate(), updating the total counts and the check value.
	     If there was no progress during the inflate() call, return a buffer
	     error.  Call updatewindow() to create and/or update the window state.
	     Note: a memory error from inflate() is non-recoverable.
	   */

	  //--- RESTORE() ---
	  strm.next_out = put;
	  strm.avail_out = left;
	  strm.next_in = next;
	  strm.avail_in = have;
	  state.hold = hold;
	  state.bits = bits;
	  //---

	  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD$1 &&
	      (state.mode < CHECK || flush !== Z_FINISH$1))) {
	    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
	  }
	  _in -= strm.avail_in;
	  _out -= strm.avail_out;
	  strm.total_in += _in;
	  strm.total_out += _out;
	  state.total += _out;
	  if (state.wrap && _out) {
	    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
	      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
	  }
	  strm.data_type = state.bits + (state.last ? 64 : 0) +
	    (state.mode === TYPE$1 ? 128 : 0) +
	    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
	  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {
	    ret = Z_BUF_ERROR$1;
	  }
	  return ret;
	}

	function inflateEnd(strm) {

	  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/ ) {
	    return Z_STREAM_ERROR$1;
	  }

	  var state = strm.state;
	  if (state.window) {
	    state.window = null;
	  }
	  strm.state = null;
	  return Z_OK$1;
	}

	/* Not implemented
	exports.inflateCopy = inflateCopy;
	exports.inflateGetDictionary = inflateGetDictionary;
	exports.inflateMark = inflateMark;
	exports.inflatePrime = inflatePrime;
	exports.inflateSync = inflateSync;
	exports.inflateSyncPoint = inflateSyncPoint;
	exports.inflateUndermine = inflateUndermine;
	*/

	// import constants from './constants';


	// zlib modes
	var NONE = 0;
	var DEFLATE = 1;
	var INFLATE = 2;
	var GZIP = 3;
	var GUNZIP = 4;
	var DEFLATERAW = 5;
	var INFLATERAW = 6;
	var UNZIP = 7;
	var Z_NO_FLUSH$1=         0,
	  Z_PARTIAL_FLUSH$1=    1,
	  Z_SYNC_FLUSH=    2,
	  Z_FULL_FLUSH$1=       3,
	  Z_FINISH$2=       4,
	  Z_BLOCK$2=           5,
	  Z_TREES$1=            6,

	  /* Return codes for the compression/decompression functions. Negative values
	  * are errors, positive values are used for special but normal events.
	  */
	  Z_OK$2=               0,
	  Z_STREAM_END$2=       1,
	  Z_NEED_DICT$1=      2,
	  Z_ERRNO=       -1,
	  Z_STREAM_ERROR$2=   -2,
	  Z_DATA_ERROR$2=    -3,
	  //Z_MEM_ERROR:     -4,
	  Z_BUF_ERROR$2=    -5,
	  //Z_VERSION_ERROR: -6,

	  /* compression levels */
	  Z_NO_COMPRESSION=         0,
	  Z_BEST_SPEED=             1,
	  Z_BEST_COMPRESSION=       9,
	  Z_DEFAULT_COMPRESSION$1=   -1,


	  Z_FILTERED$1=               1,
	  Z_HUFFMAN_ONLY$1=           2,
	  Z_RLE$1=                    3,
	  Z_FIXED$2=                  4,
	  Z_DEFAULT_STRATEGY=       0,

	  /* Possible values of the data_type field (though see inflate()) */
	  Z_BINARY$1=                 0,
	  Z_TEXT$1=                   1,
	  //Z_ASCII:                1, // = Z_TEXT (deprecated)
	  Z_UNKNOWN$2=                2,

	  /* The deflate compression method */
	  Z_DEFLATED$2=               8;
	function Zlib(mode) {
	  if (mode < DEFLATE || mode > UNZIP)
	    throw new TypeError('Bad argument');

	  this.mode = mode;
	  this.init_done = false;
	  this.write_in_progress = false;
	  this.pending_close = false;
	  this.windowBits = 0;
	  this.level = 0;
	  this.memLevel = 0;
	  this.strategy = 0;
	  this.dictionary = null;
	}

	Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
	  this.windowBits = windowBits;
	  this.level = level;
	  this.memLevel = memLevel;
	  this.strategy = strategy;
	  // dictionary not supported.

	  if (this.mode === GZIP || this.mode === GUNZIP)
	    this.windowBits += 16;

	  if (this.mode === UNZIP)
	    this.windowBits += 32;

	  if (this.mode === DEFLATERAW || this.mode === INFLATERAW)
	    this.windowBits = -this.windowBits;

	  this.strm = new ZStream();
	  var status;
	  switch (this.mode) {
	  case DEFLATE:
	  case GZIP:
	  case DEFLATERAW:
	    status = deflateInit2(
	      this.strm,
	      this.level,
	      Z_DEFLATED$2,
	      this.windowBits,
	      this.memLevel,
	      this.strategy
	    );
	    break;
	  case INFLATE:
	  case GUNZIP:
	  case INFLATERAW:
	  case UNZIP:
	    status  = inflateInit2(
	      this.strm,
	      this.windowBits
	    );
	    break;
	  default:
	    throw new Error('Unknown mode ' + this.mode);
	  }

	  if (status !== Z_OK$2) {
	    this._error(status);
	    return;
	  }

	  this.write_in_progress = false;
	  this.init_done = true;
	};

	Zlib.prototype.params = function() {
	  throw new Error('deflateParams Not supported');
	};

	Zlib.prototype._writeCheck = function() {
	  if (!this.init_done)
	    throw new Error('write before init');

	  if (this.mode === NONE)
	    throw new Error('already finalized');

	  if (this.write_in_progress)
	    throw new Error('write already in progress');

	  if (this.pending_close)
	    throw new Error('close is pending');
	};

	Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {
	  this._writeCheck();
	  this.write_in_progress = true;

	  var self = this;
	  nextTick(function() {
	    self.write_in_progress = false;
	    var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
	    self.callback(res[0], res[1]);

	    if (self.pending_close)
	      self.close();
	  });

	  return this;
	};

	// set method for Node buffers, used by pako
	function bufferSet(data, offset) {
	  for (var i = 0; i < data.length; i++) {
	    this[offset + i] = data[i];
	  }
	}

	Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
	  this._writeCheck();
	  return this._write(flush, input, in_off, in_len, out, out_off, out_len);
	};

	Zlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
	  this.write_in_progress = true;

	  if (flush !== Z_NO_FLUSH$1 &&
	      flush !== Z_PARTIAL_FLUSH$1 &&
	      flush !== Z_SYNC_FLUSH &&
	      flush !== Z_FULL_FLUSH$1 &&
	      flush !== Z_FINISH$2 &&
	      flush !== Z_BLOCK$2) {
	    throw new Error('Invalid flush value');
	  }

	  if (input == null) {
	    input = new Buffer(0);
	    in_len = 0;
	    in_off = 0;
	  }

	  if (out._set)
	    out.set = out._set;
	  else
	    out.set = bufferSet;

	  var strm = this.strm;
	  strm.avail_in = in_len;
	  strm.input = input;
	  strm.next_in = in_off;
	  strm.avail_out = out_len;
	  strm.output = out;
	  strm.next_out = out_off;
	  var status;
	  switch (this.mode) {
	  case DEFLATE:
	  case GZIP:
	  case DEFLATERAW:
	    status = deflate(strm, flush);
	    break;
	  case UNZIP:
	  case INFLATE:
	  case GUNZIP:
	  case INFLATERAW:
	    status = inflate(strm, flush);
	    break;
	  default:
	    throw new Error('Unknown mode ' + this.mode);
	  }

	  if (status !== Z_STREAM_END$2 && status !== Z_OK$2) {
	    this._error(status);
	  }

	  this.write_in_progress = false;
	  return [strm.avail_in, strm.avail_out];
	};

	Zlib.prototype.close = function() {
	  if (this.write_in_progress) {
	    this.pending_close = true;
	    return;
	  }

	  this.pending_close = false;

	  if (this.mode === DEFLATE || this.mode === GZIP || this.mode === DEFLATERAW) {
	    deflateEnd(this.strm);
	  } else {
	    inflateEnd(this.strm);
	  }

	  this.mode = NONE;
	};
	var status;
	Zlib.prototype.reset = function() {
	  switch (this.mode) {
	  case DEFLATE:
	  case DEFLATERAW:
	    status = deflateReset(this.strm);
	    break;
	  case INFLATE:
	  case INFLATERAW:
	    status = inflateReset(this.strm);
	    break;
	  }

	  if (status !== Z_OK$2) {
	    this._error(status);
	  }
	};

	Zlib.prototype._error = function(status) {
	  this.onerror(msg[status] + ': ' + this.strm.msg, status);

	  this.write_in_progress = false;
	  if (this.pending_close)
	    this.close();
	};

	var _binding = /*#__PURE__*/Object.freeze({
		NONE: NONE,
		DEFLATE: DEFLATE,
		INFLATE: INFLATE,
		GZIP: GZIP,
		GUNZIP: GUNZIP,
		DEFLATERAW: DEFLATERAW,
		INFLATERAW: INFLATERAW,
		UNZIP: UNZIP,
		Z_NO_FLUSH: Z_NO_FLUSH$1,
		Z_PARTIAL_FLUSH: Z_PARTIAL_FLUSH$1,
		Z_SYNC_FLUSH: Z_SYNC_FLUSH,
		Z_FULL_FLUSH: Z_FULL_FLUSH$1,
		Z_FINISH: Z_FINISH$2,
		Z_BLOCK: Z_BLOCK$2,
		Z_TREES: Z_TREES$1,
		Z_OK: Z_OK$2,
		Z_STREAM_END: Z_STREAM_END$2,
		Z_NEED_DICT: Z_NEED_DICT$1,
		Z_ERRNO: Z_ERRNO,
		Z_STREAM_ERROR: Z_STREAM_ERROR$2,
		Z_DATA_ERROR: Z_DATA_ERROR$2,
		Z_BUF_ERROR: Z_BUF_ERROR$2,
		Z_NO_COMPRESSION: Z_NO_COMPRESSION,
		Z_BEST_SPEED: Z_BEST_SPEED,
		Z_BEST_COMPRESSION: Z_BEST_COMPRESSION,
		Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
		Z_FILTERED: Z_FILTERED$1,
		Z_HUFFMAN_ONLY: Z_HUFFMAN_ONLY$1,
		Z_RLE: Z_RLE$1,
		Z_FIXED: Z_FIXED$2,
		Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY,
		Z_BINARY: Z_BINARY$1,
		Z_TEXT: Z_TEXT$1,
		Z_UNKNOWN: Z_UNKNOWN$2,
		Z_DEFLATED: Z_DEFLATED$2,
		Zlib: Zlib
	});

	function assert (a, msg) {
	  if (!a) {
	    throw new Error(msg);
	  }
	}
	var binding$1 = {};
	Object.keys(_binding).forEach(function (key) {
	  binding$1[key] = _binding[key];
	});
	// zlib doesn't provide these, so kludge them in following the same
	// const naming scheme zlib uses.
	binding$1.Z_MIN_WINDOWBITS = 8;
	binding$1.Z_MAX_WINDOWBITS = 15;
	binding$1.Z_DEFAULT_WINDOWBITS = 15;

	// fewer than 64 bytes per chunk is stupid.
	// technically it could work with as few as 8, but even 64 bytes
	// is absurdly low.  Usually a MB or more is best.
	binding$1.Z_MIN_CHUNK = 64;
	binding$1.Z_MAX_CHUNK = Infinity;
	binding$1.Z_DEFAULT_CHUNK = (16 * 1024);

	binding$1.Z_MIN_MEMLEVEL = 1;
	binding$1.Z_MAX_MEMLEVEL = 9;
	binding$1.Z_DEFAULT_MEMLEVEL = 8;

	binding$1.Z_MIN_LEVEL = -1;
	binding$1.Z_MAX_LEVEL = 9;
	binding$1.Z_DEFAULT_LEVEL = binding$1.Z_DEFAULT_COMPRESSION;


	// translation table for return codes.
	var codes = {
	  Z_OK: binding$1.Z_OK,
	  Z_STREAM_END: binding$1.Z_STREAM_END,
	  Z_NEED_DICT: binding$1.Z_NEED_DICT,
	  Z_ERRNO: binding$1.Z_ERRNO,
	  Z_STREAM_ERROR: binding$1.Z_STREAM_ERROR,
	  Z_DATA_ERROR: binding$1.Z_DATA_ERROR,
	  Z_MEM_ERROR: binding$1.Z_MEM_ERROR,
	  Z_BUF_ERROR: binding$1.Z_BUF_ERROR,
	  Z_VERSION_ERROR: binding$1.Z_VERSION_ERROR
	};

	Object.keys(codes).forEach(function(k) {
	  codes[codes[k]] = k;
	});

	function createDeflate(o) {
	  return new Deflate(o);
	}

	function createInflate(o) {
	  return new Inflate(o);
	}

	function createDeflateRaw(o) {
	  return new DeflateRaw(o);
	}

	function createInflateRaw(o) {
	  return new InflateRaw(o);
	}

	function createGzip(o) {
	  return new Gzip(o);
	}

	function createGunzip(o) {
	  return new Gunzip(o);
	}

	function createUnzip(o) {
	  return new Unzip(o);
	}


	// Convenience methods.
	// compress/decompress a string or buffer in one step.
	function deflate$1(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Deflate(opts), buffer, callback);
	}

	function deflateSync(buffer, opts) {
	  return zlibBufferSync(new Deflate(opts), buffer);
	}

	function gzip(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Gzip(opts), buffer, callback);
	}

	function gzipSync(buffer, opts) {
	  return zlibBufferSync(new Gzip(opts), buffer);
	}

	function deflateRaw(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
	}

	function deflateRawSync(buffer, opts) {
	  return zlibBufferSync(new DeflateRaw(opts), buffer);
	}

	function unzip(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Unzip(opts), buffer, callback);
	}

	function unzipSync(buffer, opts) {
	  return zlibBufferSync(new Unzip(opts), buffer);
	}

	function inflate$1(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Inflate(opts), buffer, callback);
	}

	function inflateSync(buffer, opts) {
	  return zlibBufferSync(new Inflate(opts), buffer);
	}

	function gunzip(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Gunzip(opts), buffer, callback);
	}

	function gunzipSync(buffer, opts) {
	  return zlibBufferSync(new Gunzip(opts), buffer);
	}

	function inflateRaw(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new InflateRaw(opts), buffer, callback);
	}

	function inflateRawSync(buffer, opts) {
	  return zlibBufferSync(new InflateRaw(opts), buffer);
	}

	function zlibBuffer(engine, buffer, callback) {
	  var buffers = [];
	  var nread = 0;

	  engine.on('error', onError);
	  engine.on('end', onEnd);

	  engine.end(buffer);
	  flow();

	  function flow() {
	    var chunk;
	    while (null !== (chunk = engine.read())) {
	      buffers.push(chunk);
	      nread += chunk.length;
	    }
	    engine.once('readable', flow);
	  }

	  function onError(err) {
	    engine.removeListener('end', onEnd);
	    engine.removeListener('readable', flow);
	    callback(err);
	  }

	  function onEnd() {
	    var buf = Buffer.concat(buffers, nread);
	    buffers = [];
	    callback(null, buf);
	    engine.close();
	  }
	}

	function zlibBufferSync(engine, buffer) {
	  if (typeof buffer === 'string')
	    buffer = new Buffer(buffer);
	  if (!isBuffer(buffer))
	    throw new TypeError('Not a string or buffer');

	  var flushFlag = binding$1.Z_FINISH;

	  return engine._processChunk(buffer, flushFlag);
	}

	// generic zlib
	// minimal 2-byte header
	function Deflate(opts) {
	  if (!(this instanceof Deflate)) return new Deflate(opts);
	  Zlib$1.call(this, opts, binding$1.DEFLATE);
	}

	function Inflate(opts) {
	  if (!(this instanceof Inflate)) return new Inflate(opts);
	  Zlib$1.call(this, opts, binding$1.INFLATE);
	}



	// gzip - bigger header, same deflate compression
	function Gzip(opts) {
	  if (!(this instanceof Gzip)) return new Gzip(opts);
	  Zlib$1.call(this, opts, binding$1.GZIP);
	}

	function Gunzip(opts) {
	  if (!(this instanceof Gunzip)) return new Gunzip(opts);
	  Zlib$1.call(this, opts, binding$1.GUNZIP);
	}



	// raw - no header
	function DeflateRaw(opts) {
	  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
	  Zlib$1.call(this, opts, binding$1.DEFLATERAW);
	}

	function InflateRaw(opts) {
	  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
	  Zlib$1.call(this, opts, binding$1.INFLATERAW);
	}


	// auto-detect header.
	function Unzip(opts) {
	  if (!(this instanceof Unzip)) return new Unzip(opts);
	  Zlib$1.call(this, opts, binding$1.UNZIP);
	}


	// the Zlib class they all inherit from
	// This thing manages the queue of requests, and returns
	// true or false if there is anything in the queue when
	// you call the .write() method.

	function Zlib$1(opts, mode) {
	  this._opts = opts = opts || {};
	  this._chunkSize = opts.chunkSize || binding$1.Z_DEFAULT_CHUNK;

	  Transform.call(this, opts);

	  if (opts.flush) {
	    if (opts.flush !== binding$1.Z_NO_FLUSH &&
	        opts.flush !== binding$1.Z_PARTIAL_FLUSH &&
	        opts.flush !== binding$1.Z_SYNC_FLUSH &&
	        opts.flush !== binding$1.Z_FULL_FLUSH &&
	        opts.flush !== binding$1.Z_FINISH &&
	        opts.flush !== binding$1.Z_BLOCK) {
	      throw new Error('Invalid flush flag: ' + opts.flush);
	    }
	  }
	  this._flushFlag = opts.flush || binding$1.Z_NO_FLUSH;

	  if (opts.chunkSize) {
	    if (opts.chunkSize < binding$1.Z_MIN_CHUNK ||
	        opts.chunkSize > binding$1.Z_MAX_CHUNK) {
	      throw new Error('Invalid chunk size: ' + opts.chunkSize);
	    }
	  }

	  if (opts.windowBits) {
	    if (opts.windowBits < binding$1.Z_MIN_WINDOWBITS ||
	        opts.windowBits > binding$1.Z_MAX_WINDOWBITS) {
	      throw new Error('Invalid windowBits: ' + opts.windowBits);
	    }
	  }

	  if (opts.level) {
	    if (opts.level < binding$1.Z_MIN_LEVEL ||
	        opts.level > binding$1.Z_MAX_LEVEL) {
	      throw new Error('Invalid compression level: ' + opts.level);
	    }
	  }

	  if (opts.memLevel) {
	    if (opts.memLevel < binding$1.Z_MIN_MEMLEVEL ||
	        opts.memLevel > binding$1.Z_MAX_MEMLEVEL) {
	      throw new Error('Invalid memLevel: ' + opts.memLevel);
	    }
	  }

	  if (opts.strategy) {
	    if (opts.strategy != binding$1.Z_FILTERED &&
	        opts.strategy != binding$1.Z_HUFFMAN_ONLY &&
	        opts.strategy != binding$1.Z_RLE &&
	        opts.strategy != binding$1.Z_FIXED &&
	        opts.strategy != binding$1.Z_DEFAULT_STRATEGY) {
	      throw new Error('Invalid strategy: ' + opts.strategy);
	    }
	  }

	  if (opts.dictionary) {
	    if (!isBuffer(opts.dictionary)) {
	      throw new Error('Invalid dictionary: it should be a Buffer instance');
	    }
	  }

	  this._binding = new binding$1.Zlib(mode);

	  var self = this;
	  this._hadError = false;
	  this._binding.onerror = function(message, errno) {
	    // there is no way to cleanly recover.
	    // continuing only obscures problems.
	    self._binding = null;
	    self._hadError = true;

	    var error = new Error(message);
	    error.errno = errno;
	    error.code = binding$1.codes[errno];
	    self.emit('error', error);
	  };

	  var level = binding$1.Z_DEFAULT_COMPRESSION;
	  if (typeof opts.level === 'number') level = opts.level;

	  var strategy = binding$1.Z_DEFAULT_STRATEGY;
	  if (typeof opts.strategy === 'number') strategy = opts.strategy;

	  this._binding.init(opts.windowBits || binding$1.Z_DEFAULT_WINDOWBITS,
	                     level,
	                     opts.memLevel || binding$1.Z_DEFAULT_MEMLEVEL,
	                     strategy,
	                     opts.dictionary);

	  this._buffer = new Buffer(this._chunkSize);
	  this._offset = 0;
	  this._closed = false;
	  this._level = level;
	  this._strategy = strategy;

	  this.once('end', this.close);
	}

	inherits$1(Zlib$1, Transform);

	Zlib$1.prototype.params = function(level, strategy, callback) {
	  if (level < binding$1.Z_MIN_LEVEL ||
	      level > binding$1.Z_MAX_LEVEL) {
	    throw new RangeError('Invalid compression level: ' + level);
	  }
	  if (strategy != binding$1.Z_FILTERED &&
	      strategy != binding$1.Z_HUFFMAN_ONLY &&
	      strategy != binding$1.Z_RLE &&
	      strategy != binding$1.Z_FIXED &&
	      strategy != binding$1.Z_DEFAULT_STRATEGY) {
	    throw new TypeError('Invalid strategy: ' + strategy);
	  }

	  if (this._level !== level || this._strategy !== strategy) {
	    var self = this;
	    this.flush(binding$1.Z_SYNC_FLUSH, function() {
	      self._binding.params(level, strategy);
	      if (!self._hadError) {
	        self._level = level;
	        self._strategy = strategy;
	        if (callback) callback();
	      }
	    });
	  } else {
	    nextTick(callback);
	  }
	};

	Zlib$1.prototype.reset = function() {
	  return this._binding.reset();
	};

	// This is the _flush function called by the transform class,
	// internally, when the last chunk has been written.
	Zlib$1.prototype._flush = function(callback) {
	  this._transform(new Buffer(0), '', callback);
	};

	Zlib$1.prototype.flush = function(kind, callback) {
	  var ws = this._writableState;

	  if (typeof kind === 'function' || (kind === void 0 && !callback)) {
	    callback = kind;
	    kind = binding$1.Z_FULL_FLUSH;
	  }

	  if (ws.ended) {
	    if (callback)
	      nextTick(callback);
	  } else if (ws.ending) {
	    if (callback)
	      this.once('end', callback);
	  } else if (ws.needDrain) {
	    var self = this;
	    this.once('drain', function() {
	      self.flush(callback);
	    });
	  } else {
	    this._flushFlag = kind;
	    this.write(new Buffer(0), '', callback);
	  }
	};

	Zlib$1.prototype.close = function(callback) {
	  if (callback)
	    nextTick(callback);

	  if (this._closed)
	    return;

	  this._closed = true;

	  this._binding.close();

	  var self = this;
	  nextTick(function() {
	    self.emit('close');
	  });
	};

	Zlib$1.prototype._transform = function(chunk, encoding, cb) {
	  var flushFlag;
	  var ws = this._writableState;
	  var ending = ws.ending || ws.ended;
	  var last = ending && (!chunk || ws.length === chunk.length);

	  if (!chunk === null && !isBuffer(chunk))
	    return cb(new Error('invalid input'));

	  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
	  // If it's explicitly flushing at some other time, then we use
	  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
	  // goodness.
	  if (last)
	    flushFlag = binding$1.Z_FINISH;
	  else {
	    flushFlag = this._flushFlag;
	    // once we've flushed the last of the queue, stop flushing and
	    // go back to the normal behavior.
	    if (chunk.length >= ws.length) {
	      this._flushFlag = this._opts.flush || binding$1.Z_NO_FLUSH;
	    }
	  }

	  this._processChunk(chunk, flushFlag, cb);
	};

	Zlib$1.prototype._processChunk = function(chunk, flushFlag, cb) {
	  var availInBefore = chunk && chunk.length;
	  var availOutBefore = this._chunkSize - this._offset;
	  var inOff = 0;

	  var self = this;

	  var async = typeof cb === 'function';

	  if (!async) {
	    var buffers = [];
	    var nread = 0;

	    var error;
	    this.on('error', function(er) {
	      error = er;
	    });

	    do {
	      var res = this._binding.writeSync(flushFlag,
	                                        chunk, // in
	                                        inOff, // in_off
	                                        availInBefore, // in_len
	                                        this._buffer, // out
	                                        this._offset, //out_off
	                                        availOutBefore); // out_len
	    } while (!this._hadError && callback(res[0], res[1]));

	    if (this._hadError) {
	      throw error;
	    }

	    var buf = Buffer.concat(buffers, nread);
	    this.close();

	    return buf;
	  }

	  var req = this._binding.write(flushFlag,
	                                chunk, // in
	                                inOff, // in_off
	                                availInBefore, // in_len
	                                this._buffer, // out
	                                this._offset, //out_off
	                                availOutBefore); // out_len

	  req.buffer = chunk;
	  req.callback = callback;

	  function callback(availInAfter, availOutAfter) {
	    if (self._hadError)
	      return;

	    var have = availOutBefore - availOutAfter;
	    assert(have >= 0, 'have should not go down');

	    if (have > 0) {
	      var out = self._buffer.slice(self._offset, self._offset + have);
	      self._offset += have;
	      // serve some output to the consumer.
	      if (async) {
	        self.push(out);
	      } else {
	        buffers.push(out);
	        nread += out.length;
	      }
	    }

	    // exhausted the output buffer, or used all the input create a new one.
	    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
	      availOutBefore = self._chunkSize;
	      self._offset = 0;
	      self._buffer = new Buffer(self._chunkSize);
	    }

	    if (availOutAfter === 0) {
	      // Not actually done.  Need to reprocess.
	      // Also, update the availInBefore to the availInAfter value,
	      // so that if we have to hit it a third (fourth, etc.) time,
	      // it'll have the correct byte counts.
	      inOff += (availInBefore - availInAfter);
	      availInBefore = availInAfter;

	      if (!async)
	        return true;

	      var newReq = self._binding.write(flushFlag,
	                                       chunk,
	                                       inOff,
	                                       availInBefore,
	                                       self._buffer,
	                                       self._offset,
	                                       self._chunkSize);
	      newReq.callback = callback; // this same function
	      newReq.buffer = chunk;
	      return;
	    }

	    if (!async)
	      return false;

	    // finished with the chunk.
	    cb();
	  }
	};

	inherits$1(Deflate, Zlib$1);
	inherits$1(Inflate, Zlib$1);
	inherits$1(Gzip, Zlib$1);
	inherits$1(Gunzip, Zlib$1);
	inherits$1(DeflateRaw, Zlib$1);
	inherits$1(InflateRaw, Zlib$1);
	inherits$1(Unzip, Zlib$1);
	var zlib = {
	  codes: codes,
	  createDeflate: createDeflate,
	  createInflate: createInflate,
	  createDeflateRaw: createDeflateRaw,
	  createInflateRaw: createInflateRaw,
	  createGzip: createGzip,
	  createGunzip: createGunzip,
	  createUnzip: createUnzip,
	  deflate: deflate$1,
	  deflateSync: deflateSync,
	  gzip: gzip,
	  gzipSync: gzipSync,
	  deflateRaw: deflateRaw,
	  deflateRawSync: deflateRawSync,
	  unzip: unzip,
	  unzipSync: unzipSync,
	  inflate: inflate$1,
	  inflateSync: inflateSync,
	  gunzip: gunzip,
	  gunzipSync: gunzipSync,
	  inflateRaw: inflateRaw,
	  inflateRawSync: inflateRawSync,
	  Deflate: Deflate,
	  Inflate: Inflate,
	  Gzip: Gzip,
	  Gunzip: Gunzip,
	  DeflateRaw: DeflateRaw,
	  InflateRaw: InflateRaw,
	  Unzip: Unzip,
	  Zlib: Zlib$1
	};

	var chunkstream = createCommonjsModule(function (module) {






	var ChunkStream = module.exports = function() {
	  Stream.call(this);

	  this._buffers = [];
	  this._buffered = 0;

	  this._reads = [];
	  this._paused = false;

	  this._encoding = 'utf8';
	  this.writable = true;
	};
	require$$0.inherits(ChunkStream, Stream);


	ChunkStream.prototype.read = function(length, callback) {

	  this._reads.push({
	    length: Math.abs(length),  // if length < 0 then at most this length
	    allowLess: length < 0,
	    func: callback
	  });

	  nextTick(function() {
	    this._process();

	    // its paused and there is not enought data then ask for more
	    if (this._paused && this._reads.length > 0) {
	      this._paused = false;

	      this.emit('drain');
	    }
	  }.bind(this));
	};

	ChunkStream.prototype.write = function(data, encoding) {

	  if (!this.writable) {
	    this.emit('error', new Error('Stream not writable'));
	    return false;
	  }

	  var dataBuffer;
	  if (isBuffer(data)) {
	    dataBuffer = data;
	  }
	  else {
	    dataBuffer = new Buffer(data, encoding || this._encoding);
	  }

	  this._buffers.push(dataBuffer);
	  this._buffered += dataBuffer.length;

	  this._process();

	  // ok if there are no more read requests
	  if (this._reads && this._reads.length === 0) {
	    this._paused = true;
	  }

	  return this.writable && !this._paused;
	};

	ChunkStream.prototype.end = function(data, encoding) {

	  if (data) {
	    this.write(data, encoding);
	  }

	  this.writable = false;

	  // already destroyed
	  if (!this._buffers) {
	    return;
	  }

	  // enqueue or handle end
	  if (this._buffers.length === 0) {
	    this._end();
	  }
	  else {
	    this._buffers.push(null);
	    this._process();
	  }
	};

	ChunkStream.prototype.destroySoon = ChunkStream.prototype.end;

	ChunkStream.prototype._end = function() {

	  if (this._reads.length > 0) {
	    this.emit('error',
	      new Error('There are some read requests waiting on finished stream')
	    );
	  }

	  this.destroy();
	};

	ChunkStream.prototype.destroy = function() {

	  if (!this._buffers) {
	    return;
	  }

	  this.writable = false;
	  this._reads = null;
	  this._buffers = null;

	  this.emit('close');
	};

	ChunkStream.prototype._processReadAllowingLess = function(read) {
	  // ok there is any data so that we can satisfy this request
	  this._reads.shift(); // == read

	  // first we need to peek into first buffer
	  var smallerBuf = this._buffers[0];

	  // ok there is more data than we need
	  if (smallerBuf.length > read.length) {

	    this._buffered -= read.length;
	    this._buffers[0] = smallerBuf.slice(read.length);

	    read.func.call(this, smallerBuf.slice(0, read.length));

	  }
	  else {
	    // ok this is less than maximum length so use it all
	    this._buffered -= smallerBuf.length;
	    this._buffers.shift(); // == smallerBuf

	    read.func.call(this, smallerBuf);
	  }
	};

	ChunkStream.prototype._processRead = function(read) {
	  this._reads.shift(); // == read

	  var pos = 0;
	  var count = 0;
	  var data = new Buffer(read.length);

	  // create buffer for all data
	  while (pos < read.length) {

	    var buf = this._buffers[count++];
	    var len = Math.min(buf.length, read.length - pos);

	    buf.copy(data, pos, 0, len);
	    pos += len;

	    // last buffer wasn't used all so just slice it and leave
	    if (len !== buf.length) {
	      this._buffers[--count] = buf.slice(len);
	    }
	  }

	  // remove all used buffers
	  if (count > 0) {
	    this._buffers.splice(0, count);
	  }

	  this._buffered -= read.length;

	  read.func.call(this, data);
	};

	ChunkStream.prototype._process = function() {

	  try {
	    // as long as there is any data and read requests
	    while (this._buffered > 0 && this._reads && this._reads.length > 0) {

	      var read = this._reads[0];

	      // read any data (but no more than length)
	      if (read.allowLess) {
	        this._processReadAllowingLess(read);

	      }
	      else if (this._buffered >= read.length) {
	        // ok we can meet some expectations

	        this._processRead(read);
	      }
	      else {
	        // not enought data to satisfy first request in queue
	        // so we need to wait for more
	        break;
	      }
	    }

	    if (this._buffers && this._buffers.length > 0 && this._buffers[0] === null) {
	      this._end();
	    }
	  }
	  catch (ex) {
	    this.emit('error', ex);
	  }
	};
	});

	// Adam 7
	//   0 1 2 3 4 5 6 7
	// 0 x 6 4 6 x 6 4 6
	// 1 7 7 7 7 7 7 7 7
	// 2 5 6 5 6 5 6 5 6
	// 3 7 7 7 7 7 7 7 7
	// 4 3 6 4 6 3 6 4 6
	// 5 7 7 7 7 7 7 7 7
	// 6 5 6 5 6 5 6 5 6
	// 7 7 7 7 7 7 7 7 7


	var imagePasses = [
	  { // pass 1 - 1px
	    x: [0],
	    y: [0]
	  },
	  { // pass 2 - 1px
	    x: [4],
	    y: [0]
	  },
	  { // pass 3 - 2px
	    x: [0, 4],
	    y: [4]
	  },
	  { // pass 4 - 4px
	    x: [2, 6],
	    y: [0, 4]
	  },
	  { // pass 5 - 8px
	    x: [0, 2, 4, 6],
	    y: [2, 6]
	  },
	  { // pass 6 - 16px
	    x: [1, 3, 5, 7],
	    y: [0, 2, 4, 6]
	  },
	  { // pass 7 - 32px
	    x: [0, 1, 2, 3, 4, 5, 6, 7],
	    y: [1, 3, 5, 7]
	  }
	];

	var getImagePasses = function(width, height) {
	  var images = [];
	  var xLeftOver = width % 8;
	  var yLeftOver = height % 8;
	  var xRepeats = (width - xLeftOver) / 8;
	  var yRepeats = (height - yLeftOver) / 8;
	  for (var i = 0; i < imagePasses.length; i++) {
	    var pass = imagePasses[i];
	    var passWidth = xRepeats * pass.x.length;
	    var passHeight = yRepeats * pass.y.length;
	    for (var j = 0; j < pass.x.length; j++) {
	      if (pass.x[j] < xLeftOver) {
	        passWidth++;
	      }
	      else {
	        break;
	      }
	    }
	    for (j = 0; j < pass.y.length; j++) {
	      if (pass.y[j] < yLeftOver) {
	        passHeight++;
	      }
	      else {
	        break;
	      }
	    }
	    if (passWidth > 0 && passHeight > 0) {
	      images.push({ width: passWidth, height: passHeight, index: i });
	    }
	  }
	  return images;
	};

	var getInterlaceIterator = function(width) {
	  return function(x, y, pass) {
	    var outerXLeftOver = x % imagePasses[pass].x.length;
	    var outerX = (((x - outerXLeftOver) / imagePasses[pass].x.length) * 8) + imagePasses[pass].x[outerXLeftOver];
	    var outerYLeftOver = y % imagePasses[pass].y.length;
	    var outerY = (((y - outerYLeftOver) / imagePasses[pass].y.length) * 8) + imagePasses[pass].y[outerYLeftOver];
	    return (outerX * 4) + (outerY * width * 4);
	  };
	};

	var interlace = {
		getImagePasses: getImagePasses,
		getInterlaceIterator: getInterlaceIterator
	};

	var paethPredictor = function paethPredictor(left, above, upLeft) {

	  var paeth = left + above - upLeft;
	  var pLeft = Math.abs(paeth - left);
	  var pAbove = Math.abs(paeth - above);
	  var pUpLeft = Math.abs(paeth - upLeft);

	  if (pLeft <= pAbove && pLeft <= pUpLeft) {
	    return left;
	  }
	  if (pAbove <= pUpLeft) {
	    return above;
	  }
	  return upLeft;
	};

	var filterParse = createCommonjsModule(function (module) {




	function getByteWidth(width, bpp, depth) {
	  var byteWidth = width * bpp;
	  if (depth !== 8) {
	    byteWidth = Math.ceil(byteWidth / (8 / depth));
	  }
	  return byteWidth;
	}

	var Filter = module.exports = function(bitmapInfo, dependencies) {

	  var width = bitmapInfo.width;
	  var height = bitmapInfo.height;
	  var interlace$1 = bitmapInfo.interlace;
	  var bpp = bitmapInfo.bpp;
	  var depth = bitmapInfo.depth;

	  this.read = dependencies.read;
	  this.write = dependencies.write;
	  this.complete = dependencies.complete;

	  this._imageIndex = 0;
	  this._images = [];
	  if (interlace$1) {
	    var passes = interlace.getImagePasses(width, height);
	    for (var i = 0; i < passes.length; i++) {
	      this._images.push({
	        byteWidth: getByteWidth(passes[i].width, bpp, depth),
	        height: passes[i].height,
	        lineIndex: 0
	      });
	    }
	  }
	  else {
	    this._images.push({
	      byteWidth: getByteWidth(width, bpp, depth),
	      height: height,
	      lineIndex: 0
	    });
	  }

	  // when filtering the line we look at the pixel to the left
	  // the spec also says it is done on a byte level regardless of the number of pixels
	  // so if the depth is byte compatible (8 or 16) we subtract the bpp in order to compare back
	  // a pixel rather than just a different byte part. However if we are sub byte, we ignore.
	  if (depth === 8) {
	    this._xComparison = bpp;
	  }
	  else if (depth === 16) {
	    this._xComparison = bpp * 2;
	  }
	  else {
	    this._xComparison = 1;
	  }
	};

	Filter.prototype.start = function() {
	  this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));
	};

	Filter.prototype._unFilterType1 = function(rawData, unfilteredLine, byteWidth) {

	  var xComparison = this._xComparison;
	  var xBiggerThan = xComparison - 1;

	  for (var x = 0; x < byteWidth; x++) {
	    var rawByte = rawData[1 + x];
	    var f1Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
	    unfilteredLine[x] = rawByte + f1Left;
	  }
	};

	Filter.prototype._unFilterType2 = function(rawData, unfilteredLine, byteWidth) {

	  var lastLine = this._lastLine;

	  for (var x = 0; x < byteWidth; x++) {
	    var rawByte = rawData[1 + x];
	    var f2Up = lastLine ? lastLine[x] : 0;
	    unfilteredLine[x] = rawByte + f2Up;
	  }
	};

	Filter.prototype._unFilterType3 = function(rawData, unfilteredLine, byteWidth) {

	  var xComparison = this._xComparison;
	  var xBiggerThan = xComparison - 1;
	  var lastLine = this._lastLine;

	  for (var x = 0; x < byteWidth; x++) {
	    var rawByte = rawData[1 + x];
	    var f3Up = lastLine ? lastLine[x] : 0;
	    var f3Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
	    var f3Add = Math.floor((f3Left + f3Up) / 2);
	    unfilteredLine[x] = rawByte + f3Add;
	  }
	};

	Filter.prototype._unFilterType4 = function(rawData, unfilteredLine, byteWidth) {

	  var xComparison = this._xComparison;
	  var xBiggerThan = xComparison - 1;
	  var lastLine = this._lastLine;

	  for (var x = 0; x < byteWidth; x++) {
	    var rawByte = rawData[1 + x];
	    var f4Up = lastLine ? lastLine[x] : 0;
	    var f4Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
	    var f4UpLeft = x > xBiggerThan && lastLine ? lastLine[x - xComparison] : 0;
	    var f4Add = paethPredictor(f4Left, f4Up, f4UpLeft);
	    unfilteredLine[x] = rawByte + f4Add;
	  }
	};

	Filter.prototype._reverseFilterLine = function(rawData) {

	  var filter = rawData[0];
	  var unfilteredLine;
	  var currentImage = this._images[this._imageIndex];
	  var byteWidth = currentImage.byteWidth;

	  if (filter === 0) {
	    unfilteredLine = rawData.slice(1, byteWidth + 1);
	  }
	  else {

	    unfilteredLine = new Buffer(byteWidth);

	    switch (filter) {
	      case 1:
	        this._unFilterType1(rawData, unfilteredLine, byteWidth);
	        break;
	      case 2:
	        this._unFilterType2(rawData, unfilteredLine, byteWidth);
	        break;
	      case 3:
	        this._unFilterType3(rawData, unfilteredLine, byteWidth);
	        break;
	      case 4:
	        this._unFilterType4(rawData, unfilteredLine, byteWidth);
	        break;
	      default:
	        throw new Error('Unrecognised filter type - ' + filter);
	    }
	  }

	  this.write(unfilteredLine);

	  currentImage.lineIndex++;
	  if (currentImage.lineIndex >= currentImage.height) {
	    this._lastLine = null;
	    this._imageIndex++;
	    currentImage = this._images[this._imageIndex];
	  }
	  else {
	    this._lastLine = unfilteredLine;
	  }

	  if (currentImage) {
	    // read, using the byte width that may be from the new current image
	    this.read(currentImage.byteWidth + 1, this._reverseFilterLine.bind(this));
	  }
	  else {
	    this._lastLine = null;
	    this.complete();
	  }
	};
	});

	var filterParseAsync = createCommonjsModule(function (module) {






	var FilterAsync = module.exports = function(bitmapInfo) {
	  chunkstream.call(this);

	  var buffers = [];
	  var that = this;
	  this._filter = new filterParse(bitmapInfo, {
	    read: this.read.bind(this),
	    write: function(buffer) {
	      buffers.push(buffer);
	    },
	    complete: function() {
	      that.emit('complete', Buffer.concat(buffers));
	    }
	  });

	  this._filter.start();
	};
	require$$0.inherits(FilterAsync, chunkstream);
	});

	var constants = {

	  PNG_SIGNATURE: [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a],

	  TYPE_IHDR: 0x49484452,
	  TYPE_IEND: 0x49454e44,
	  TYPE_IDAT: 0x49444154,
	  TYPE_PLTE: 0x504c5445,
	  TYPE_tRNS: 0x74524e53, // eslint-disable-line camelcase
	  TYPE_gAMA: 0x67414d41, // eslint-disable-line camelcase

	  // color-type bits
	  COLORTYPE_GRAYSCALE: 0,
	  COLORTYPE_PALETTE: 1,
	  COLORTYPE_COLOR: 2,
	  COLORTYPE_ALPHA: 4, // e.g. grayscale and alpha

	  // color-type combinations
	  COLORTYPE_PALETTE_COLOR: 3,
	  COLORTYPE_COLOR_ALPHA: 6,

	  COLORTYPE_TO_BPP_MAP: {
	    0: 1,
	    2: 3,
	    3: 1,
	    4: 2,
	    6: 4
	  },

	  GAMMA_DIVISION: 100000
	};

	var crc = createCommonjsModule(function (module) {

	var crcTable = [];

	(function() {
	  for (var i = 0; i < 256; i++) {
	    var currentCrc = i;
	    for (var j = 0; j < 8; j++) {
	      if (currentCrc & 1) {
	        currentCrc = 0xedb88320 ^ (currentCrc >>> 1);
	      }
	      else {
	        currentCrc = currentCrc >>> 1;
	      }
	    }
	    crcTable[i] = currentCrc;
	  }
	}());

	var CrcCalculator = module.exports = function() {
	  this._crc = -1;
	};

	CrcCalculator.prototype.write = function(data) {

	  for (var i = 0; i < data.length; i++) {
	    this._crc = crcTable[(this._crc ^ data[i]) & 0xff] ^ (this._crc >>> 8);
	  }
	  return true;
	};

	CrcCalculator.prototype.crc32 = function() {
	  return this._crc ^ -1;
	};


	CrcCalculator.crc32 = function(buf) {

	  var crc = -1;
	  for (var i = 0; i < buf.length; i++) {
	    crc = crcTable[(crc ^ buf[i]) & 0xff] ^ (crc >>> 8);
	  }
	  return crc ^ -1;
	};
	});

	var parser$1 = createCommonjsModule(function (module) {





	var Parser = module.exports = function(options, dependencies) {

	  this._options = options;
	  options.checkCRC = options.checkCRC !== false;

	  this._hasIHDR = false;
	  this._hasIEND = false;

	  // input flags/metadata
	  this._palette = [];
	  this._colorType = 0;

	  this._chunks = {};
	  this._chunks[constants.TYPE_IHDR] = this._handleIHDR.bind(this);
	  this._chunks[constants.TYPE_IEND] = this._handleIEND.bind(this);
	  this._chunks[constants.TYPE_IDAT] = this._handleIDAT.bind(this);
	  this._chunks[constants.TYPE_PLTE] = this._handlePLTE.bind(this);
	  this._chunks[constants.TYPE_tRNS] = this._handleTRNS.bind(this);
	  this._chunks[constants.TYPE_gAMA] = this._handleGAMA.bind(this);

	  this.read = dependencies.read;
	  this.error = dependencies.error;
	  this.metadata = dependencies.metadata;
	  this.gamma = dependencies.gamma;
	  this.transColor = dependencies.transColor;
	  this.palette = dependencies.palette;
	  this.parsed = dependencies.parsed;
	  this.inflateData = dependencies.inflateData;
	  this.finished = dependencies.finished;
	};

	Parser.prototype.start = function() {
	  this.read(constants.PNG_SIGNATURE.length,
	    this._parseSignature.bind(this)
	  );
	};

	Parser.prototype._parseSignature = function(data) {

	  var signature = constants.PNG_SIGNATURE;

	  for (var i = 0; i < signature.length; i++) {
	    if (data[i] !== signature[i]) {
	      this.error(new Error('Invalid file signature'));
	      return;
	    }
	  }
	  this.read(8, this._parseChunkBegin.bind(this));
	};

	Parser.prototype._parseChunkBegin = function(data) {

	  // chunk content length
	  var length = data.readUInt32BE(0);

	  // chunk type
	  var type = data.readUInt32BE(4);
	  var name = '';
	  for (var i = 4; i < 8; i++) {
	    name += String.fromCharCode(data[i]);
	  }

	  //console.log('chunk ', name, length);

	  // chunk flags
	  var ancillary = Boolean(data[4] & 0x20); // or critical
	//    priv = Boolean(data[5] & 0x20), // or public
	//    safeToCopy = Boolean(data[7] & 0x20); // or unsafe

	  if (!this._hasIHDR && type !== constants.TYPE_IHDR) {
	    this.error(new Error('Expected IHDR on beggining'));
	    return;
	  }

	  this._crc = new crc();
	  this._crc.write(new Buffer(name));

	  if (this._chunks[type]) {
	    return this._chunks[type](length);
	  }

	  if (!ancillary) {
	    this.error(new Error('Unsupported critical chunk type ' + name));
	    return;
	  }

	  this.read(length + 4, this._skipChunk.bind(this));
	};

	Parser.prototype._skipChunk = function(/*data*/) {
	  this.read(8, this._parseChunkBegin.bind(this));
	};

	Parser.prototype._handleChunkEnd = function() {
	  this.read(4, this._parseChunkEnd.bind(this));
	};

	Parser.prototype._parseChunkEnd = function(data) {

	  var fileCrc = data.readInt32BE(0);
	  var calcCrc = this._crc.crc32();

	  // check CRC
	  if (this._options.checkCRC && calcCrc !== fileCrc) {
	    this.error(new Error('Crc error - ' + fileCrc + ' - ' + calcCrc));
	    return;
	  }

	  if (!this._hasIEND) {
	    this.read(8, this._parseChunkBegin.bind(this));
	  }
	};

	Parser.prototype._handleIHDR = function(length) {
	  this.read(length, this._parseIHDR.bind(this));
	};
	Parser.prototype._parseIHDR = function(data) {

	  this._crc.write(data);

	  var width = data.readUInt32BE(0);
	  var height = data.readUInt32BE(4);
	  var depth = data[8];
	  var colorType = data[9]; // bits: 1 palette, 2 color, 4 alpha
	  var compr = data[10];
	  var filter = data[11];
	  var interlace = data[12];

	  // console.log('    width', width, 'height', height,
	  //     'depth', depth, 'colorType', colorType,
	  //     'compr', compr, 'filter', filter, 'interlace', interlace
	  // );

	  if (depth !== 8 && depth !== 4 && depth !== 2 && depth !== 1 && depth !== 16) {
	    this.error(new Error('Unsupported bit depth ' + depth));
	    return;
	  }
	  if (!(colorType in constants.COLORTYPE_TO_BPP_MAP)) {
	    this.error(new Error('Unsupported color type'));
	    return;
	  }
	  if (compr !== 0) {
	    this.error(new Error('Unsupported compression method'));
	    return;
	  }
	  if (filter !== 0) {
	    this.error(new Error('Unsupported filter method'));
	    return;
	  }
	  if (interlace !== 0 && interlace !== 1) {
	    this.error(new Error('Unsupported interlace method'));
	    return;
	  }

	  this._colorType = colorType;

	  var bpp = constants.COLORTYPE_TO_BPP_MAP[this._colorType];

	  this._hasIHDR = true;

	  this.metadata({
	    width: width,
	    height: height,
	    depth: depth,
	    interlace: Boolean(interlace),
	    palette: Boolean(colorType & constants.COLORTYPE_PALETTE),
	    color: Boolean(colorType & constants.COLORTYPE_COLOR),
	    alpha: Boolean(colorType & constants.COLORTYPE_ALPHA),
	    bpp: bpp,
	    colorType: colorType
	  });

	  this._handleChunkEnd();
	};


	Parser.prototype._handlePLTE = function(length) {
	  this.read(length, this._parsePLTE.bind(this));
	};
	Parser.prototype._parsePLTE = function(data) {

	  this._crc.write(data);

	  var entries = Math.floor(data.length / 3);
	  // console.log('Palette:', entries);

	  for (var i = 0; i < entries; i++) {
	    this._palette.push([
	      data[i * 3],
	      data[i * 3 + 1],
	      data[i * 3 + 2],
	      0xff
	    ]);
	  }

	  this.palette(this._palette);

	  this._handleChunkEnd();
	};

	Parser.prototype._handleTRNS = function(length) {
	  this.read(length, this._parseTRNS.bind(this));
	};
	Parser.prototype._parseTRNS = function(data) {

	  this._crc.write(data);

	  // palette
	  if (this._colorType === constants.COLORTYPE_PALETTE_COLOR) {
	    if (this._palette.length === 0) {
	      this.error(new Error('Transparency chunk must be after palette'));
	      return;
	    }
	    if (data.length > this._palette.length) {
	      this.error(new Error('More transparent colors than palette size'));
	      return;
	    }
	    for (var i = 0; i < data.length; i++) {
	      this._palette[i][3] = data[i];
	    }
	    this.palette(this._palette);
	  }

	  // for colorType 0 (grayscale) and 2 (rgb)
	  // there might be one gray/color defined as transparent
	  if (this._colorType === constants.COLORTYPE_GRAYSCALE) {
	    // grey, 2 bytes
	    this.transColor([data.readUInt16BE(0)]);
	  }
	  if (this._colorType === constants.COLORTYPE_COLOR) {
	    this.transColor([data.readUInt16BE(0), data.readUInt16BE(2), data.readUInt16BE(4)]);
	  }

	  this._handleChunkEnd();
	};

	Parser.prototype._handleGAMA = function(length) {
	  this.read(length, this._parseGAMA.bind(this));
	};
	Parser.prototype._parseGAMA = function(data) {

	  this._crc.write(data);
	  this.gamma(data.readUInt32BE(0) / constants.GAMMA_DIVISION);

	  this._handleChunkEnd();
	};

	Parser.prototype._handleIDAT = function(length) {
	  this.read(-length, this._parseIDAT.bind(this, length));
	};
	Parser.prototype._parseIDAT = function(length, data) {

	  this._crc.write(data);

	  if (this._colorType === constants.COLORTYPE_PALETTE_COLOR && this._palette.length === 0) {
	    throw new Error('Expected palette not found');
	  }

	  this.inflateData(data);
	  var leftOverLength = length - data.length;

	  if (leftOverLength > 0) {
	    this._handleIDAT(leftOverLength);
	  }
	  else {
	    this._handleChunkEnd();
	  }
	};

	Parser.prototype._handleIEND = function(length) {
	  this.read(length, this._parseIEND.bind(this));
	};
	Parser.prototype._parseIEND = function(data) {

	  this._crc.write(data);

	  this._hasIEND = true;
	  this._handleChunkEnd();

	  if (this.finished) {
	    this.finished();
	  }
	};
	});

	var pixelBppMap = {
	  1: { // L
	    0: 0,
	    1: 0,
	    2: 0,
	    3: 0xff
	  },
	  2: { // LA
	    0: 0,
	    1: 0,
	    2: 0,
	    3: 1
	  },
	  3: { // RGB
	    0: 0,
	    1: 1,
	    2: 2,
	    3: 0xff
	  },
	  4: { // RGBA
	    0: 0,
	    1: 1,
	    2: 2,
	    3: 3
	  }
	};

	function bitRetriever(data, depth) {

	  var leftOver = [];
	  var i = 0;

	  function split() {
	    if (i === data.length) {
	      throw new Error('Ran out of data');
	    }
	    var byte = data[i];
	    i++;
	    var byte8, byte7, byte6, byte5, byte4, byte3, byte2, byte1;
	    switch (depth) {
	      default:
	        throw new Error('unrecognised depth');
	      case 16:
	        byte2 = data[i];
	        i++;
	        leftOver.push(((byte << 8) + byte2));
	        break;
	      case 4:
	        byte2 = byte & 0x0f;
	        byte1 = byte >> 4;
	        leftOver.push(byte1, byte2);
	        break;
	      case 2:
	        byte4 = byte & 3;
	        byte3 = byte >> 2 & 3;
	        byte2 = byte >> 4 & 3;
	        byte1 = byte >> 6 & 3;
	        leftOver.push(byte1, byte2, byte3, byte4);
	        break;
	      case 1:
	        byte8 = byte & 1;
	        byte7 = byte >> 1 & 1;
	        byte6 = byte >> 2 & 1;
	        byte5 = byte >> 3 & 1;
	        byte4 = byte >> 4 & 1;
	        byte3 = byte >> 5 & 1;
	        byte2 = byte >> 6 & 1;
	        byte1 = byte >> 7 & 1;
	        leftOver.push(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8);
	        break;
	    }
	  }

	  return {
	    get: function(count) {
	      while (leftOver.length < count) {
	        split();
	      }
	      var returner = leftOver.slice(0, count);
	      leftOver = leftOver.slice(count);
	      return returner;
	    },
	    resetAfterLine: function() {
	      leftOver.length = 0;
	    },
	    end: function() {
	      if (i !== data.length) {
	        throw new Error('extra data found');
	      }
	    }
	  };
	}

	function mapImage8Bit(image, pxData, getPxPos, bpp, data, rawPos) { // eslint-disable-line max-params
	  var imageWidth = image.width;
	  var imageHeight = image.height;
	  var imagePass = image.index;
	  for (var y = 0; y < imageHeight; y++) {
	    for (var x = 0; x < imageWidth; x++) {
	      var pxPos = getPxPos(x, y, imagePass);

	      for (var i = 0; i < 4; i++) {
	        var idx = pixelBppMap[bpp][i];
	        if (idx === 0xff) {
	          pxData[pxPos + i] = 0xff;
	        } else {
	          var dataPos = idx + rawPos;
	          if (dataPos === data.length) {
	            throw new Error('Ran out of data');
	          }
	          pxData[pxPos + i] = data[dataPos];
	        }
	      }
	      rawPos += bpp; //eslint-disable-line no-param-reassign
	    }
	  }
	  return rawPos;
	}

	function mapImageCustomBit(image, pxData, getPxPos, bpp, bits, maxBit) { // eslint-disable-line max-params
	  var imageWidth = image.width;
	  var imageHeight = image.height;
	  var imagePass = image.index;
	  for (var y = 0; y < imageHeight; y++) {
	    for (var x = 0; x < imageWidth; x++) {
	      var pixelData = bits.get(bpp);
	      var pxPos = getPxPos(x, y, imagePass);

	      for (var i = 0; i < 4; i++) {
	        var idx = pixelBppMap[bpp][i];
	        pxData[pxPos + i] = idx !== 0xff ? pixelData[idx] : maxBit;
	      }
	    }
	    bits.resetAfterLine();
	  }
	}

	var dataToBitMap = function(data, bitmapInfo) {

	  var width = bitmapInfo.width;
	  var height = bitmapInfo.height;
	  var depth = bitmapInfo.depth;
	  var bpp = bitmapInfo.bpp;
	  var interlace$1 = bitmapInfo.interlace;

	  if (depth !== 8) {
	    var bits = bitRetriever(data, depth);
	  }
	  var pxData;
	  if (depth <= 8) {
	    pxData = new Buffer(width * height * 4);
	  }
	  else {
	    pxData = new Uint16Array(width * height * 4);
	  }
	  var maxBit = Math.pow(2, depth) - 1;
	  var rawPos = 0;
	  var images;
	  var getPxPos;

	  if (interlace$1) {
	    images = interlace.getImagePasses(width, height);
	    getPxPos = interlace.getInterlaceIterator(width, height);
	  }
	  else {
	    var nonInterlacedPxPos = 0;
	    getPxPos = function() {
	      var returner = nonInterlacedPxPos;
	      nonInterlacedPxPos += 4;
	      return returner;
	    };
	    images = [{ width: width, height: height }];
	  }

	  for (var imageIndex = 0; imageIndex < images.length; imageIndex++) {
	    if (depth === 8) {
	      rawPos = mapImage8Bit(images[imageIndex], pxData, getPxPos, bpp, data, rawPos);
	    }
	    else {
	      mapImageCustomBit(images[imageIndex], pxData, getPxPos, bpp, bits, maxBit);
	    }
	  }
	  if (depth === 8) {
	    if (rawPos !== data.length) {
	      throw new Error('extra data found');
	    }
	  }
	  else {
	    bits.end();
	  }

	  return pxData;
	};

	var bitmapper = {
		dataToBitMap: dataToBitMap
	};

	function dePalette(indata, outdata, width, height, palette) {
	  var pxPos = 0;
	  // use values from palette
	  for (var y = 0; y < height; y++) {
	    for (var x = 0; x < width; x++) {
	      var color = palette[indata[pxPos]];

	      if (!color) {
	        throw new Error('index ' + indata[pxPos] + ' not in palette');
	      }

	      for (var i = 0; i < 4; i++) {
	        outdata[pxPos + i] = color[i];
	      }
	      pxPos += 4;
	    }
	  }
	}

	function replaceTransparentColor(indata, outdata, width, height, transColor) {
	  var pxPos = 0;
	  for (var y = 0; y < height; y++) {
	    for (var x = 0; x < width; x++) {
	      var makeTrans = false;

	      if (transColor.length === 1) {
	        if (transColor[0] === indata[pxPos]) {
	          makeTrans = true;
	        }
	      }
	      else if (transColor[0] === indata[pxPos] && transColor[1] === indata[pxPos + 1] && transColor[2] === indata[pxPos + 2]) {
	        makeTrans = true;
	      }
	      if (makeTrans) {
	        for (var i = 0; i < 4; i++) {
	          outdata[pxPos + i] = 0;
	        }
	      }
	      pxPos += 4;
	    }
	  }
	}

	function scaleDepth(indata, outdata, width, height, depth) {
	  var maxOutSample = 255;
	  var maxInSample = Math.pow(2, depth) - 1;
	  var pxPos = 0;

	  for (var y = 0; y < height; y++) {
	    for (var x = 0; x < width; x++) {
	      for (var i = 0; i < 4; i++) {
	        outdata[pxPos + i] = Math.floor((indata[pxPos + i] * maxOutSample) / maxInSample + 0.5);
	      }
	      pxPos += 4;
	    }
	  }
	}

	var formatNormaliser = function(indata, imageData) {

	  var depth = imageData.depth;
	  var width = imageData.width;
	  var height = imageData.height;
	  var colorType = imageData.colorType;
	  var transColor = imageData.transColor;
	  var palette = imageData.palette;

	  var outdata = indata; // only different for 16 bits

	  if (colorType === 3) { // paletted
	    dePalette(indata, outdata, width, height, palette);
	  }
	  else {
	    if (transColor) {
	      replaceTransparentColor(indata, outdata, width, height, transColor);
	    }
	    // if it needs scaling
	    if (depth !== 8) {
	      // if we need to change the buffer size
	      if (depth === 16) {
	        outdata = new Buffer(width * height * 4);
	      }
	      scaleDepth(indata, outdata, width, height, depth);
	    }
	  }
	  return outdata;
	};

	var parserAsync = createCommonjsModule(function (module) {









	var ParserAsync = module.exports = function(options) {
	  chunkstream.call(this);

	  this._parser = new parser$1(options, {
	    read: this.read.bind(this),
	    error: this._handleError.bind(this),
	    metadata: this._handleMetaData.bind(this),
	    gamma: this.emit.bind(this, 'gamma'),
	    palette: this._handlePalette.bind(this),
	    transColor: this._handleTransColor.bind(this),
	    finished: this._finished.bind(this),
	    inflateData: this._inflateData.bind(this)
	  });
	  this._options = options;
	  this.writable = true;

	  this._parser.start();
	};
	require$$0.inherits(ParserAsync, chunkstream);


	ParserAsync.prototype._handleError = function(err) {

	  this.emit('error', err);

	  this.writable = false;

	  this.destroy();

	  if (this._inflate && this._inflate.destroy) {
	    this._inflate.destroy();
	  }

	  if (this._filter) {
	    this._filter.destroy();
	    // For backward compatibility with Node 7 and below.
	    // Suppress errors due to _inflate calling write() even after
	    // it's destroy()'ed.
	    this._filter.on('error', function() {});
	  }

	  this.errord = true;
	};

	ParserAsync.prototype._inflateData = function(data) {
	  if (!this._inflate) {
	    if (this._bitmapInfo.interlace) {
	      this._inflate = zlib.createInflate();

	      this._inflate.on('error', this.emit.bind(this, 'error'));
	      this._filter.on('complete', this._complete.bind(this));

	      this._inflate.pipe(this._filter);
	    } else {
	      var rowSize = ((this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7) >> 3) + 1;
	      var imageSize = rowSize * this._bitmapInfo.height;
	      var chunkSize = Math.max(imageSize, zlib.Z_MIN_CHUNK);
	      
	      this._inflate = zlib.createInflate({ chunkSize: chunkSize });
	      var leftToInflate = imageSize;

	      var emitError = this.emit.bind(this, 'error');
	      this._inflate.on('error', function(err) {
	        if (!leftToInflate) {
	          return;
	        }

	        emitError(err);
	      });
	      this._filter.on('complete', this._complete.bind(this));

	      var filterWrite = this._filter.write.bind(this._filter);
	      this._inflate.on('data', function(chunk) {
	        if (!leftToInflate) {
	          return;
	        }

	        if (chunk.length > leftToInflate) {
	          chunk = chunk.slice(0, leftToInflate);
	        }

	        leftToInflate -= chunk.length;

	        filterWrite(chunk);
	      });

	      this._inflate.on('end', this._filter.end.bind(this._filter));
	    }
	  }
	  this._inflate.write(data);
	};

	ParserAsync.prototype._handleMetaData = function(metaData) {

	  this.emit('metadata', metaData);

	  this._bitmapInfo = Object.create(metaData);

	  this._filter = new filterParseAsync(this._bitmapInfo);
	};

	ParserAsync.prototype._handleTransColor = function(transColor) {
	  this._bitmapInfo.transColor = transColor;
	};

	ParserAsync.prototype._handlePalette = function(palette) {
	  this._bitmapInfo.palette = palette;
	};


	ParserAsync.prototype._finished = function() {
	  if (this.errord) {
	    return;
	  }

	  if (!this._inflate) {
	    this.emit('error', 'No Inflate block');
	  }
	  else {
	    // no more data to inflate
	    this._inflate.end();
	  }
	  this.destroySoon();
	};

	ParserAsync.prototype._complete = function(filteredData) {

	  if (this.errord) {
	    return;
	  }

	  try {
	    var bitmapData = bitmapper.dataToBitMap(filteredData, this._bitmapInfo);

	    var normalisedBitmapData = formatNormaliser(bitmapData, this._bitmapInfo);
	    bitmapData = null;
	  }
	  catch (ex) {
	    this._handleError(ex);
	    return;
	  }

	  this.emit('parsed', normalisedBitmapData);
	};
	});

	var bitpacker = function(dataIn, width, height, options) {
	  var outHasAlpha = [constants.COLORTYPE_COLOR_ALPHA, constants.COLORTYPE_ALPHA].indexOf(options.colorType) !== -1;
	  if (options.colorType === options.inputColorType) {
	    var bigEndian = (function() {
	      var buffer = new ArrayBuffer(2);
	      new DataView(buffer).setInt16(0, 256, true /* littleEndian */);
	      // Int16Array uses the platform's endianness.
	      return new Int16Array(buffer)[0] !== 256;
	    })();
	    // If no need to convert to grayscale and alpha is present/absent in both, take a fast route
	     if (options.bitDepth === 8 || (options.bitDepth === 16 && bigEndian)){
	         return dataIn;
	    }
	  }

	  // map to a UInt16 array if data is 16bit, fix endianness below
	  var data = options.bitDepth !== 16 ? dataIn : new Uint16Array(dataIn.buffer);

	  var maxValue = 255;
	  var inBpp = constants.COLORTYPE_TO_BPP_MAP[options.inputColorType];
	  if (inBpp == 4 && !options.inputHasAlpha) inBpp = 3;
	  var outBpp = constants.COLORTYPE_TO_BPP_MAP[options.colorType];
	  if (options.bitDepth === 16) {
	    maxValue = 65535;
	    outBpp *= 2;
	  }
	  var outData = new Buffer(width * height * outBpp);

	  var inIndex = 0;
	  var outIndex = 0;

	  var bgColor = options.bgColor || {};
	  if (bgColor.red === undefined) {
	    bgColor.red = maxValue;
	  }
	  if (bgColor.green === undefined) {
	    bgColor.green = maxValue;
	  }
	  if (bgColor.blue === undefined) {
	    bgColor.blue = maxValue;
	  }

	  function getRGBA(data, inIndex) {
	    var red, green, blue, alpha = maxValue;
	    switch (options.inputColorType) {
	      case constants.COLORTYPE_COLOR_ALPHA:
	        alpha = data[inIndex + 3];
	        red = data[inIndex];
	        green = data[inIndex+1];
	        blue = data[inIndex+2];
	        break;
	      case constants.COLORTYPE_COLOR:
	        red = data[inIndex];
	        green = data[inIndex+1];
	        blue = data[inIndex+2];
	        break;
	      case constants.COLORTYPE_ALPHA:
	        alpha = data[inIndex + 1];
	        red = data[inIndex];
	        green = red;
	        blue = red;
	        break;
	      case constants.COLORTYPE_GRAYSCALE:
	        red = data[inIndex];
	        green = red;
	        blue = red;
	        break;
	      default:
	        throw new Error('input color type:' + options.inputColorType + ' is not supported at present');
	    }

	    if (options.inputHasAlpha) {
	      if (!outHasAlpha) {
	        alpha /= maxValue;
	        red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), maxValue);
	        green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), maxValue);
	        blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), maxValue);
	      }
	    }
	    return {red: red, green: green, blue: blue, alpha: alpha};
	  }

	  for (var y = 0; y < height; y++) {
	    for (var x = 0; x < width; x++) {
	      var rgba = getRGBA(data, inIndex);

	      switch (options.colorType) {
	        case constants.COLORTYPE_COLOR_ALPHA:
	        case constants.COLORTYPE_COLOR:
	          if (options.bitDepth === 8) {
	            outData[outIndex] = rgba.red;
	            outData[outIndex + 1] = rgba.green;
	            outData[outIndex + 2] = rgba.blue;
	            if (outHasAlpha) {
	              outData[outIndex + 3] = rgba.alpha;
	            }
	          } else {
	            outData.writeUInt16BE(rgba.red, outIndex);
	            outData.writeUInt16BE(rgba.green, outIndex + 2);
	            outData.writeUInt16BE(rgba.blue, outIndex + 4);
	            if (outHasAlpha) {
	              outData.writeUInt16BE(rgba.alpha, outIndex + 6);
	            }
	          }
	          break;
	        case constants.COLORTYPE_ALPHA:
	        case constants.COLORTYPE_GRAYSCALE:
	          // Convert to grayscale and alpha
	          var grayscale = (rgba.red + rgba.green + rgba.blue) / 3;
	          if (options.bitDepth === 8) {
	            outData[outIndex] = grayscale;
	            if (outHasAlpha) {
	              outData[outIndex + 1] = rgba.alpha;
	            }
	          } else {
	            outData.writeUInt16BE(grayscale, outIndex);
	            if (outHasAlpha) {
	              outData.writeUInt16BE(rgba.alpha, outIndex + 2);
	            }
	          }
	          break;
	      }

	      inIndex += inBpp;
	      outIndex += outBpp;
	    }
	  }

	  return outData;
	};

	function filterNone(pxData, pxPos, byteWidth, rawData, rawPos) {

	  for (var x = 0; x < byteWidth; x++) {    
	    rawData[rawPos + x] = pxData[pxPos + x];
	  }
	}

	function filterSumNone(pxData, pxPos, byteWidth) {

	  var sum = 0;
	  var length = pxPos + byteWidth;

	  for (var i = pxPos; i < length; i++) {
	    sum += Math.abs(pxData[i]);
	  }
	  return sum;
	}

	function filterSub(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {

	  for (var x = 0; x < byteWidth; x++) {

	    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
	    var val = pxData[pxPos + x] - left;

	    rawData[rawPos + x] = val;
	  }
	}

	function filterSumSub(pxData, pxPos, byteWidth, bpp) {

	  var sum = 0;
	  for (var x = 0; x < byteWidth; x++) {

	    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
	    var val = pxData[pxPos + x] - left;

	    sum += Math.abs(val);
	  }

	  return sum;
	}

	function filterUp(pxData, pxPos, byteWidth, rawData, rawPos) {

	  for (var x = 0; x < byteWidth; x++) {

	    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
	    var val = pxData[pxPos + x] - up;

	    rawData[rawPos + x] = val;
	  }
	}

	function filterSumUp(pxData, pxPos, byteWidth) {

	  var sum = 0;
	  var length = pxPos + byteWidth;
	  for (var x = pxPos; x < length; x++) {

	    var up = pxPos > 0 ? pxData[x - byteWidth] : 0;
	    var val = pxData[x] - up;

	    sum += Math.abs(val);
	  }

	  return sum;
	}

	function filterAvg(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {

	  for (var x = 0; x < byteWidth; x++) {

	    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
	    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
	    var val = pxData[pxPos + x] - ((left + up) >> 1);

	    rawData[rawPos + x] = val;
	  }
	}

	function filterSumAvg(pxData, pxPos, byteWidth, bpp) {

	  var sum = 0;
	  for (var x = 0; x < byteWidth; x++) {

	    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
	    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
	    var val = pxData[pxPos + x] - ((left + up) >> 1);

	    sum += Math.abs(val);
	  }

	  return sum;
	}

	function filterPaeth(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {

	  for (var x = 0; x < byteWidth; x++) {

	    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
	    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
	    var upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;
	    var val = pxData[pxPos + x] - paethPredictor(left, up, upleft);

	    rawData[rawPos + x] = val;
	  }
	}

	function filterSumPaeth(pxData, pxPos, byteWidth, bpp) {
	  var sum = 0;
	  for (var x = 0; x < byteWidth; x++) {

	    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
	    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
	    var upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;
	    var val = pxData[pxPos + x] - paethPredictor(left, up, upleft);

	    sum += Math.abs(val);
	  }

	  return sum;
	}

	var filters = {
	  0: filterNone,
	  1: filterSub,
	  2: filterUp,
	  3: filterAvg,
	  4: filterPaeth
	};

	var filterSums = {
	  0: filterSumNone,
	  1: filterSumSub,
	  2: filterSumUp,
	  3: filterSumAvg,
	  4: filterSumPaeth
	};

	var filterPack = function(pxData, width, height, options, bpp) {

	  var filterTypes;
	  if (!('filterType' in options) || options.filterType === -1) {
	    filterTypes = [0, 1, 2, 3, 4];
	  }
	  else if (typeof options.filterType === 'number') {
	    filterTypes = [options.filterType];
	  }
	  else {
	    throw new Error('unrecognised filter types');
	  }

	  if (options.bitDepth === 16) bpp *= 2;
	  var byteWidth = width * bpp;
	  var rawPos = 0;
	  var pxPos = 0;
	  var rawData = new Buffer((byteWidth + 1) * height);

	  var sel = filterTypes[0];

	  for (var y = 0; y < height; y++) {

	    if (filterTypes.length > 1) {
	      // find best filter for this line (with lowest sum of values)
	      var min = Infinity;

	      for (var i = 0; i < filterTypes.length; i++) {
	        var sum = filterSums[filterTypes[i]](pxData, pxPos, byteWidth, bpp);
	        if (sum < min) {
	          sel = filterTypes[i];
	          min = sum;
	        }
	      }
	    }

	    rawData[rawPos] = sel;
	    rawPos++;
	    filters[sel](pxData, pxPos, byteWidth, rawData, rawPos, bpp);
	    rawPos += byteWidth;
	    pxPos += byteWidth;
	  }
	  return rawData;
	};

	var packer = createCommonjsModule(function (module) {







	var Packer = module.exports = function(options) {
	  this._options = options;

	  options.deflateChunkSize = options.deflateChunkSize || 32 * 1024;
	  options.deflateLevel = options.deflateLevel != null ? options.deflateLevel : 9;
	  options.deflateStrategy = options.deflateStrategy != null ? options.deflateStrategy : 3;
	  options.inputHasAlpha = options.inputHasAlpha != null ? options.inputHasAlpha : true;
	  options.deflateFactory = options.deflateFactory || zlib.createDeflate;
	  options.bitDepth = options.bitDepth || 8;
	  // This is outputColorType
	  options.colorType = (typeof options.colorType === 'number') ? options.colorType : constants.COLORTYPE_COLOR_ALPHA;
	  options.inputColorType = (typeof options.inputColorType === 'number') ? options.inputColorType : constants.COLORTYPE_COLOR_ALPHA;

	  if ([
	    constants.COLORTYPE_GRAYSCALE,
	    constants.COLORTYPE_COLOR,
	    constants.COLORTYPE_COLOR_ALPHA,
	    constants.COLORTYPE_ALPHA
	  ].indexOf(options.colorType) === -1) {
	    throw new Error('option color type:' + options.colorType + ' is not supported at present');
	  }
	  if ([
	    constants.COLORTYPE_GRAYSCALE,
	    constants.COLORTYPE_COLOR,
	    constants.COLORTYPE_COLOR_ALPHA,
	    constants.COLORTYPE_ALPHA
	  ].indexOf(options.inputColorType) === -1) {
	    throw new Error('option input color type:' + options.inputColorType + ' is not supported at present');
	  }
	  if (options.bitDepth !== 8 && options.bitDepth !== 16) {
	    throw new Error('option bit depth:' + options.bitDepth + ' is not supported at present');
	  }
	};

	Packer.prototype.getDeflateOptions = function() {
	  return {
	    chunkSize: this._options.deflateChunkSize,
	    level: this._options.deflateLevel,
	    strategy: this._options.deflateStrategy
	  };
	};

	Packer.prototype.createDeflate = function() {
	  return this._options.deflateFactory(this.getDeflateOptions());
	};

	Packer.prototype.filterData = function(data, width, height) {
	  // convert to correct format for filtering (e.g. right bpp and bit depth)
	  var packedData = bitpacker(data, width, height, this._options);

	  // filter pixel data
	  var bpp = constants.COLORTYPE_TO_BPP_MAP[this._options.colorType];
	  var filteredData = filterPack(packedData, width, height, this._options, bpp);
	  return filteredData;
	};

	Packer.prototype._packChunk = function(type, data) {

	  var len = (data ? data.length : 0);
	  var buf = new Buffer(len + 12);

	  buf.writeUInt32BE(len, 0);
	  buf.writeUInt32BE(type, 4);

	  if (data) {
	    data.copy(buf, 8);
	  }

	  buf.writeInt32BE(crc.crc32(buf.slice(4, buf.length - 4)), buf.length - 4);
	  return buf;
	};

	Packer.prototype.packGAMA = function(gamma) {
	  var buf = new Buffer(4);
	  buf.writeUInt32BE(Math.floor(gamma * constants.GAMMA_DIVISION), 0);
	  return this._packChunk(constants.TYPE_gAMA, buf);
	};

	Packer.prototype.packIHDR = function(width, height) {

	  var buf = new Buffer(13);
	  buf.writeUInt32BE(width, 0);
	  buf.writeUInt32BE(height, 4);
	  buf[8] = this._options.bitDepth; // Bit depth
	  buf[9] = this._options.colorType; // colorType
	  buf[10] = 0; // compression
	  buf[11] = 0; // filter
	  buf[12] = 0; // interlace

	  return this._packChunk(constants.TYPE_IHDR, buf);
	};

	Packer.prototype.packIDAT = function(data) {
	  return this._packChunk(constants.TYPE_IDAT, data);
	};

	Packer.prototype.packIEND = function() {
	  return this._packChunk(constants.TYPE_IEND, null);
	};
	});

	var packerAsync = createCommonjsModule(function (module) {






	var PackerAsync = module.exports = function(opt) {
	  Stream.call(this);

	  var options = opt || {};

	  this._packer = new packer(options);
	  this._deflate = this._packer.createDeflate();

	  this.readable = true;
	};
	require$$0.inherits(PackerAsync, Stream);


	PackerAsync.prototype.pack = function(data, width, height, gamma) {
	  // Signature
	  this.emit('data', new Buffer(constants.PNG_SIGNATURE));
	  this.emit('data', this._packer.packIHDR(width, height));

	  if (gamma) {
	    this.emit('data', this._packer.packGAMA(gamma));
	  }

	  var filteredData = this._packer.filterData(data, width, height);

	  // compress it
	  this._deflate.on('error', this.emit.bind(this, 'error'));

	  this._deflate.on('data', function(compressedData) {
	    this.emit('data', this._packer.packIDAT(compressedData));
	  }.bind(this));

	  this._deflate.on('end', function() {
	    this.emit('data', this._packer.packIEND());
	    this.emit('end');
	  }.bind(this));

	  this._deflate.end(filteredData);
	};
	});

	function compare(a, b) {
	  if (a === b) {
	    return 0;
	  }

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }

	  if (x < y) {
	    return -1;
	  }
	  if (y < x) {
	    return 1;
	  }
	  return 0;
	}
	var hasOwn = Object.prototype.hasOwnProperty;

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};
	var pSlice = Array.prototype.slice;
	var _functionsHaveNames;
	function functionsHaveNames() {
	  if (typeof _functionsHaveNames !== 'undefined') {
	    return _functionsHaveNames;
	  }
	  return _functionsHaveNames = (function () {
	    return function foo() {}.name === 'foo';
	  }());
	}
	function pToString (obj) {
	  return Object.prototype.toString.call(obj);
	}
	function isView(arrbuf) {
	  if (isBuffer(arrbuf)) {
	    return false;
	  }
	  if (typeof global$1.ArrayBuffer !== 'function') {
	    return false;
	  }
	  if (typeof ArrayBuffer.isView === 'function') {
	    return ArrayBuffer.isView(arrbuf);
	  }
	  if (!arrbuf) {
	    return false;
	  }
	  if (arrbuf instanceof DataView) {
	    return true;
	  }
	  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
	    return true;
	  }
	  return false;
	}
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	function assert$1(value, message) {
	  if (!value) fail(value, true, message, '==', ok);
	}

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	var regex$1 = /\s*function\s+([^\(\s]*)\s*/;
	// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
	function getName(func) {
	  if (!isFunction(func)) {
	    return;
	  }
	  if (functionsHaveNames()) {
	    return func.name;
	  }
	  var str = func.toString();
	  var match = str.match(regex$1);
	  return match && match[1];
	}
	assert$1.AssertionError = AssertionError;
	function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  } else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = getName(stackStartFunction);
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	}

	// assert.AssertionError instanceof Error
	inherits$1(AssertionError, Error);

	function truncate(s, n) {
	  if (typeof s === 'string') {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}
	function inspect$1(something) {
	  if (functionsHaveNames() || !isFunction(something)) {
	    return inspect(something);
	  }
	  var rawname = getName(something);
	  var name = rawname ? ': ' + rawname : '';
	  return '[Function' +  name + ']';
	}
	function getMessage(self) {
	  return truncate(inspect$1(self.actual), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(inspect$1(self.expected), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert$1.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', ok);
	}
	assert$1.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);
	assert$1.equal = equal;
	function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', equal);
	}

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);
	assert$1.notEqual = notEqual;
	function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', notEqual);
	  }
	}

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);
	assert$1.deepEqual = deepEqual;
	function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'deepEqual', deepEqual);
	  }
	}
	assert$1.deepStrictEqual = deepStrictEqual;
	function deepStrictEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);
	  }
	}

	function _deepEqual(actual, expected, strict, memos) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	  } else if (isBuffer(actual) && isBuffer(expected)) {
	    return compare(actual, expected) === 0;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (isDate(actual) && isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (isRegExp(actual) && isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if ((actual === null || typeof actual !== 'object') &&
	             (expected === null || typeof expected !== 'object')) {
	    return strict ? actual === expected : actual == expected;

	  // If both values are instances of typed arrays, wrap their underlying
	  // ArrayBuffers in a Buffer each to increase performance
	  // This optimization requires the arrays to have the same type as checked by
	  // Object.prototype.toString (aka pToString). Never perform binary
	  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
	  // bit patterns are not identical.
	  } else if (isView(actual) && isView(expected) &&
	             pToString(actual) === pToString(expected) &&
	             !(actual instanceof Float32Array ||
	               actual instanceof Float64Array)) {
	    return compare(new Uint8Array(actual.buffer),
	                   new Uint8Array(expected.buffer)) === 0;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else if (isBuffer(actual) !== isBuffer(expected)) {
	    return false;
	  } else {
	    memos = memos || {actual: [], expected: []};

	    var actualIndex = memos.actual.indexOf(actual);
	    if (actualIndex !== -1) {
	      if (actualIndex === memos.expected.indexOf(expected)) {
	        return true;
	      }
	    }

	    memos.actual.push(actual);
	    memos.expected.push(expected);

	    return objEquiv(actual, expected, strict, memos);
	  }
	}

	function isArguments$1(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b, strict, actualVisitedObjects) {
	  if (a === null || a === undefined || b === null || b === undefined)
	    return false;
	  // if one is a primitive, the other must be same
	  if (isPrimitive(a) || isPrimitive(b))
	    return a === b;
	  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
	    return false;
	  var aIsArgs = isArguments$1(a);
	  var bIsArgs = isArguments$1(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b, strict);
	  }
	  var ka = objectKeys(a);
	  var kb = objectKeys(b);
	  var key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length !== kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] !== kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
	      return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);
	assert$1.notDeepEqual = notDeepEqual;
	function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'notDeepEqual', notDeepEqual);
	  }
	}

	assert$1.notDeepStrictEqual = notDeepStrictEqual;
	function notDeepStrictEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
	  }
	}


	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);
	assert$1.strictEqual = strictEqual;
	function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', strictEqual);
	  }
	}

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
	assert$1.notStrictEqual = notStrictEqual;
	function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', notStrictEqual);
	  }
	}

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  }

	  try {
	    if (actual instanceof expected) {
	      return true;
	    }
	  } catch (e) {
	    // Ignore.  The instanceof check doesn't work for arrow functions.
	  }

	  if (Error.isPrototypeOf(expected)) {
	    return false;
	  }

	  return expected.call({}, actual) === true;
	}

	function _tryBlock(block) {
	  var error;
	  try {
	    block();
	  } catch (e) {
	    error = e;
	  }
	  return error;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (typeof block !== 'function') {
	    throw new TypeError('"block" argument must be a function');
	  }

	  if (typeof expected === 'string') {
	    message = expected;
	    expected = null;
	  }

	  actual = _tryBlock(block);

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  var userProvidedMessage = typeof message === 'string';
	  var isUnwantedException = !shouldThrow && isError(actual);
	  var isUnexpectedException = !shouldThrow && actual && !expected;

	  if ((isUnwantedException &&
	      userProvidedMessage &&
	      expectedException(actual, expected)) ||
	      isUnexpectedException) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);
	assert$1.throws = throws;
	function throws(block, /*optional*/error, /*optional*/message) {
	  _throws(true, block, error, message);
	}

	// EXTENSION! This is annoying to write outside this module.
	assert$1.doesNotThrow = doesNotThrow;
	function doesNotThrow(block, /*optional*/error, /*optional*/message) {
	  _throws(false, block, error, message);
	}

	assert$1.ifError = ifError;
	function ifError(err) {
	  if (err) throw err;
	}

	var syncInflate = createCommonjsModule(function (module, exports) {

	var assert = assert$1.ok;



	var kMaxLength = bufferEs6.kMaxLength;

	function Inflate(opts) {
	  if (!(this instanceof Inflate)) {
	    return new Inflate(opts);
	  }

	  if (opts && opts.chunkSize < zlib.Z_MIN_CHUNK) {
	    opts.chunkSize = zlib.Z_MIN_CHUNK;
	  }

	  zlib.Inflate.call(this, opts);

	  // Node 8 --> 9 compatibility check
	  this._offset = this._offset === undefined ? this._outOffset : this._offset;
	  this._buffer = this._buffer || this._outBuffer;

	  if (opts && opts.maxLength != null) {
	    this._maxLength = opts.maxLength;
	  }
	}

	function createInflate(opts) {
	  return new Inflate(opts);
	}

	function _close(engine, callback) {
	  if (callback) {
	    nextTick(callback);
	  }

	  // Caller may invoke .close after a zlib error (which will null _handle).
	  if (!engine._handle) {
	    return;
	  }

	  engine._handle.close();
	  engine._handle = null;
	}

	Inflate.prototype._processChunk = function(chunk, flushFlag, asyncCb) {
	  if (typeof asyncCb === 'function') {
	    return zlib.Inflate._processChunk.call(this, chunk, flushFlag, asyncCb);
	  }

	  var self = this;

	  var availInBefore = chunk && chunk.length;
	  var availOutBefore = this._chunkSize - this._offset;
	  var leftToInflate = this._maxLength;
	  var inOff = 0;

	  var buffers = [];
	  var nread = 0;

	  var error;
	  this.on('error', function(err) {
	    error = err;
	  });

	  function handleChunk(availInAfter, availOutAfter) {
	    if (self._hadError) {
	      return;
	    }

	    var have = availOutBefore - availOutAfter;
	    assert(have >= 0, 'have should not go down');

	    if (have > 0) {
	      var out = self._buffer.slice(self._offset, self._offset + have);
	      self._offset += have;

	      if (out.length > leftToInflate) {
	        out = out.slice(0, leftToInflate);
	      }

	      buffers.push(out);
	      nread += out.length;
	      leftToInflate -= out.length;

	      if (leftToInflate === 0) {
	        return false;
	      }
	    }

	    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
	      availOutBefore = self._chunkSize;
	      self._offset = 0;
	      self._buffer = Buffer.allocUnsafe(self._chunkSize);
	    }

	    if (availOutAfter === 0) {
	      inOff += (availInBefore - availInAfter);
	      availInBefore = availInAfter;

	      return true;
	    }

	    return false;
	  }

	  assert(this._handle, 'zlib binding closed');
	  do {
	    var res = this._handle.writeSync(flushFlag,
	                                     chunk, // in
	                                     inOff, // in_off
	                                     availInBefore, // in_len
	                                     this._buffer, // out
	                                     this._offset, //out_off
	                                     availOutBefore); // out_len
	    // Node 8 --> 9 compatibility check
	    res = res || this._writeState;
	  } while (!this._hadError && handleChunk(res[0], res[1]));

	  if (this._hadError) {
	    throw error;
	  }

	  if (nread >= kMaxLength) {
	    _close(this);
	    throw new RangeError('Cannot create final Buffer. It would be larger than 0x' + kMaxLength.toString(16) + ' bytes');
	  }

	  var buf = Buffer.concat(buffers, nread);
	  _close(this);

	  return buf;
	};

	require$$0.inherits(Inflate, zlib.Inflate);

	function zlibBufferSync(engine, buffer) {
	  if (typeof buffer === 'string') {
	    buffer = Buffer.from(buffer);
	  }
	  if (!(buffer instanceof Buffer)) {
	    throw new TypeError('Not a string or buffer');
	  }

	  var flushFlag = engine._finishFlushFlag;
	  if (flushFlag == null) {
	    flushFlag = zlib.Z_FINISH;
	  }

	  return engine._processChunk(buffer, flushFlag);
	}

	function inflateSync(buffer, opts) {
	  return zlibBufferSync(new Inflate(opts), buffer);
	}

	module.exports = exports = inflateSync;
	exports.Inflate = Inflate;
	exports.createInflate = createInflate;
	exports.inflateSync = inflateSync;
	});
	var syncInflate_1 = syncInflate.Inflate;
	var syncInflate_2 = syncInflate.createInflate;
	var syncInflate_3 = syncInflate.inflateSync;

	var syncReader = createCommonjsModule(function (module) {

	var SyncReader = module.exports = function(buffer) {

	  this._buffer = buffer;
	  this._reads = [];
	};

	SyncReader.prototype.read = function(length, callback) {

	  this._reads.push({
	    length: Math.abs(length),  // if length < 0 then at most this length
	    allowLess: length < 0,
	    func: callback
	  });
	};

	SyncReader.prototype.process = function() {

	  // as long as there is any data and read requests
	  while (this._reads.length > 0 && this._buffer.length) {

	    var read = this._reads[0];

	    if (this._buffer.length && (this._buffer.length >= read.length || read.allowLess)) {

	      // ok there is any data so that we can satisfy this request
	      this._reads.shift(); // == read

	      var buf = this._buffer;

	      this._buffer = buf.slice(read.length);

	      read.func.call(this, buf.slice(0, read.length));

	    }
	    else {
	      break;
	    }

	  }

	  if (this._reads.length > 0) {
	    return new Error('There are some read requests waitng on finished stream');
	  }

	  if (this._buffer.length > 0) {
	    return new Error('unrecognised content at end of stream');
	  }

	};
	});

	var process_1 = function(inBuffer, bitmapInfo) {

	  var outBuffers = [];
	  var reader = new syncReader(inBuffer);
	  var filter = new filterParse(bitmapInfo, {
	    read: reader.read.bind(reader),
	    write: function(bufferPart) {
	      outBuffers.push(bufferPart);
	    },
	    complete: function() {
	    }
	  });

	  filter.start();
	  reader.process();

	  return Buffer.concat(outBuffers);
	};

	var filterParseSync = {
		process: process_1
	};

	var hasSyncZlib = true;


	if (!zlib.deflateSync) {
	  hasSyncZlib = false;
	}







	var parserSync = function(buffer, options) {

	  if (!hasSyncZlib) {
	    throw new Error('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0');
	  }

	  var err;
	  function handleError(_err_) {
	    err = _err_;
	  }

	  var metaData;
	  function handleMetaData(_metaData_) {
	    metaData = _metaData_;
	  }

	  function handleTransColor(transColor) {
	    metaData.transColor = transColor;
	  }

	  function handlePalette(palette) {
	    metaData.palette = palette;
	  }

	  var gamma;
	  function handleGamma(_gamma_) {
	    gamma = _gamma_;
	  }

	  var inflateDataList = [];
	  function handleInflateData(inflatedData) {
	    inflateDataList.push(inflatedData);
	  }

	  var reader = new syncReader(buffer);

	  var parser = new parser$1(options, {
	    read: reader.read.bind(reader),
	    error: handleError,
	    metadata: handleMetaData,
	    gamma: handleGamma,
	    palette: handlePalette,
	    transColor: handleTransColor,
	    inflateData: handleInflateData
	  });

	  parser.start();
	  reader.process();

	  if (err) {
	    throw err;
	  }

	  //join together the inflate datas
	  var inflateData = Buffer.concat(inflateDataList);
	  inflateDataList.length = 0;

	  var inflatedData;
	  if (metaData.interlace) {
	    inflatedData = zlib.inflateSync(inflateData);
	  } else {
	    var rowSize = ((metaData.width * metaData.bpp * metaData.depth + 7) >> 3) + 1;
	    var imageSize = rowSize * metaData.height;
	    inflatedData = syncInflate(inflateData, { chunkSize: imageSize, maxLength: imageSize });
	  }
	  inflateData = null;

	  if (!inflatedData || !inflatedData.length) {
	    throw new Error('bad png - invalid inflate data response');
	  }

	  var unfilteredData = filterParseSync.process(inflatedData, metaData);
	  inflateData = null;

	  var bitmapData = bitmapper.dataToBitMap(unfilteredData, metaData);
	  unfilteredData = null;

	  var normalisedBitmapData = formatNormaliser(bitmapData, metaData);

	  metaData.data = normalisedBitmapData;
	  metaData.gamma = gamma || 0;

	  return metaData;
	};

	var hasSyncZlib$1 = true;

	if (!zlib.deflateSync) {
	  hasSyncZlib$1 = false;
	}



	var packerSync = function(metaData, opt) {

	  if (!hasSyncZlib$1) {
	    throw new Error('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0');
	  }

	  var options = opt || {};

	  var packer$1 = new packer(options);

	  var chunks = [];

	  // Signature
	  chunks.push(new Buffer(constants.PNG_SIGNATURE));

	  // Header
	  chunks.push(packer$1.packIHDR(metaData.width, metaData.height));

	  if (metaData.gamma) {
	    chunks.push(packer$1.packGAMA(metaData.gamma));
	  }

	  var filteredData = packer$1.filterData(metaData.data, metaData.width, metaData.height);

	  // compress it
	  var compressedData = zlib.deflateSync(filteredData, packer$1.getDeflateOptions());
	  filteredData = null;

	  if (!compressedData || !compressedData.length) {
	    throw new Error('bad png - invalid compressed data response');
	  }
	  chunks.push(packer$1.packIDAT(compressedData));

	  // End
	  chunks.push(packer$1.packIEND());

	  return Buffer.concat(chunks);
	};

	var read$1 = function(buffer, options) {

	  return parserSync(buffer, options || {});
	};

	var write$1 = function(png, options) {

	  return packerSync(png, options);
	};

	var pngSync = {
		read: read$1,
		write: write$1
	};

	var png = createCommonjsModule(function (module, exports) {








	var PNG = exports.PNG = function(options) {
	  Stream.call(this);

	  options = options || {}; // eslint-disable-line no-param-reassign

	  // coerce pixel dimensions to integers (also coerces undefined -> 0):
	  this.width = options.width | 0;
	  this.height = options.height | 0;

	  this.data = this.width > 0 && this.height > 0 ?
	    new Buffer(4 * this.width * this.height) : null;

	  if (options.fill && this.data) {
	    this.data.fill(0);
	  }

	  this.gamma = 0;
	  this.readable = this.writable = true;

	  this._parser = new parserAsync(options);

	  this._parser.on('error', this.emit.bind(this, 'error'));
	  this._parser.on('close', this._handleClose.bind(this));
	  this._parser.on('metadata', this._metadata.bind(this));
	  this._parser.on('gamma', this._gamma.bind(this));
	  this._parser.on('parsed', function(data) {
	    this.data = data;
	    this.emit('parsed', data);
	  }.bind(this));

	  this._packer = new packerAsync(options);
	  this._packer.on('data', this.emit.bind(this, 'data'));
	  this._packer.on('end', this.emit.bind(this, 'end'));
	  this._parser.on('close', this._handleClose.bind(this));
	  this._packer.on('error', this.emit.bind(this, 'error'));

	};
	require$$0.inherits(PNG, Stream);

	PNG.sync = pngSync;

	PNG.prototype.pack = function() {

	  if (!this.data || !this.data.length) {
	    this.emit('error', 'No data provided');
	    return this;
	  }

	  nextTick(function() {
	    this._packer.pack(this.data, this.width, this.height, this.gamma);
	  }.bind(this));

	  return this;
	};


	PNG.prototype.parse = function(data, callback) {

	  if (callback) {
	    var onParsed, onError;

	    onParsed = function(parsedData) {
	      this.removeListener('error', onError);

	      this.data = parsedData;
	      callback(null, this);
	    }.bind(this);

	    onError = function(err) {
	      this.removeListener('parsed', onParsed);

	      callback(err, null);
	    }.bind(this);

	    this.once('parsed', onParsed);
	    this.once('error', onError);
	  }

	  this.end(data);
	  return this;
	};

	PNG.prototype.write = function(data) {
	  this._parser.write(data);
	  return true;
	};

	PNG.prototype.end = function(data) {
	  this._parser.end(data);
	};

	PNG.prototype._metadata = function(metadata) {
	  this.width = metadata.width;
	  this.height = metadata.height;

	  this.emit('metadata', metadata);
	};

	PNG.prototype._gamma = function(gamma) {
	  this.gamma = gamma;
	};

	PNG.prototype._handleClose = function() {
	  if (!this._parser.writable && !this._packer.readable) {
	    this.emit('close');
	  }
	};


	PNG.bitblt = function(src, dst, srcX, srcY, width, height, deltaX, deltaY) { // eslint-disable-line max-params
	  // coerce pixel dimensions to integers (also coerces undefined -> 0):
	  /* eslint-disable no-param-reassign */
	  srcX |= 0;
	  srcY |= 0;
	  width |= 0;
	  height |= 0;
	  deltaX |= 0;
	  deltaY |= 0;
	  /* eslint-enable no-param-reassign */

	  if (srcX > src.width || srcY > src.height || srcX + width > src.width || srcY + height > src.height) {
	    throw new Error('bitblt reading outside image');
	  }

	  if (deltaX > dst.width || deltaY > dst.height || deltaX + width > dst.width || deltaY + height > dst.height) {
	    throw new Error('bitblt writing outside image');
	  }

	  for (var y = 0; y < height; y++) {
	    src.data.copy(dst.data,
	      ((deltaY + y) * dst.width + deltaX) << 2,
	      ((srcY + y) * src.width + srcX) << 2,
	      ((srcY + y) * src.width + srcX + width) << 2
	    );
	  }
	};


	PNG.prototype.bitblt = function(dst, srcX, srcY, width, height, deltaX, deltaY) { // eslint-disable-line max-params

	  PNG.bitblt(this, dst, srcX, srcY, width, height, deltaX, deltaY);
	  return this;
	};

	PNG.adjustGamma = function(src) {
	  if (src.gamma) {
	    for (var y = 0; y < src.height; y++) {
	      for (var x = 0; x < src.width; x++) {
	        var idx = (src.width * y + x) << 2;

	        for (var i = 0; i < 3; i++) {
	          var sample = src.data[idx + i] / 255;
	          sample = Math.pow(sample, 1 / 2.2 / src.gamma);
	          src.data[idx + i] = Math.round(sample * 255);
	        }
	      }
	    }
	    src.gamma = 0;
	  }
	};

	PNG.prototype.adjustGamma = function() {
	  PNG.adjustGamma(this);
	};
	});
	var png_1 = png.PNG;

	var utils$2 = createCommonjsModule(function (module, exports) {
	function hex2rgba (hex) {
	  if (typeof hex !== 'string') {
	    throw new Error('Color should be defined as hex string')
	  }

	  var hexCode = hex.slice().replace('#', '').split('');
	  if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
	    throw new Error('Invalid hex color: ' + hex)
	  }

	  // Convert from short to long form (fff -> ffffff)
	  if (hexCode.length === 3 || hexCode.length === 4) {
	    hexCode = Array.prototype.concat.apply([], hexCode.map(function (c) {
	      return [c, c]
	    }));
	  }

	  // Add default alpha value
	  if (hexCode.length === 6) hexCode.push('F', 'F');

	  var hexValue = parseInt(hexCode.join(''), 16);

	  return {
	    r: (hexValue >> 24) & 255,
	    g: (hexValue >> 16) & 255,
	    b: (hexValue >> 8) & 255,
	    a: hexValue & 255,
	    hex: '#' + hexCode.slice(0, 6).join('')
	  }
	}

	exports.getOptions = function getOptions (options) {
	  if (!options) options = {};
	  if (!options.color) options.color = {};

	  var margin = typeof options.margin === 'undefined' ||
	    options.margin === null ||
	    options.margin < 0 ? 4 : options.margin;

	  var width = options.width && options.width >= 21 ? options.width : undefined;
	  var scale = options.scale || 4;

	  return {
	    width: width,
	    scale: width ? 4 : scale,
	    margin: margin,
	    color: {
	      dark: hex2rgba(options.color.dark || '#000000ff'),
	      light: hex2rgba(options.color.light || '#ffffffff')
	    },
	    type: options.type,
	    rendererOpts: options.rendererOpts || {}
	  }
	};

	exports.getScale = function getScale (qrSize, opts) {
	  return opts.width && opts.width >= qrSize + opts.margin * 2
	    ? opts.width / (qrSize + opts.margin * 2)
	    : opts.scale
	};

	exports.getImageWidth = function getImageWidth (qrSize, opts) {
	  var scale = exports.getScale(qrSize, opts);
	  return Math.floor((qrSize + opts.margin * 2) * scale)
	};

	exports.qrToImageData = function qrToImageData (imgData, qr, opts) {
	  var size = qr.modules.size;
	  var data = qr.modules.data;
	  var scale = exports.getScale(size, opts);
	  var symbolSize = Math.floor((size + opts.margin * 2) * scale);
	  var scaledMargin = opts.margin * scale;
	  var palette = [opts.color.light, opts.color.dark];

	  for (var i = 0; i < symbolSize; i++) {
	    for (var j = 0; j < symbolSize; j++) {
	      var posDst = (i * symbolSize + j) * 4;
	      var pxColor = opts.color.light;

	      if (i >= scaledMargin && j >= scaledMargin &&
	        i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {
	        var iSrc = Math.floor((i - scaledMargin) / scale);
	        var jSrc = Math.floor((j - scaledMargin) / scale);
	        pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];
	      }

	      imgData[posDst++] = pxColor.r;
	      imgData[posDst++] = pxColor.g;
	      imgData[posDst++] = pxColor.b;
	      imgData[posDst] = pxColor.a;
	    }
	  }
	};
	});
	var utils_1 = utils$2.getOptions;
	var utils_2 = utils$2.getScale;
	var utils_3 = utils$2.getImageWidth;
	var utils_4 = utils$2.qrToImageData;

	var png$1 = createCommonjsModule(function (module, exports) {
	var PNG = png.PNG;


	exports.render = function render (qrData, options) {
	  var opts = utils$2.getOptions(options);
	  var pngOpts = opts.rendererOpts;
	  var size = utils$2.getImageWidth(qrData.modules.size, opts);

	  pngOpts.width = size;
	  pngOpts.height = size;

	  var pngImage = new PNG(pngOpts);
	  utils$2.qrToImageData(pngImage.data, qrData, opts);

	  return pngImage
	};

	exports.renderToDataURL = function renderToDataURL (qrData, options, cb) {
	  if (typeof cb === 'undefined') {
	    cb = options;
	    options = undefined;
	  }

	  exports.renderToBuffer(qrData, options, function (err, output) {
	    if (err) cb(err);
	    var url = 'data:image/png;base64,';
	    url += output.toString('base64');
	    cb(null, url);
	  });
	};

	exports.renderToBuffer = function renderToBuffer (qrData, options, cb) {
	  if (typeof cb === 'undefined') {
	    cb = options;
	    options = undefined;
	  }

	  var png = exports.render(qrData, options);
	  var buffer = [];

	  png.on('error', cb);

	  png.on('data', function (data) {
	    buffer.push(data);
	  });

	  png.on('end', function () {
	    cb(null, Buffer.concat(buffer));
	  });

	  png.pack();
	};

	exports.renderToFile = function renderToFile (path, qrData, options, cb) {
	  if (typeof cb === 'undefined') {
	    cb = options;
	    options = undefined;
	  }

	  var stream = require$$0$1.createWriteStream(path);
	  stream.on('error', cb);
	  stream.on('close', cb);

	  exports.renderToFileStream(stream, qrData, options);
	};

	exports.renderToFileStream = function renderToFileStream (stream, qrData, options) {
	  var png = exports.render(qrData, options);
	  png.pack().pipe(stream);
	};
	});
	var png_1$1 = png$1.render;
	var png_2 = png$1.renderToDataURL;
	var png_3 = png$1.renderToBuffer;
	var png_4 = png$1.renderToFile;
	var png_5 = png$1.renderToFileStream;

	var utf8 = createCommonjsModule(function (module, exports) {
	var BLOCK_CHAR = {
	  WW: ' ',
	  WB: '▄',
	  BB: '█',
	  BW: '▀'
	};

	function getBlockChar (top, bottom) {
	  if (top && bottom) return BLOCK_CHAR.BB
	  if (top && !bottom) return BLOCK_CHAR.BW
	  if (!top && bottom) return BLOCK_CHAR.WB
	  return BLOCK_CHAR.WW
	}

	exports.render = function (qrData, options, cb) {
	  var size = qrData.modules.size;
	  var data = qrData.modules.data;

	  var opts = utils$2.getOptions(options);

	  var output = '';
	  var hMargin = Array(size + (opts.margin * 2) + 1).join(BLOCK_CHAR.WW);
	  hMargin = Array((opts.margin / 2) + 1).join(hMargin + '\n');

	  var vMargin = Array(opts.margin + 1).join(BLOCK_CHAR.WW);

	  output += hMargin;
	  for (var i = 0; i < size; i += 2) {
	    output += vMargin;
	    for (var j = 0; j < size; j++) {
	      var topModule = data[i * size + j];
	      var bottomModule = data[(i + 1) * size + j];

	      output += getBlockChar(topModule, bottomModule);
	    }

	    output += vMargin + '\n';
	  }

	  output += hMargin.slice(0, -1);

	  if (typeof cb === 'function') {
	    cb(null, output);
	  }

	  return output
	};

	exports.renderToFile = function renderToFile (path, qrData, options, cb) {
	  if (typeof cb === 'undefined') {
	    cb = options;
	    options = undefined;
	  }

	  var fs = require$$0$1;
	  var utf8 = exports.render(qrData, options);
	  fs.writeFile(path, utf8, cb);
	};
	});
	var utf8_1 = utf8.render;
	var utf8_2 = utf8.renderToFile;

	// var Utils = require('./utils')

	var render = function (qrData, options, cb) {
	  var size = qrData.modules.size;
	  var data = qrData.modules.data;

	  // var opts = Utils.getOptions(options)

	  // use same scheme as https://github.com/gtanner/qrcode-terminal because it actually works! =)
	  var black = '\x1b[40m  \x1b[0m';
	  var white = '\x1b[47m  \x1b[0m';

	  var output = '';
	  var hMargin = Array(size + 3).join(white);
	  var vMargin = Array(2).join(white);

	  output += hMargin + '\n';
	  for (var i = 0; i < size; ++i) {
	    output += white;
	    for (var j = 0; j < size; j++) {
	      // var topModule = data[i * size + j]
	      // var bottomModule = data[(i + 1) * size + j]

	      output += data[i * size + j] ? black : white;// getBlockChar(topModule, bottomModule)
	    }
	    // output += white+'\n'
	    output += vMargin + '\n';
	  }

	  output += hMargin + '\n';

	  if (typeof cb === 'function') {
	    cb(null, output);
	  }

	  return output
	};
	/*
	exports.renderToFile = function renderToFile (path, qrData, options, cb) {
	  if (typeof cb === 'undefined') {
	    cb = options
	    options = undefined
	  }

	  var fs = require('fs')
	  var utf8 = exports.render(qrData, options)
	  fs.writeFile(path, utf8, cb)
	}
	*/

	var terminal = {
		render: render
	};

	function getColorAttrib (color, attrib) {
	  var alpha = color.a / 255;
	  var str = attrib + '="' + color.hex + '"';

	  return alpha < 1
	    ? str + ' ' + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"'
	    : str
	}

	function svgCmd (cmd, x, y) {
	  var str = cmd + x;
	  if (typeof y !== 'undefined') str += ' ' + y;

	  return str
	}

	function qrToPath (data, size, margin) {
	  var path = '';
	  var moveBy = 0;
	  var newRow = false;
	  var lineLength = 0;

	  for (var i = 0; i < data.length; i++) {
	    var col = Math.floor(i % size);
	    var row = Math.floor(i / size);

	    if (!col && !newRow) newRow = true;

	    if (data[i]) {
	      lineLength++;

	      if (!(i > 0 && col > 0 && data[i - 1])) {
	        path += newRow
	          ? svgCmd('M', col + margin, 0.5 + row + margin)
	          : svgCmd('m', moveBy, 0);

	        moveBy = 0;
	        newRow = false;
	      }

	      if (!(col + 1 < size && data[i + 1])) {
	        path += svgCmd('h', lineLength);
	        lineLength = 0;
	      }
	    } else {
	      moveBy++;
	    }
	  }

	  return path
	}

	var render$1 = function render (qrData, options, cb) {
	  var opts = utils$2.getOptions(options);
	  var size = qrData.modules.size;
	  var data = qrData.modules.data;
	  var qrcodesize = size + opts.margin * 2;

	  var bg = !opts.color.light.a
	    ? ''
	    : '<path ' + getColorAttrib(opts.color.light, 'fill') +
	      ' d="M0 0h' + qrcodesize + 'v' + qrcodesize + 'H0z"/>';

	  var path =
	    '<path ' + getColorAttrib(opts.color.dark, 'stroke') +
	    ' d="' + qrToPath(data, size, opts.margin) + '"/>';

	  var viewBox = 'viewBox="' + '0 0 ' + qrcodesize + ' ' + qrcodesize + '"';

	  var width = !opts.width ? '' : 'width="' + opts.width + '" height="' + opts.width + '" ';

	  var svgTag = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + ' shape-rendering="crispEdges">' + bg + path + '</svg>\n';

	  if (typeof cb === 'function') {
	    cb(null, svgTag);
	  }

	  return svgTag
	};

	var svgTag = {
		render: render$1
	};

	var svg = createCommonjsModule(function (module, exports) {
	exports.render = svgTag.render;

	exports.renderToFile = function renderToFile (path, qrData, options, cb) {
	  if (typeof cb === 'undefined') {
	    cb = options;
	    options = undefined;
	  }

	  var fs = require$$0$1;
	  var svgTag = exports.render(qrData, options);

	  var xmlStr = '<?xml version="1.0" encoding="utf-8"?>' +
	    '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">' +
	    svgTag;

	  fs.writeFile(path, xmlStr, cb);
	};
	});
	var svg_1 = svg.render;
	var svg_2 = svg.renderToFile;

	// can-promise has a crash in some versions of react native that dont have
	// standard global objects
	// https://github.com/soldair/node-qrcode/issues/157

	var canPromise$1 = function () {
	  return typeof Promise === 'function' && Promise.prototype && Promise.prototype.then
	};

	var canvas = createCommonjsModule(function (module, exports) {
	function clearCanvas (ctx, canvas, size) {
	  ctx.clearRect(0, 0, canvas.width, canvas.height);

	  if (!canvas.style) canvas.style = {};
	  canvas.height = size;
	  canvas.width = size;
	  canvas.style.height = size + 'px';
	  canvas.style.width = size + 'px';
	}

	function getCanvasElement () {
	  try {
	    return document.createElement('canvas')
	  } catch (e) {
	    throw new Error('You need to specify a canvas element')
	  }
	}

	exports.render = function render (qrData, canvas, options) {
	  var opts = options;
	  var canvasEl = canvas;

	  if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
	    opts = canvas;
	    canvas = undefined;
	  }

	  if (!canvas) {
	    canvasEl = getCanvasElement();
	  }

	  opts = utils$2.getOptions(opts);
	  var size = utils$2.getImageWidth(qrData.modules.size, opts);

	  var ctx = canvasEl.getContext('2d');
	  var image = ctx.createImageData(size, size);
	  utils$2.qrToImageData(image.data, qrData, opts);

	  clearCanvas(ctx, canvasEl, size);
	  ctx.putImageData(image, 0, 0);

	  return canvasEl
	};

	exports.renderToDataURL = function renderToDataURL (qrData, canvas, options) {
	  var opts = options;

	  if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
	    opts = canvas;
	    canvas = undefined;
	  }

	  if (!opts) opts = {};

	  var canvasEl = exports.render(qrData, canvas, opts);

	  var type = opts.type || 'image/png';
	  var rendererOpts = opts.rendererOpts || {};

	  return canvasEl.toDataURL(type, rendererOpts.quality)
	};
	});
	var canvas_1 = canvas.render;
	var canvas_2 = canvas.renderToDataURL;

	function renderCanvas (renderFunc, canvas, text, opts, cb) {
	  var args = [].slice.call(arguments, 1);
	  var argsNum = args.length;
	  var isLastArgCb = typeof args[argsNum - 1] === 'function';

	  if (!isLastArgCb && !canPromise$1()) {
	    throw new Error('Callback required as last argument')
	  }

	  if (isLastArgCb) {
	    if (argsNum < 2) {
	      throw new Error('Too few arguments provided')
	    }

	    if (argsNum === 2) {
	      cb = text;
	      text = canvas;
	      canvas = opts = undefined;
	    } else if (argsNum === 3) {
	      if (canvas.getContext && typeof cb === 'undefined') {
	        cb = opts;
	        opts = undefined;
	      } else {
	        cb = opts;
	        opts = text;
	        text = canvas;
	        canvas = undefined;
	      }
	    }
	  } else {
	    if (argsNum < 1) {
	      throw new Error('Too few arguments provided')
	    }

	    if (argsNum === 1) {
	      text = canvas;
	      canvas = opts = undefined;
	    } else if (argsNum === 2 && !canvas.getContext) {
	      opts = text;
	      text = canvas;
	      canvas = undefined;
	    }

	    return new Promise(function (resolve, reject) {
	      try {
	        var data = qrcode.create(text, opts);
	        resolve(renderFunc(data, canvas, opts));
	      } catch (e) {
	        reject(e);
	      }
	    })
	  }

	  try {
	    var data = qrcode.create(text, opts);
	    cb(null, renderFunc(data, canvas, opts));
	  } catch (e) {
	    cb(e);
	  }
	}

	var create$1 = qrcode.create;
	var toCanvas = renderCanvas.bind(null, canvas.render);
	var toDataURL = renderCanvas.bind(null, canvas.renderToDataURL);

	// only svg for now.
	var toString_1$1 = renderCanvas.bind(null, function (data, _, opts) {
	  return svgTag.render(data, opts)
	});

	var browser$1 = {
		create: create$1,
		toCanvas: toCanvas,
		toDataURL: toDataURL,
		toString: toString_1$1
	};

	function checkParams (text, opts, cb) {
	  if (typeof text === 'undefined') {
	    throw new Error('String required as first argument')
	  }

	  if (typeof cb === 'undefined') {
	    cb = opts;
	    opts = {};
	  }

	  if (typeof cb !== 'function') {
	    if (!canPromise()) {
	      throw new Error('Callback required as last argument')
	    } else {
	      opts = cb || {};
	      cb = null;
	    }
	  }

	  return {
	    opts: opts,
	    cb: cb
	  }
	}

	function getTypeFromFilename (path) {
	  return path.slice((path.lastIndexOf('.') - 1 >>> 0) + 2).toLowerCase()
	}

	function getRendererFromType (type) {
	  switch (type) {
	    case 'svg':
	      return svg

	    case 'txt':
	    case 'utf8':
	      return utf8

	    case 'png':
	    case 'image/png':
	    default:
	      return png$1
	  }
	}

	function getStringRendererFromType (type) {
	  switch (type) {
	    case 'svg':
	      return svg

	    case 'terminal':
	      return terminal

	    case 'utf8':
	    default:
	      return utf8
	  }
	}

	function render$2 (renderFunc, text, params) {
	  if (!params.cb) {
	    return new Promise(function (resolve, reject) {
	      try {
	        var data = qrcode.create(text, params.opts);
	        return renderFunc(data, params.opts, function (err, data) {
	          return err ? reject(err) : resolve(data)
	        })
	      } catch (e) {
	        reject(e);
	      }
	    })
	  }

	  try {
	    var data = qrcode.create(text, params.opts);
	    return renderFunc(data, params.opts, params.cb)
	  } catch (e) {
	    params.cb(e);
	  }
	}

	var create$2 = qrcode.create;

	var toCanvas$1 = browser$1.toCanvas;

	var toString_1$2 = function toString (text, opts, cb) {
	  var params = checkParams(text, opts, cb);
	  var renderer = getStringRendererFromType(params.opts.type);
	  return render$2(renderer.render, text, params)
	};

	var toDataURL$1 = function toDataURL (text, opts, cb) {
	  var params = checkParams(text, opts, cb);
	  var renderer = getRendererFromType(params.opts.type);
	  return render$2(renderer.renderToDataURL, text, params)
	};

	var toBuffer = function toBuffer (text, opts, cb) {
	  var params = checkParams(text, opts, cb);
	  var renderer = getRendererFromType(params.opts.type);
	  return render$2(renderer.renderToBuffer, text, params)
	};

	var toFile = function toFile (path, text, opts, cb) {
	  if (typeof path !== 'string' || !(typeof text === 'string' || typeof text === 'object')) {
	    throw new Error('Invalid argument')
	  }

	  if ((arguments.length < 3) && !canPromise()) {
	    throw new Error('Too few arguments provided')
	  }

	  var params = checkParams(text, opts, cb);
	  var type = params.opts.type || getTypeFromFilename(path);
	  var renderer = getRendererFromType(type);
	  var renderToFile = renderer.renderToFile.bind(null, path);

	  return render$2(renderToFile, text, params)
	};

	var toFileStream = function toFileStream (stream, text, opts) {
	  if (arguments.length < 2) {
	    throw new Error('Too few arguments provided')
	  }

	  var params = checkParams(text, opts, stream.emit.bind(stream, 'error'));
	  var renderer = getRendererFromType('png'); // Only png support for now
	  var renderToFileStream = renderer.renderToFileStream.bind(null, stream);
	  render$2(renderToFileStream, text, params);
	};

	var server = {
		create: create$2,
		toCanvas: toCanvas$1,
		toString: toString_1$2,
		toDataURL: toDataURL$1,
		toBuffer: toBuffer,
		toFile: toFile,
		toFileStream: toFileStream
	};

	/*
	*copyright Ryan Day 2012
	*
	* Licensed under the MIT license:
	*   http://www.opensource.org/licenses/mit-license.php
	*
	* this is the main server side application file for node-qrcode.
	* these exports use serverside canvas api methods for file IO and buffers
	*
	*/

	var lib$1 = server;

	const _jsxFileName$j = "/Users/logan/Dev/apps/inbox/src/js/components/lib/qrcode.js";
	class QRCodeComponent extends react_1 {
	  componentDidMount() {
	    let qrText = JSON.stringify({ship: this.props.ship.substr(1), code: this.props.code});
	    lib$1.toCanvas(document.getElementById('urb-qr-canvas'), qrText, {
	      width: 256,
	      margin: 0
	    }, error => {
	      console.log("qr whoops = ", error);
	    });
	  }

	  render() {
	    return (
	      react.createElement('canvas', { className: "mt-4", id: "urb-qr-canvas", __self: this, __source: {fileName: _jsxFileName$j, lineNumber: 17}})
	    )
	  }
	}

	var ComponentMap = {
	  "ChatPage": chat.ChatPage,
	  "ChatList": ChatList,
	  "TopicCreatePage": createTopic.TopicCreatePage,
	  "CommentCreate": comment.CommentCreate,
	  "InboxPage": InboxPage,
	  "Elapsed": Elapsed,
	  "IconComment": IconComment,
	  "Sigil": Sigil,
	  "ProfileMsgBtn": ProfileMsgBtn,
	  "QRCodeComponent": QRCodeComponent
	};

	const _jsxFileName$k = "/Users/logan/Dev/apps/inbox/src/js/components/root.js";
	class Root extends react_1 {
	  constructor(props) {
	    super(props);

	    this.state = {
	      menuOpen: false
	    };

	    // Required to convert arbitrary HTML into React elements
	    this.htmlParser = htmlToReact.Parser();
	    this.htmlParserNodeDefinitions = new htmlToReact.ProcessNodeDefinitions(react);

	    props.pushCallback("menu.toggle", (rep) => {
	      let newStatus = (rep.data) ? rep.data.open : !this.state.menuOpen;

	      this.setState({
	        menuOpen: newStatus
	      });

	      return false;
	    });
	  }

	  reactify() {
	    let instructions = [{
	      replaceChildren: true,
	      shouldProcessNode: (node) => {
	        return node.attribs && !!node.attribs['urb-component']
	      },
	      processNode: (node) => {
	        let componentName = node.attribs['urb-component'];
	        let propsObj = {};

	        Object.keys(node.attribs)
	          .filter((key) => key.indexOf('urb-') !== -1 && key !== "urb-component")
	          .forEach((key) => {
	            let keyName = key.substr(4);  // "urb-timestamp" => "timestamp"
	            propsObj[keyName] = node.attribs[key];
	          });

	        return react.createElement(ComponentMap[componentName], Object.assign({
	          api: this.props.api,
	          store: this.props.store,
	          storeReports: this.props.storeReports,
	          pushCallback: this.props.pushCallback,
	          transitionTo: this.props.transitionTo,
	          localGet: this.props.localGet,
	          localSet: this.props.localSet,
	          queryParams: getQueryParams(),
	        }, propsObj));
	      }
	    }, {
	      shouldProcessNode: () => true,
	      processNode: this.htmlParserNodeDefinitions.processDefaultNode
	    }];

	    return this.htmlParser.parseWithInstructions(this.props.scaffold, () => true, instructions);
	  }

	  loadHeader(tempDOM) {
	    // Example metadata:

	    // <input type="hidden"
	    //   name="urb-metadata"
	    //   urb-show="default"
	    //   urb-path="/web/collections/~2018.8.28..19.59.32..0013/~2018.8.28..21.49.27..6131"
	    //   urb-name="New post yet again"
	    //   urb-author="~zod"
	    //   urb-date-created="~2018.8.28..21.49.27..6131"
	    //   urb-last-modified="~2018.8.28..21.49.27..6131"
	    //   urb-content-type="blog"
	    //   urb-structure-type="collection-post">

	    let headerQuery = tempDOM.querySelectorAll('[name="urb-metadata"]');
	    let headerData = {
	      type: "default"
	    };

	    if (headerQuery.length > 0) {
	      headerData.type = headerQuery[0].getAttribute('urb-structure-type');
	      headerData.subtype = headerQuery[0].getAttribute('urb-show');

	      if (headerData.type.includes("collection")) {
	        headerData.type = `${headerData.type}-${headerData.subtype}`;
	      }
	    }

	    if (headerQuery.length > 0 && headerData.type) {
	      headerData.author = headerQuery[0].getAttribute('urb-author');
	      headerData.host = headerQuery[0].getAttribute('urb-host');
	      headerData.pageTitle = headerQuery[0].getAttribute('urb-name');
	      headerData.dateCreated = headerQuery[0].getAttribute('urb-date-created');
	      headerData.dateModified = headerQuery[0].getAttribute('urb-date-modified');
	      headerData.collPath = headerQuery[0].getAttribute('urb-path');

	      if (headerData.type.includes("collection-index")) {
	        headerData.title = headerData.pageTitle;
	        headerData.collId = headerData.dateCreated;
	        headerData.collTitle = headerData.title;
	        headerData.station = `${headerData.host}/c-${headerData.collId}`;
	      }

	      if (headerData.type.includes("collection-post")) {
	        headerData.title = headerData.pageTitle;
	        headerData.collId = headerData.collPath.split("/")[3];
	        headerData.collTitle = headerData.collId;
	        headerData.postId = headerData.dateCreated;
	        headerData.station = `${headerData.host}/c-${headerData.collId}-${headerData.postId}`;

	        let collCircle = `${headerData.author}/c-${headerData.collId}`;
	        let collConfig = warehouse.store.configs[collCircle];
	        headerData.collTitle = collConfig && collConfig.extConf ? collConfig.extConf.name : headerData.collId;
	      }

	      if (headerData.type === "stream-chat") {
	        headerData.station = getQueryParams().station;
	        if (!headerData.station) return;
	        headerData.title = headerData.station.split("/")[1];
	      }
	    }

	    return (
	      react.createElement(Header, {
	        data: headerData,
	        api: this.props.api,
	        store: this.props.store,
	        storeReports: this.props.storeReports,
	        pushCallback: this.props.pushCallback,
	        transitionTo: this.props.transitionTo,
	        localSet: this.props.localSet,
	        localGet: this.props.localGet,
	        runPoll: this.props.runPoll, __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 130}}
	      )
	    );
	  }

	  onboardingPage() {
	    return (
	      react.createElement('div', {__self: this, __source: {fileName: _jsxFileName$k, lineNumber: 146}}
	        , react.createElement('div', { className: "container header-container" , __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 147}}
	          , react.createElement('div', { className: "row", __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 148}}
	            , react.createElement('div', { className: "flex-col-2", __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 149}})
	            , react.createElement('div', { className: "flex-col-x header-breadcrumbs" , __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 150}})
	          )
	          , react.createElement('div', { className: "row align-center header-mainrow"  , __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 152}}
	            , react.createElement('h1', { className: "flex-offset-2 flex-col-x header-title"  , __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 153}}, "Welcome")
	          )
	          , react.createElement('div', { className: "row header-carpet" , __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 155}}
	          )
	        )

	        , react.createElement('div', { className: "container", __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 159}}
	          , react.createElement('div', { className: "row", __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 160}}
	            , react.createElement('div', { className: "flex-offset-2 flex-col-6" , __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 161}}
	              , react.createElement('p', { className: "mb-5", __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 162}}, "This is Landscape, an agent for creating cities on top of Arvo."           )
	              , react.createElement('p', { className: "mb-5", __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 163}}, "Currently, we’re running a few experimental cities that are invite-only. If you’re running a planet or a star and would like to join, you’ll need to request access."                           )
	              , react.createElement('p', { className: "mb-5", __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 164}}, "Our cities are limited in size and limited to planets or above. To request access, send an email to "                   , react.createElement('span', { className: "text-mono", __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 164}}, "support@urbit.org"))
	              , react.createElement('p', { className: "mb-7", __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 165}}, "In the meantime, check out the "      , react.createElement('a', { href: "https://urbit.org/docs", __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 165}}, "docs"), " and start exploring."   )
	              , react.createElement('button', {
	                type: "button",
	                className: "btn btn-primary" ,
	                onClick: (e) => {
	                  this.props.localSet('landscape-onboarding', true);
	                  this.forceUpdate();
	                }, __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 166}}, "Okay!"

	              )
	            )
	          )
	        )
	      )
	    );
	  }

	  render() {
	    let content;

	    let showOnboarding = !this.props.localGet('landscape-onboarding');

	    if (showOnboarding) {
	      content = this.onboardingPage();
	    } else if (this.state.menuOpen) {
	      content = (
	        react.createElement(command.CommandMenu, {
	          api: this.props.api,
	          store: this.props.store,
	          storeReports: this.props.storeReports,
	          pushCallback: this.props.pushCallback,
	          transitionTo: this.props.transitionTo, __self: this, __source: {fileName: _jsxFileName$k, lineNumber: 191}}
	        )
	      );
	    } else {
	      let parser = new DOMParser();
	      let tempDOM = parser.parseFromString(this.props.scaffold, "text/html");
	      content = (
	        react.createElement(react.Fragment, {__self: this, __source: {fileName: _jsxFileName$k, lineNumber: 203}}
	          , this.loadHeader(tempDOM)
	          , this.reactify()
	        )
	      );
	    }

	    return content;
	  }
	}

	const _jsxFileName$l = "/Users/logan/Dev/apps/inbox/src/js/router.js";
	class UrbitRouter {
	  constructor() {
	    this.transitionTo = this.transitionTo.bind(this);
	    this.metaPressed = false;
	  }

	  start() {
	    if (warehouse$1) {
	      this.scaffold = document.querySelectorAll("#root")[0].innerHTML;
	      this.renderRoot();

	      this.registerAnchorListeners();
	      this.registerHistoryListeners();
	    } else {
	      console.error("~~~ ERROR: Must initialize warehouse before operation ~~~");
	    }
	  }

	  renderRoot() {
	    let rootComponent = (
	      react.createElement(Root, {
	        api: api$1,
	        store: warehouse$1.store,
	        storeReports: warehouse$1.storeReports,
	        pushCallback: warehouse$1.pushCallback,
	        localSet: warehouse$1.localSet,
	        localGet: warehouse$1.localGet,
	        transitionTo: this.transitionTo,
	        runPoll: operator.runPoll.bind(operator),
	        scaffold: this.scaffold, __self: this, __source: {fileName: _jsxFileName$l, lineNumber: 30}} )
	    );

	    reactDom.render(rootComponent, document.querySelectorAll("#root")[0]);
	  }

	  linkType(path) {
	    if (path.endsWith("?edit=true")) {
	      // special casing this because it's cleaner than how it exists now
	      return "edit-page";
	    } else if (path.split("/")[2] != `~${api$1.authTokens.ship}`) {
	      return "foreign";
	    } else {
	      return "local";
	    }
	  }

	  filterUrl(url) {
	    let path = url.split("?");
	    let linkType = this.linkType(url);

	    switch (linkType) {
	      case "edit-page":
	//        if (url.split("/")[2] != `~${api.authTokens.ship}`) {
	          path[0] += ".x-htm";
	//        } else {
	//          path[0] += ".htm";
	//        }
	        break;
	      case "foreign":
	        path[0] += ".x-htm";
	        break;
	    }

	    return path.join("?");
	  }

	  transitionTo(targetUrl, noHistory) {
	    warehouse$1.storeReports([{
	      type: REPORT_PAGE_STATUS$1,
	      data: PAGE_STATUS_TRANSITIONING
	    }]);

	    // TODO: Extremely brittle. Expecting parts of form: /~~/pages/nutalk + /show
	    fetch(this.filterUrl(targetUrl), {credentials: "same-origin"}).then((res) => {
	      return res.text();
	    }).then((resText) => {
	      if (!noHistory) {
	        window.history.pushState({}, null, targetUrl);
	      }

	      this.scaffold = this.extractBody(resText) || resText;

	      warehouse$1.storeReports([{
	        type: REPORT_PAGE_STATUS$1,
	        data: PAGE_STATUS_READY
	      }, {
	        type: "menu.toggle",
	        data: {open: false}
	      }]);
	    });
	  }

	  extractBody(scaffold) {
	    let parser = new DOMParser();
	    let tempDOM = parser.parseFromString(scaffold, "text/html");
	    let bodyQuery = tempDOM.querySelectorAll('#root')[0];
	    return bodyQuery && bodyQuery.innerHTML;
	  }

	  registerAnchorListeners() {
	    window.document.addEventListener('keydown', (e) => {
	      // TODO:  Verify this works on Windows systems...
	      if (e.metaKey) {
	        this.metaPressed = true;
	      }
	    });

	    window.document.addEventListener('keyup', (e) => {
	      this.metaPressed = false;
	    });

	    window.document.addEventListener('click', (e) => {
	      // If meta isn't currnetly held down, resolve clicks normally
	      if (!this.metaPressed) {
	        // Walk the event target's parents to find 'a' tags up the chain
	        let el = e.target;
	        while (el && el.tagName != 'A') {
	          el = el.parentNode;
	        }
	        // If you find an "a" tag in the clicked element's parents, it's a link
	        if (el && !el.attributes.disabled) {
	          // We can probably do something a little nicer
	          if (el.hostname === "localhost" || isProxyHosted(el.hostname) || /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/.exec(el.hostname)) {
	            e.preventDefault();
	            this.transitionTo(el.pathname + el.search);
	          }
	        }
	      }
	    });
	  }

	  registerHistoryListeners() {
	    window.onpopstate = (state) => {
	      this.transitionTo(window.location.pathname + window.location.search, true);
	    };
	  }
	}

	let router = new UrbitRouter();
	window.router = router;

	const REPORT_KEYS = [
	  'landscape.prize',
	        // /circle/<cir_name>/grams
	        // call automatically on inbox
	        // call automatically on /urbit-meta
	        // call automatically on any DM circles created
	  'circle.gram',
	  'circle.nes',
	        // /circle/<cir_name>/config-l
	        // used for loading inbox config
	  'circle.cos.loc',
	        // /circle/<cir_name>/config-r
	        // used for loading inbox's sources' configs
	  'circle.cos.rem',
	        // /circle/<cir_name>/config-l
	        // used for fora topic creation....maybe? let me check

	  'circle.config',
	  'circle.config.dif.full',
	        // /circle/<cir_name>/config-l
	        // used for subscription / unsubscription
	  'circle.config.dif.source',
	        // /circles, required for initialization
	  'circles',

	        // frontend specific, no server calls
	  'menu.toggle',
	  'config.ext',
	  'inbox.sources-loaded',
	  'circle.read',
	  'views.streamActive',
	  'dm.new',
	  'dm.clear',
	  REPORT_PAGE_STATUS$1,
	  REPORT_NAVIGATE,
	        // unused events
	  // 'public',
	  // 'circle.config.dif.permit/circle.config',
	  // 'circle.config.dif.remove/circle.config',
	  // 'circle.pes.loc',
	  // 'circle.pes.rem',
	];

	class UrbitWarehouse {
	  constructor() {
	    this.store = {
	      messages: {
	        inbox: {
	          src: [],
	          messages: [],
	          config: {}
	        },
	        notifications: [],
	        stations: {}
	      },
	      configs: {},
	      views: {
	        transition: PAGE_STATUS_PROCESSING,
	        inbox: "inbox-recent",
	        activeStream: null,
	      },
	      reads: {},
	      names: {},
	      public: {},
	      circles: [],
	      dms: {
	        stored: false,
	        stations: []
	      },
	    };

	    this.reports = this.buildReports();

	    this.messagesReducer = new MessagesReducer();
	    this.configsReducer = new ConfigsReducer();
	    this.viewsReducer = new ViewsReducer();
	    this.namesReducer = new NamesReducer();
	    // this.publicReducer = new PublicReducer();
	    this.circlesReducer = new CirclesReducer();

	    this.pushCallback = this.pushCallback.bind(this);
	    this.storeReports = this.storeReports.bind(this);
	  }

	  buildReports() {
	    let reports = {};

	    REPORT_KEYS.forEach((type) => {
	      // TOOD: dataKeys are here because report fragments don't contain all the
	      // data we need to process; sometimes we need to grab the whole chain
	      let [reportKey, dataKey] = type.split("/");

	      reports[reportKey] = {
	        callbacks: [],
	        dataKey: (dataKey) ? dataKey : reportKey
	      };
	    });

	    return reports;
	  }

	  storePollResponse(pollResponse) {
	    let newReports = [];
	    let reportTypes = Object.keys(this.reports);
	    let json = pollResponse.data.json;

	    reportTypes.forEach((type) => {
	      let reportData = lodash.get(json, type, null);

	      let hasContent = (
	        (lodash.isArray(reportData) && lodash.isEmpty(reportData)) ||
	        (lodash.isObject(reportData) && lodash.isEmpty(reportData)) ||
	        (reportData !== null)
	      );

	      if (hasContent) {
	        // TODO: Actually grab the data again, "up the chain", for when
	        // fragments don't contain all the data we need
	        reportData = lodash.get(json, this.reports[type].dataKey, null);

	        newReports.push({
	          type: type,
	          data: reportData,
	          from: pollResponse.from
	        });
	      }
	    });

	    this.storeReports(newReports);
	  }

	  storeReports(newReports) {
	    newReports.forEach((rep) => console.log('new report: ', rep));
	    this.messagesReducer.reduce(newReports, this.store);
	    this.configsReducer.reduce(newReports, this.store);
	    this.viewsReducer.reduce(newReports, this.store);
	    this.namesReducer.reduce(newReports, this.store);
	    this.circlesReducer.reduce(newReports, this.store);
	    // this.publicReducer.reduce(newReports, this.store);

	    console.log('full store = ', this.store);

	    this.processPending(newReports);
	    router.renderRoot();
	  }

	  processPending(reports) {
	    reports.forEach((rep) => {
	      let reportBucket = this.reports[rep.type];
	      let clearIndexes = [];

	      reportBucket.callbacks.forEach((callback, i) => {
	        let callSuccess = callback(rep);
	        // callbacks should return true, or _nothing_ to be considered complete)
	        // default behavior is return nothing; complete on first keyed response
	        if (callSuccess === true || typeof callSuccess === "undefined") {
	          clearIndexes.push(i);
	        }
	      });

	      lodash.pullAt(reportBucket.callbacks, clearIndexes);
	    });
	  }

	  pushCallback(key, callback) {
	    if (typeof key === "string") {
	      this.reports[key].callbacks.push(callback);
	    } else if (lodash.isArray(key)) {
	      key.forEach(k => {
	        this.reports[k].callbacks.push(callback);
	      });
	    }
	  }

	  /* LocalStorage functions */

	  localSet(key, val) {
	    window.localStorage.setItem(key, JSON.stringify(val));
	  }

	  localGet(key) {
	    return JSON.parse(window.localStorage.getItem(key));
	  }
	}

	let warehouse$1 = new UrbitWarehouse();
	window.warehouse = warehouse$1;

	console.log('app running');

	/*
	  Common variables:

	  station :    ~zod/club
	  circle  :    club
	  host    :    zod
	*/

	fetch('/~/auth.json',{credentials: "same-origin"}).then((res) => {
	  return res.json();
	})
	.then((authTokens) => {
	  api$1.setAuthTokens(authTokens);

	  router.start();
	  operator.start();
	});

	window.util = util;
	window._ = lodash;

}));
